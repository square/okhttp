plugins {
  id "com.palantir.graal" version "0.7.1"
}

dependencies {
  implementation project(':okhttp-sse')
  implementation project(':okhttp-testing-support')
  implementation project(':mockwebserver')

  implementation deps.assertj
  implementation "org.junit.jupiter:junit-jupiter-api:5.7.0"
  implementation "org.junit.jupiter:junit-jupiter-engine:5.7.0"
  implementation "org.junit.vintage:junit-vintage-engine:5.7.0"
  implementation "org.junit.platform:junit-platform-console:1.7.0"

  compileOnly("org.graalvm.nativeimage:svm:20.2.0") {
    // https://youtrack.jetbrains.com/issue/KT-29513
    exclude group: "org.graalvm.nativeimage"
    exclude group: "org.graalvm.truffle"
//    exclude(group= "org.graalvm.sdk")
    exclude group: "org.graalvm.compiler"
  }

  compileOnly deps.jsr305
}

animalsniffer {
  ignoreFailures = true
}

def graalHome = "/Library/Java/JavaVirtualMachines/graalvm-ce-java11-20.2.0/Contents/Home"
def graalvmResources = project.file("$buildDir/graalvm/resources")
def graalvmConfig = project.file("$graalvmResources/META-INF/native-image")
graalvmConfig.mkdirs()

sourceSets {
  main.resources.srcDirs += graalvmResources

  main.java.srcDirs += project.file("../okhttp-sse/src/test/java")
}

task seedGraalvmConfig(type: Exec) {
  dependsOn("classes")
  commandLine(
    "$graalHome/bin/java",
    "-agentlib:native-image-agent=config-output-dir=$graalvmConfig",
    "-classpath", sourceSets.main.runtimeClasspath.getAsPath(),
    "org.junit.platform.console.ConsoleLauncher",
    "--select-class", "okhttp3.sse.internal.EventSourceHttpTest"
  )
}

graal {
  mainClass "org.junit.platform.console.ConsoleLauncher"
  outputName "ConsoleLauncher"
  graalVersion "20.2.0"
  javaVersion "11"

  option "--enable-https"
  option "--no-fallback"
  option "--allow-incomplete-classpath"
  option "--report-unsupported-elements-at-runtime"
}
