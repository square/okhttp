{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OkHttp \u00b6 HTTP is the way modern applications network. It\u2019s how we exchange data & media. Doing HTTP efficiently makes your stuff load faster and saves bandwidth. OkHttp is an HTTP client that\u2019s efficient by default: HTTP/2 support allows all requests to the same host to share a socket. Connection pooling reduces request latency (if HTTP/2 isn\u2019t available). Transparent GZIP shrinks download sizes. Response caching avoids the network completely for repeat requests. OkHttp perseveres when the network is troublesome: it will silently recover from common connection problems. If your service has multiple IP addresses, OkHttp will attempt alternate addresses if the first connect fails. This is necessary for IPv4+IPv6 and services hosted in redundant data centers. OkHttp supports modern TLS features (TLS 1.3, ALPN, certificate pinning). It can be configured to fall back for broad connectivity. Using OkHttp is easy. Its request/response API is designed with fluent builders and immutability. It supports both synchronous blocking calls and async calls with callbacks. Get a URL \u00b6 This program downloads a URL and prints its contents as a string. Full source . OkHttpClient client = new OkHttpClient (); String run ( String url ) throws IOException { Request request = new Request . Builder () . url ( url ) . build (); try ( Response response = client . newCall ( request ). execute ()) { return response . body (). string (); } } Post to a Server \u00b6 This program posts data to a service. Full source . public static final MediaType JSON = MediaType . get ( \"application/json; charset=utf-8\" ); OkHttpClient client = new OkHttpClient (); String post ( String url , String json ) throws IOException { RequestBody body = RequestBody . create ( JSON , json ); Request request = new Request . Builder () . url ( url ) . post ( body ) . build (); try ( Response response = client . newCall ( request ). execute ()) { return response . body (). string (); } } Further examples are on the OkHttp Recipes page . Requirements \u00b6 OkHttp works on Android 5.0+ (API level 21+) and Java 8+. OkHttp depends on Okio for high-performance I/O and the Kotlin standard library . Both are small libraries with strong backward-compatibility. We highly recommend you keep OkHttp up-to-date. As with auto-updating web browsers, staying current with HTTPS clients is an important defense against potential security problems. We track the dynamic TLS ecosystem and adjust OkHttp to improve connectivity and security. OkHttp uses your platform\u2019s built-in TLS implementation. On Java platforms OkHttp also supports Conscrypt , which integrates BoringSSL with Java. OkHttp will use Conscrypt if it is the first security provider: Security . insertProviderAt ( Conscrypt . newProvider (), 1 ); The OkHttp 3.12.x branch supports Android 2.3+ (API level 9+) and Java 7+. These platforms lack support for TLS 1.2 and should not be used. But because upgrading is difficult, we will backport critical fixes to the 3.12.x branch through December 31, 2021. Releases \u00b6 Our change log has release history. The latest release is available on Maven Central . implementation ( \"com.squareup.okhttp3:okhttp:4.9.0\" ) Snapshot builds are available . R8 and ProGuard rules are available. Also, we have a bill of materials (BOM) available to help you keep OkHttp artifacts up to date and be sure about version compatibility. dependencies { // define a BOM and its version implementation ( platform ( \"com.squareup.okhttp3:okhttp-bom:4.9.0\" )) // define any required OkHttp artifacts without version implementation ( \"com.squareup.okhttp3:okhttp\" ) implementation ( \"com.squareup.okhttp3:logging-interceptor\" ) } MockWebServer \u00b6 OkHttp includes a library for testing HTTP, HTTPS, and HTTP/2 clients. The latest release is available on Maven Central . testImplementation ( \"com.squareup.okhttp3:mockwebserver:4.9.0\" ) GraalVM Native Image \u00b6 Building your native images with Graal https://www.graalvm.org/ should work automatically. Please report any bugs or workarounds you find. See the okcurl module for an example build. $ ./gradlew okcurl:nativeImage $ ./okcurl/build/graal/okcurl https://httpbin.org/get License \u00b6 Copyright 2019 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#okhttp","text":"HTTP is the way modern applications network. It\u2019s how we exchange data & media. Doing HTTP efficiently makes your stuff load faster and saves bandwidth. OkHttp is an HTTP client that\u2019s efficient by default: HTTP/2 support allows all requests to the same host to share a socket. Connection pooling reduces request latency (if HTTP/2 isn\u2019t available). Transparent GZIP shrinks download sizes. Response caching avoids the network completely for repeat requests. OkHttp perseveres when the network is troublesome: it will silently recover from common connection problems. If your service has multiple IP addresses, OkHttp will attempt alternate addresses if the first connect fails. This is necessary for IPv4+IPv6 and services hosted in redundant data centers. OkHttp supports modern TLS features (TLS 1.3, ALPN, certificate pinning). It can be configured to fall back for broad connectivity. Using OkHttp is easy. Its request/response API is designed with fluent builders and immutability. It supports both synchronous blocking calls and async calls with callbacks.","title":"OkHttp"},{"location":"#get-a-url","text":"This program downloads a URL and prints its contents as a string. Full source . OkHttpClient client = new OkHttpClient (); String run ( String url ) throws IOException { Request request = new Request . Builder () . url ( url ) . build (); try ( Response response = client . newCall ( request ). execute ()) { return response . body (). string (); } }","title":"Get a URL"},{"location":"#post-to-a-server","text":"This program posts data to a service. Full source . public static final MediaType JSON = MediaType . get ( \"application/json; charset=utf-8\" ); OkHttpClient client = new OkHttpClient (); String post ( String url , String json ) throws IOException { RequestBody body = RequestBody . create ( JSON , json ); Request request = new Request . Builder () . url ( url ) . post ( body ) . build (); try ( Response response = client . newCall ( request ). execute ()) { return response . body (). string (); } } Further examples are on the OkHttp Recipes page .","title":"Post to a Server"},{"location":"#requirements","text":"OkHttp works on Android 5.0+ (API level 21+) and Java 8+. OkHttp depends on Okio for high-performance I/O and the Kotlin standard library . Both are small libraries with strong backward-compatibility. We highly recommend you keep OkHttp up-to-date. As with auto-updating web browsers, staying current with HTTPS clients is an important defense against potential security problems. We track the dynamic TLS ecosystem and adjust OkHttp to improve connectivity and security. OkHttp uses your platform\u2019s built-in TLS implementation. On Java platforms OkHttp also supports Conscrypt , which integrates BoringSSL with Java. OkHttp will use Conscrypt if it is the first security provider: Security . insertProviderAt ( Conscrypt . newProvider (), 1 ); The OkHttp 3.12.x branch supports Android 2.3+ (API level 9+) and Java 7+. These platforms lack support for TLS 1.2 and should not be used. But because upgrading is difficult, we will backport critical fixes to the 3.12.x branch through December 31, 2021.","title":"Requirements"},{"location":"#releases","text":"Our change log has release history. The latest release is available on Maven Central . implementation ( \"com.squareup.okhttp3:okhttp:4.9.0\" ) Snapshot builds are available . R8 and ProGuard rules are available. Also, we have a bill of materials (BOM) available to help you keep OkHttp artifacts up to date and be sure about version compatibility. dependencies { // define a BOM and its version implementation ( platform ( \"com.squareup.okhttp3:okhttp-bom:4.9.0\" )) // define any required OkHttp artifacts without version implementation ( \"com.squareup.okhttp3:okhttp\" ) implementation ( \"com.squareup.okhttp3:logging-interceptor\" ) }","title":"Releases"},{"location":"#mockwebserver","text":"OkHttp includes a library for testing HTTP, HTTPS, and HTTP/2 clients. The latest release is available on Maven Central . testImplementation ( \"com.squareup.okhttp3:mockwebserver:4.9.0\" )","title":"MockWebServer"},{"location":"#graalvm-native-image","text":"Building your native images with Graal https://www.graalvm.org/ should work automatically. Please report any bugs or workarounds you find. See the okcurl module for an example build. $ ./gradlew okcurl:nativeImage $ ./okcurl/build/graal/okcurl https://httpbin.org/get","title":"GraalVM Native Image"},{"location":"#license","text":"Copyright 2019 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"caching/","text":"Caching \u00b6 OkHttp implements an optional, off by default, Cache. OkHttp aims for RFC correct and pragmatic caching behaviour, following common real-world browser like Firefox/Chrome and server behaviour when ambiguous. Basic Usage \u00b6 private val client : OkHttpClient = OkHttpClient . Builder () . cache ( Cache ( directory = File ( application . cacheDir , \"http_cache\" ), // $0.05 worth of phone storage in 2020 maxSize = 50L * 1024L * 1024L // 50 MiB )) . build () EventListener events \u00b6 Cache Events are exposed via the EventListener API. Typical scenarios are below. Cache Hit \u00b6 In the ideal scenario the cache can fulfill the request without any conditional call to the network. This will skip the normal events such as DNS, connecting to the network, and downloading the response body. As recommended by the HTTP RFC the max age of a document is defaulted to 10% of the document\u2019s age at the time it was served based on \u201cLast-Modified\u201d. Default expiration dates aren\u2019t used for URIs containing a query. CallStart CacheHit CallEnd Cache Miss \u00b6 Under a cache miss the normal request events are seen but an additional event shows the presence of the cache. Cache Miss will be typical if the item has not been read from the network, is uncacheable, or is past it\u2019s lifetime based on Response cache headers. CallStart CacheMiss ProxySelectStart \u2026 Standard Events \u2026 CallEnd Conditional Cache Hit \u00b6 When cache flags require checking the cache results are still valid an early cacheConditionalHit event is received followed by a cache hit or miss. Critically in the cache hit scenario the server won\u2019t send the response body. The response will have non-null cacheResponse and networkResponse . The cacheResponse will be used as the top level response only if the response code is HTTP/1.1 304 Not Modified. CallStart CacheConditionalHit ConnectionAcquired \u2026 Standard Events\u2026 ResponseBodyEnd (0 bytes) CacheHit ConnectionReleased CallEnd Cache directory \u00b6 The cache directory must be exclusively owned by a single instance. Deleting the cache when it is no longer needed can be done. However this may delete the purpose of the cache which is designed to persist between app restarts. cache.delete() Pruning the Cache \u00b6 Pruning the entire Cache to clear space temporarily can be done using evictAll. cache.evictAll() Removing individual items can be done using the urls iterator. This would be typical after a user initiates a force refresh by a pull to refresh type action. val urlIterator = cache.urls() while (urlIterator.hasNext()) { if (urlIterator.next().startsWith(\"https://www.google.com/\")) { urlIterator.remove() } } Troubleshooting \u00b6 Valid cacheable responses are not being cached Make sure you are reading responses fully as unless they are read fully, cancelled or stalled Responses will not be cached. Overriding normal cache behaviour \u00b6 See Cache documentation. https://square.github.io/okhttp/4.x/okhttp/okhttp3/-cache/","title":"Caching"},{"location":"caching/#caching","text":"OkHttp implements an optional, off by default, Cache. OkHttp aims for RFC correct and pragmatic caching behaviour, following common real-world browser like Firefox/Chrome and server behaviour when ambiguous.","title":"Caching"},{"location":"caching/#basic-usage","text":"private val client : OkHttpClient = OkHttpClient . Builder () . cache ( Cache ( directory = File ( application . cacheDir , \"http_cache\" ), // $0.05 worth of phone storage in 2020 maxSize = 50L * 1024L * 1024L // 50 MiB )) . build ()","title":"Basic Usage"},{"location":"caching/#eventlistener-events","text":"Cache Events are exposed via the EventListener API. Typical scenarios are below.","title":"EventListener events"},{"location":"caching/#cache-hit","text":"In the ideal scenario the cache can fulfill the request without any conditional call to the network. This will skip the normal events such as DNS, connecting to the network, and downloading the response body. As recommended by the HTTP RFC the max age of a document is defaulted to 10% of the document\u2019s age at the time it was served based on \u201cLast-Modified\u201d. Default expiration dates aren\u2019t used for URIs containing a query. CallStart CacheHit CallEnd","title":"Cache Hit"},{"location":"caching/#cache-miss","text":"Under a cache miss the normal request events are seen but an additional event shows the presence of the cache. Cache Miss will be typical if the item has not been read from the network, is uncacheable, or is past it\u2019s lifetime based on Response cache headers. CallStart CacheMiss ProxySelectStart \u2026 Standard Events \u2026 CallEnd","title":"Cache Miss"},{"location":"caching/#conditional-cache-hit","text":"When cache flags require checking the cache results are still valid an early cacheConditionalHit event is received followed by a cache hit or miss. Critically in the cache hit scenario the server won\u2019t send the response body. The response will have non-null cacheResponse and networkResponse . The cacheResponse will be used as the top level response only if the response code is HTTP/1.1 304 Not Modified. CallStart CacheConditionalHit ConnectionAcquired \u2026 Standard Events\u2026 ResponseBodyEnd (0 bytes) CacheHit ConnectionReleased CallEnd","title":"Conditional Cache Hit"},{"location":"caching/#cache-directory","text":"The cache directory must be exclusively owned by a single instance. Deleting the cache when it is no longer needed can be done. However this may delete the purpose of the cache which is designed to persist between app restarts. cache.delete()","title":"Cache directory"},{"location":"caching/#pruning-the-cache","text":"Pruning the entire Cache to clear space temporarily can be done using evictAll. cache.evictAll() Removing individual items can be done using the urls iterator. This would be typical after a user initiates a force refresh by a pull to refresh type action. val urlIterator = cache.urls() while (urlIterator.hasNext()) { if (urlIterator.next().startsWith(\"https://www.google.com/\")) { urlIterator.remove() } }","title":"Pruning the Cache"},{"location":"caching/#troubleshooting","text":"Valid cacheable responses are not being cached Make sure you are reading responses fully as unless they are read fully, cancelled or stalled Responses will not be cached.","title":"Troubleshooting"},{"location":"caching/#overriding-normal-cache-behaviour","text":"See Cache documentation. https://square.github.io/okhttp/4.x/okhttp/okhttp3/-cache/","title":"Overriding normal cache behaviour"},{"location":"calls/","text":"Calls \u00b6 The HTTP client\u2019s job is to accept your request and produce its response. This is simple in theory but it gets tricky in practice. Requests \u00b6 Each HTTP request contains a URL, a method (like GET or POST ), and a list of headers. Requests may also contain a body: a data stream of a specific content type. Responses \u00b6 The response answers the request with a code (like 200 for success or 404 for not found), headers, and its own optional body. Rewriting Requests \u00b6 When you provide OkHttp with an HTTP request, you\u2019re describing the request at a high-level: \u201cfetch me this URL with these headers.\u201d For correctness and efficiency, OkHttp rewrites your request before transmitting it. OkHttp may add headers that are absent from the original request, including Content-Length , Transfer-Encoding , User-Agent , Host , Connection , and Content-Type . It will add an Accept-Encoding header for transparent response compression unless the header is already present. If you\u2019ve got cookies, OkHttp will add a Cookie header with them. Some requests will have a cached response. When this cached response isn\u2019t fresh, OkHttp can do a conditional GET to download an updated response if it\u2019s newer than what\u2019s cached. This requires headers like If-Modified-Since and If-None-Match to be added. Rewriting Responses \u00b6 If transparent compression was used, OkHttp will drop the corresponding response headers Content-Encoding and Content-Length because they don\u2019t apply to the decompressed response body. If a conditional GET was successful, responses from the network and cache are merged as directed by the spec. Follow-up Requests \u00b6 When your requested URL has moved, the webserver will return a response code like 302 to indicate the document\u2019s new URL. OkHttp will follow the redirect to retrieve a final response. If the response issues an authorization challenge, OkHttp will ask the Authenticator (if one is configured) to satisfy the challenge. If the authenticator supplies a credential, the request is retried with that credential included. Retrying Requests \u00b6 Sometimes connections fail: either a pooled connection was stale and disconnected, or the webserver itself couldn\u2019t be reached. OkHttp will retry the request with a different route if one is available. Calls \u00b6 With rewrites, redirects, follow-ups and retries, your simple request may yield many requests and responses. OkHttp uses Call to model the task of satisfying your request through however many intermediate requests and responses are necessary. Typically this isn\u2019t many! But it\u2019s comforting to know that your code will continue to work if your URLs are redirected or if you failover to an alternate IP address. Calls are executed in one of two ways: Synchronous: your thread blocks until the response is readable. Asynchronous: you enqueue the request on any thread, and get called back on another thread when the response is readable. Calls can be canceled from any thread. This will fail the call if it hasn\u2019t yet completed! Code that is writing the request body or reading the response body will suffer an IOException when its call is canceled. Dispatch \u00b6 For synchronous calls, you bring your own thread and are responsible for managing how many simultaneous requests you make. Too many simultaneous connections wastes resources; too few harms latency. For asynchronous calls, Dispatcher implements policy for maximum simultaneous requests. You can set maximums per-webserver (default is 5), and overall (default is 64).","title":"Calls"},{"location":"calls/#calls","text":"The HTTP client\u2019s job is to accept your request and produce its response. This is simple in theory but it gets tricky in practice.","title":"Calls"},{"location":"calls/#requests","text":"Each HTTP request contains a URL, a method (like GET or POST ), and a list of headers. Requests may also contain a body: a data stream of a specific content type.","title":"Requests"},{"location":"calls/#responses","text":"The response answers the request with a code (like 200 for success or 404 for not found), headers, and its own optional body.","title":"Responses"},{"location":"calls/#rewriting-requests","text":"When you provide OkHttp with an HTTP request, you\u2019re describing the request at a high-level: \u201cfetch me this URL with these headers.\u201d For correctness and efficiency, OkHttp rewrites your request before transmitting it. OkHttp may add headers that are absent from the original request, including Content-Length , Transfer-Encoding , User-Agent , Host , Connection , and Content-Type . It will add an Accept-Encoding header for transparent response compression unless the header is already present. If you\u2019ve got cookies, OkHttp will add a Cookie header with them. Some requests will have a cached response. When this cached response isn\u2019t fresh, OkHttp can do a conditional GET to download an updated response if it\u2019s newer than what\u2019s cached. This requires headers like If-Modified-Since and If-None-Match to be added.","title":"Rewriting Requests"},{"location":"calls/#rewriting-responses","text":"If transparent compression was used, OkHttp will drop the corresponding response headers Content-Encoding and Content-Length because they don\u2019t apply to the decompressed response body. If a conditional GET was successful, responses from the network and cache are merged as directed by the spec.","title":"Rewriting Responses"},{"location":"calls/#follow-up-requests","text":"When your requested URL has moved, the webserver will return a response code like 302 to indicate the document\u2019s new URL. OkHttp will follow the redirect to retrieve a final response. If the response issues an authorization challenge, OkHttp will ask the Authenticator (if one is configured) to satisfy the challenge. If the authenticator supplies a credential, the request is retried with that credential included.","title":"Follow-up Requests"},{"location":"calls/#retrying-requests","text":"Sometimes connections fail: either a pooled connection was stale and disconnected, or the webserver itself couldn\u2019t be reached. OkHttp will retry the request with a different route if one is available.","title":"Retrying Requests"},{"location":"calls/#calls_1","text":"With rewrites, redirects, follow-ups and retries, your simple request may yield many requests and responses. OkHttp uses Call to model the task of satisfying your request through however many intermediate requests and responses are necessary. Typically this isn\u2019t many! But it\u2019s comforting to know that your code will continue to work if your URLs are redirected or if you failover to an alternate IP address. Calls are executed in one of two ways: Synchronous: your thread blocks until the response is readable. Asynchronous: you enqueue the request on any thread, and get called back on another thread when the response is readable. Calls can be canceled from any thread. This will fail the call if it hasn\u2019t yet completed! Code that is writing the request body or reading the response body will suffer an IOException when its call is canceled.","title":"Calls"},{"location":"calls/#dispatch","text":"For synchronous calls, you bring your own thread and are responsible for managing how many simultaneous requests you make. Too many simultaneous connections wastes resources; too few harms latency. For asynchronous calls, Dispatcher implements policy for maximum simultaneous requests. You can set maximums per-webserver (default is 5), and overall (default is 64).","title":"Dispatch"},{"location":"changelog/","text":"Change Log \u00b6 Version 5.0.0-alpha.2 \u00b6 2021-01-30 In this release MockWebServer has a new Maven coordinate and package name. A longstanding problem with MockWebServer has been its API dependency on JUnit 4. We\u2019ve reorganized things to remove that dependency while preserving backwards compatibility. Maven Coordinate Package Name Description com.squareup.okhttp3:mockwebserver3:5.0.0-alpha.2 mockwebserver3 Core module. No JUnit dependency! com.squareup.okhttp3:mockwebserver3-junit4:5.0.0-alpha.2 mockwebserver3.junit4 Optional JUnit 4 integration. com.squareup.okhttp3:mockwebserver3-junit5:5.0.0-alpha.2 mockwebserver3.junit5 Optional JUnit 5 integration. com.squareup.okhttp3:mockwebserver:5.0.0-alpha.2 okhttp3.mockwebserver Obsolete. Depends on JUnit 4. The new APIs use mockwebserver3 in both the Maven coordinate and package name. This new API is not stable and will likely change before the final 5.0.0 release. If you have code that subclasses okhttp3.mockwebserver.QueueDispatcher , this update is not source or binary compatible. Migrating to the new mockwebserver3 package will fix this problem. New: DNS over HTTPS is now a stable feature of OkHttp. We introduced this as an experimental module in 2018. We are confident in its stable API and solid implementation. Fix: Work around a crash in Android 10 and 11 that may be triggered when two threads concurrently close an SSL socket. This would have appeared in crash logs as NullPointerException: bio == null . Fix: Use plus + instead of %20 to encode space characters in FormBody . This was a longstanding bug in OkHttp. The fix makes OkHttp consistent with major web browsers. Fix: Don\u2019t crash if Conscrypt returns a null version. Fix: Include the public suffix data as a resource in GraalVM native images. Fix: Fail fast when the cache is corrupted. Fix: Fail fast when a private key cannot be encoded. Fix: Fail fast when attempting to verify a non-ASCII hostname. Upgrade: GraalVM 21 . Upgrade: Kotlin 1.4.20 . Version 5.0.0-alpha.1 \u00b6 2021-01-30 This release adds initial support for GraalVM . GraalVM is an exciting new platform and we\u2019re eager to adopt it. The startup time improvements over the JVM are particularly impressive. Try it with okcurl: $ ./gradlew okcurl:nativeImage $ ./okcurl/build/graal/okcurl https://cash.app/robots.txt This is our first release that supports GraalVM. Our code on this platform is less mature than JVM and Android! Please report any issues you encounter: we\u2019ll fix them urgently. Fix: Attempt to read the response body even if the server canceled the request. This will cause some calls to return nice error codes like HTTP/1.1 429 Too Many Requests instead of transport errors like SocketException: Connection reset and StreamResetException: stream was reset: CANCEL . New: Support OSGi metadata. Upgrade: Okio 2.9.0 . implementation ( \"com.squareup.okio:okio:2.9.0\" ) Note that this was originally released on 2020-10-06 as 4.10.0-RC1. The only change from that release is the version name. Version 4.9.1 \u00b6 2021-01-30 Fix: Work around a crash in Android 10 and 11 that may be triggered when two threads concurrently close an SSL socket. This would have appeared in crash logs as NullPointerException: bio == null . Version 4.9.0 \u00b6 2020-09-11 With this release, okhttp-tls no longer depends on Bouncy Castle and doesn\u2019t install the Bouncy Castle security provider. If you still need it, you can do it yourself: Security.addProvider(BouncyCastleProvider()) You will also need to configure this dependency: dependencies { implementation \"org.bouncycastle:bcprov-jdk15on:1.65\" } Upgrade: Kotlin 1.4.10 . We now use Kotlin 1.4.x functional interfaces for Authenticator , Interceptor , and others. Upgrade: Build with Conscrypt 2.5.1. Version 4.8.1 \u00b6 2020-08-06 Fix: Don\u2019t crash in HeldCertificate.Builder when creating certificates on older versions of Android, including Android 6. We were using a feature of SimpleDateFormat that wasn\u2019t available in those versions! Version 4.8.0 \u00b6 2020-07-11 New: Change HeldCertificate.Builder to use its own ASN.1 certificate encoder. This is part of our effort to remove the okhttp-tls module\u2019s dependency on Bouncy Castle. We think Bouncy Castle is great! But it\u2019s a large dependency (6.5 MiB) and its security provider feature impacts VM-wide behavior. New: Reduce contention for applications that make a very high number of concurrent requests. Previously OkHttp used its connection pool as a lock when making changes to connections and calls. With this change each connection is locked independently. Upgrade: Okio 2.7.0 . implementation ( \"com.squareup.okio:okio:2.7.0\" ) Fix: Avoid log messages like \u201cDidn\u2019t find class org.conscrypt.ConscryptHostnameVerifier\u201d when detecting the TLS capabilities of the host platform. Fix: Don\u2019t crash in HttpUrl.topPrivateDomain() when the hostname is malformed. Fix: Don\u2019t attempt Brotli decompression if the response body is empty. Version 4.7.2 \u00b6 2020-05-20 Fix: Don\u2019t crash inspecting whether the host platform is JVM or Android. With 4.7.0 and 4.7.1 we had a crash IllegalArgumentException: Not a Conscrypt trust manager because we depended on initialization order of companion objects. Version 4.7.1 \u00b6 2020-05-18 Fix: Pass the right arguments in the trust manager created for addInsecureHost() . Without the fix insecure hosts crash with an IllegalArgumentException on Android. Version 4.7.0 \u00b6 2020-05-17 New: HandshakeCertificates.Builder.addInsecureHost() makes it easy to turn off security in private development environments that only carry test data. Prefer this over creating an all-trusting TrustManager because only hosts on the allowlist are insecure. From our DevServer sample : val clientCertificates = HandshakeCertificates . Builder () . addPlatformTrustedCertificates () . addInsecureHost ( \"localhost\" ) . build () val client = OkHttpClient . Builder () . sslSocketFactory ( clientCertificates . sslSocketFactory (), clientCertificates . trustManager ) . build () New: Add cacheHit , cacheMiss , and cacheConditionalHit() events to EventListener . Use these in logs, metrics, and even test cases to confirm your cache headers are configured as expected. New: Constant string okhttp3.VERSION . This is a string like \u201c4.5.0-RC1\u201d, \u201c4.5.0\u201d, or \u201c4.6.0-SNAPSHOT\u201d indicating the version of OkHttp in the current runtime. Use this to include the OkHttp version in custom User-Agent headers. Fix: Don\u2019t crash when running as a plugin in Android Studio Canary 4.1. To enable platform-specific TLS features OkHttp must detect whether it\u2019s running in a JVM or in Android. The upcoming Android Studio runs in a JVM but has classes from Android and that confused OkHttp! Fix: Include the header Accept: text/event-stream for SSE calls. This header is not added if the request already contains an Accept header. Fix: Don\u2019t crash with a NullPointerException if a server sends a close while we\u2019re sending a ping. OkHttp had a race condition bug. Version 4.6.0 \u00b6 2020-04-28 Fix: Follow HTTP 307 and 308 redirects on methods other than GET and POST. We\u2019re reluctant to change OkHttp\u2019s behavior in handling common HTTP status codes, but this fix is overdue! The new behavior is now consistent with RFC 7231 , which is newer than OkHttp itself. If you want this update with the old behavior use this interceptor . Fix: Don\u2019t crash decompressing web sockets messages. We had a bug where we assumed deflated bytes in would always yield deflated bytes out and this isn\u2019t always the case! Fix: Reliably update and invalidate the disk cache on windows. As originally designed our internal DiskLruCache assumes an inode-like file system, where it\u2019s fine to delete files that are currently being read or written. On Windows the file system forbids this so we must be more careful when deleting and renaming files. Fix: Don\u2019t crash on Java 8u252 which introduces an API previously found only on Java 9 and above. See Jetty\u2019s overview of the API change and its consequences. New: MultipartReader is a streaming decoder for MIME multipart (RFC 2045) messages. It complements MultipartBody which is our streaming encoder. val response : Response = call . execute () val multipartReader = MultipartReader ( response . body !! ) multipartReader . use { while ( true ) { val part = multipartReader . nextPart () ?: break process ( part . headers , part . body ) } } New: MediaType.parameter() gets a parameter like boundary from a media type like multipart/mixed; boundary=\"abc\" . New: Authenticator.JAVA_NET_AUTHENTICATOR forwards authentication requests to java.net.Authenticator . This obsoletes JavaNetAuthenticator in the okhttp-urlconnection module. New: CertificatePinner now offers an API for inspecting the configured pins. Upgrade: Okio 2.6.0 . implementation ( \"com.squareup.okio:okio:2.6.0\" ) Upgrade: publicsuffix.org data . This powers HttpUrl.topPrivateDomain() . It\u2019s also how OkHttp knows which domains can share cookies with one another. Upgrade: Bouncy Castle 1.65 . This dependency is required by the okhttp-tls module. Upgrade: Kotlin 1.3.71 . Version 4.5.0 \u00b6 2020-04-06 This release fixes a severe bug where OkHttp incorrectly detected and recovered from unhealthy connections. Stale or canceled connections were incorrectly attempted when they shouldn\u2019t have been, leading to rare cases of infinite retries. Please upgrade to this release! Fix: don\u2019t return stale DNS entries in DnsOverHttps . We were caching DNS results indefinitely rather than the duration specified in the response\u2019s cache-control header. Fix: Verify certificate IP addresses in canonical form. When a server presents a TLS certificate containing an IP address we must match that address against the URL\u2019s IP address, even when the two addresses are encoded differently, such as 192.168.1.1 and 0::0:0:FFFF:C0A8:101 . Note that OkHttp incorrectly rejected valid certificates resulting in a failure to connect; at no point were invalid certificates accepted. New: OkHttpClient.Builder.minWebSocketMessageToCompress() configures a threshold for compressing outbound web socket messages. Configure this with 0L to always compress outbound messages and Long.MAX_VALUE to never compress outbound messages. The default is 1024L which compresses messages of size 1 KiB and larger. (Inbound messages are compressed or not based on the web socket server\u2019s configuration.) New: Defer constructing Inflater and Deflater instances until they are needed. This saves memory if web socket compression is negotiated but not used. Version 4.5.0-RC1 \u00b6 2020-03-17 This release candidate turns on web socket compression. The spec includes a sophisticated mechanism for client and server to negotiate compression features. We strive to offer great performance in our default configuration and so we\u2019re making compression the default for everyone starting with this release candidate. Please be considerate of your servers and their operators as you roll out this release. Compression saves bandwidth but it costs CPU and memory! If you run into a problem you may need to adjust or disable the permessage-deflate compression settings on your server. Note that OkHttp won\u2019t use compression when sending messages smaller than 1 KiB. Fix: Don\u2019t crash when the URL hostname contains an underscore on Android. Fix: Change HTTP/2 to use a daemon thread for its socket reader. If you\u2019ve ever seen a command line application hang after all of the work is done, it may be due to a non-daemon thread like this one. New: Include suppressed exceptions when all routes to a target service fail. Version 4.4.1 \u00b6 2020-03-08 Fix: Don\u2019t reuse a connection on redirect if certs match but DNS does not. For better locality and performance OkHttp attempts to use the same pooled connection across redirects and follow-ups. It independently shares connections when the IP addresses and certificates match, even if the host names do not. In 4.4.0 we introduced a regression where we shared a connection when certificates matched but the DNS addresses did not. This would only occur when following a redirect from one hostname to another, and where both hosts had common certificates. Fix: Don\u2019t fail on a redirect when a client has configured a \u2018trust everything\u2019 trust manager. Typically this would cause certain redirects to fail in debug and development configurations. Version 4.4.0 \u00b6 2020-02-17 New: Support canceled() as an event that can be observed by EventListener . This should be useful for splitting out canceled calls in metrics. New: Publish a bill of materials (BOM) for OkHttp. Depend on this from Gradle or Maven to keep all of your OkHttp artifacts on the same version, even if they\u2019re declared via transitive dependencies. You can even omit versions when declaring other OkHttp dependencies. dependencies { api ( platform ( \"com.squareup.okhttp3:okhttp-bom:4.4.0\" )) api ( \"com.squareup.okhttp3:okhttp\" ) // No version! api ( \"com.squareup.okhttp3:logging-interceptor\" ) // No version! } New: Upgrade to Okio 2.4.3. implementation ( \"com.squareup.okio:okio:2.4.3\" ) Fix: Limit retry attempts for HTTP/2 REFUSED_STREAM and CANCEL failures. Fix: Retry automatically when incorrectly sharing a connection among multiple hostnames. OkHttp shares connections when hosts share both IP addresses and certificates, such as squareup.com and www.squareup.com . If a server refuses such sharing it will return HTTP 421 and OkHttp will automatically retry on an unshared connection. Fix: Don\u2019t crash if a TLS tunnel\u2019s response body is truncated. Fix: Don\u2019t track unusable routes beyond their usefulness. We had a bug where we could track certain bad routes indefinitely; now we only track the ones that could be necessary. Fix: Defer proxy selection until a proxy is required. This saves calls to ProxySelector on calls that use a pooled connection. Version 4.3.1 \u00b6 2020-01-07 Fix: Don\u2019t crash with a NullPointerException when a web socket is closed before it connects. This regression was introduced in OkHttp 4.3.0. Fix: Don\u2019t crash with an IllegalArgumentException when using custom trust managers on Android 10. Android uses reflection to look up a magic checkServerTrusted() method and we didn\u2019t have it. Fix: Explicitly specify the remote server name when making HTTPS connections on Android 5. In 4.3.0 we introduced a regression where server name indication (SNI) was broken on Android 5. Version 4.3.0 \u00b6 2019-12-31 Fix: Degrade HTTP/2 connections after a timeout. When an HTTP/2 stream times out it may impact the stream only or the entire connection. With this fix OkHttp will now send HTTP/2 pings after a stream timeout to determine whether the connection should remain eligible for pooling. Fix: Don\u2019t call EventListener.responseHeadersStart() or responseBodyStart() until bytes have been received. Previously these events were incorrectly sent too early, when OkHttp was ready to read the response headers or body, which mislead tracing tools. Note that the responseFailed() event always used to follow one of these events; now it may be sent without them. New: Upgrade to Kotlin 1.3.61. New: Match any number of subdomains with two asterisks in CertificatePinner . For example, **.squareup.com matches us-west.www.squareup.com , www.squareup.com and squareup.com . New: Share threads more aggressively between OkHttp\u2019s HTTP/2 connections, connection pool, web sockets, and cache. OkHttp has a new internal task runner abstraction for managed task scheduling. In your debugger you will see new thread names and more use of daemon threads. Fix: Don\u2019t drop callbacks on unexpected exceptions. When an interceptor throws an unchecked exception the callback is now notified that the call was canceled. The exception is still sent to the uncaught exception handler for reporting and recovery. Fix: Un-deprecate MockResponse.setHeaders() and other setters. These were deprecated in OkHttp 4.0 but that broke method chaining for Java callers. Fix: Don\u2019t crash on HTTP/2 HEAD requests when the Content-Length header is present but is not consistent with the length of the response body. Fix: Don\u2019t crash when converting a HttpUrl instance with an unresolvable hostname to a URI. The new behavior strips invalid characters like \" and { from the hostname before converting. Fix: Undo a performance regression introduced in OkHttp 4.0 caused by differences in behavior between Kotlin\u2019s assert() and Java\u2019s assert() . (Kotlin always evaluates the argument; Java only does when assertions are enabled.) Fix: Honor RequestBody.isOneShot() in HttpLoggingInterceptor . Version 4.2.2 \u00b6 2019-10-06 Fix: When closing a canceled HTTP/2 stream, don\u2019t send the END_STREAM flag. This could cause the server to incorrectly interpret the stream as having completed normally. This is most useful when a request body needs to cancel its own call. Version 4.2.1 \u00b6 2019-10-02 Fix: In 4.1.0 we introduced a performance regression that prevented connections from being pooled in certain situations. We have good test coverage for connection pooling but we missed this because it only occurs if you have proxy configured and you share a connection pool among multiple OkHttpClient instances. This particularly-subtle bug was caused by us assigning each OkHttpClient instance its own NullProxySelector when an explicit proxy is configured. But we don\u2019t share connections when the proxy selectors are different. Ugh! Version 4.2.0 \u00b6 2019-09-10 New: API to decode a certificate and private key to create a HeldCertificate . This accepts a string containing both a certificate and PKCS #8-encoded private key. val heldCertificate = HeldCertificate . decode ( \"\"\" |-----BEGIN CERTIFICATE----- |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT |yyaoEufLKVXhrTQhRfodTeigi4RX |-----END CERTIFICATE----- |-----BEGIN PRIVATE KEY----- |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J |lu/GJQZoU9lDrCPeUcQ28tzOWw== |-----END PRIVATE KEY----- \"\"\" . trimMargin ()) val handshakeCertificates = HandshakeCertificates . Builder () . heldCertificate ( heldCertificate ) . build () val server = MockWebServer () server . useHttps ( handshakeCertificates . sslSocketFactory (), false ) Get these strings with HeldCertificate.certificatePem() and privateKeyPkcs8Pem() . Fix: Handshake now returns peer certificates in canonical order: each certificate is signed by the certificate that follows and the last certificate is signed by a trusted root. Fix: Don\u2019t lose HTTP/2 flow control bytes when incoming data races with a stream close. If this happened enough then eventually the connection would stall. Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to fail the call. Version 4.1.1 \u00b6 2019-09-05 Fix: Don\u2019t drop repeated headers when validating cached responses. In our Kotlin upgrade we introduced a regression where we iterated the number of unique header names rather than then number of unique headers. If you\u2019re using OkHttp\u2019s response cache this may impact you. Version 4.1.0 \u00b6 2019-08-12 OkHttp\u2019s new okhttp-brotli module implements Brotli compression. Install the interceptor to enable Brotli compression , which compresses 5-20% smaller than gzip. val client = OkHttpClient.Builder() .addInterceptor(BrotliInterceptor) .build() This artifact has a dependency on Google\u2019s Brotli decoder (95 KiB). New: EventListener.proxySelectStart() , proxySelectEnd() events give visibility into the proxy selection process. New: Response.byteString() reads the entire response into memory as a byte string. New: OkHttpClient.x509TrustManager accessor. New: Permit new WebSocket response codes : 1012 (Service Restart), 1013 (Try Again Later), and 1014 (invalid response from the upstream). New: Build with Kotlin 1.3.41, BouncyCastle 1.62, and Conscrypt 2.2.1. Fix: Recover gracefully when a coalesced connection immediately goes unhealthy. Fix: Defer the SecurityException when looking up the default proxy selector. Fix: Don\u2019t use brackets formatting IPv6 host names in MockWebServer. Fix: Don\u2019t permit cache iterators to remove entries that are being written. Version 4.0.1 \u00b6 2019-07-10 Fix: Tolerate null-hostile lists in public API. Lists created with List.of(...) don\u2019t like it when you call contains(null) on them! Fix: Retain binary-compatibility in okhttp3.internal.HttpHeaders.hasBody() . Some unscrupulous coders call this and we don\u2019t want their users to suffer. Version 4.0.0 \u00b6 2019-06-26 This release upgrades OkHttp to Kotlin. We tried our best to make fast and safe to upgrade from OkHttp 3.x. We wrote an upgrade guide to help with the migration and a blog post to explain it. Fix: Target Java 8 bytecode for Java and Kotlin. Version 4.0.0-RC3 \u00b6 2019-06-24 Fix: Retain binary-compatibility in okhttp3.internal.HttpMethod . Naughty third party SDKs import this and we want to ease upgrades for their users. Version 4.0.0-RC2 \u00b6 2019-06-21 New: Require Kotlin 1.3.40. New: Change the Kotlin API from File.toRequestBody() to File.asRequestBody() and BufferedSource.toResponseBody() to BufferedSource.asResponseBody() . If the returned value is a view of what created it, we use as . Fix: Permit response codes of zero for compatibility with OkHttp 3.x. Fix: Change the return type of MockWebServer.takeRequest() to be nullable. Fix: Make Call.clone() public to Kotlin callers. Version 4.0.0-RC1 \u00b6 2019-06-03 First stable preview of OkHttp 4. Version 3.x \u00b6 Change log","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-500-alpha2","text":"2021-01-30 In this release MockWebServer has a new Maven coordinate and package name. A longstanding problem with MockWebServer has been its API dependency on JUnit 4. We\u2019ve reorganized things to remove that dependency while preserving backwards compatibility. Maven Coordinate Package Name Description com.squareup.okhttp3:mockwebserver3:5.0.0-alpha.2 mockwebserver3 Core module. No JUnit dependency! com.squareup.okhttp3:mockwebserver3-junit4:5.0.0-alpha.2 mockwebserver3.junit4 Optional JUnit 4 integration. com.squareup.okhttp3:mockwebserver3-junit5:5.0.0-alpha.2 mockwebserver3.junit5 Optional JUnit 5 integration. com.squareup.okhttp3:mockwebserver:5.0.0-alpha.2 okhttp3.mockwebserver Obsolete. Depends on JUnit 4. The new APIs use mockwebserver3 in both the Maven coordinate and package name. This new API is not stable and will likely change before the final 5.0.0 release. If you have code that subclasses okhttp3.mockwebserver.QueueDispatcher , this update is not source or binary compatible. Migrating to the new mockwebserver3 package will fix this problem. New: DNS over HTTPS is now a stable feature of OkHttp. We introduced this as an experimental module in 2018. We are confident in its stable API and solid implementation. Fix: Work around a crash in Android 10 and 11 that may be triggered when two threads concurrently close an SSL socket. This would have appeared in crash logs as NullPointerException: bio == null . Fix: Use plus + instead of %20 to encode space characters in FormBody . This was a longstanding bug in OkHttp. The fix makes OkHttp consistent with major web browsers. Fix: Don\u2019t crash if Conscrypt returns a null version. Fix: Include the public suffix data as a resource in GraalVM native images. Fix: Fail fast when the cache is corrupted. Fix: Fail fast when a private key cannot be encoded. Fix: Fail fast when attempting to verify a non-ASCII hostname. Upgrade: GraalVM 21 . Upgrade: Kotlin 1.4.20 .","title":"Version 5.0.0-alpha.2"},{"location":"changelog/#version-500-alpha1","text":"2021-01-30 This release adds initial support for GraalVM . GraalVM is an exciting new platform and we\u2019re eager to adopt it. The startup time improvements over the JVM are particularly impressive. Try it with okcurl: $ ./gradlew okcurl:nativeImage $ ./okcurl/build/graal/okcurl https://cash.app/robots.txt This is our first release that supports GraalVM. Our code on this platform is less mature than JVM and Android! Please report any issues you encounter: we\u2019ll fix them urgently. Fix: Attempt to read the response body even if the server canceled the request. This will cause some calls to return nice error codes like HTTP/1.1 429 Too Many Requests instead of transport errors like SocketException: Connection reset and StreamResetException: stream was reset: CANCEL . New: Support OSGi metadata. Upgrade: Okio 2.9.0 . implementation ( \"com.squareup.okio:okio:2.9.0\" ) Note that this was originally released on 2020-10-06 as 4.10.0-RC1. The only change from that release is the version name.","title":"Version 5.0.0-alpha.1"},{"location":"changelog/#version-491","text":"2021-01-30 Fix: Work around a crash in Android 10 and 11 that may be triggered when two threads concurrently close an SSL socket. This would have appeared in crash logs as NullPointerException: bio == null .","title":"Version 4.9.1"},{"location":"changelog/#version-490","text":"2020-09-11 With this release, okhttp-tls no longer depends on Bouncy Castle and doesn\u2019t install the Bouncy Castle security provider. If you still need it, you can do it yourself: Security.addProvider(BouncyCastleProvider()) You will also need to configure this dependency: dependencies { implementation \"org.bouncycastle:bcprov-jdk15on:1.65\" } Upgrade: Kotlin 1.4.10 . We now use Kotlin 1.4.x functional interfaces for Authenticator , Interceptor , and others. Upgrade: Build with Conscrypt 2.5.1.","title":"Version 4.9.0"},{"location":"changelog/#version-481","text":"2020-08-06 Fix: Don\u2019t crash in HeldCertificate.Builder when creating certificates on older versions of Android, including Android 6. We were using a feature of SimpleDateFormat that wasn\u2019t available in those versions!","title":"Version 4.8.1"},{"location":"changelog/#version-480","text":"2020-07-11 New: Change HeldCertificate.Builder to use its own ASN.1 certificate encoder. This is part of our effort to remove the okhttp-tls module\u2019s dependency on Bouncy Castle. We think Bouncy Castle is great! But it\u2019s a large dependency (6.5 MiB) and its security provider feature impacts VM-wide behavior. New: Reduce contention for applications that make a very high number of concurrent requests. Previously OkHttp used its connection pool as a lock when making changes to connections and calls. With this change each connection is locked independently. Upgrade: Okio 2.7.0 . implementation ( \"com.squareup.okio:okio:2.7.0\" ) Fix: Avoid log messages like \u201cDidn\u2019t find class org.conscrypt.ConscryptHostnameVerifier\u201d when detecting the TLS capabilities of the host platform. Fix: Don\u2019t crash in HttpUrl.topPrivateDomain() when the hostname is malformed. Fix: Don\u2019t attempt Brotli decompression if the response body is empty.","title":"Version 4.8.0"},{"location":"changelog/#version-472","text":"2020-05-20 Fix: Don\u2019t crash inspecting whether the host platform is JVM or Android. With 4.7.0 and 4.7.1 we had a crash IllegalArgumentException: Not a Conscrypt trust manager because we depended on initialization order of companion objects.","title":"Version 4.7.2"},{"location":"changelog/#version-471","text":"2020-05-18 Fix: Pass the right arguments in the trust manager created for addInsecureHost() . Without the fix insecure hosts crash with an IllegalArgumentException on Android.","title":"Version 4.7.1"},{"location":"changelog/#version-470","text":"2020-05-17 New: HandshakeCertificates.Builder.addInsecureHost() makes it easy to turn off security in private development environments that only carry test data. Prefer this over creating an all-trusting TrustManager because only hosts on the allowlist are insecure. From our DevServer sample : val clientCertificates = HandshakeCertificates . Builder () . addPlatformTrustedCertificates () . addInsecureHost ( \"localhost\" ) . build () val client = OkHttpClient . Builder () . sslSocketFactory ( clientCertificates . sslSocketFactory (), clientCertificates . trustManager ) . build () New: Add cacheHit , cacheMiss , and cacheConditionalHit() events to EventListener . Use these in logs, metrics, and even test cases to confirm your cache headers are configured as expected. New: Constant string okhttp3.VERSION . This is a string like \u201c4.5.0-RC1\u201d, \u201c4.5.0\u201d, or \u201c4.6.0-SNAPSHOT\u201d indicating the version of OkHttp in the current runtime. Use this to include the OkHttp version in custom User-Agent headers. Fix: Don\u2019t crash when running as a plugin in Android Studio Canary 4.1. To enable platform-specific TLS features OkHttp must detect whether it\u2019s running in a JVM or in Android. The upcoming Android Studio runs in a JVM but has classes from Android and that confused OkHttp! Fix: Include the header Accept: text/event-stream for SSE calls. This header is not added if the request already contains an Accept header. Fix: Don\u2019t crash with a NullPointerException if a server sends a close while we\u2019re sending a ping. OkHttp had a race condition bug.","title":"Version 4.7.0"},{"location":"changelog/#version-460","text":"2020-04-28 Fix: Follow HTTP 307 and 308 redirects on methods other than GET and POST. We\u2019re reluctant to change OkHttp\u2019s behavior in handling common HTTP status codes, but this fix is overdue! The new behavior is now consistent with RFC 7231 , which is newer than OkHttp itself. If you want this update with the old behavior use this interceptor . Fix: Don\u2019t crash decompressing web sockets messages. We had a bug where we assumed deflated bytes in would always yield deflated bytes out and this isn\u2019t always the case! Fix: Reliably update and invalidate the disk cache on windows. As originally designed our internal DiskLruCache assumes an inode-like file system, where it\u2019s fine to delete files that are currently being read or written. On Windows the file system forbids this so we must be more careful when deleting and renaming files. Fix: Don\u2019t crash on Java 8u252 which introduces an API previously found only on Java 9 and above. See Jetty\u2019s overview of the API change and its consequences. New: MultipartReader is a streaming decoder for MIME multipart (RFC 2045) messages. It complements MultipartBody which is our streaming encoder. val response : Response = call . execute () val multipartReader = MultipartReader ( response . body !! ) multipartReader . use { while ( true ) { val part = multipartReader . nextPart () ?: break process ( part . headers , part . body ) } } New: MediaType.parameter() gets a parameter like boundary from a media type like multipart/mixed; boundary=\"abc\" . New: Authenticator.JAVA_NET_AUTHENTICATOR forwards authentication requests to java.net.Authenticator . This obsoletes JavaNetAuthenticator in the okhttp-urlconnection module. New: CertificatePinner now offers an API for inspecting the configured pins. Upgrade: Okio 2.6.0 . implementation ( \"com.squareup.okio:okio:2.6.0\" ) Upgrade: publicsuffix.org data . This powers HttpUrl.topPrivateDomain() . It\u2019s also how OkHttp knows which domains can share cookies with one another. Upgrade: Bouncy Castle 1.65 . This dependency is required by the okhttp-tls module. Upgrade: Kotlin 1.3.71 .","title":"Version 4.6.0"},{"location":"changelog/#version-450","text":"2020-04-06 This release fixes a severe bug where OkHttp incorrectly detected and recovered from unhealthy connections. Stale or canceled connections were incorrectly attempted when they shouldn\u2019t have been, leading to rare cases of infinite retries. Please upgrade to this release! Fix: don\u2019t return stale DNS entries in DnsOverHttps . We were caching DNS results indefinitely rather than the duration specified in the response\u2019s cache-control header. Fix: Verify certificate IP addresses in canonical form. When a server presents a TLS certificate containing an IP address we must match that address against the URL\u2019s IP address, even when the two addresses are encoded differently, such as 192.168.1.1 and 0::0:0:FFFF:C0A8:101 . Note that OkHttp incorrectly rejected valid certificates resulting in a failure to connect; at no point were invalid certificates accepted. New: OkHttpClient.Builder.minWebSocketMessageToCompress() configures a threshold for compressing outbound web socket messages. Configure this with 0L to always compress outbound messages and Long.MAX_VALUE to never compress outbound messages. The default is 1024L which compresses messages of size 1 KiB and larger. (Inbound messages are compressed or not based on the web socket server\u2019s configuration.) New: Defer constructing Inflater and Deflater instances until they are needed. This saves memory if web socket compression is negotiated but not used.","title":"Version 4.5.0"},{"location":"changelog/#version-450-rc1","text":"2020-03-17 This release candidate turns on web socket compression. The spec includes a sophisticated mechanism for client and server to negotiate compression features. We strive to offer great performance in our default configuration and so we\u2019re making compression the default for everyone starting with this release candidate. Please be considerate of your servers and their operators as you roll out this release. Compression saves bandwidth but it costs CPU and memory! If you run into a problem you may need to adjust or disable the permessage-deflate compression settings on your server. Note that OkHttp won\u2019t use compression when sending messages smaller than 1 KiB. Fix: Don\u2019t crash when the URL hostname contains an underscore on Android. Fix: Change HTTP/2 to use a daemon thread for its socket reader. If you\u2019ve ever seen a command line application hang after all of the work is done, it may be due to a non-daemon thread like this one. New: Include suppressed exceptions when all routes to a target service fail.","title":"Version 4.5.0-RC1"},{"location":"changelog/#version-441","text":"2020-03-08 Fix: Don\u2019t reuse a connection on redirect if certs match but DNS does not. For better locality and performance OkHttp attempts to use the same pooled connection across redirects and follow-ups. It independently shares connections when the IP addresses and certificates match, even if the host names do not. In 4.4.0 we introduced a regression where we shared a connection when certificates matched but the DNS addresses did not. This would only occur when following a redirect from one hostname to another, and where both hosts had common certificates. Fix: Don\u2019t fail on a redirect when a client has configured a \u2018trust everything\u2019 trust manager. Typically this would cause certain redirects to fail in debug and development configurations.","title":"Version 4.4.1"},{"location":"changelog/#version-440","text":"2020-02-17 New: Support canceled() as an event that can be observed by EventListener . This should be useful for splitting out canceled calls in metrics. New: Publish a bill of materials (BOM) for OkHttp. Depend on this from Gradle or Maven to keep all of your OkHttp artifacts on the same version, even if they\u2019re declared via transitive dependencies. You can even omit versions when declaring other OkHttp dependencies. dependencies { api ( platform ( \"com.squareup.okhttp3:okhttp-bom:4.4.0\" )) api ( \"com.squareup.okhttp3:okhttp\" ) // No version! api ( \"com.squareup.okhttp3:logging-interceptor\" ) // No version! } New: Upgrade to Okio 2.4.3. implementation ( \"com.squareup.okio:okio:2.4.3\" ) Fix: Limit retry attempts for HTTP/2 REFUSED_STREAM and CANCEL failures. Fix: Retry automatically when incorrectly sharing a connection among multiple hostnames. OkHttp shares connections when hosts share both IP addresses and certificates, such as squareup.com and www.squareup.com . If a server refuses such sharing it will return HTTP 421 and OkHttp will automatically retry on an unshared connection. Fix: Don\u2019t crash if a TLS tunnel\u2019s response body is truncated. Fix: Don\u2019t track unusable routes beyond their usefulness. We had a bug where we could track certain bad routes indefinitely; now we only track the ones that could be necessary. Fix: Defer proxy selection until a proxy is required. This saves calls to ProxySelector on calls that use a pooled connection.","title":"Version 4.4.0"},{"location":"changelog/#version-431","text":"2020-01-07 Fix: Don\u2019t crash with a NullPointerException when a web socket is closed before it connects. This regression was introduced in OkHttp 4.3.0. Fix: Don\u2019t crash with an IllegalArgumentException when using custom trust managers on Android 10. Android uses reflection to look up a magic checkServerTrusted() method and we didn\u2019t have it. Fix: Explicitly specify the remote server name when making HTTPS connections on Android 5. In 4.3.0 we introduced a regression where server name indication (SNI) was broken on Android 5.","title":"Version 4.3.1"},{"location":"changelog/#version-430","text":"2019-12-31 Fix: Degrade HTTP/2 connections after a timeout. When an HTTP/2 stream times out it may impact the stream only or the entire connection. With this fix OkHttp will now send HTTP/2 pings after a stream timeout to determine whether the connection should remain eligible for pooling. Fix: Don\u2019t call EventListener.responseHeadersStart() or responseBodyStart() until bytes have been received. Previously these events were incorrectly sent too early, when OkHttp was ready to read the response headers or body, which mislead tracing tools. Note that the responseFailed() event always used to follow one of these events; now it may be sent without them. New: Upgrade to Kotlin 1.3.61. New: Match any number of subdomains with two asterisks in CertificatePinner . For example, **.squareup.com matches us-west.www.squareup.com , www.squareup.com and squareup.com . New: Share threads more aggressively between OkHttp\u2019s HTTP/2 connections, connection pool, web sockets, and cache. OkHttp has a new internal task runner abstraction for managed task scheduling. In your debugger you will see new thread names and more use of daemon threads. Fix: Don\u2019t drop callbacks on unexpected exceptions. When an interceptor throws an unchecked exception the callback is now notified that the call was canceled. The exception is still sent to the uncaught exception handler for reporting and recovery. Fix: Un-deprecate MockResponse.setHeaders() and other setters. These were deprecated in OkHttp 4.0 but that broke method chaining for Java callers. Fix: Don\u2019t crash on HTTP/2 HEAD requests when the Content-Length header is present but is not consistent with the length of the response body. Fix: Don\u2019t crash when converting a HttpUrl instance with an unresolvable hostname to a URI. The new behavior strips invalid characters like \" and { from the hostname before converting. Fix: Undo a performance regression introduced in OkHttp 4.0 caused by differences in behavior between Kotlin\u2019s assert() and Java\u2019s assert() . (Kotlin always evaluates the argument; Java only does when assertions are enabled.) Fix: Honor RequestBody.isOneShot() in HttpLoggingInterceptor .","title":"Version 4.3.0"},{"location":"changelog/#version-422","text":"2019-10-06 Fix: When closing a canceled HTTP/2 stream, don\u2019t send the END_STREAM flag. This could cause the server to incorrectly interpret the stream as having completed normally. This is most useful when a request body needs to cancel its own call.","title":"Version 4.2.2"},{"location":"changelog/#version-421","text":"2019-10-02 Fix: In 4.1.0 we introduced a performance regression that prevented connections from being pooled in certain situations. We have good test coverage for connection pooling but we missed this because it only occurs if you have proxy configured and you share a connection pool among multiple OkHttpClient instances. This particularly-subtle bug was caused by us assigning each OkHttpClient instance its own NullProxySelector when an explicit proxy is configured. But we don\u2019t share connections when the proxy selectors are different. Ugh!","title":"Version 4.2.1"},{"location":"changelog/#version-420","text":"2019-09-10 New: API to decode a certificate and private key to create a HeldCertificate . This accepts a string containing both a certificate and PKCS #8-encoded private key. val heldCertificate = HeldCertificate . decode ( \"\"\" |-----BEGIN CERTIFICATE----- |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT |yyaoEufLKVXhrTQhRfodTeigi4RX |-----END CERTIFICATE----- |-----BEGIN PRIVATE KEY----- |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J |lu/GJQZoU9lDrCPeUcQ28tzOWw== |-----END PRIVATE KEY----- \"\"\" . trimMargin ()) val handshakeCertificates = HandshakeCertificates . Builder () . heldCertificate ( heldCertificate ) . build () val server = MockWebServer () server . useHttps ( handshakeCertificates . sslSocketFactory (), false ) Get these strings with HeldCertificate.certificatePem() and privateKeyPkcs8Pem() . Fix: Handshake now returns peer certificates in canonical order: each certificate is signed by the certificate that follows and the last certificate is signed by a trusted root. Fix: Don\u2019t lose HTTP/2 flow control bytes when incoming data races with a stream close. If this happened enough then eventually the connection would stall. Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to fail the call.","title":"Version 4.2.0"},{"location":"changelog/#version-411","text":"2019-09-05 Fix: Don\u2019t drop repeated headers when validating cached responses. In our Kotlin upgrade we introduced a regression where we iterated the number of unique header names rather than then number of unique headers. If you\u2019re using OkHttp\u2019s response cache this may impact you.","title":"Version 4.1.1"},{"location":"changelog/#version-410","text":"2019-08-12 OkHttp\u2019s new okhttp-brotli module implements Brotli compression. Install the interceptor to enable Brotli compression , which compresses 5-20% smaller than gzip. val client = OkHttpClient.Builder() .addInterceptor(BrotliInterceptor) .build() This artifact has a dependency on Google\u2019s Brotli decoder (95 KiB). New: EventListener.proxySelectStart() , proxySelectEnd() events give visibility into the proxy selection process. New: Response.byteString() reads the entire response into memory as a byte string. New: OkHttpClient.x509TrustManager accessor. New: Permit new WebSocket response codes : 1012 (Service Restart), 1013 (Try Again Later), and 1014 (invalid response from the upstream). New: Build with Kotlin 1.3.41, BouncyCastle 1.62, and Conscrypt 2.2.1. Fix: Recover gracefully when a coalesced connection immediately goes unhealthy. Fix: Defer the SecurityException when looking up the default proxy selector. Fix: Don\u2019t use brackets formatting IPv6 host names in MockWebServer. Fix: Don\u2019t permit cache iterators to remove entries that are being written.","title":"Version 4.1.0"},{"location":"changelog/#version-401","text":"2019-07-10 Fix: Tolerate null-hostile lists in public API. Lists created with List.of(...) don\u2019t like it when you call contains(null) on them! Fix: Retain binary-compatibility in okhttp3.internal.HttpHeaders.hasBody() . Some unscrupulous coders call this and we don\u2019t want their users to suffer.","title":"Version 4.0.1"},{"location":"changelog/#version-400","text":"2019-06-26 This release upgrades OkHttp to Kotlin. We tried our best to make fast and safe to upgrade from OkHttp 3.x. We wrote an upgrade guide to help with the migration and a blog post to explain it. Fix: Target Java 8 bytecode for Java and Kotlin.","title":"Version 4.0.0"},{"location":"changelog/#version-400-rc3","text":"2019-06-24 Fix: Retain binary-compatibility in okhttp3.internal.HttpMethod . Naughty third party SDKs import this and we want to ease upgrades for their users.","title":"Version 4.0.0-RC3"},{"location":"changelog/#version-400-rc2","text":"2019-06-21 New: Require Kotlin 1.3.40. New: Change the Kotlin API from File.toRequestBody() to File.asRequestBody() and BufferedSource.toResponseBody() to BufferedSource.asResponseBody() . If the returned value is a view of what created it, we use as . Fix: Permit response codes of zero for compatibility with OkHttp 3.x. Fix: Change the return type of MockWebServer.takeRequest() to be nullable. Fix: Make Call.clone() public to Kotlin callers.","title":"Version 4.0.0-RC2"},{"location":"changelog/#version-400-rc1","text":"2019-06-03 First stable preview of OkHttp 4.","title":"Version 4.0.0-RC1"},{"location":"changelog/#version-3x","text":"Change log","title":"Version 3.x"},{"location":"changelog_1x/","text":"OkHttp 1.x Change Log \u00b6 Version 1.6.0 \u00b6 2014-05-23 Offer bridges to make it easier to migrate from OkHttp 1.x to OkHttp 2.0. This adds OkUrlFactory , Cache , and @Deprecated annotations for APIs dropped in 2.0. Version 1.5.4 \u00b6 2014-04-14 Drop ALPN support in Android. There\u2019s a concurrency bug in all currently-shipping versions. Support asynchronous disconnects by breaking the socket only. This should prevent flakiness from multiple threads concurrently accessing a stream. Version 1.5.3 \u00b6 2014-03-29 Fix bug where the Content-Length header was not always dropped when following a redirect from a POST to a GET. Implement basic support for Thread.interrupt() . OkHttp now checks for an interruption before doing a blocking call. If it is interrupted, it throws an InterruptedIOException . Version 1.5.2 \u00b6 2014-03-17 Fix bug where deleting a file that was absent from the HttpResponseCache caused an IOException. Fix bug in HTTP/2 where our HPACK decoder wasn\u2019t emitting entries in certain eviction scenarios, leading to dropped response headers. Version 1.5.1 \u00b6 2014-03-11 Fix 1.5.0 regression where connections should not have been recycled. Fix 1.5.0 regression where transparent Gzip was broken by attempting to recover from another I/O failure. Fix problems where spdy/3.1 headers may not have been compressed properly. Fix problems with spdy/3.1 and http/2 where the wrong window size was being used. Fix 1.5.0 regression where conditional cache responses could corrupt the connection pool. Version 1.5.0 \u00b6 2014-03-07 OkHttp no longer uses the default SSL context. \u00b6 Applications that want to use the global SSL context with OkHttp should configure their OkHttpClient instances with the following: okHttpClient . setSslSocketFactory ( HttpsURLConnection . getDefaultSSLSocketFactory ()); A simpler solution is to avoid the shared default SSL socket factory. Instead, if you need to customize SSL, do so for your specific OkHttpClient instance only. Synthetic headers have changed \u00b6 Previously OkHttp added a synthetic response header, OkHttp-Selected-Transport . It has been replaced with a new synthetic header, OkHttp-Selected-Protocol . Changes \u00b6 New: Support for HTTP-draft-09/2.0 . New: Support for spdy/3.1 . Dropped support for spdy/3 . New: Use ALPN on Android platforms that support it (4.4+) New: CacheControl model and parser. New: Protocol selection in MockWebServer. Fix: Route selection shouldn\u2019t use TLS modes that we know will fail. Fix: Cache SPDY responses even if the response body is closed prematurely. Fix: Use strict timeouts when aborting a download. Fix: Support Shoutcast HTTP responses like ICY 200 OK . Fix: Don\u2019t unzip if there isn\u2019t a response body. Fix: Don\u2019t leak gzip streams on redirects. Fix: Don\u2019t do DNS lookups on invalid hosts. Fix: Exhaust the underlying stream when reading gzip streams. Fix: Support the PATCH method. Fix: Support request bodies on DELETE method. Fix: Drop the okhttp-protocols module. Internal: Replaced internal byte array buffers with pooled buffers (\u201cOkBuffer\u201d). Version 1.3.0 \u00b6 2014-01-11 New: Support for \u201cPATCH\u201d HTTP method in client and MockWebServer. Fix: Drop Content-Length header when redirected from POST to GET. Fix: Correctly read cached header entries with malformed header names. Fix: Do not directly support any authentication schemes other than \u201cBasic\u201d. Fix: Respect read timeouts on recycled connections. Fix: Transmit multiple cookie values as a single header with delimiter. Fix: Ensure null is never returned from a connection\u2019s getHeaderFields() . Fix: Persist proper Content-Encoding header to cache for GZip responses. Fix: Eliminate rare race condition in SPDY streams that would prevent connection reuse. Fix: Change HTTP date formats to UTC to conform to RFC2616 section 3.3. Fix: Support SPDY header blocks with trailing bytes. Fix: Allow ; as separator for Cache-Control header. Fix: Correct bug where HTTPS POST requests were always automatically buffered. Fix: Honor read timeout when parsing SPDY headers. Version 1.2.1 \u00b6 2013-08-23 Resolve issue with \u2018jar-with-dependencies\u2019 artifact creation. Fix: Support empty SPDY header values. Version 1.2.0 \u00b6 2013-08-11 New APIs on OkHttpClient to set default timeouts for connect and read. Fix bug when caching SPDY responses. Fix a bug with SPDY plus half-closed streams. (thanks kwuollett) Fix a bug in Content-Length reporting for gzipped streams in the Apache HTTP client adapter. (thanks kwuollett) Work around the Alcatel getByInetAddress bug (thanks k.kocel) Be more aggressive about testing pooled sockets before reuse. (thanks warpspin) Include Content-Type and Content-Encoding in the Apache HTTP client adapter. (thanks kwuollett) Add a media type class to OkHttp. Change custom header prefix: X-Android-Sent-Millis is now OkHttp-Sent-Millis X-Android-Received-Millis is now OkHttp-Received-Millis X-Android-Response-Source is now OkHttp-Response-Source X-Android-Selected-Transport is now OkHttp-Selected-Transport * Improve cache invalidation for POST-like requests. * Bring MockWebServer into OkHttp and teach it SPDY. Version 1.1.1 \u00b6 2013-06-23 Fix: ClassCastException when caching responses that were redirected from HTTP to HTTPS. Version 1.1.0 \u00b6 2013-06-15 Fix: Connection reuse was broken for most HTTPS connections due to a bug in the way the hostname verifier was selected. Fix: Locking bug in SpdyConnection. Fix: Ignore null header values (for compatibility with HttpURLConnection). Add URLStreamHandlerFactory support so that URL.openConnection() uses OkHttp. Expose the transport (\u201chttp/1.1\u201d, \u201cspdy/3\u201d, etc.) via magic request headers. Use X-Android-Transports to write the preferred transports and X-Android-Selected-Transport to read the negotiated transport. Version 1.0.2 \u00b6 2013-05-11 Fix: Remove use of Java 6-only APIs. Fix: Properly handle exceptions from NetworkInterface when querying MTU. Fix: Ensure MTU has a reasonable default and upper-bound. Version 1.0.1 \u00b6 2013-05-06 Correct casing of SSL in method names ( getSslSocketFactory / setSslSocketFactory ). Version 1.0.0 \u00b6 2013-05-06 Initial release.","title":"Changelog 1x"},{"location":"changelog_1x/#okhttp-1x-change-log","text":"","title":"OkHttp 1.x Change Log"},{"location":"changelog_1x/#version-160","text":"2014-05-23 Offer bridges to make it easier to migrate from OkHttp 1.x to OkHttp 2.0. This adds OkUrlFactory , Cache , and @Deprecated annotations for APIs dropped in 2.0.","title":"Version 1.6.0"},{"location":"changelog_1x/#version-154","text":"2014-04-14 Drop ALPN support in Android. There\u2019s a concurrency bug in all currently-shipping versions. Support asynchronous disconnects by breaking the socket only. This should prevent flakiness from multiple threads concurrently accessing a stream.","title":"Version 1.5.4"},{"location":"changelog_1x/#version-153","text":"2014-03-29 Fix bug where the Content-Length header was not always dropped when following a redirect from a POST to a GET. Implement basic support for Thread.interrupt() . OkHttp now checks for an interruption before doing a blocking call. If it is interrupted, it throws an InterruptedIOException .","title":"Version 1.5.3"},{"location":"changelog_1x/#version-152","text":"2014-03-17 Fix bug where deleting a file that was absent from the HttpResponseCache caused an IOException. Fix bug in HTTP/2 where our HPACK decoder wasn\u2019t emitting entries in certain eviction scenarios, leading to dropped response headers.","title":"Version 1.5.2"},{"location":"changelog_1x/#version-151","text":"2014-03-11 Fix 1.5.0 regression where connections should not have been recycled. Fix 1.5.0 regression where transparent Gzip was broken by attempting to recover from another I/O failure. Fix problems where spdy/3.1 headers may not have been compressed properly. Fix problems with spdy/3.1 and http/2 where the wrong window size was being used. Fix 1.5.0 regression where conditional cache responses could corrupt the connection pool.","title":"Version 1.5.1"},{"location":"changelog_1x/#version-150","text":"2014-03-07","title":"Version 1.5.0"},{"location":"changelog_1x/#okhttp-no-longer-uses-the-default-ssl-context","text":"Applications that want to use the global SSL context with OkHttp should configure their OkHttpClient instances with the following: okHttpClient . setSslSocketFactory ( HttpsURLConnection . getDefaultSSLSocketFactory ()); A simpler solution is to avoid the shared default SSL socket factory. Instead, if you need to customize SSL, do so for your specific OkHttpClient instance only.","title":"OkHttp no longer uses the default SSL context."},{"location":"changelog_1x/#synthetic-headers-have-changed","text":"Previously OkHttp added a synthetic response header, OkHttp-Selected-Transport . It has been replaced with a new synthetic header, OkHttp-Selected-Protocol .","title":"Synthetic headers have changed"},{"location":"changelog_1x/#changes","text":"New: Support for HTTP-draft-09/2.0 . New: Support for spdy/3.1 . Dropped support for spdy/3 . New: Use ALPN on Android platforms that support it (4.4+) New: CacheControl model and parser. New: Protocol selection in MockWebServer. Fix: Route selection shouldn\u2019t use TLS modes that we know will fail. Fix: Cache SPDY responses even if the response body is closed prematurely. Fix: Use strict timeouts when aborting a download. Fix: Support Shoutcast HTTP responses like ICY 200 OK . Fix: Don\u2019t unzip if there isn\u2019t a response body. Fix: Don\u2019t leak gzip streams on redirects. Fix: Don\u2019t do DNS lookups on invalid hosts. Fix: Exhaust the underlying stream when reading gzip streams. Fix: Support the PATCH method. Fix: Support request bodies on DELETE method. Fix: Drop the okhttp-protocols module. Internal: Replaced internal byte array buffers with pooled buffers (\u201cOkBuffer\u201d).","title":"Changes"},{"location":"changelog_1x/#version-130","text":"2014-01-11 New: Support for \u201cPATCH\u201d HTTP method in client and MockWebServer. Fix: Drop Content-Length header when redirected from POST to GET. Fix: Correctly read cached header entries with malformed header names. Fix: Do not directly support any authentication schemes other than \u201cBasic\u201d. Fix: Respect read timeouts on recycled connections. Fix: Transmit multiple cookie values as a single header with delimiter. Fix: Ensure null is never returned from a connection\u2019s getHeaderFields() . Fix: Persist proper Content-Encoding header to cache for GZip responses. Fix: Eliminate rare race condition in SPDY streams that would prevent connection reuse. Fix: Change HTTP date formats to UTC to conform to RFC2616 section 3.3. Fix: Support SPDY header blocks with trailing bytes. Fix: Allow ; as separator for Cache-Control header. Fix: Correct bug where HTTPS POST requests were always automatically buffered. Fix: Honor read timeout when parsing SPDY headers.","title":"Version 1.3.0"},{"location":"changelog_1x/#version-121","text":"2013-08-23 Resolve issue with \u2018jar-with-dependencies\u2019 artifact creation. Fix: Support empty SPDY header values.","title":"Version 1.2.1"},{"location":"changelog_1x/#version-120","text":"2013-08-11 New APIs on OkHttpClient to set default timeouts for connect and read. Fix bug when caching SPDY responses. Fix a bug with SPDY plus half-closed streams. (thanks kwuollett) Fix a bug in Content-Length reporting for gzipped streams in the Apache HTTP client adapter. (thanks kwuollett) Work around the Alcatel getByInetAddress bug (thanks k.kocel) Be more aggressive about testing pooled sockets before reuse. (thanks warpspin) Include Content-Type and Content-Encoding in the Apache HTTP client adapter. (thanks kwuollett) Add a media type class to OkHttp. Change custom header prefix: X-Android-Sent-Millis is now OkHttp-Sent-Millis X-Android-Received-Millis is now OkHttp-Received-Millis X-Android-Response-Source is now OkHttp-Response-Source X-Android-Selected-Transport is now OkHttp-Selected-Transport * Improve cache invalidation for POST-like requests. * Bring MockWebServer into OkHttp and teach it SPDY.","title":"Version 1.2.0"},{"location":"changelog_1x/#version-111","text":"2013-06-23 Fix: ClassCastException when caching responses that were redirected from HTTP to HTTPS.","title":"Version 1.1.1"},{"location":"changelog_1x/#version-110","text":"2013-06-15 Fix: Connection reuse was broken for most HTTPS connections due to a bug in the way the hostname verifier was selected. Fix: Locking bug in SpdyConnection. Fix: Ignore null header values (for compatibility with HttpURLConnection). Add URLStreamHandlerFactory support so that URL.openConnection() uses OkHttp. Expose the transport (\u201chttp/1.1\u201d, \u201cspdy/3\u201d, etc.) via magic request headers. Use X-Android-Transports to write the preferred transports and X-Android-Selected-Transport to read the negotiated transport.","title":"Version 1.1.0"},{"location":"changelog_1x/#version-102","text":"2013-05-11 Fix: Remove use of Java 6-only APIs. Fix: Properly handle exceptions from NetworkInterface when querying MTU. Fix: Ensure MTU has a reasonable default and upper-bound.","title":"Version 1.0.2"},{"location":"changelog_1x/#version-101","text":"2013-05-06 Correct casing of SSL in method names ( getSslSocketFactory / setSslSocketFactory ).","title":"Version 1.0.1"},{"location":"changelog_1x/#version-100","text":"2013-05-06 Initial release.","title":"Version 1.0.0"},{"location":"changelog_2x/","text":"OkHttp 2.x Change Log \u00b6 Version 2.7.5 \u00b6 2016-02-25 Fix: Change the certificate pinner to always build full chains. This prevents a potential crash when using certificate pinning with the Google Play Services security provider. Version 2.7.4 \u00b6 2016-02-07 Fix: Don\u2019t crash when finding the trust manager if the Play Services (GMS) security provider is installed. Fix: The previous release introduced a performance regression on Android, caused by looking up CA certificates. This is now fixed. Version 2.7.3 \u00b6 2016-02-06 Fix: Permit the trusted CA root to be pinned by CertificatePinner . Version 2.7.2 \u00b6 2016-01-07 Fix: Don\u2019t eagerly release stream allocations on cache hits. We might still need them to handle redirects. Version 2.7.1 \u00b6 2016-01-01 Fix: Don\u2019t do a health check on newly-created connections. This is unnecessary work that could put the client in an inconsistent state if the health check fails. Version 2.7.0 \u00b6 2015-12-13 Rewritten connection management. Previously OkHttp\u2019s connection pool managed both idle and active connections for HTTP/2, but only idle connections for HTTP/1.x. With this update the connection pool manages both idle and active connections for everything. OkHttp now detects and warns on connections that were allocated but never released, and will enforce HTTP/2 stream limits. This update also fixes Call.cancel() to not do I/O on the calling thread. Fix: Don\u2019t log gzipped data in the logging interceptor. Fix: Don\u2019t resolve DNS addresses when connecting through a SOCKS proxy. Fix: Drop the synthetic OkHttp-Selected-Protocol response header. Fix: Support 204 and 205 \u2018No Content\u2019 replies in the logging interceptor. New: Add Call.isExecuted() . Version 2.6.0 \u00b6 2015-11-22 New Logging Interceptor. The logging-interceptor subproject offers simple request and response logging. It may be configured to log headers and bodies for debugging. It requires this Maven dependency: <dependency> <groupId> com.squareup.okhttp </groupId> <artifactId> logging-interceptor </artifactId> <version> 2.6.0 </version> </dependency> Configure basic logging like this: HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor (); loggingInterceptor . setLevel ( HttpLoggingInterceptor . Level . BASIC ); client . networkInterceptors (). add ( loggingInterceptor ); Warning: Avoid Level.HEADERS and Level.BODY in production because they could leak passwords and other authentication credentials to insecure logs. WebSocket API now uses RequestBody and ResponseBody for messages. This is a backwards-incompatible API change. The DNS service is now pluggable. In some situations this may be useful to manually prioritize specific IP addresses. Fix: Don\u2019t throw when converting an HttpUrl to a java.net.URI . Previously URLs with special characters like | and [ would break when subjected to URI\u2019s overly-strict validation. Fix: Don\u2019t re-encode + as %20 in encoded URL query strings. OkHttp prefers %20 when doing its own encoding, but will retain + when that is provided. Fix: Enforce that callers call WebSocket.close() on IO errors. Error handling in WebSockets is significantly improved. Fix: Don\u2019t use SPDY/3 style header concatenation for HTTP/2 request headers. This could have corrupted requests where multiple headers had the same name, as in cookies. Fix: Reject bad characters in the URL hostname. Previously characters like \\0 would cause a late crash when building the request. Fix: Allow interceptors to change the request method. Fix: Don\u2019t use the request\u2019s User-Agent or Proxy-Authorization when connecting to an HTTPS server via an HTTP tunnel. The Proxy-Authorization header was being leaked to the origin server. Fix: Digits may be used in a URL scheme. Fix: Improve connection timeout recovery. Fix: Recover from getsockname crashes impacting Android releases prior to 4.2.2. Fix: Drop partial support for HTTP/1.0. Previously OkHttp would send HTTP/1.0 on connections after seeing a response with HTTP/1.0 . The fixed behavior is consistent with Firefox and Chrome. Fix: Allow a body in OPTIONS requests. Fix: Don\u2019t percent-encode non-ASCII characters in URL fragments. Fix: Handle null fragments. Fix: Don\u2019t crash on interceptors that throw IOException before a connection is attempted. New: Support WebDAV HTTP methods. New: Buffer WebSocket frames for better performance. New: Drop support for TLS_DHE_DSS_WITH_AES_128_CBC_SHA , our only remaining DSS cipher suite. This is consistent with Firefox and Chrome which have also dropped these cipher suite. Version 2.5.0 \u00b6 2015-08-25 Timeouts now default to 10 seconds. Previously we defaulted to never timing out, and that was a lousy policy. If establishing a connection, reading the next byte from a connection, or writing the next byte to a connection takes more than 10 seconds to complete, you\u2019ll need to adjust the timeouts manually. OkHttp now rejects request headers that contain invalid characters. This includes potential security problems (newline characters) as well as simple non-ASCII characters (including international characters and emoji). Call canceling is more reliable. We had a bug where a socket being connected wasn\u2019t being closed when the application used Call.cancel() . Changing a HttpUrl\u2019s scheme now tracks the default port. We had a bug where changing a URL from http to https would leave it on port 80. Okio has been updated to 1.6.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.6.0 </version> </dependency> New: Cache.initialize() . Call this on a background thread to eagerly initialize the response cache. New: Fold MockWebServerRule into MockWebServer . This makes it easier to write JUnit tests with MockWebServer . The MockWebServer library now depends on JUnit, though it continues to work with all testing frameworks. Fix: FormEncodingBuilder is now consistent with browsers in which characters it escapes. Previously we weren\u2019t percent-encoding commas, parens, and other characters. Fix: Relax FormEncodingBuilder to support building empty forms. Fix: Timeouts throw SocketTimeoutException , not InterruptedIOException . Fix: Change MockWebServer to use the same logic as OkHttp when determining whether an HTTP request permits a body. Fix: HttpUrl now uses the canonical form for IPv6 addresses. Fix: Use HttpUrl internally. Fix: Recover from Android 4.2.2 EBADF crashes. Fix: Don\u2019t crash with an IllegalStateException if an HTTP/2 or SPDY write fails, leaving the connection in an inconsistent state. Fix: Make sure the default user agent is ASCII. Version 2.4.0 \u00b6 2015-05-22 Forbid response bodies on HTTP 204 and 205 responses. Webservers that return such malformed responses will now trigger a ProtocolException in the client. WebSocketListener has incompatible changes. The onOpen() method is now called on the reader thread, so implementations must return before further websocket messages will be delivered. The onFailure() method now includes an HTTP response if one was returned. Version 2.4.0-RC1 \u00b6 2015-05-16 New HttpUrl API. It\u2019s like java.net.URL but good. Note that Request.Builder.url() now throws IllegalArgumentException on malformed URLs. (Previous releases would throw a MalformedURLException when calling a malformed URL.) We\u2019ve improved connect failure recovery. We now differentiate between setup, connecting, and connected and implement appropriate recovery rules for each. This changes Address to no longer use ConnectionSpec . (This is an incompatible API change). FormEncodingBuilder now uses %20 instead of + for encoded spaces. Both are permitted-by-spec, but %20 requires fewer special cases. Okio has been updated to 1.4.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.4.0 </version> </dependency> Request.Builder no longer accepts null if a request body is required. Passing null will now fail for request methods that require a body. Instead use an empty body such as this one: RequestBody . create ( null , new byte [ 0 ] ); CertificatePinner now supports wildcard hostnames. As always with certificate pinning, you must be very careful to avoid bricking your app. You\u2019ll need to pin both the top-level domain and the *. domain for full coverage. client . setCertificatePinner ( new CertificatePinner . Builder () . add ( \"publicobject.com\" , \"sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=\" ) . add ( \"*.publicobject.com\" , \"sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=\" ) . add ( \"publicobject.com\" , \"sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=\" ) . add ( \"*.publicobject.com\" , \"sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=\" ) . add ( \"publicobject.com\" , \"sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=\" ) . add ( \"*.publicobject.com\" , \"sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=\" ) . add ( \"publicobject.com\" , \"sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=\" ) . add ( \"*.publicobject.com\" , \"sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=\" ) . build ()); Interceptors lists are now deep-copied by OkHttpClient.clone() . Previously clones shared interceptors, which made it difficult to customize the interceptors on a request-by-request basis. New: Headers.toMultimap() . New: RequestBody.create(MediaType, ByteString) . New: ConnectionSpec.isCompatible(SSLSocket) . New: Dispatcher.getQueuedCallCount() and Dispatcher.getRunningCallCount() . These can be useful in diagnostics. Fix: OkHttp no longer shares timeouts between pooled connections. This was causing some applications to crash when connections were reused. Fix: OkApacheClient now allows an empty PUT and POST . Fix: Websockets no longer rebuffer socket streams. Fix: Websockets are now better at handling close frames. Fix: Content type matching is now case insensitive. Fix: Vary headers are not lost with android.net.http.HttpResponseCache . Fix: HTTP/2 wasn\u2019t enforcing stream timeouts when writing the underlying connection. Now it is. Fix: Never return null on call.proceed() . This was a bug in call cancelation. Fix: When a network interceptor mutates a request, that change is now reflected in Response.networkResponse() . Fix: Badly-behaving caches now throw a checked exception instead of a NullPointerException . Fix: Better handling of uncaught exceptions in MockWebServer with HTTP/2. Version 2.3.0 \u00b6 2015-03-16 HTTP/2 support. We\u2019ve done interop testing and haven\u2019t seen any problems. HTTP/2 support has been a big effort and we\u2019re particularly thankful to Adrian Cole who has helped us to reach this milestone. RC4 cipher suites are no longer supported by default. To connect to old, obsolete servers relying on these cipher suites, you must create a custom ConnectionSpec . Beta WebSockets support. . The okhttp-ws subproject offers a new websockets client. Please try it out! When it\u2019s ready we intend to include it with the core OkHttp library. Okio updated to 1.3.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.3.0 </version> </dependency> Fix: improve parallelism of async requests. OkHttp\u2019s Dispatcher had a misconfigured ExecutorService that limited the number of worker threads. If you\u2019re using Call.enqueue() this update should significantly improve request concurrency. Fix: Lazily initialize the response cache. This avoids strict mode warnings when initializing OkHttp on Android\u2018s main thread. Fix: Disable ALPN on Android 4.4. That release of the feature was unstable and prone to native crashes in the underlying OpenSSL code. Fix: Don\u2019t send both If-None-Match and If-Modified-Since cache headers when both are applicable. Fix: Fail early when a port is out of range. Fix: Offer Content-Length headers for multipart request bodies. Fix: Throw UnknownServiceException if a cleartext connection is attempted when explicitly forbidden. Fix: Throw a SSLPeerUnverifiedException when host verification fails. Fix: MockWebServer explicitly closes sockets. (On some Android releases, closing the input stream and output stream of a socket is not sufficient. Fix: Buffer outgoing HTTP/2 frames to limit how many outgoing frames are created. Fix: Avoid crashing when cache writing fails due to a full disk. Fix: Improve caching of private responses. Fix: Update cache-by-default response codes. Fix: Reused Request.Builder instances no longer hold stale URL fields. New: ConnectionSpec can now be configured to use the SSL socket\u2019s default cipher suites. To use, set the cipher suites to null . New: Support DELETE with a request body. New: Headers.of(Map) creates headers from a Map. Version 2.2.0 \u00b6 2014-12-30 RequestBody.contentLength() now throws IOException . This is a source-incompatible change. If you have code that calls RequestBody.contentLength() , your compile will break with this update. The change is binary-compatible, however: code compiled for OkHttp 2.0 and 2.1 will continue to work with this update. COMPATIBLE_TLS no longer supports SSLv3. In response to the POODLE vulnerability, OkHttp no longer offers SSLv3 when negotiation an HTTPS connection. If you continue to need to connect to webservers running SSLv3, you must manually configure your own ConnectionSpec . OkHttp now offers interceptors. Interceptors are a powerful mechanism that can monitor, rewrite, and retry calls. The interceptors doc is a full introduction to this new API. New: APIs to iterate and selectively clear the response cache. New: Support for SOCKS proxies. New: Support for TLS_FALLBACK_SCSV . New: Update HTTP/2 support to h2-16 and hpack-10 . New: APIs to prevent retrying non-idempotent requests. Fix: Drop NPN support. Going forward we support ALPN only. Fix: The hostname verifier is now strict. This is consistent with the hostname verifier in modern browsers. Fix: Improve CONNECT handling for misbehaving HTTP proxies. Fix: Don\u2019t retry requests that failed due to timeouts. Fix: Cache 302s and 308s that include appropriate response headers. Fix: Improve pooling of connections that use proxy selectors. Fix: Don\u2019t leak connections when using ALPN on the desktop. Fix: Update Jetty ALPN to 7.1.2.v20141202 (Java 7) and 8.1.2.v20141202 (Java 8). This fixes a bug in resumed TLS sessions where the wrong protocol could be selected. Fix: Don\u2019t crash in SPDY and HTTP/2 when disconnecting before connecting. Fix: Avoid a reverse DNS-lookup for a numeric proxy address Fix: Resurrect http/2 frame logging. Fix: Limit to 20 authorization attempts. Version 2.1.0 \u00b6 2014-11-11 New: Typesafe APIs for interacting with cipher suites and TLS versions. Fix: Don\u2019t crash when mixing authorization challenges with upload retries. Version 2.1.0-RC1 \u00b6 2014-11-04 OkHttp now caches private responses . We\u2019ve changed from a shared cache to a private cache, and will now store responses that use an Authorization header. This means OkHttp\u2019s cache shouldn\u2019t be used on middleboxes that sit between user agents and the origin server. TLS configuration updated. OkHttp now explicitly enables TLSv1.2, TLSv1.1 and TLSv1.0 where they are supported. It will continue to perform only one fallback, to SSLv3. Applications can now configure this with the ConnectionSpec class. To disable TLS fallback: client . setConnectionSpecs ( Arrays . asList ( ConnectionSpec . MODERN_TLS , ConnectionSpec . CLEARTEXT )); To disable cleartext connections, permitting https URLs only: client . setConnectionSpecs ( Arrays . asList ( ConnectionSpec . MODERN_TLS , ConnectionSpec . COMPATIBLE_TLS )); New cipher suites. Please confirm that your webservers are reachable with this limited set of cipher suites. Android Name Version TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 5.0 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 5.0 TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 5.0 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA 4.0 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA 4.0 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA 4.0 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA 4.0 TLS_ECDHE_ECDSA_WITH_RC4_128_SHA 4.0 TLS_ECDHE_RSA_WITH_RC4_128_SHA 4.0 TLS_DHE_RSA_WITH_AES_128_CBC_SHA 2.3 TLS_DHE_DSS_WITH_AES_128_CBC_SHA 2.3 TLS_DHE_RSA_WITH_AES_256_CBC_SHA 2.3 TLS_RSA_WITH_AES_128_GCM_SHA256 5.0 TLS_RSA_WITH_AES_128_CBC_SHA 2.3 TLS_RSA_WITH_AES_256_CBC_SHA 2.3 SSL_RSA_WITH_3DES_EDE_CBC_SHA 2.3 (Deprecated in 5.0) SSL_RSA_WITH_RC4_128_SHA 2.3 SSL_RSA_WITH_RC4_128_MD5 2.3 (Deprecated in 5.0) Okio updated to 1.0.1. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.0.1 </version> </dependency> New APIs to permit easy certificate pinning. Be warned, certificate pinning is dangerous and could prevent your application from trusting your server! Cache improvements. This release fixes some severe cache problems including a bug where the cache could be corrupted upon certain access patterns. We also fixed a bug where the cache was being cleared due to a corrupted journal. We\u2019ve added APIs to configure a request\u2019s Cache-Control headers, and to manually clear the cache. Request cancellation fixes. This update fixes a bug where synchronous requests couldn\u2019t be canceled by tag. This update avoids crashing when onResponse() throws an IOException . That failure will now be logged instead of notifying the thread\u2019s uncaught exception handler. We\u2019ve added a new API, Call.isCanceled() to check if a call has been canceled. New: Update MultipartBuilder to support content length. New: Make it possible to mock OkHttpClient and Call . New: Update to h2-14 and hpack-9. New: OkHttp includes a user-agent by default, like okhttp/2.1.0-RC1 . Fix: Handle response code 308 Permanent Redirect . Fix: Don\u2019t skip the callback if a call is canceled. Fix: Permit hostnames with underscores. Fix: Permit overriding the content-type in OkApacheClient . Fix: Use the socket factory for direct connections. Fix: Honor OkUrlFactory APIs that disable redirects. Fix: Don\u2019t crash on concurrent modification of SPDY SPDY settings. Version 2.0.0 \u00b6 This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice on upgrading from 1.x to 2.x. 2014-06-21 API Change : Use IOException in Callback.onFailure() . This is a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which used Throwable . Fix: Fixed a caching bug where we weren\u2019t storing rewritten request headers like Accept-Encoding . Fix: Fixed bugs in handling the SPDY window size. This was stalling certain large downloads Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.) Version 2.0.0-RC2 \u00b6 2014-06-11 This update fixes problems in 2.0.0-RC1. Read the 2.0.0-RC1 changes for advice on upgrading from 1.x to 2.x. Fix: Don\u2019t leak connections! There was a regression in 2.0.0-RC1 where connections were neither closed nor pooled. Fix: Revert builder-style return types from OkHttpClient\u2019s timeout methods for binary compatibility with OkHttp 1.x. Fix: Don\u2019t skip client stream 1 on SPDY/3.1. This fixes SPDY connectivity to https://google.com , which doesn\u2019t follow the SPDY/3.1 spec! Fix: Always configure NPN headers. This fixes connectivity to https://facebook.com when SPDY and HTTP/2 are both disabled. Otherwise an unexpected NPN response is received and OkHttp crashes. Fix: Write continuation frames when HPACK data is larger than 16383 bytes. Fix: Don\u2019t drop uncaught exceptions thrown in async calls. Fix: Throw an exception eagerly when a request body is not legal. Previously we ignored the problem at request-building time, only to crash later with a NullPointerException . Fix: Include a backwards-compatible OkHttp-Response-Source header with OkUrlFactory responses. Fix: Don\u2019t include a default User-Agent header in requests made with the Call API. Requests made with OkUrlFactory will continue to have a default user agent. New: Guava-like API to create headers: Headers headers = Headers . of ( name1 , value1 , name2 , value2 , ...). New: Make the content-type header optional for request bodies. New: Response.isSuccessful() is a convenient API to check response codes. New: The response body can now be read outside of the callback. Response bodies must always be closed, otherwise they will leak connections! New: APIs to create multipart request bodies ( MultipartBuilder ) and form encoding bodies ( FormEncodingBuilder ). Version 2.0.0-RC1 \u00b6 2014-05-23 OkHttp 2 is designed around a new API that is true to HTTP, with classes for requests, responses, headers, and calls. It uses modern Java patterns like immutability and chained builders. The API now offers asynchronous callbacks in addition to synchronous blocking calls. API Changes \u00b6 New Request and Response types, each with their own builder. There\u2019s also a RequestBody class to write the request body to the network and a ResponseBody to read the response body from the network. The standalone Headers class offers full access to the HTTP headers. Okio dependency added. OkHttp now depends on Okio , an I/O library that makes it easier to access, store and process data. Using this library internally makes OkHttp faster while consuming less memory. You can write a RequestBody as an Okio BufferedSink and a ResponseBody as an Okio BufferedSource . Standard InputStream and OutputStream access is also available. New Call and Callback types execute requests and receive their responses. Both types of calls can be canceled via the Call or the OkHttpClient . URLConnection support has moved to the okhttp-urlconnection module. If you\u2019re upgrading from 1.x, this change will impact you. You will need to add the okhttp-urlconnection module to your project and use the OkUrlFactory to create new instances of HttpURLConnection : // OkHttp 1.x: HttpURLConnection connection = client . open ( url ); // OkHttp 2.x: HttpURLConnection connection = new OkUrlFactory ( client ). open ( url ); Custom caches are no longer supported. In OkHttp 1.x it was possible to define your own response cache with the java.net.ResponseCache and OkHttp\u2019s OkResponseCache interfaces. Both of these APIs have been dropped. In OkHttp 2 the built-in disk cache is the only supported response cache. HttpResponseCache has been renamed to Cache. Install it with OkHttpClient.setCache(...) instead of OkHttpClient.setResponseCache(...) . OkAuthenticator has been replaced with Authenticator. This new authenticator has access to the full incoming response and can respond with whichever followup request is appropriate. The Challenge class is now a top-level class and Credential is replaced with a utility class called Credentials . OkHttpClient.getFollowProtocolRedirects() renamed to getFollowSslRedirects() . We reserve the word protocol for the HTTP version being used (HTTP/1.1, HTTP/2). The old name of this method was misleading; it was always used to configure redirects between https:// and http:// schemes. RouteDatabase is no longer public API. OkHttp continues to track which routes have failed but this is no exposed in the API. ResponseSource is gone. This enum exposed whether a response came from the cache, network, or both. OkHttp 2 offers more detail with raw access to the cache and network responses in the new Response class. TunnelRequest is gone. It specified how to connect to an HTTP proxy. OkHttp 2 uses the new Request class for this. Dispatcher is a new class that manages the queue of asynchronous calls. It implements limits on total in-flight calls and in-flight calls per host. Implementation changes \u00b6 Support Android TrafficStats socket tagging. Drop authentication headers on redirect. Added support for compressed data frames. Process push promise callbacks in order. Update to http/2 draft 12. Update to HPACK draft 07. Add ALPN support. Maven will use ALPN on OpenJDK 8. Update NPN dependency to target jdk7u60-b13 and Oracle jdk7u55-b13 . Ensure SPDY variants support zero-length DELETE and POST. Prevent leaking a cache item\u2019s InputStreams when metadata read fails. Use a string to identify TLS versions in routes. Add frame logger for HTTP/2. Replacing httpMinorVersion with Protocol . Expose HTTP/1.0 as a potential protocol. Use Protocol to describe framing. Implement write timeouts for HTTP/1.1 streams. Avoid use of SPDY stream ID 1, as that\u2019s typically used for UPGRADE. Support OAuth in Authenticator . Permit a dangling semicolon in media type parsing. Version 1.x \u00b6 Change log","title":"Changelog 2x"},{"location":"changelog_2x/#okhttp-2x-change-log","text":"","title":"OkHttp 2.x Change Log"},{"location":"changelog_2x/#version-275","text":"2016-02-25 Fix: Change the certificate pinner to always build full chains. This prevents a potential crash when using certificate pinning with the Google Play Services security provider.","title":"Version 2.7.5"},{"location":"changelog_2x/#version-274","text":"2016-02-07 Fix: Don\u2019t crash when finding the trust manager if the Play Services (GMS) security provider is installed. Fix: The previous release introduced a performance regression on Android, caused by looking up CA certificates. This is now fixed.","title":"Version 2.7.4"},{"location":"changelog_2x/#version-273","text":"2016-02-06 Fix: Permit the trusted CA root to be pinned by CertificatePinner .","title":"Version 2.7.3"},{"location":"changelog_2x/#version-272","text":"2016-01-07 Fix: Don\u2019t eagerly release stream allocations on cache hits. We might still need them to handle redirects.","title":"Version 2.7.2"},{"location":"changelog_2x/#version-271","text":"2016-01-01 Fix: Don\u2019t do a health check on newly-created connections. This is unnecessary work that could put the client in an inconsistent state if the health check fails.","title":"Version 2.7.1"},{"location":"changelog_2x/#version-270","text":"2015-12-13 Rewritten connection management. Previously OkHttp\u2019s connection pool managed both idle and active connections for HTTP/2, but only idle connections for HTTP/1.x. With this update the connection pool manages both idle and active connections for everything. OkHttp now detects and warns on connections that were allocated but never released, and will enforce HTTP/2 stream limits. This update also fixes Call.cancel() to not do I/O on the calling thread. Fix: Don\u2019t log gzipped data in the logging interceptor. Fix: Don\u2019t resolve DNS addresses when connecting through a SOCKS proxy. Fix: Drop the synthetic OkHttp-Selected-Protocol response header. Fix: Support 204 and 205 \u2018No Content\u2019 replies in the logging interceptor. New: Add Call.isExecuted() .","title":"Version 2.7.0"},{"location":"changelog_2x/#version-260","text":"2015-11-22 New Logging Interceptor. The logging-interceptor subproject offers simple request and response logging. It may be configured to log headers and bodies for debugging. It requires this Maven dependency: <dependency> <groupId> com.squareup.okhttp </groupId> <artifactId> logging-interceptor </artifactId> <version> 2.6.0 </version> </dependency> Configure basic logging like this: HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor (); loggingInterceptor . setLevel ( HttpLoggingInterceptor . Level . BASIC ); client . networkInterceptors (). add ( loggingInterceptor ); Warning: Avoid Level.HEADERS and Level.BODY in production because they could leak passwords and other authentication credentials to insecure logs. WebSocket API now uses RequestBody and ResponseBody for messages. This is a backwards-incompatible API change. The DNS service is now pluggable. In some situations this may be useful to manually prioritize specific IP addresses. Fix: Don\u2019t throw when converting an HttpUrl to a java.net.URI . Previously URLs with special characters like | and [ would break when subjected to URI\u2019s overly-strict validation. Fix: Don\u2019t re-encode + as %20 in encoded URL query strings. OkHttp prefers %20 when doing its own encoding, but will retain + when that is provided. Fix: Enforce that callers call WebSocket.close() on IO errors. Error handling in WebSockets is significantly improved. Fix: Don\u2019t use SPDY/3 style header concatenation for HTTP/2 request headers. This could have corrupted requests where multiple headers had the same name, as in cookies. Fix: Reject bad characters in the URL hostname. Previously characters like \\0 would cause a late crash when building the request. Fix: Allow interceptors to change the request method. Fix: Don\u2019t use the request\u2019s User-Agent or Proxy-Authorization when connecting to an HTTPS server via an HTTP tunnel. The Proxy-Authorization header was being leaked to the origin server. Fix: Digits may be used in a URL scheme. Fix: Improve connection timeout recovery. Fix: Recover from getsockname crashes impacting Android releases prior to 4.2.2. Fix: Drop partial support for HTTP/1.0. Previously OkHttp would send HTTP/1.0 on connections after seeing a response with HTTP/1.0 . The fixed behavior is consistent with Firefox and Chrome. Fix: Allow a body in OPTIONS requests. Fix: Don\u2019t percent-encode non-ASCII characters in URL fragments. Fix: Handle null fragments. Fix: Don\u2019t crash on interceptors that throw IOException before a connection is attempted. New: Support WebDAV HTTP methods. New: Buffer WebSocket frames for better performance. New: Drop support for TLS_DHE_DSS_WITH_AES_128_CBC_SHA , our only remaining DSS cipher suite. This is consistent with Firefox and Chrome which have also dropped these cipher suite.","title":"Version 2.6.0"},{"location":"changelog_2x/#version-250","text":"2015-08-25 Timeouts now default to 10 seconds. Previously we defaulted to never timing out, and that was a lousy policy. If establishing a connection, reading the next byte from a connection, or writing the next byte to a connection takes more than 10 seconds to complete, you\u2019ll need to adjust the timeouts manually. OkHttp now rejects request headers that contain invalid characters. This includes potential security problems (newline characters) as well as simple non-ASCII characters (including international characters and emoji). Call canceling is more reliable. We had a bug where a socket being connected wasn\u2019t being closed when the application used Call.cancel() . Changing a HttpUrl\u2019s scheme now tracks the default port. We had a bug where changing a URL from http to https would leave it on port 80. Okio has been updated to 1.6.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.6.0 </version> </dependency> New: Cache.initialize() . Call this on a background thread to eagerly initialize the response cache. New: Fold MockWebServerRule into MockWebServer . This makes it easier to write JUnit tests with MockWebServer . The MockWebServer library now depends on JUnit, though it continues to work with all testing frameworks. Fix: FormEncodingBuilder is now consistent with browsers in which characters it escapes. Previously we weren\u2019t percent-encoding commas, parens, and other characters. Fix: Relax FormEncodingBuilder to support building empty forms. Fix: Timeouts throw SocketTimeoutException , not InterruptedIOException . Fix: Change MockWebServer to use the same logic as OkHttp when determining whether an HTTP request permits a body. Fix: HttpUrl now uses the canonical form for IPv6 addresses. Fix: Use HttpUrl internally. Fix: Recover from Android 4.2.2 EBADF crashes. Fix: Don\u2019t crash with an IllegalStateException if an HTTP/2 or SPDY write fails, leaving the connection in an inconsistent state. Fix: Make sure the default user agent is ASCII.","title":"Version 2.5.0"},{"location":"changelog_2x/#version-240","text":"2015-05-22 Forbid response bodies on HTTP 204 and 205 responses. Webservers that return such malformed responses will now trigger a ProtocolException in the client. WebSocketListener has incompatible changes. The onOpen() method is now called on the reader thread, so implementations must return before further websocket messages will be delivered. The onFailure() method now includes an HTTP response if one was returned.","title":"Version 2.4.0"},{"location":"changelog_2x/#version-240-rc1","text":"2015-05-16 New HttpUrl API. It\u2019s like java.net.URL but good. Note that Request.Builder.url() now throws IllegalArgumentException on malformed URLs. (Previous releases would throw a MalformedURLException when calling a malformed URL.) We\u2019ve improved connect failure recovery. We now differentiate between setup, connecting, and connected and implement appropriate recovery rules for each. This changes Address to no longer use ConnectionSpec . (This is an incompatible API change). FormEncodingBuilder now uses %20 instead of + for encoded spaces. Both are permitted-by-spec, but %20 requires fewer special cases. Okio has been updated to 1.4.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.4.0 </version> </dependency> Request.Builder no longer accepts null if a request body is required. Passing null will now fail for request methods that require a body. Instead use an empty body such as this one: RequestBody . create ( null , new byte [ 0 ] ); CertificatePinner now supports wildcard hostnames. As always with certificate pinning, you must be very careful to avoid bricking your app. You\u2019ll need to pin both the top-level domain and the *. domain for full coverage. client . setCertificatePinner ( new CertificatePinner . Builder () . add ( \"publicobject.com\" , \"sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=\" ) . add ( \"*.publicobject.com\" , \"sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=\" ) . add ( \"publicobject.com\" , \"sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=\" ) . add ( \"*.publicobject.com\" , \"sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=\" ) . add ( \"publicobject.com\" , \"sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=\" ) . add ( \"*.publicobject.com\" , \"sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=\" ) . add ( \"publicobject.com\" , \"sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=\" ) . add ( \"*.publicobject.com\" , \"sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=\" ) . build ()); Interceptors lists are now deep-copied by OkHttpClient.clone() . Previously clones shared interceptors, which made it difficult to customize the interceptors on a request-by-request basis. New: Headers.toMultimap() . New: RequestBody.create(MediaType, ByteString) . New: ConnectionSpec.isCompatible(SSLSocket) . New: Dispatcher.getQueuedCallCount() and Dispatcher.getRunningCallCount() . These can be useful in diagnostics. Fix: OkHttp no longer shares timeouts between pooled connections. This was causing some applications to crash when connections were reused. Fix: OkApacheClient now allows an empty PUT and POST . Fix: Websockets no longer rebuffer socket streams. Fix: Websockets are now better at handling close frames. Fix: Content type matching is now case insensitive. Fix: Vary headers are not lost with android.net.http.HttpResponseCache . Fix: HTTP/2 wasn\u2019t enforcing stream timeouts when writing the underlying connection. Now it is. Fix: Never return null on call.proceed() . This was a bug in call cancelation. Fix: When a network interceptor mutates a request, that change is now reflected in Response.networkResponse() . Fix: Badly-behaving caches now throw a checked exception instead of a NullPointerException . Fix: Better handling of uncaught exceptions in MockWebServer with HTTP/2.","title":"Version 2.4.0-RC1"},{"location":"changelog_2x/#version-230","text":"2015-03-16 HTTP/2 support. We\u2019ve done interop testing and haven\u2019t seen any problems. HTTP/2 support has been a big effort and we\u2019re particularly thankful to Adrian Cole who has helped us to reach this milestone. RC4 cipher suites are no longer supported by default. To connect to old, obsolete servers relying on these cipher suites, you must create a custom ConnectionSpec . Beta WebSockets support. . The okhttp-ws subproject offers a new websockets client. Please try it out! When it\u2019s ready we intend to include it with the core OkHttp library. Okio updated to 1.3.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.3.0 </version> </dependency> Fix: improve parallelism of async requests. OkHttp\u2019s Dispatcher had a misconfigured ExecutorService that limited the number of worker threads. If you\u2019re using Call.enqueue() this update should significantly improve request concurrency. Fix: Lazily initialize the response cache. This avoids strict mode warnings when initializing OkHttp on Android\u2018s main thread. Fix: Disable ALPN on Android 4.4. That release of the feature was unstable and prone to native crashes in the underlying OpenSSL code. Fix: Don\u2019t send both If-None-Match and If-Modified-Since cache headers when both are applicable. Fix: Fail early when a port is out of range. Fix: Offer Content-Length headers for multipart request bodies. Fix: Throw UnknownServiceException if a cleartext connection is attempted when explicitly forbidden. Fix: Throw a SSLPeerUnverifiedException when host verification fails. Fix: MockWebServer explicitly closes sockets. (On some Android releases, closing the input stream and output stream of a socket is not sufficient. Fix: Buffer outgoing HTTP/2 frames to limit how many outgoing frames are created. Fix: Avoid crashing when cache writing fails due to a full disk. Fix: Improve caching of private responses. Fix: Update cache-by-default response codes. Fix: Reused Request.Builder instances no longer hold stale URL fields. New: ConnectionSpec can now be configured to use the SSL socket\u2019s default cipher suites. To use, set the cipher suites to null . New: Support DELETE with a request body. New: Headers.of(Map) creates headers from a Map.","title":"Version 2.3.0"},{"location":"changelog_2x/#version-220","text":"2014-12-30 RequestBody.contentLength() now throws IOException . This is a source-incompatible change. If you have code that calls RequestBody.contentLength() , your compile will break with this update. The change is binary-compatible, however: code compiled for OkHttp 2.0 and 2.1 will continue to work with this update. COMPATIBLE_TLS no longer supports SSLv3. In response to the POODLE vulnerability, OkHttp no longer offers SSLv3 when negotiation an HTTPS connection. If you continue to need to connect to webservers running SSLv3, you must manually configure your own ConnectionSpec . OkHttp now offers interceptors. Interceptors are a powerful mechanism that can monitor, rewrite, and retry calls. The interceptors doc is a full introduction to this new API. New: APIs to iterate and selectively clear the response cache. New: Support for SOCKS proxies. New: Support for TLS_FALLBACK_SCSV . New: Update HTTP/2 support to h2-16 and hpack-10 . New: APIs to prevent retrying non-idempotent requests. Fix: Drop NPN support. Going forward we support ALPN only. Fix: The hostname verifier is now strict. This is consistent with the hostname verifier in modern browsers. Fix: Improve CONNECT handling for misbehaving HTTP proxies. Fix: Don\u2019t retry requests that failed due to timeouts. Fix: Cache 302s and 308s that include appropriate response headers. Fix: Improve pooling of connections that use proxy selectors. Fix: Don\u2019t leak connections when using ALPN on the desktop. Fix: Update Jetty ALPN to 7.1.2.v20141202 (Java 7) and 8.1.2.v20141202 (Java 8). This fixes a bug in resumed TLS sessions where the wrong protocol could be selected. Fix: Don\u2019t crash in SPDY and HTTP/2 when disconnecting before connecting. Fix: Avoid a reverse DNS-lookup for a numeric proxy address Fix: Resurrect http/2 frame logging. Fix: Limit to 20 authorization attempts.","title":"Version 2.2.0"},{"location":"changelog_2x/#version-210","text":"2014-11-11 New: Typesafe APIs for interacting with cipher suites and TLS versions. Fix: Don\u2019t crash when mixing authorization challenges with upload retries.","title":"Version 2.1.0"},{"location":"changelog_2x/#version-210-rc1","text":"2014-11-04 OkHttp now caches private responses . We\u2019ve changed from a shared cache to a private cache, and will now store responses that use an Authorization header. This means OkHttp\u2019s cache shouldn\u2019t be used on middleboxes that sit between user agents and the origin server. TLS configuration updated. OkHttp now explicitly enables TLSv1.2, TLSv1.1 and TLSv1.0 where they are supported. It will continue to perform only one fallback, to SSLv3. Applications can now configure this with the ConnectionSpec class. To disable TLS fallback: client . setConnectionSpecs ( Arrays . asList ( ConnectionSpec . MODERN_TLS , ConnectionSpec . CLEARTEXT )); To disable cleartext connections, permitting https URLs only: client . setConnectionSpecs ( Arrays . asList ( ConnectionSpec . MODERN_TLS , ConnectionSpec . COMPATIBLE_TLS )); New cipher suites. Please confirm that your webservers are reachable with this limited set of cipher suites. Android Name Version TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 5.0 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 5.0 TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 5.0 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA 4.0 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA 4.0 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA 4.0 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA 4.0 TLS_ECDHE_ECDSA_WITH_RC4_128_SHA 4.0 TLS_ECDHE_RSA_WITH_RC4_128_SHA 4.0 TLS_DHE_RSA_WITH_AES_128_CBC_SHA 2.3 TLS_DHE_DSS_WITH_AES_128_CBC_SHA 2.3 TLS_DHE_RSA_WITH_AES_256_CBC_SHA 2.3 TLS_RSA_WITH_AES_128_GCM_SHA256 5.0 TLS_RSA_WITH_AES_128_CBC_SHA 2.3 TLS_RSA_WITH_AES_256_CBC_SHA 2.3 SSL_RSA_WITH_3DES_EDE_CBC_SHA 2.3 (Deprecated in 5.0) SSL_RSA_WITH_RC4_128_SHA 2.3 SSL_RSA_WITH_RC4_128_MD5 2.3 (Deprecated in 5.0) Okio updated to 1.0.1. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.0.1 </version> </dependency> New APIs to permit easy certificate pinning. Be warned, certificate pinning is dangerous and could prevent your application from trusting your server! Cache improvements. This release fixes some severe cache problems including a bug where the cache could be corrupted upon certain access patterns. We also fixed a bug where the cache was being cleared due to a corrupted journal. We\u2019ve added APIs to configure a request\u2019s Cache-Control headers, and to manually clear the cache. Request cancellation fixes. This update fixes a bug where synchronous requests couldn\u2019t be canceled by tag. This update avoids crashing when onResponse() throws an IOException . That failure will now be logged instead of notifying the thread\u2019s uncaught exception handler. We\u2019ve added a new API, Call.isCanceled() to check if a call has been canceled. New: Update MultipartBuilder to support content length. New: Make it possible to mock OkHttpClient and Call . New: Update to h2-14 and hpack-9. New: OkHttp includes a user-agent by default, like okhttp/2.1.0-RC1 . Fix: Handle response code 308 Permanent Redirect . Fix: Don\u2019t skip the callback if a call is canceled. Fix: Permit hostnames with underscores. Fix: Permit overriding the content-type in OkApacheClient . Fix: Use the socket factory for direct connections. Fix: Honor OkUrlFactory APIs that disable redirects. Fix: Don\u2019t crash on concurrent modification of SPDY SPDY settings.","title":"Version 2.1.0-RC1"},{"location":"changelog_2x/#version-200","text":"This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice on upgrading from 1.x to 2.x. 2014-06-21 API Change : Use IOException in Callback.onFailure() . This is a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which used Throwable . Fix: Fixed a caching bug where we weren\u2019t storing rewritten request headers like Accept-Encoding . Fix: Fixed bugs in handling the SPDY window size. This was stalling certain large downloads Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.)","title":"Version 2.0.0"},{"location":"changelog_2x/#version-200-rc2","text":"2014-06-11 This update fixes problems in 2.0.0-RC1. Read the 2.0.0-RC1 changes for advice on upgrading from 1.x to 2.x. Fix: Don\u2019t leak connections! There was a regression in 2.0.0-RC1 where connections were neither closed nor pooled. Fix: Revert builder-style return types from OkHttpClient\u2019s timeout methods for binary compatibility with OkHttp 1.x. Fix: Don\u2019t skip client stream 1 on SPDY/3.1. This fixes SPDY connectivity to https://google.com , which doesn\u2019t follow the SPDY/3.1 spec! Fix: Always configure NPN headers. This fixes connectivity to https://facebook.com when SPDY and HTTP/2 are both disabled. Otherwise an unexpected NPN response is received and OkHttp crashes. Fix: Write continuation frames when HPACK data is larger than 16383 bytes. Fix: Don\u2019t drop uncaught exceptions thrown in async calls. Fix: Throw an exception eagerly when a request body is not legal. Previously we ignored the problem at request-building time, only to crash later with a NullPointerException . Fix: Include a backwards-compatible OkHttp-Response-Source header with OkUrlFactory responses. Fix: Don\u2019t include a default User-Agent header in requests made with the Call API. Requests made with OkUrlFactory will continue to have a default user agent. New: Guava-like API to create headers: Headers headers = Headers . of ( name1 , value1 , name2 , value2 , ...). New: Make the content-type header optional for request bodies. New: Response.isSuccessful() is a convenient API to check response codes. New: The response body can now be read outside of the callback. Response bodies must always be closed, otherwise they will leak connections! New: APIs to create multipart request bodies ( MultipartBuilder ) and form encoding bodies ( FormEncodingBuilder ).","title":"Version 2.0.0-RC2"},{"location":"changelog_2x/#version-200-rc1","text":"2014-05-23 OkHttp 2 is designed around a new API that is true to HTTP, with classes for requests, responses, headers, and calls. It uses modern Java patterns like immutability and chained builders. The API now offers asynchronous callbacks in addition to synchronous blocking calls.","title":"Version 2.0.0-RC1"},{"location":"changelog_2x/#api-changes","text":"New Request and Response types, each with their own builder. There\u2019s also a RequestBody class to write the request body to the network and a ResponseBody to read the response body from the network. The standalone Headers class offers full access to the HTTP headers. Okio dependency added. OkHttp now depends on Okio , an I/O library that makes it easier to access, store and process data. Using this library internally makes OkHttp faster while consuming less memory. You can write a RequestBody as an Okio BufferedSink and a ResponseBody as an Okio BufferedSource . Standard InputStream and OutputStream access is also available. New Call and Callback types execute requests and receive their responses. Both types of calls can be canceled via the Call or the OkHttpClient . URLConnection support has moved to the okhttp-urlconnection module. If you\u2019re upgrading from 1.x, this change will impact you. You will need to add the okhttp-urlconnection module to your project and use the OkUrlFactory to create new instances of HttpURLConnection : // OkHttp 1.x: HttpURLConnection connection = client . open ( url ); // OkHttp 2.x: HttpURLConnection connection = new OkUrlFactory ( client ). open ( url ); Custom caches are no longer supported. In OkHttp 1.x it was possible to define your own response cache with the java.net.ResponseCache and OkHttp\u2019s OkResponseCache interfaces. Both of these APIs have been dropped. In OkHttp 2 the built-in disk cache is the only supported response cache. HttpResponseCache has been renamed to Cache. Install it with OkHttpClient.setCache(...) instead of OkHttpClient.setResponseCache(...) . OkAuthenticator has been replaced with Authenticator. This new authenticator has access to the full incoming response and can respond with whichever followup request is appropriate. The Challenge class is now a top-level class and Credential is replaced with a utility class called Credentials . OkHttpClient.getFollowProtocolRedirects() renamed to getFollowSslRedirects() . We reserve the word protocol for the HTTP version being used (HTTP/1.1, HTTP/2). The old name of this method was misleading; it was always used to configure redirects between https:// and http:// schemes. RouteDatabase is no longer public API. OkHttp continues to track which routes have failed but this is no exposed in the API. ResponseSource is gone. This enum exposed whether a response came from the cache, network, or both. OkHttp 2 offers more detail with raw access to the cache and network responses in the new Response class. TunnelRequest is gone. It specified how to connect to an HTTP proxy. OkHttp 2 uses the new Request class for this. Dispatcher is a new class that manages the queue of asynchronous calls. It implements limits on total in-flight calls and in-flight calls per host.","title":"API Changes"},{"location":"changelog_2x/#implementation-changes","text":"Support Android TrafficStats socket tagging. Drop authentication headers on redirect. Added support for compressed data frames. Process push promise callbacks in order. Update to http/2 draft 12. Update to HPACK draft 07. Add ALPN support. Maven will use ALPN on OpenJDK 8. Update NPN dependency to target jdk7u60-b13 and Oracle jdk7u55-b13 . Ensure SPDY variants support zero-length DELETE and POST. Prevent leaking a cache item\u2019s InputStreams when metadata read fails. Use a string to identify TLS versions in routes. Add frame logger for HTTP/2. Replacing httpMinorVersion with Protocol . Expose HTTP/1.0 as a potential protocol. Use Protocol to describe framing. Implement write timeouts for HTTP/1.1 streams. Avoid use of SPDY stream ID 1, as that\u2019s typically used for UPGRADE. Support OAuth in Authenticator . Permit a dangling semicolon in media type parsing.","title":"Implementation changes"},{"location":"changelog_2x/#version-1x","text":"Change log","title":"Version 1.x"},{"location":"changelog_3x/","text":"OkHttp 3.x Change Log \u00b6 Version 3.14.9 \u00b6 2020-05-17 Fix: Don\u2019t crash when running as a plugin in Android Studio Canary 4.1. To enable platform-specific TLS features OkHttp must detect whether it\u2019s running in a JVM or in Android. The upcoming Android Studio runs in a JVM but has classes from Android and that confused OkHttp! Version 3.14.8 \u00b6 2020-04-28 Fix: Don\u2019t crash on Java 8u252 which introduces an API previously found only on Java 9 and above. See Jetty\u2019s overview of the API change and its consequences. Version 3.14.7 \u00b6 2020-02-24 Fix: Don\u2019t crash on Android 11 due to use of restricted methods. This prevents a crash with the exception, \u201cExpected Android API level 21+ but was 29\u201d. Version 3.14.6 \u00b6 2020-01-11 Fix: Don\u2019t crash if the connection is closed when sending a degraded ping. This fixes a regression that was introduced in OkHttp 3.14.5. Version 3.14.5 \u00b6 2020-01-03 Fix: Degrade HTTP/2 connections after a timeout. When an HTTP/2 stream times out it may impact the stream only or the entire connection. With this fix OkHttp will now send HTTP/2 pings after a stream timeout to determine whether the connection should remain eligible for pooling. Version 3.14.4 \u00b6 2019-09-29 Fix: Cancel calls that fail due to unexpected exceptions. We had a bug where an enqueued call would never call back if it crashed with an unchecked throwable, such as a NullPointerException or OutOfMemoryError . We now call Callback.onFailure() with an IOException that reports the call as canceled. The triggering exception is still delivered to the thread\u2019s UncaughtExceptionHandler . Fix: Don\u2019t evict incomplete entries when iterating the cache. We had a bug where iterating Cache.urls() would prevent in-flight entries from being written. Version 3.14.3 \u00b6 2019-09-10 Fix: Don\u2019t lose HTTP/2 flow control bytes when incoming data races with a stream close. If this happened enough then eventually the connection would stall. Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to fail the call. Fix: Recover gracefully when a coalesced connection immediately goes unhealthy. Version 3.14.2 \u00b6 2019-05-19 Fix: Lock in a route when recovering from an HTTP/2 connection error. We had a bug where two calls that failed at the same time could cause OkHttp to crash with a NoSuchElementException instead of the expected IOException . Fix: Don\u2019t crash with a NullPointerException when formatting an error message describing a truncated response from an HTTPS proxy. Version 3.14.1 \u00b6 2019-04-10 Fix: Don\u2019t crash when an interceptor retries when there are no more routes. This was an edge-case regression introduced with the events cleanup in 3.14.0. Fix: Provide actionable advice when the exchange is non-null. Prior to 3.14, OkHttp would silently leak connections when an interceptor retries without closing the response body. With 3.14 we detect this problem but the exception was not helpful. Version 3.14.0 \u00b6 2019-03-14 This release deletes the long-deprecated OkUrlFactory and OkApacheClient APIs. These facades hide OkHttp\u2019s implementation behind another client\u2019s API. If you still need this please copy and paste ObsoleteUrlFactory.java or ObsoleteApacheClient.java into your project. OkHttp now supports duplex calls over HTTP/2. With normal HTTP calls the request must finish before the response starts. With duplex, request and response bodies are transmitted simultaneously. This can be used to implement interactive conversations within a single HTTP call. Create duplex calls by overriding the new RequestBody.isDuplex() method to return true. This simple option dramatically changes the behavior of the request body and of the entire call. The RequestBody.writeTo() method may now retain a reference to the provided sink and hand it off to another thread to write to it after writeTo returns. The EventListener may now see requests and responses interleaved in ways not previously permitted. For example, a listener may receive responseHeadersStart() followed by requestBodyEnd() , both on the same call. Such events may be triggered by different threads even for a single call. Interceptors that rewrite or replace the request body may now inadvertently interfere with duplex request bodies. Such interceptors should check RequestBody.isDuplex() and avoid accessing the request body when it is. Duplex calls require HTTP/2. If HTTP/1 is established instead the duplex call will fail. The most common use of duplex calls is gRPC . New: Prevent OkHttp from retransmitting a request body by overriding RequestBody.isOneShot() . This is most useful when writing the request body is destructive. New: We\u2019ve added requestFailed() and responseFailed() methods to EventListener . These are called instead of requestBodyEnd() and responseBodyEnd() in some failure situations. They may also be fired in cases where no event was published previously. In this release we did an internal rewrite of our event code to fix problems where events were lost or unbalanced. Fix: Don\u2019t leak a connection when a call is canceled immediately preceding the onFailure() callback. Fix: Apply call timeouts when connecting duplex calls, web sockets, and server-sent events. Once the streams are established no further timeout is enforced. Fix: Retain the Route when a connection is reused on a redirect or other follow-up. This was causing some Authenticator calls to see a null route when non-null was expected. Fix: Use the correct key size in the name of TLS_AES_128_CCM_8_SHA256 which is a TLS 1.3 cipher suite. We accidentally specified a key size of 256, preventing that cipher suite from being selected for any TLS handshakes. We didn\u2019t notice because this cipher suite isn\u2019t supported on Android, Java, or Conscrypt. We removed this cipher suite and TLS_AES_128_CCM_SHA256 from the restricted, modern, and compatible sets of cipher suites. These two cipher suites aren\u2019t enabled by default in either Firefox or Chrome. See our TLS Configuration History tracker for a log of all changes to OkHttp\u2019s default TLS options. New: Upgrade to Conscrypt 2.0.0. OkHttp works with other versions of Conscrypt but this is the version we\u2019re testing against. implementation ( \"org.conscrypt:conscrypt-openjdk-uber:2.0.0\" ) New: Update the embedded public suffixes list. Version 3.13.1 \u00b6 2019-02-05 Fix: Don\u2019t crash when using a custom X509TrustManager or SSLSocket on Android. When we removed obsolete code for Android 4.4 we inadvertently also removed support for custom subclasses. We\u2019ve restored that support! Version 3.13.0 \u00b6 2019-02-04 This release bumps our minimum requirements to Java 8+ or Android 5+. Cutting off old devices is a serious change and we don\u2019t do it lightly! This post explains why we\u2019re doing this and how to upgrade. The OkHttp 3.12.x branch will be our long-term branch for Android 2.3+ (API level 9+) and Java 7+. These platforms lack support for TLS 1.2 and should not be used. But because upgrading is difficult we will backport critical fixes to the 3.12.x branch through December 31, 2021. (This commitment was originally through December 31, 2020; we have since extended it.) TLSv1 and TLSv1.1 are no longer enabled by default. Major web browsers are working towards removing these versions altogether in early 2020. If your servers aren\u2019t ready yet you can configure OkHttp 3.13 to allow TLSv1 and TLSv1.1 connections: OkHttpClient client = new OkHttpClient.Builder() .connectionSpecs(Arrays.asList(ConnectionSpec.COMPATIBLE_TLS)) .build(); New: You can now access HTTP trailers with Response.trailers() . This method may only be called after the entire HTTP response body has been read. New: Upgrade to Okio 1.17.3. If you\u2019re on Kotlin-friendly Okio 2.x this release requires 2.2.2 or newer. implementation ( \"com.squareup.okio:okio:1.17.3\" ) Fix: Don\u2019t miss cancels when sending HTTP/2 request headers. Fix: Don\u2019t miss whole operation timeouts when calls redirect. Fix: Don\u2019t leak connections if web sockets have malformed responses or if onOpen() throws. Fix: Don\u2019t retry when request bodies fail due to FileNotFoundException . Fix: Don\u2019t crash when URLs have IPv4-mapped IPv6 addresses. Fix: Don\u2019t crash when building HandshakeCertificates on Android API 28. Fix: Permit multipart file names to contain non-ASCII characters. New: API to get MockWebServer\u2019s dispatcher. New: API to access headers as java.time.Instant . New: Fail fast if a SSLSocketFactory is used as a SocketFactory . New: Log the TLS handshake in LoggingEventListener . Version 3.12.13 \u00b6 2021-01-30 Fix: Work around a crash in Android 10 and 11 that may be triggered when two threads concurrently close an SSL socket. This would have appeared in crash logs as NullPointerException: bio == null . Version 3.12.12 \u00b6 2020-05-17 Fix: Don\u2019t crash when running as a plugin in Android Studio Canary 4.1. To enable platform-specific TLS features OkHttp must detect whether it\u2019s running in a JVM or in Android. The upcoming Android Studio runs in a JVM but has classes from Android and that confused OkHttp! Version 3.12.11 \u00b6 2020-04-28 Fix: Don\u2019t crash on Java 8u252 which introduces an API previously found only on Java 9 and above. See Jetty\u2019s overview of the API change and its consequences. Version 3.12.10 \u00b6 2020-02-29 Fix: Don\u2019t crash on Android 4.1 when detecting methods that became restricted in Android 11. Supporting a full decade of Android releases on our 3.12.x branch is tricky! Version 3.12.9 \u00b6 2020-02-24 Fix: Don\u2019t crash on Android 11 due to use of restricted methods. This prevents a crash with the exception, \u201cExpected Android API level 21+ but was 29\u201d. Version 3.12.8 \u00b6 2020-01-11 Fix: Don\u2019t crash if the connection is closed when sending a degraded ping. This fixes a regression that was introduced in OkHttp 3.12.7. Version 3.12.7 \u00b6 2020-01-03 Fix: Degrade HTTP/2 connections after a timeout. When an HTTP/2 stream times out it may impact the stream only or the entire connection. With this fix OkHttp will now send HTTP/2 pings after a stream timeout to determine whether the connection should remain eligible for pooling. Version 3.12.6 \u00b6 2019-09-29 Fix: Cancel calls that fail due to unexpected exceptions. We had a bug where an enqueued call would never call back if it crashed with an unchecked throwable, such as a NullPointerException or OutOfMemoryError . We now call Callback.onFailure() with an IOException that reports the call as canceled. The triggering exception is still delivered to the thread\u2019s UncaughtExceptionHandler . Fix: Don\u2019t evict incomplete entries when iterating the cache. We had a bug where iterating Cache.urls() would prevent in-flight entries from being written. Version 3.12.5 \u00b6 2019-09-10 Fix: Don\u2019t lose HTTP/2 flow control bytes when incoming data races with a stream close. If this happened enough then eventually the connection would stall. Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to fail the call. Version 3.12.4 \u00b6 2019-09-04 Fix: Don\u2019t crash looking up an absent class on certain buggy Android 4.x devices. Version 3.12.3 \u00b6 2019-05-07 Fix: Permit multipart file names to contain non-ASCII characters. Fix: Retain the Route when a connection is reused on a redirect or other follow-up. This was causing some Authenticator calls to see a null route when non-null was expected. Version 3.12.2 \u00b6 2019-03-14 Fix: Don\u2019t crash if the HTTPS server returns no certificates in the TLS handshake. Fix: Don\u2019t leak a connection when a call is canceled immediately preceding the onFailure() callback. Version 3.12.1 \u00b6 2018-12-23 Fix: Remove overlapping package-info.java . This caused issues with some build tools. Version 3.12.0 \u00b6 2018-11-16 OkHttp now supports TLS 1.3. This requires either Conscrypt or Java 11+. Proxy authenticators are now asked for preemptive authentication. OkHttp will now request authentication credentials before creating TLS tunnels through HTTP proxies (HTTP CONNECT ). Authenticators should identify preemptive authentications by the presence of a challenge whose scheme is \u201cOkHttp-Preemptive\u201d. OkHttp now offers full-operation timeouts. This sets a limit on how long the entire call may take and covers resolving DNS, connecting, writing the request body, server processing, and reading the full response body. If a call requires redirects or retries all must complete within one timeout period. Use OkHttpClient.Builder.callTimeout() to specify the default duration and Call.timeout() to specify the timeout of an individual call. New: Return values and fields are now non-null unless otherwise annotated. New: LoggingEventListener makes it easy to get basic visibility into a call\u2019s performance. This class is in the logging-interceptor artifact. New: Headers.Builder.addUnsafeNonAscii() allows non-ASCII values to be added without an immediate exception. New: Headers can be redacted in HttpLoggingInterceptor . New: Headers.Builder now accepts dates. New: OkHttp now accepts java.time.Duration for timeouts on Java 8+ and Android 26+. New: Challenge includes all authentication parameters. New: Upgrade to BouncyCastle 1.60, Conscrypt 1.4.0, and Okio 1.15.0. We don\u2019t yet require Kotlin-friendly Okio 2.x but OkHttp works fine with that series. implementation ( \"org.bouncycastle:bcprov-jdk15on:1.60\" ) implementation ( \"org.conscrypt:conscrypt-openjdk-uber:1.4.0\" ) implementation ( \"com.squareup.okio:okio:1.15.0\" ) Fix: Handle dispatcher executor shutdowns gracefully. When there aren\u2019t any threads to carry a call its callback now gets a RejectedExecutionException . Fix: Don\u2019t permanently cache responses with Cache-Control: immutable . We misunderstood the original immutable proposal! Fix: Change Authenticator \u2018s Route parameter to be nullable. This was marked as non-null but could be called with null in some cases. Fix: Don\u2019t create malformed URLs when MockWebServer is reached via an IPv6 address. Fix: Don\u2019t crash if the system default authenticator is null. Fix: Don\u2019t crash generating elliptic curve certificates on Android. Fix: Don\u2019t crash doing platform detection on RoboVM. Fix: Don\u2019t leak socket connections when web socket upgrades fail. Version 3.11.0 \u00b6 2018-07-12 OkHttp\u2019s new okhttp-tls submodule tames HTTPS and TLS. HeldCertificate is a TLS certificate and its private key. Generate a certificate with its builder then use it to sign another certificate or perform a TLS handshake. The certificatePem() method encodes the certificate in the familiar PEM format ( --- BEGIN CERTIFICATE --- ); the privateKeyPkcs8Pem() does likewise for the private key. HandshakeCertificates holds the TLS certificates required for a TLS handshake. On the server it keeps your HeldCertificate and its chain. On the client it keeps the root certificates that are trusted to sign a server\u2019s certificate chain. HandshakeCertificates also works with mutual TLS where these roles are reversed. These classes make it possible to enable HTTPS in MockWebServer in just a few lines of code . OkHttp now supports prior knowledge cleartext HTTP/2. Enable this by setting Protocol.H2_PRIOR_KNOWLEDGE as the lone protocol on an OkHttpClient.Builder . This mode only supports http: URLs and is best suited in closed environments where HTTPS is inappropriate. New: HttpUrl.get(String) is an alternative to HttpUrl.parse(String) that throws an exception when the URL is malformed instead of returning null. Use this to avoid checking for null in situations where the input is known to be well-formed. We\u2019ve also added MediaType.get(String) which is an exception-throwing alternative to MediaType.parse(String) . New: The EventListener API previewed in OkHttp 3.9 has graduated to a stable API. Use this interface to track metrics and monitor HTTP requests\u2019 size and duration. New: okhttp-dnsoverhttps is an experimental API for doing DNS queries over HTTPS. Using HTTPS for DNS offers better security and potentially better performance. This feature is a preview: the API is subject to change. New: okhttp-sse is an early preview of Server-Sent Events (SSE). This feature is incomplete and is only suitable for experimental use. New: MockWebServer now supports client authentication (mutual TLS). Call requestClientAuth() to permit an optional client certificate or requireClientAuth() to require one. New: RecordedRequest.getHandshake() returns the HTTPS handshake of a request sent to MockWebServer . Fix: Honor the MockResponse header delay in MockWebServer. Fix: Don\u2019t release HTTP/2 connections that have multiple canceled calls. We had a bug where canceling calls would cause the shared HTTP/2 connection to be unnecessarily released. This harmed connection reuse. Fix: Ensure canceled and discarded HTTP/2 data is not permanently counted against the limited flow control window. We had a few bugs where window size accounting was broken when streams were canceled or reset. Fix: Recover gracefully if the TLS session returns an unexpected version ( NONE ) or cipher suite ( SSL_NULL_WITH_NULL_NULL ). Fix: Don\u2019t change Conscrypt configuration globally. We migrated from a process-wide setting to configuring only OkHttp\u2019s TLS sockets. Fix: Prefer TLSv1.2 where it is available. On certain older platforms it is necessary to opt-in to TLSv1.2. New: Request.tag() permits multiple tags. Use a Class<?> as a key to identify tags. Note that tag() now returns null if the request has no tag. Previously this would return the request itself. New: Headers.Builder.addAll(Headers) . New: ResponseBody.create(MediaType, ByteString) . New: Embed R8/ProGuard rules in the jar. These will be applied automatically by R8. Fix: Release the connection if Authenticator throws an exception. Fix: Change the declaration of OkHttpClient.cache() to return a @Nullable Cache . The return value has always been nullable but it wasn\u2019t declared properly. Fix: Reverse suppression of connect exceptions. When both a call and its retry fail, we now throw the initial exception which is most likely to be actionable. Fix: Retain interrupted state when throwing InterruptedIOException . A single interrupt should now be sufficient to break out an in-flight OkHttp call. Fix: Don\u2019t drop a call to EventListener.callEnd() when the response body is consumed inside an interceptor. Version 3.10.0 \u00b6 2018-02-24 The pingInterval() feature now aggressively checks connectivity for web sockets and HTTP/2 connections. Previously if you configured a ping interval that would cause OkHttp to send pings, but it did not track whether the reply pongs were received. With this update OkHttp requires that every ping receive a response: if it does not the connection will be closed and the listener\u2019s onFailure() method will be called. Web sockets have always been had pings, but pings on HTTP/2 connections is new in this release. Pings are used for connections that are busy carrying calls and for idle connections in the connection pool. (Pings do not impact when pooled connections are evicted). If you have a configured ping interval, you should confirm that it is long enough for a roundtrip from client to server. If your ping interval is too short, slow connections may be misinterpreted as failed connections. A ping interval of 30 seconds is reasonable for most use cases. OkHttp now supports Conscrypt . Conscrypt is a Java Security Provider that integrates BoringSSL into the Java platform. Conscrypt supports more cipher suites than the JVM\u2019s default provider and may also execute more efficiently. To use it, first register a Conscrypt dependency in your build system. OkHttp will use Conscrypt if you set the okhttp.platform system property to conscrypt . Alternatively, OkHttp will also use Conscrypt if you install it as your preferred security provider. To do so, add the following code to execute before you create your OkHttpClient . Security.insertProviderAt( new org.conscrypt.OpenSSLProvider(), 1); Conscrypt is the bundled security provider on Android so it is not necessary to configure it on that platform. New: HttpUrl.addQueryParameter() percent-escapes more characters. Previously several ASCII punctuation characters were not percent-escaped when used with this method. This does not impact already-encoded query parameters in APIs like HttpUrl.parse() and HttpUrl.Builder.addEncodedQueryParameter() . New: CBC-mode ECDSA cipher suites have been removed from OkHttp\u2019s default configuration: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA and TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA . This tracks a Chromium change to remove these cipher suites because they are fragile and rarely-used. New: Don\u2019t fall back to common name (CN) verification for hostnames. This behavior was deprecated with RFC 2818 in May 2000 and was recently dropped from major web browsers. New: Honor the Retry-After response header. HTTP 503 (Unavailable) responses are retried automatically if this header is present and its delay is 0 seconds. HTTP 408 (Client Timeout) responses are retried automatically if the header is absent or its delay is 0 seconds. New: Allow request bodies for all HTTP methods except GET and HEAD. New: Automatic module name of okhttp3 for use with the Java Platform Module System. New: Log gzipped bodies when HttpLoggingInterceptor is used as a network interceptor. New: Protocol.QUIC constant. This protocol is not supported but this constant is included for completeness. New: Upgrade to Okio 1.14.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.14.0 </version> </dependency> com.squareup.okio:okio:1.14.0 Fix: Handle HTTP/1.1 100 Continue status lines, even on requests that did not send the Expect: continue request header. Fix: Do not count web sockets toward the dispatcher\u2019s per-host connection limit. Fix: Avoid using invalid HTTPS sessions. This prevents OkHttp from crashing with the error, Unexpected TLS version: NONE . Fix: Don\u2019t corrupt the response cache when a 304 (Not Modified) response overrides the stored \u201cContent-Encoding\u201d header. Fix: Gracefully shut down the HTTP/2 connection before it exhausts the namespace of stream IDs (~536 million streams). Fix: Never pass a null Route to Authenticator . There was a bug where routes were omitted for eagerly-closed connections. Version 3.9.1 \u00b6 2017-11-18 New: Recover gracefully when Android\u2019s DNS crashes with an unexpected NullPointerException . New: Recover gracefully when Android\u2019s socket connections crash with an unexpected ClassCastException . Fix: Don\u2019t include the URL\u2019s fragment in encodedQuery() when the query itself is empty. Version 3.9.0 \u00b6 2017-09-03 Interceptors are more capable. The Chain interface now offers access to the call and can adjust all call timeouts. Note that this change is source-incompatible for code that implements the Chain interface. We don\u2019t expect this to be a problem in practice! OkHttp has an experimental new API for tracking metrics. The new EventListener API is designed to help developers monitor HTTP requests\u2019 size and duration. This feature is an unstable preview: the API is subject to change, and the implementation is incomplete. This is a big new API we are eager for feedback. New: Support ALPN via Google Play Services\u2019 Dynamic Security Provider. This expands HTTP/2 support to older Android devices that have Google Play Services. New: Consider all routes when looking for candidate coalesced connections. This increases the likelihood that HTTP/2 connections will be shared. New: Authentication challenges and credentials now use a charset. Use this in your authenticator to support user names and passwords with non-ASCII characters. New: Accept a charset in FormBody.Builder . Previously form bodies were always UTF-8. New: Support the immutable cache-control directive. Fix: Don\u2019t crash when an HTTP/2 call is redirected while the connection is being shut down. Fix: Don\u2019t drop headers of healthy streams that raced with GOAWAY frames. This bug would cause HTTP/2 streams to occasional hang when the connection was shutting down. Fix: Honor OkHttpClient.retryOnConnectionFailure() when the response is a HTTP 408 Request Timeout. If retries are enabled, OkHttp will retry exactly once in response to a 408. Fix: Don\u2019t crash when reading the empty HEAD response body if it specifies a Content-Length . Fix: Don\u2019t crash if the thread is interrupted while reading the public suffix database. Fix: Use relative resource path when loading the public suffix database. Loading the resource using a path relative to the class prevents conflicts when the OkHttp classes are relocated (shaded) by allowing multiple private copies of the database. Fix: Accept cookies for URLs that have an IPv6 address for a host. Fix: Don\u2019t log the protocol (HTTP/1.1, h2) in HttpLoggingInterceptor if the protocol isn\u2019t negotiated yet! Previously we\u2019d log HTTP/1.1 by default, and this was confusing. Fix: Omit the message from MockWebServer\u2019s HTTP/2 :status header. Fix: Handle \u2018Expect: 100 Continue\u2019 properly in MockWebServer. Version 3.8.1 \u00b6 2017-06-18 Fix: Recover gracefully from stale coalesced connections. We had a bug where connection coalescing (introduced in OkHttp 3.7.0) and stale connection recovery could interact to cause a NoSuchElementException crash in the RouteSelector . Version 3.8.0 \u00b6 2017-05-13 OkHttp now uses @Nullable to annotate all possibly-null values. We\u2019ve added a compile-time dependency on the JSR 305 annotations. This is a provided dependency and does not need to be included in your build configuration, .jar file, or .apk . We use @ParametersAreNonnullByDefault and all parameters and return types are never null unless explicitly annotated @Nullable . Warning: this release is source-incompatible for Kotlin users. Nullability was previously ambiguous and lenient but now the compiler will enforce strict null checks. New: The response message is now non-null. This is the \u201cNot Found\u201d in the status line \u201cHTTP 404 Not Found\u201d. If you are building responses programmatically (with new Response.Builder() ) you must now always supply a message. An empty string \"\" is permitted. This value was never null on responses returned by OkHttp itself, and it was an old mistake to permit application code to omit a message. The challenge\u2019s scheme and realm are now non-null. If you are calling new Challenge(scheme, realm) you must provide non-null values. These were never null in challenges created by OkHttp, but could have been null in application code that creates challenges. New: The TlsVersion of a Handshake is now non-null. If you are calling Handshake.get() with a null TLS version, you must instead now provide a non-null TlsVersion . Cache responses persisted prior to OkHttp 3.0 did not store a TLS version; for these unknown values the handshake is defaulted to TlsVersion.SSL_3_0 . New: Upgrade to Okio 1.13.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.13.0 </version> </dependency> com.squareup.okio:okio:1.13.0 Fix: gracefully recover when Android 7.0\u2019s sockets throw an unexpected NullPointerException . Version 3.7.0 \u00b6 2017-04-15 OkHttp no longer recovers from TLS handshake failures by attempting a TLSv1 connection. The fallback was necessary for servers that implemented version negotiation incorrectly. Now that 99.99% of servers do it right this fallback is obsolete. Fix: Do not honor cookies set on a public domain. Previously a malicious site could inject cookies on top-level domains like co.uk because our cookie parser didn\u2019t honor the public suffix list. Alongside this fix is a new API, HttpUrl.topPrivateDomain() , which returns the privately domain name if the URL has one. Fix: Change MediaType.charset() to return null for unexpected charsets. Fix: Don\u2019t skip cache invalidation if the invalidating response has no body. Fix: Don\u2019t use a cryptographic random number generator for web sockets. Some Android devices implement SecureRandom incorrectly! Fix: Correctly canonicalize IPv6 addresses in HttpUrl . This prevented OkHttp from trusting HTTPS certificates issued to certain IPv6 addresses. Fix: Don\u2019t reuse connections after an unsuccessful Expect: 100-continue . Fix: Handle either TLS_ or SSL_ prefixes for cipher suite names. This is necessary for IBM JVMs that use the SSL_ prefix exclusively. Fix: Reject HTTP/2 data frames if the stream ID is 0. New: Upgrade to Okio 1.12.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.12.0 </version> </dependency> com.squareup.okio:okio:1.12.0 New: Connection coalescing. OkHttp may reuse HTTP/2 connections across calls that share an IP address and HTTPS certificate, even if their domain names are different. New: MockWebServer\u2019s RecordedRequest exposes the requested HttpUrl with getRequestUrl() . Version 3.6.0 \u00b6 2017-01-29 Fix: Don\u2019t crash with a \u201ccache is closed\u201d error when there is an error initializing the cache. Fix: Calling disconnect() on a connecting HttpUrlConnection could cause it to retry in an infinite loop! This regression was introduced in OkHttp 2.7.0. Fix: Drop cookies that contain ASCII NULL and other bad characters. Previously such cookies would cause OkHttp to crash when they were included in a request. Fix: Release duplicated multiplexed connections. If we concurrently establish connections to an HTTP/2 server, close all but the first connection. Fix: Fail the HTTP/2 connection if first frame isn\u2019t SETTINGS . Fix: Forbid spaces in header names. Fix: Don\u2019t offer to do gzip if the request is partial. Fix: MockWebServer is now usable with JUnit 5. That update broke the rules . New: Support Expect: 100-continue as a request header. Callers can use this header to pessimistically hold off on transmitting a request body until a server gives the go-ahead. New: Permit network interceptors to rewrite the host header for HTTP/2. This makes it possible to do domain fronting. New: charset support for Credentials.basic() . Version 3.5.0 \u00b6 2016-11-30 Web Sockets are now a stable feature of OkHttp. Since being introduced as a beta feature in OkHttp 2.3 our web socket client has matured. Connect to a server\u2019s web socket with OkHttpClient.newWebSocket() , send messages with send() , and receive messages with the WebSocketListener . The okhttp-ws submodule is no longer available and okhttp-ws artifacts from previous releases of OkHttp are not compatible with OkHttp 3.5. When upgrading to the new package please note that the WebSocket and WebSocketCall classes have been merged. Sending messages is now asynchronous and they may be enqueued before the web socket is connected. OkHttp no longer attempts a direct connection if the system\u2019s HTTP proxy fails. This behavior was surprising because OkHttp was disregarding the user\u2019s specified configuration. If you need to customize proxy fallback behavior, implement your own java.net.ProxySelector . Fix: Support TLSv1.3 on devices that support it. Fix: Share pooled connections across equivalent OkHttpClient instances. Previous releases had a bug where a shared connection pool did not guarantee shared connections in some cases. Fix: Prefer the server\u2019s response body on all conditional cache misses. Previously we would return the cached response\u2019s body if it had a newer Last-Modified date. Fix: Update the stored timestamp on conditional cache hits. New: Optimized HTTP/2 request header encoding. More headers are HPACK-encoded and string literals are now Huffman-encoded. New: Expose Part headers and body in Multipart . New: Make ResponseBody.string() and ResponseBody.charStream() BOM-aware. If your HTTP response body begins with a byte order mark it will be consumed and used to select a charset for the remaining bytes. Most applications should not need a byte order mark. New: Upgrade to Okio 1.11.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.11.0 </version> </dependency> com.squareup.okio:okio:1.11.0 Fix: Avoid sending empty HTTP/2 data frames when there is no request body. Fix: Add a leading . for better domain matching in JavaNetCookieJar . Fix: Gracefully recover from HTTP/2 connection shutdowns at start of request. Fix: Be lenient if a MediaType \u2018s character set is 'single-quoted' . Fix: Allow horizontal tab characters in header values. Fix: When parsing HTTP authentication headers permit challenge parameters in any order. Version 3.4.2 \u00b6 2016-11-03 Fix: Recover gracefully when an HTTP/2 connection is shutdown. We had a bug where shutdown HTTP/2 connections were considered usable. This caused infinite loops when calls attempted to recover. Version 3.4.1 \u00b6 2016-07-10 Fix a major bug in encoding HTTP headers. In 3.4.0 and 3.4.0-RC1 OkHttp had an off-by-one bug in our HPACK encoder. This bug could have caused the wrong headers to be emitted after a sequence of HTTP/2 requests! Everyone who is using OkHttp 3.4.0 or 3.4.0-RC1 should upgrade for this bug fix. Version 3.4.0 \u00b6 2016-07-08 New: Support dynamic table size changes to HPACK Encoder. Fix: Use TreeMap in Headers.toMultimap() . This makes string lookups on the returned map case-insensitive. Fix: Don\u2019t share the OkHttpClient\u2019s Dispatcher in HttpURLConnection . Version 3.4.0-RC1 \u00b6 2016-07-02 We\u2019ve rewritten HttpURLConnection and HttpsURLConnection. Previously we shared a single HTTP engine between two frontend APIs: HttpURLConnection and Call . With this release we\u2019ve rearranged things so that the HttpURLConnection frontend now delegates to the Call APIs internally. This has enabled substantial simplifications and optimizations in the OkHttp core for both frontends. For most HTTP requests the consequences of this change will be negligible. If your application uses HttpURLConnection.connect() , setFixedLengthStreamingMode() , or setChunkedStreamingMode() , OkHttp will now use a async dispatcher thread to establish the HTTP connection. We don\u2019t expect this change to have any behavior or performance consequences. Regardless, please exercise your OkUrlFactory and HttpURLConnection code when applying this update. Cipher suites may now have arbitrary names. Previously CipherSuite was a Java enum and it was impossible to define new cipher suites without first upgrading OkHttp. With this change it is now a regular Java class with enum-like constants. Application code that uses enum methods on cipher suites ( ordinal() , name() , etc.) will break with this change. Fix: CertificatePinner now matches canonicalized hostnames. Previously this was case sensitive. This change should also make it easier to configure certificate pinning for internationalized domain names. Fix: Don\u2019t crash on non-ASCII ETag headers. Previously OkHttp would reject these headers when validating a cached response. Fix: Don\u2019t allow remote peer to arbitrarily size the HPACK decoder dynamic table. Fix: Honor per-host configuration in Android\u2019s network security config. Previously disabling cleartext for any host would disable cleartext for all hosts. Note that this setting is only available on Android 24+. New: HPACK compression is now dynamic. This should improve performance when transmitting request headers over HTTP/2. New: Dispatcher.setIdleCallback() can be used to signal when there are no calls in flight. This is useful for testing with Espresso . New: Upgrade to Okio 1.9.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.9.0 </version> </dependency> Version 3.3.1 \u00b6 2016-05-28 Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified newline characters as control characters. This is fixed. Fix: Don\u2019t crash reading non-ASCII characters in HTTP/2 headers or in cached HTTP headers. Fix: Retain the response body when an attempt to open a web socket returns a non-101 response code. Version 3.3.0 \u00b6 2016-05-24 New: Response.sentRequestAtMillis() and receivedResponseAtMillis() methods track the system\u2019s local time when network calls are made. These replace the OkHttp-Sent-Millis and OkHttp-Received-Millis headers that were present in earlier versions of OkHttp. New: Accept user-provided trust managers in OkHttpClient.Builder . This allows OkHttp to satisfy its TLS requirements directly. Otherwise OkHttp will use reflection to extract the TrustManager from the SSLSocketFactory . New: Support prerelease Java 9. This gets ALPN from the platform rather than relying on the alpn-boot bootclasspath override. New: HttpLoggingInterceptor now logs connection failures. New: Upgrade to Okio 1.8.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.8.0 </version> </dependency> Fix: Gracefully recover from a failure to rebuild the cache journal. Fix: Don\u2019t corrupt cache entries when a cache entry is evicted while it is being updated. Fix: Make logging more consistent throughout OkHttp. Fix: Log plaintext bodies only. This uses simple heuristics to differentiate text from other data. Fix: Recover from REFUSED_STREAM errors in HTTP/2. This should improve interoperability with Nginx 1.10.0, which refuses streams created before HTTP/2 settings have been acknowledged. Fix: Improve recovery from failed routes. Fix: Accommodate tunneling proxies that close the connection after an auth challenge. Fix: Use the proxy authenticator when authenticating HTTP proxies. This regression was introduced in OkHttp 3.0. Fix: Fail fast if network interceptors transform the response body such that closing it doesn\u2019t also close the underlying stream. We had a bug where OkHttp would attempt to reuse a connection but couldn\u2019t because it was still held by a prior request. Fix: Ensure network interceptors always have access to the underlying connection. Fix: Use X509TrustManagerExtensions on Android 17+. Fix: Unblock waiting dispatchers on MockWebServer shutdown. Version 3.2.0 \u00b6 2016-02-25 Fix: Change the certificate pinner to always build full chains. This prevents a potential crash when using certificate pinning with the Google Play Services security provider. Fix: Make IPv6 request lines consistent with Firefox and Chrome. Fix: Recover gracefully when trimming the response cache fails. New: Add multiple path segments using a single string in HttpUrl.Builder . New: Support SHA-256 pins in certificate pinner. Version 3.1.2 \u00b6 2016-02-10 Fix: Don\u2019t crash when finding the trust manager on Robolectric. We attempted to detect the host platform and got confused because Robolectric looks like Android but isn\u2019t! Fix: Change CertificatePinner to skip sanitizing the certificate chain when no certificates were pinned. This avoids an SSL failure in insecure \u201ctrust everyone\u201d configurations, such as when talking to a development HTTPS server that has a self-signed certificate. Version 3.1.1 \u00b6 2016-02-07 Fix: Don\u2019t crash when finding the trust manager if the Play Services (GMS) security provider is installed. Fix: The previous release introduced a performance regression on Android, caused by looking up CA certificates. This is now fixed. Version 3.1.0 \u00b6 2016-02-06 New: WebSockets now defer some writes. This should improve performance for some applications. New: Override equals() and hashCode() in our new cookie class. This class now defines equality by value rather than by reference. New: Handle 408 responses by retrying the request. This allows servers to direct clients to retry rather than failing permanently. New: Expose the framed protocol in Connection . Previously this would return the application-layer protocol (HTTP/1.1 or HTTP/1.0); now it always returns the wire-layer protocol (HTTP/2, SPDY/3.1, or HTTP/1.1). Fix: Permit the trusted CA root to be pinned by CertificatePinner . Fix: Silently ignore unknown HTTP/2 settings. Previously this would cause the entire connection to fail. Fix: Don\u2019t crash on unexpected charsets in the logging interceptor. Fix: OkHttpClient is now non-final for the benefit of mocking frameworks. Mocking sophisticated classes like OkHttpClient is fragile and you shouldn\u2019t do it. But if that\u2019s how you want to live your life we won\u2019t stand in your way! Version 3.0.1 \u00b6 2016-01-14 Rollback OSGi support. This was causing library jars to include more classes than expected, which interfered with Gradle builds. Version 3.0.0 \u00b6 2016-01-13 This release commits to a stable 3.0 API. Read the 3.0.0-RC1 changes for advice on upgrading from 2.x to 3.x. The Callback interface now takes a Call . This makes it easier to check if the call was canceled from within the callback. When migrating async calls to this new API, Call is now the first parameter for both onResponse() and onFailure() . Fix: handle multiple cookies in JavaNetCookieJar on Android. Fix: improve the default HTTP message in MockWebServer responses. Fix: don\u2019t leak file handles when a conditional GET throws. Fix: Use charset specified by the request body content type in OkHttp\u2019s logging interceptor. Fix: Don\u2019t eagerly release pools on cache hits. New: Make OkHttp OSGi ready. New: Add already-implemented interfaces Closeable and Flushable to the cache. Version 3.0.0-RC1 \u00b6 2016-01-02 OkHttp 3 is a major release focused on API simplicity and consistency. The API changes are numerous but most are cosmetic. Applications should be able to upgrade from the 2.x API to the 3.x API mechanically and without risk. Because the release includes breaking API changes, we\u2019re changing the project\u2019s package name from com.squareup.okhttp to okhttp3 . This should make it possible for large applications to migrate incrementally. The Maven group ID is now com.squareup.okhttp3 . For an explanation of this strategy, see Jake Wharton\u2019s post, Java Interoperability Policy for Major Version Updates . This release obsoletes OkHttp 2.x, and all code that uses OkHttp\u2019s com.squareup.okhttp package should upgrade to the okhttp3 package. Libraries that depend on OkHttp should upgrade quickly to prevent applications from being stuck on the old version. There is no longer a global singleton connection pool. In OkHttp 2.x, all OkHttpClient instances shared a common connection pool by default. In OkHttp 3.x, each new OkHttpClient gets its own private connection pool. Applications should avoid creating many connection pools as doing so prevents connection reuse. Each connection pool holds its own set of connections alive so applications that have many pools also risk exhausting memory! The best practice in OkHttp 3 is to create a single OkHttpClient instance and share it throughout the application. Requests that needs a customized client should call OkHttpClient.newBuilder() on that shared instance. This allows customization without the drawbacks of separate connection pools. OkHttpClient is now stateless. In the 2.x API OkHttpClient had getters and setters. Internally each request was forced to make its own complete snapshot of the OkHttpClient instance to defend against racy configuration changes. In 3.x, OkHttpClient is now stateless and has a builder. Note that this class is not strictly immutable as it has stateful members like the connection pool and cache. Get and Set prefixes are now avoided. With ubiquitous builders throughout OkHttp these accessor prefixes aren\u2019t necessary. Previously OkHttp used get and set prefixes sporadically which make the API inconsistent and awkward to explore. OkHttpClient now implements the new Call.Factory interface. This interface will make your code easier to test. When you test code that makes HTTP requests, you can use this interface to replace the real OkHttpClient with your own mocks or fakes. The interface will also let you use OkHttp\u2019s API with another HTTP client\u2019s implementation. This is useful in sandboxed environments like Google App Engine. OkHttp now does cookies. We\u2019ve replaced java.net.CookieHandler with a new interface, CookieJar and added our own Cookie model class. This new cookie follows the latest RFC and supports the same cookie attributes as modern web browsers. Form and Multipart bodies are now modeled. We\u2019ve replaced the opaque FormEncodingBuilder with the more powerful FormBody and FormBody.Builder combo. Similarly we\u2019ve upgraded MultipartBuilder into MultipartBody , MultipartBody.Part , and MultipartBody.Builder . The Apache HTTP client and HttpURLConnection APIs are deprecated. They continue to work as they always have, but we\u2019re moving everything to the new OkHttp 3 API. The okhttp-apache and okhttp-urlconnection modules should be only be used to accelerate a transition to OkHttp\u2019s request/response API. These deprecated modules will be dropped in an upcoming OkHttp 3.x release. Canceling batches of calls is now the application\u2019s responsibility. The API to cancel calls by tag has been removed and replaced with a more general mechanism. The dispatcher now exposes all in-flight calls via its runningCalls() and queuedCalls() methods. You can write code that selects calls by tag, host, or whatever, and invokes Call.cancel() on the ones that are no longer necessary. OkHttp no longer uses the global java.net.Authenticator by default. We\u2019ve changed our Authenticator interface to authenticate web and proxy authentication failures through a single method. An adapter for the old authenticator is available in the okhttp-urlconnection module. Fix: Don\u2019t throw IOException on ResponseBody.contentLength() or close() . Fix: Never throw converting an HttpUrl to a java.net.URI . This changes the uri() method to handle malformed percent-escapes and characters forbidden by URI . Fix: When a connect times out, attempt an alternate route. Previously route selection was less efficient when differentiating failures. New: Response.peekBody() lets you access the response body without consuming it. This may be handy for interceptors! New: HttpUrl.newBuilder() resolves a link to a builder. New: Add the TLS version to the Handshake . New: Drop Request.uri() and Request#urlString() . Just use Request.url().uri() and Request.url().toString() . New: Add URL to HTTP response logging. New: Make HttpUrl the blessed URL method of Request . Version 2.x \u00b6 Change log","title":"Changelog 3x"},{"location":"changelog_3x/#okhttp-3x-change-log","text":"","title":"OkHttp 3.x Change Log"},{"location":"changelog_3x/#version-3149","text":"2020-05-17 Fix: Don\u2019t crash when running as a plugin in Android Studio Canary 4.1. To enable platform-specific TLS features OkHttp must detect whether it\u2019s running in a JVM or in Android. The upcoming Android Studio runs in a JVM but has classes from Android and that confused OkHttp!","title":"Version 3.14.9"},{"location":"changelog_3x/#version-3148","text":"2020-04-28 Fix: Don\u2019t crash on Java 8u252 which introduces an API previously found only on Java 9 and above. See Jetty\u2019s overview of the API change and its consequences.","title":"Version 3.14.8"},{"location":"changelog_3x/#version-3147","text":"2020-02-24 Fix: Don\u2019t crash on Android 11 due to use of restricted methods. This prevents a crash with the exception, \u201cExpected Android API level 21+ but was 29\u201d.","title":"Version 3.14.7"},{"location":"changelog_3x/#version-3146","text":"2020-01-11 Fix: Don\u2019t crash if the connection is closed when sending a degraded ping. This fixes a regression that was introduced in OkHttp 3.14.5.","title":"Version 3.14.6"},{"location":"changelog_3x/#version-3145","text":"2020-01-03 Fix: Degrade HTTP/2 connections after a timeout. When an HTTP/2 stream times out it may impact the stream only or the entire connection. With this fix OkHttp will now send HTTP/2 pings after a stream timeout to determine whether the connection should remain eligible for pooling.","title":"Version 3.14.5"},{"location":"changelog_3x/#version-3144","text":"2019-09-29 Fix: Cancel calls that fail due to unexpected exceptions. We had a bug where an enqueued call would never call back if it crashed with an unchecked throwable, such as a NullPointerException or OutOfMemoryError . We now call Callback.onFailure() with an IOException that reports the call as canceled. The triggering exception is still delivered to the thread\u2019s UncaughtExceptionHandler . Fix: Don\u2019t evict incomplete entries when iterating the cache. We had a bug where iterating Cache.urls() would prevent in-flight entries from being written.","title":"Version 3.14.4"},{"location":"changelog_3x/#version-3143","text":"2019-09-10 Fix: Don\u2019t lose HTTP/2 flow control bytes when incoming data races with a stream close. If this happened enough then eventually the connection would stall. Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to fail the call. Fix: Recover gracefully when a coalesced connection immediately goes unhealthy.","title":"Version 3.14.3"},{"location":"changelog_3x/#version-3142","text":"2019-05-19 Fix: Lock in a route when recovering from an HTTP/2 connection error. We had a bug where two calls that failed at the same time could cause OkHttp to crash with a NoSuchElementException instead of the expected IOException . Fix: Don\u2019t crash with a NullPointerException when formatting an error message describing a truncated response from an HTTPS proxy.","title":"Version 3.14.2"},{"location":"changelog_3x/#version-3141","text":"2019-04-10 Fix: Don\u2019t crash when an interceptor retries when there are no more routes. This was an edge-case regression introduced with the events cleanup in 3.14.0. Fix: Provide actionable advice when the exchange is non-null. Prior to 3.14, OkHttp would silently leak connections when an interceptor retries without closing the response body. With 3.14 we detect this problem but the exception was not helpful.","title":"Version 3.14.1"},{"location":"changelog_3x/#version-3140","text":"2019-03-14 This release deletes the long-deprecated OkUrlFactory and OkApacheClient APIs. These facades hide OkHttp\u2019s implementation behind another client\u2019s API. If you still need this please copy and paste ObsoleteUrlFactory.java or ObsoleteApacheClient.java into your project. OkHttp now supports duplex calls over HTTP/2. With normal HTTP calls the request must finish before the response starts. With duplex, request and response bodies are transmitted simultaneously. This can be used to implement interactive conversations within a single HTTP call. Create duplex calls by overriding the new RequestBody.isDuplex() method to return true. This simple option dramatically changes the behavior of the request body and of the entire call. The RequestBody.writeTo() method may now retain a reference to the provided sink and hand it off to another thread to write to it after writeTo returns. The EventListener may now see requests and responses interleaved in ways not previously permitted. For example, a listener may receive responseHeadersStart() followed by requestBodyEnd() , both on the same call. Such events may be triggered by different threads even for a single call. Interceptors that rewrite or replace the request body may now inadvertently interfere with duplex request bodies. Such interceptors should check RequestBody.isDuplex() and avoid accessing the request body when it is. Duplex calls require HTTP/2. If HTTP/1 is established instead the duplex call will fail. The most common use of duplex calls is gRPC . New: Prevent OkHttp from retransmitting a request body by overriding RequestBody.isOneShot() . This is most useful when writing the request body is destructive. New: We\u2019ve added requestFailed() and responseFailed() methods to EventListener . These are called instead of requestBodyEnd() and responseBodyEnd() in some failure situations. They may also be fired in cases where no event was published previously. In this release we did an internal rewrite of our event code to fix problems where events were lost or unbalanced. Fix: Don\u2019t leak a connection when a call is canceled immediately preceding the onFailure() callback. Fix: Apply call timeouts when connecting duplex calls, web sockets, and server-sent events. Once the streams are established no further timeout is enforced. Fix: Retain the Route when a connection is reused on a redirect or other follow-up. This was causing some Authenticator calls to see a null route when non-null was expected. Fix: Use the correct key size in the name of TLS_AES_128_CCM_8_SHA256 which is a TLS 1.3 cipher suite. We accidentally specified a key size of 256, preventing that cipher suite from being selected for any TLS handshakes. We didn\u2019t notice because this cipher suite isn\u2019t supported on Android, Java, or Conscrypt. We removed this cipher suite and TLS_AES_128_CCM_SHA256 from the restricted, modern, and compatible sets of cipher suites. These two cipher suites aren\u2019t enabled by default in either Firefox or Chrome. See our TLS Configuration History tracker for a log of all changes to OkHttp\u2019s default TLS options. New: Upgrade to Conscrypt 2.0.0. OkHttp works with other versions of Conscrypt but this is the version we\u2019re testing against. implementation ( \"org.conscrypt:conscrypt-openjdk-uber:2.0.0\" ) New: Update the embedded public suffixes list.","title":"Version 3.14.0"},{"location":"changelog_3x/#version-3131","text":"2019-02-05 Fix: Don\u2019t crash when using a custom X509TrustManager or SSLSocket on Android. When we removed obsolete code for Android 4.4 we inadvertently also removed support for custom subclasses. We\u2019ve restored that support!","title":"Version 3.13.1"},{"location":"changelog_3x/#version-3130","text":"2019-02-04 This release bumps our minimum requirements to Java 8+ or Android 5+. Cutting off old devices is a serious change and we don\u2019t do it lightly! This post explains why we\u2019re doing this and how to upgrade. The OkHttp 3.12.x branch will be our long-term branch for Android 2.3+ (API level 9+) and Java 7+. These platforms lack support for TLS 1.2 and should not be used. But because upgrading is difficult we will backport critical fixes to the 3.12.x branch through December 31, 2021. (This commitment was originally through December 31, 2020; we have since extended it.) TLSv1 and TLSv1.1 are no longer enabled by default. Major web browsers are working towards removing these versions altogether in early 2020. If your servers aren\u2019t ready yet you can configure OkHttp 3.13 to allow TLSv1 and TLSv1.1 connections: OkHttpClient client = new OkHttpClient.Builder() .connectionSpecs(Arrays.asList(ConnectionSpec.COMPATIBLE_TLS)) .build(); New: You can now access HTTP trailers with Response.trailers() . This method may only be called after the entire HTTP response body has been read. New: Upgrade to Okio 1.17.3. If you\u2019re on Kotlin-friendly Okio 2.x this release requires 2.2.2 or newer. implementation ( \"com.squareup.okio:okio:1.17.3\" ) Fix: Don\u2019t miss cancels when sending HTTP/2 request headers. Fix: Don\u2019t miss whole operation timeouts when calls redirect. Fix: Don\u2019t leak connections if web sockets have malformed responses or if onOpen() throws. Fix: Don\u2019t retry when request bodies fail due to FileNotFoundException . Fix: Don\u2019t crash when URLs have IPv4-mapped IPv6 addresses. Fix: Don\u2019t crash when building HandshakeCertificates on Android API 28. Fix: Permit multipart file names to contain non-ASCII characters. New: API to get MockWebServer\u2019s dispatcher. New: API to access headers as java.time.Instant . New: Fail fast if a SSLSocketFactory is used as a SocketFactory . New: Log the TLS handshake in LoggingEventListener .","title":"Version 3.13.0"},{"location":"changelog_3x/#version-31213","text":"2021-01-30 Fix: Work around a crash in Android 10 and 11 that may be triggered when two threads concurrently close an SSL socket. This would have appeared in crash logs as NullPointerException: bio == null .","title":"Version 3.12.13"},{"location":"changelog_3x/#version-31212","text":"2020-05-17 Fix: Don\u2019t crash when running as a plugin in Android Studio Canary 4.1. To enable platform-specific TLS features OkHttp must detect whether it\u2019s running in a JVM or in Android. The upcoming Android Studio runs in a JVM but has classes from Android and that confused OkHttp!","title":"Version 3.12.12"},{"location":"changelog_3x/#version-31211","text":"2020-04-28 Fix: Don\u2019t crash on Java 8u252 which introduces an API previously found only on Java 9 and above. See Jetty\u2019s overview of the API change and its consequences.","title":"Version 3.12.11"},{"location":"changelog_3x/#version-31210","text":"2020-02-29 Fix: Don\u2019t crash on Android 4.1 when detecting methods that became restricted in Android 11. Supporting a full decade of Android releases on our 3.12.x branch is tricky!","title":"Version 3.12.10"},{"location":"changelog_3x/#version-3129","text":"2020-02-24 Fix: Don\u2019t crash on Android 11 due to use of restricted methods. This prevents a crash with the exception, \u201cExpected Android API level 21+ but was 29\u201d.","title":"Version 3.12.9"},{"location":"changelog_3x/#version-3128","text":"2020-01-11 Fix: Don\u2019t crash if the connection is closed when sending a degraded ping. This fixes a regression that was introduced in OkHttp 3.12.7.","title":"Version 3.12.8"},{"location":"changelog_3x/#version-3127","text":"2020-01-03 Fix: Degrade HTTP/2 connections after a timeout. When an HTTP/2 stream times out it may impact the stream only or the entire connection. With this fix OkHttp will now send HTTP/2 pings after a stream timeout to determine whether the connection should remain eligible for pooling.","title":"Version 3.12.7"},{"location":"changelog_3x/#version-3126","text":"2019-09-29 Fix: Cancel calls that fail due to unexpected exceptions. We had a bug where an enqueued call would never call back if it crashed with an unchecked throwable, such as a NullPointerException or OutOfMemoryError . We now call Callback.onFailure() with an IOException that reports the call as canceled. The triggering exception is still delivered to the thread\u2019s UncaughtExceptionHandler . Fix: Don\u2019t evict incomplete entries when iterating the cache. We had a bug where iterating Cache.urls() would prevent in-flight entries from being written.","title":"Version 3.12.6"},{"location":"changelog_3x/#version-3125","text":"2019-09-10 Fix: Don\u2019t lose HTTP/2 flow control bytes when incoming data races with a stream close. If this happened enough then eventually the connection would stall. Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to fail the call.","title":"Version 3.12.5"},{"location":"changelog_3x/#version-3124","text":"2019-09-04 Fix: Don\u2019t crash looking up an absent class on certain buggy Android 4.x devices.","title":"Version 3.12.4"},{"location":"changelog_3x/#version-3123","text":"2019-05-07 Fix: Permit multipart file names to contain non-ASCII characters. Fix: Retain the Route when a connection is reused on a redirect or other follow-up. This was causing some Authenticator calls to see a null route when non-null was expected.","title":"Version 3.12.3"},{"location":"changelog_3x/#version-3122","text":"2019-03-14 Fix: Don\u2019t crash if the HTTPS server returns no certificates in the TLS handshake. Fix: Don\u2019t leak a connection when a call is canceled immediately preceding the onFailure() callback.","title":"Version 3.12.2"},{"location":"changelog_3x/#version-3121","text":"2018-12-23 Fix: Remove overlapping package-info.java . This caused issues with some build tools.","title":"Version 3.12.1"},{"location":"changelog_3x/#version-3120","text":"2018-11-16 OkHttp now supports TLS 1.3. This requires either Conscrypt or Java 11+. Proxy authenticators are now asked for preemptive authentication. OkHttp will now request authentication credentials before creating TLS tunnels through HTTP proxies (HTTP CONNECT ). Authenticators should identify preemptive authentications by the presence of a challenge whose scheme is \u201cOkHttp-Preemptive\u201d. OkHttp now offers full-operation timeouts. This sets a limit on how long the entire call may take and covers resolving DNS, connecting, writing the request body, server processing, and reading the full response body. If a call requires redirects or retries all must complete within one timeout period. Use OkHttpClient.Builder.callTimeout() to specify the default duration and Call.timeout() to specify the timeout of an individual call. New: Return values and fields are now non-null unless otherwise annotated. New: LoggingEventListener makes it easy to get basic visibility into a call\u2019s performance. This class is in the logging-interceptor artifact. New: Headers.Builder.addUnsafeNonAscii() allows non-ASCII values to be added without an immediate exception. New: Headers can be redacted in HttpLoggingInterceptor . New: Headers.Builder now accepts dates. New: OkHttp now accepts java.time.Duration for timeouts on Java 8+ and Android 26+. New: Challenge includes all authentication parameters. New: Upgrade to BouncyCastle 1.60, Conscrypt 1.4.0, and Okio 1.15.0. We don\u2019t yet require Kotlin-friendly Okio 2.x but OkHttp works fine with that series. implementation ( \"org.bouncycastle:bcprov-jdk15on:1.60\" ) implementation ( \"org.conscrypt:conscrypt-openjdk-uber:1.4.0\" ) implementation ( \"com.squareup.okio:okio:1.15.0\" ) Fix: Handle dispatcher executor shutdowns gracefully. When there aren\u2019t any threads to carry a call its callback now gets a RejectedExecutionException . Fix: Don\u2019t permanently cache responses with Cache-Control: immutable . We misunderstood the original immutable proposal! Fix: Change Authenticator \u2018s Route parameter to be nullable. This was marked as non-null but could be called with null in some cases. Fix: Don\u2019t create malformed URLs when MockWebServer is reached via an IPv6 address. Fix: Don\u2019t crash if the system default authenticator is null. Fix: Don\u2019t crash generating elliptic curve certificates on Android. Fix: Don\u2019t crash doing platform detection on RoboVM. Fix: Don\u2019t leak socket connections when web socket upgrades fail.","title":"Version 3.12.0"},{"location":"changelog_3x/#version-3110","text":"2018-07-12 OkHttp\u2019s new okhttp-tls submodule tames HTTPS and TLS. HeldCertificate is a TLS certificate and its private key. Generate a certificate with its builder then use it to sign another certificate or perform a TLS handshake. The certificatePem() method encodes the certificate in the familiar PEM format ( --- BEGIN CERTIFICATE --- ); the privateKeyPkcs8Pem() does likewise for the private key. HandshakeCertificates holds the TLS certificates required for a TLS handshake. On the server it keeps your HeldCertificate and its chain. On the client it keeps the root certificates that are trusted to sign a server\u2019s certificate chain. HandshakeCertificates also works with mutual TLS where these roles are reversed. These classes make it possible to enable HTTPS in MockWebServer in just a few lines of code . OkHttp now supports prior knowledge cleartext HTTP/2. Enable this by setting Protocol.H2_PRIOR_KNOWLEDGE as the lone protocol on an OkHttpClient.Builder . This mode only supports http: URLs and is best suited in closed environments where HTTPS is inappropriate. New: HttpUrl.get(String) is an alternative to HttpUrl.parse(String) that throws an exception when the URL is malformed instead of returning null. Use this to avoid checking for null in situations where the input is known to be well-formed. We\u2019ve also added MediaType.get(String) which is an exception-throwing alternative to MediaType.parse(String) . New: The EventListener API previewed in OkHttp 3.9 has graduated to a stable API. Use this interface to track metrics and monitor HTTP requests\u2019 size and duration. New: okhttp-dnsoverhttps is an experimental API for doing DNS queries over HTTPS. Using HTTPS for DNS offers better security and potentially better performance. This feature is a preview: the API is subject to change. New: okhttp-sse is an early preview of Server-Sent Events (SSE). This feature is incomplete and is only suitable for experimental use. New: MockWebServer now supports client authentication (mutual TLS). Call requestClientAuth() to permit an optional client certificate or requireClientAuth() to require one. New: RecordedRequest.getHandshake() returns the HTTPS handshake of a request sent to MockWebServer . Fix: Honor the MockResponse header delay in MockWebServer. Fix: Don\u2019t release HTTP/2 connections that have multiple canceled calls. We had a bug where canceling calls would cause the shared HTTP/2 connection to be unnecessarily released. This harmed connection reuse. Fix: Ensure canceled and discarded HTTP/2 data is not permanently counted against the limited flow control window. We had a few bugs where window size accounting was broken when streams were canceled or reset. Fix: Recover gracefully if the TLS session returns an unexpected version ( NONE ) or cipher suite ( SSL_NULL_WITH_NULL_NULL ). Fix: Don\u2019t change Conscrypt configuration globally. We migrated from a process-wide setting to configuring only OkHttp\u2019s TLS sockets. Fix: Prefer TLSv1.2 where it is available. On certain older platforms it is necessary to opt-in to TLSv1.2. New: Request.tag() permits multiple tags. Use a Class<?> as a key to identify tags. Note that tag() now returns null if the request has no tag. Previously this would return the request itself. New: Headers.Builder.addAll(Headers) . New: ResponseBody.create(MediaType, ByteString) . New: Embed R8/ProGuard rules in the jar. These will be applied automatically by R8. Fix: Release the connection if Authenticator throws an exception. Fix: Change the declaration of OkHttpClient.cache() to return a @Nullable Cache . The return value has always been nullable but it wasn\u2019t declared properly. Fix: Reverse suppression of connect exceptions. When both a call and its retry fail, we now throw the initial exception which is most likely to be actionable. Fix: Retain interrupted state when throwing InterruptedIOException . A single interrupt should now be sufficient to break out an in-flight OkHttp call. Fix: Don\u2019t drop a call to EventListener.callEnd() when the response body is consumed inside an interceptor.","title":"Version 3.11.0"},{"location":"changelog_3x/#version-3100","text":"2018-02-24 The pingInterval() feature now aggressively checks connectivity for web sockets and HTTP/2 connections. Previously if you configured a ping interval that would cause OkHttp to send pings, but it did not track whether the reply pongs were received. With this update OkHttp requires that every ping receive a response: if it does not the connection will be closed and the listener\u2019s onFailure() method will be called. Web sockets have always been had pings, but pings on HTTP/2 connections is new in this release. Pings are used for connections that are busy carrying calls and for idle connections in the connection pool. (Pings do not impact when pooled connections are evicted). If you have a configured ping interval, you should confirm that it is long enough for a roundtrip from client to server. If your ping interval is too short, slow connections may be misinterpreted as failed connections. A ping interval of 30 seconds is reasonable for most use cases. OkHttp now supports Conscrypt . Conscrypt is a Java Security Provider that integrates BoringSSL into the Java platform. Conscrypt supports more cipher suites than the JVM\u2019s default provider and may also execute more efficiently. To use it, first register a Conscrypt dependency in your build system. OkHttp will use Conscrypt if you set the okhttp.platform system property to conscrypt . Alternatively, OkHttp will also use Conscrypt if you install it as your preferred security provider. To do so, add the following code to execute before you create your OkHttpClient . Security.insertProviderAt( new org.conscrypt.OpenSSLProvider(), 1); Conscrypt is the bundled security provider on Android so it is not necessary to configure it on that platform. New: HttpUrl.addQueryParameter() percent-escapes more characters. Previously several ASCII punctuation characters were not percent-escaped when used with this method. This does not impact already-encoded query parameters in APIs like HttpUrl.parse() and HttpUrl.Builder.addEncodedQueryParameter() . New: CBC-mode ECDSA cipher suites have been removed from OkHttp\u2019s default configuration: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA and TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA . This tracks a Chromium change to remove these cipher suites because they are fragile and rarely-used. New: Don\u2019t fall back to common name (CN) verification for hostnames. This behavior was deprecated with RFC 2818 in May 2000 and was recently dropped from major web browsers. New: Honor the Retry-After response header. HTTP 503 (Unavailable) responses are retried automatically if this header is present and its delay is 0 seconds. HTTP 408 (Client Timeout) responses are retried automatically if the header is absent or its delay is 0 seconds. New: Allow request bodies for all HTTP methods except GET and HEAD. New: Automatic module name of okhttp3 for use with the Java Platform Module System. New: Log gzipped bodies when HttpLoggingInterceptor is used as a network interceptor. New: Protocol.QUIC constant. This protocol is not supported but this constant is included for completeness. New: Upgrade to Okio 1.14.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.14.0 </version> </dependency> com.squareup.okio:okio:1.14.0 Fix: Handle HTTP/1.1 100 Continue status lines, even on requests that did not send the Expect: continue request header. Fix: Do not count web sockets toward the dispatcher\u2019s per-host connection limit. Fix: Avoid using invalid HTTPS sessions. This prevents OkHttp from crashing with the error, Unexpected TLS version: NONE . Fix: Don\u2019t corrupt the response cache when a 304 (Not Modified) response overrides the stored \u201cContent-Encoding\u201d header. Fix: Gracefully shut down the HTTP/2 connection before it exhausts the namespace of stream IDs (~536 million streams). Fix: Never pass a null Route to Authenticator . There was a bug where routes were omitted for eagerly-closed connections.","title":"Version 3.10.0"},{"location":"changelog_3x/#version-391","text":"2017-11-18 New: Recover gracefully when Android\u2019s DNS crashes with an unexpected NullPointerException . New: Recover gracefully when Android\u2019s socket connections crash with an unexpected ClassCastException . Fix: Don\u2019t include the URL\u2019s fragment in encodedQuery() when the query itself is empty.","title":"Version 3.9.1"},{"location":"changelog_3x/#version-390","text":"2017-09-03 Interceptors are more capable. The Chain interface now offers access to the call and can adjust all call timeouts. Note that this change is source-incompatible for code that implements the Chain interface. We don\u2019t expect this to be a problem in practice! OkHttp has an experimental new API for tracking metrics. The new EventListener API is designed to help developers monitor HTTP requests\u2019 size and duration. This feature is an unstable preview: the API is subject to change, and the implementation is incomplete. This is a big new API we are eager for feedback. New: Support ALPN via Google Play Services\u2019 Dynamic Security Provider. This expands HTTP/2 support to older Android devices that have Google Play Services. New: Consider all routes when looking for candidate coalesced connections. This increases the likelihood that HTTP/2 connections will be shared. New: Authentication challenges and credentials now use a charset. Use this in your authenticator to support user names and passwords with non-ASCII characters. New: Accept a charset in FormBody.Builder . Previously form bodies were always UTF-8. New: Support the immutable cache-control directive. Fix: Don\u2019t crash when an HTTP/2 call is redirected while the connection is being shut down. Fix: Don\u2019t drop headers of healthy streams that raced with GOAWAY frames. This bug would cause HTTP/2 streams to occasional hang when the connection was shutting down. Fix: Honor OkHttpClient.retryOnConnectionFailure() when the response is a HTTP 408 Request Timeout. If retries are enabled, OkHttp will retry exactly once in response to a 408. Fix: Don\u2019t crash when reading the empty HEAD response body if it specifies a Content-Length . Fix: Don\u2019t crash if the thread is interrupted while reading the public suffix database. Fix: Use relative resource path when loading the public suffix database. Loading the resource using a path relative to the class prevents conflicts when the OkHttp classes are relocated (shaded) by allowing multiple private copies of the database. Fix: Accept cookies for URLs that have an IPv6 address for a host. Fix: Don\u2019t log the protocol (HTTP/1.1, h2) in HttpLoggingInterceptor if the protocol isn\u2019t negotiated yet! Previously we\u2019d log HTTP/1.1 by default, and this was confusing. Fix: Omit the message from MockWebServer\u2019s HTTP/2 :status header. Fix: Handle \u2018Expect: 100 Continue\u2019 properly in MockWebServer.","title":"Version 3.9.0"},{"location":"changelog_3x/#version-381","text":"2017-06-18 Fix: Recover gracefully from stale coalesced connections. We had a bug where connection coalescing (introduced in OkHttp 3.7.0) and stale connection recovery could interact to cause a NoSuchElementException crash in the RouteSelector .","title":"Version 3.8.1"},{"location":"changelog_3x/#version-380","text":"2017-05-13 OkHttp now uses @Nullable to annotate all possibly-null values. We\u2019ve added a compile-time dependency on the JSR 305 annotations. This is a provided dependency and does not need to be included in your build configuration, .jar file, or .apk . We use @ParametersAreNonnullByDefault and all parameters and return types are never null unless explicitly annotated @Nullable . Warning: this release is source-incompatible for Kotlin users. Nullability was previously ambiguous and lenient but now the compiler will enforce strict null checks. New: The response message is now non-null. This is the \u201cNot Found\u201d in the status line \u201cHTTP 404 Not Found\u201d. If you are building responses programmatically (with new Response.Builder() ) you must now always supply a message. An empty string \"\" is permitted. This value was never null on responses returned by OkHttp itself, and it was an old mistake to permit application code to omit a message. The challenge\u2019s scheme and realm are now non-null. If you are calling new Challenge(scheme, realm) you must provide non-null values. These were never null in challenges created by OkHttp, but could have been null in application code that creates challenges. New: The TlsVersion of a Handshake is now non-null. If you are calling Handshake.get() with a null TLS version, you must instead now provide a non-null TlsVersion . Cache responses persisted prior to OkHttp 3.0 did not store a TLS version; for these unknown values the handshake is defaulted to TlsVersion.SSL_3_0 . New: Upgrade to Okio 1.13.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.13.0 </version> </dependency> com.squareup.okio:okio:1.13.0 Fix: gracefully recover when Android 7.0\u2019s sockets throw an unexpected NullPointerException .","title":"Version 3.8.0"},{"location":"changelog_3x/#version-370","text":"2017-04-15 OkHttp no longer recovers from TLS handshake failures by attempting a TLSv1 connection. The fallback was necessary for servers that implemented version negotiation incorrectly. Now that 99.99% of servers do it right this fallback is obsolete. Fix: Do not honor cookies set on a public domain. Previously a malicious site could inject cookies on top-level domains like co.uk because our cookie parser didn\u2019t honor the public suffix list. Alongside this fix is a new API, HttpUrl.topPrivateDomain() , which returns the privately domain name if the URL has one. Fix: Change MediaType.charset() to return null for unexpected charsets. Fix: Don\u2019t skip cache invalidation if the invalidating response has no body. Fix: Don\u2019t use a cryptographic random number generator for web sockets. Some Android devices implement SecureRandom incorrectly! Fix: Correctly canonicalize IPv6 addresses in HttpUrl . This prevented OkHttp from trusting HTTPS certificates issued to certain IPv6 addresses. Fix: Don\u2019t reuse connections after an unsuccessful Expect: 100-continue . Fix: Handle either TLS_ or SSL_ prefixes for cipher suite names. This is necessary for IBM JVMs that use the SSL_ prefix exclusively. Fix: Reject HTTP/2 data frames if the stream ID is 0. New: Upgrade to Okio 1.12.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.12.0 </version> </dependency> com.squareup.okio:okio:1.12.0 New: Connection coalescing. OkHttp may reuse HTTP/2 connections across calls that share an IP address and HTTPS certificate, even if their domain names are different. New: MockWebServer\u2019s RecordedRequest exposes the requested HttpUrl with getRequestUrl() .","title":"Version 3.7.0"},{"location":"changelog_3x/#version-360","text":"2017-01-29 Fix: Don\u2019t crash with a \u201ccache is closed\u201d error when there is an error initializing the cache. Fix: Calling disconnect() on a connecting HttpUrlConnection could cause it to retry in an infinite loop! This regression was introduced in OkHttp 2.7.0. Fix: Drop cookies that contain ASCII NULL and other bad characters. Previously such cookies would cause OkHttp to crash when they were included in a request. Fix: Release duplicated multiplexed connections. If we concurrently establish connections to an HTTP/2 server, close all but the first connection. Fix: Fail the HTTP/2 connection if first frame isn\u2019t SETTINGS . Fix: Forbid spaces in header names. Fix: Don\u2019t offer to do gzip if the request is partial. Fix: MockWebServer is now usable with JUnit 5. That update broke the rules . New: Support Expect: 100-continue as a request header. Callers can use this header to pessimistically hold off on transmitting a request body until a server gives the go-ahead. New: Permit network interceptors to rewrite the host header for HTTP/2. This makes it possible to do domain fronting. New: charset support for Credentials.basic() .","title":"Version 3.6.0"},{"location":"changelog_3x/#version-350","text":"2016-11-30 Web Sockets are now a stable feature of OkHttp. Since being introduced as a beta feature in OkHttp 2.3 our web socket client has matured. Connect to a server\u2019s web socket with OkHttpClient.newWebSocket() , send messages with send() , and receive messages with the WebSocketListener . The okhttp-ws submodule is no longer available and okhttp-ws artifacts from previous releases of OkHttp are not compatible with OkHttp 3.5. When upgrading to the new package please note that the WebSocket and WebSocketCall classes have been merged. Sending messages is now asynchronous and they may be enqueued before the web socket is connected. OkHttp no longer attempts a direct connection if the system\u2019s HTTP proxy fails. This behavior was surprising because OkHttp was disregarding the user\u2019s specified configuration. If you need to customize proxy fallback behavior, implement your own java.net.ProxySelector . Fix: Support TLSv1.3 on devices that support it. Fix: Share pooled connections across equivalent OkHttpClient instances. Previous releases had a bug where a shared connection pool did not guarantee shared connections in some cases. Fix: Prefer the server\u2019s response body on all conditional cache misses. Previously we would return the cached response\u2019s body if it had a newer Last-Modified date. Fix: Update the stored timestamp on conditional cache hits. New: Optimized HTTP/2 request header encoding. More headers are HPACK-encoded and string literals are now Huffman-encoded. New: Expose Part headers and body in Multipart . New: Make ResponseBody.string() and ResponseBody.charStream() BOM-aware. If your HTTP response body begins with a byte order mark it will be consumed and used to select a charset for the remaining bytes. Most applications should not need a byte order mark. New: Upgrade to Okio 1.11.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.11.0 </version> </dependency> com.squareup.okio:okio:1.11.0 Fix: Avoid sending empty HTTP/2 data frames when there is no request body. Fix: Add a leading . for better domain matching in JavaNetCookieJar . Fix: Gracefully recover from HTTP/2 connection shutdowns at start of request. Fix: Be lenient if a MediaType \u2018s character set is 'single-quoted' . Fix: Allow horizontal tab characters in header values. Fix: When parsing HTTP authentication headers permit challenge parameters in any order.","title":"Version 3.5.0"},{"location":"changelog_3x/#version-342","text":"2016-11-03 Fix: Recover gracefully when an HTTP/2 connection is shutdown. We had a bug where shutdown HTTP/2 connections were considered usable. This caused infinite loops when calls attempted to recover.","title":"Version 3.4.2"},{"location":"changelog_3x/#version-341","text":"2016-07-10 Fix a major bug in encoding HTTP headers. In 3.4.0 and 3.4.0-RC1 OkHttp had an off-by-one bug in our HPACK encoder. This bug could have caused the wrong headers to be emitted after a sequence of HTTP/2 requests! Everyone who is using OkHttp 3.4.0 or 3.4.0-RC1 should upgrade for this bug fix.","title":"Version 3.4.1"},{"location":"changelog_3x/#version-340","text":"2016-07-08 New: Support dynamic table size changes to HPACK Encoder. Fix: Use TreeMap in Headers.toMultimap() . This makes string lookups on the returned map case-insensitive. Fix: Don\u2019t share the OkHttpClient\u2019s Dispatcher in HttpURLConnection .","title":"Version 3.4.0"},{"location":"changelog_3x/#version-340-rc1","text":"2016-07-02 We\u2019ve rewritten HttpURLConnection and HttpsURLConnection. Previously we shared a single HTTP engine between two frontend APIs: HttpURLConnection and Call . With this release we\u2019ve rearranged things so that the HttpURLConnection frontend now delegates to the Call APIs internally. This has enabled substantial simplifications and optimizations in the OkHttp core for both frontends. For most HTTP requests the consequences of this change will be negligible. If your application uses HttpURLConnection.connect() , setFixedLengthStreamingMode() , or setChunkedStreamingMode() , OkHttp will now use a async dispatcher thread to establish the HTTP connection. We don\u2019t expect this change to have any behavior or performance consequences. Regardless, please exercise your OkUrlFactory and HttpURLConnection code when applying this update. Cipher suites may now have arbitrary names. Previously CipherSuite was a Java enum and it was impossible to define new cipher suites without first upgrading OkHttp. With this change it is now a regular Java class with enum-like constants. Application code that uses enum methods on cipher suites ( ordinal() , name() , etc.) will break with this change. Fix: CertificatePinner now matches canonicalized hostnames. Previously this was case sensitive. This change should also make it easier to configure certificate pinning for internationalized domain names. Fix: Don\u2019t crash on non-ASCII ETag headers. Previously OkHttp would reject these headers when validating a cached response. Fix: Don\u2019t allow remote peer to arbitrarily size the HPACK decoder dynamic table. Fix: Honor per-host configuration in Android\u2019s network security config. Previously disabling cleartext for any host would disable cleartext for all hosts. Note that this setting is only available on Android 24+. New: HPACK compression is now dynamic. This should improve performance when transmitting request headers over HTTP/2. New: Dispatcher.setIdleCallback() can be used to signal when there are no calls in flight. This is useful for testing with Espresso . New: Upgrade to Okio 1.9.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.9.0 </version> </dependency>","title":"Version 3.4.0-RC1"},{"location":"changelog_3x/#version-331","text":"2016-05-28 Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified newline characters as control characters. This is fixed. Fix: Don\u2019t crash reading non-ASCII characters in HTTP/2 headers or in cached HTTP headers. Fix: Retain the response body when an attempt to open a web socket returns a non-101 response code.","title":"Version 3.3.1"},{"location":"changelog_3x/#version-330","text":"2016-05-24 New: Response.sentRequestAtMillis() and receivedResponseAtMillis() methods track the system\u2019s local time when network calls are made. These replace the OkHttp-Sent-Millis and OkHttp-Received-Millis headers that were present in earlier versions of OkHttp. New: Accept user-provided trust managers in OkHttpClient.Builder . This allows OkHttp to satisfy its TLS requirements directly. Otherwise OkHttp will use reflection to extract the TrustManager from the SSLSocketFactory . New: Support prerelease Java 9. This gets ALPN from the platform rather than relying on the alpn-boot bootclasspath override. New: HttpLoggingInterceptor now logs connection failures. New: Upgrade to Okio 1.8.0. <dependency> <groupId> com.squareup.okio </groupId> <artifactId> okio </artifactId> <version> 1.8.0 </version> </dependency> Fix: Gracefully recover from a failure to rebuild the cache journal. Fix: Don\u2019t corrupt cache entries when a cache entry is evicted while it is being updated. Fix: Make logging more consistent throughout OkHttp. Fix: Log plaintext bodies only. This uses simple heuristics to differentiate text from other data. Fix: Recover from REFUSED_STREAM errors in HTTP/2. This should improve interoperability with Nginx 1.10.0, which refuses streams created before HTTP/2 settings have been acknowledged. Fix: Improve recovery from failed routes. Fix: Accommodate tunneling proxies that close the connection after an auth challenge. Fix: Use the proxy authenticator when authenticating HTTP proxies. This regression was introduced in OkHttp 3.0. Fix: Fail fast if network interceptors transform the response body such that closing it doesn\u2019t also close the underlying stream. We had a bug where OkHttp would attempt to reuse a connection but couldn\u2019t because it was still held by a prior request. Fix: Ensure network interceptors always have access to the underlying connection. Fix: Use X509TrustManagerExtensions on Android 17+. Fix: Unblock waiting dispatchers on MockWebServer shutdown.","title":"Version 3.3.0"},{"location":"changelog_3x/#version-320","text":"2016-02-25 Fix: Change the certificate pinner to always build full chains. This prevents a potential crash when using certificate pinning with the Google Play Services security provider. Fix: Make IPv6 request lines consistent with Firefox and Chrome. Fix: Recover gracefully when trimming the response cache fails. New: Add multiple path segments using a single string in HttpUrl.Builder . New: Support SHA-256 pins in certificate pinner.","title":"Version 3.2.0"},{"location":"changelog_3x/#version-312","text":"2016-02-10 Fix: Don\u2019t crash when finding the trust manager on Robolectric. We attempted to detect the host platform and got confused because Robolectric looks like Android but isn\u2019t! Fix: Change CertificatePinner to skip sanitizing the certificate chain when no certificates were pinned. This avoids an SSL failure in insecure \u201ctrust everyone\u201d configurations, such as when talking to a development HTTPS server that has a self-signed certificate.","title":"Version 3.1.2"},{"location":"changelog_3x/#version-311","text":"2016-02-07 Fix: Don\u2019t crash when finding the trust manager if the Play Services (GMS) security provider is installed. Fix: The previous release introduced a performance regression on Android, caused by looking up CA certificates. This is now fixed.","title":"Version 3.1.1"},{"location":"changelog_3x/#version-310","text":"2016-02-06 New: WebSockets now defer some writes. This should improve performance for some applications. New: Override equals() and hashCode() in our new cookie class. This class now defines equality by value rather than by reference. New: Handle 408 responses by retrying the request. This allows servers to direct clients to retry rather than failing permanently. New: Expose the framed protocol in Connection . Previously this would return the application-layer protocol (HTTP/1.1 or HTTP/1.0); now it always returns the wire-layer protocol (HTTP/2, SPDY/3.1, or HTTP/1.1). Fix: Permit the trusted CA root to be pinned by CertificatePinner . Fix: Silently ignore unknown HTTP/2 settings. Previously this would cause the entire connection to fail. Fix: Don\u2019t crash on unexpected charsets in the logging interceptor. Fix: OkHttpClient is now non-final for the benefit of mocking frameworks. Mocking sophisticated classes like OkHttpClient is fragile and you shouldn\u2019t do it. But if that\u2019s how you want to live your life we won\u2019t stand in your way!","title":"Version 3.1.0"},{"location":"changelog_3x/#version-301","text":"2016-01-14 Rollback OSGi support. This was causing library jars to include more classes than expected, which interfered with Gradle builds.","title":"Version 3.0.1"},{"location":"changelog_3x/#version-300","text":"2016-01-13 This release commits to a stable 3.0 API. Read the 3.0.0-RC1 changes for advice on upgrading from 2.x to 3.x. The Callback interface now takes a Call . This makes it easier to check if the call was canceled from within the callback. When migrating async calls to this new API, Call is now the first parameter for both onResponse() and onFailure() . Fix: handle multiple cookies in JavaNetCookieJar on Android. Fix: improve the default HTTP message in MockWebServer responses. Fix: don\u2019t leak file handles when a conditional GET throws. Fix: Use charset specified by the request body content type in OkHttp\u2019s logging interceptor. Fix: Don\u2019t eagerly release pools on cache hits. New: Make OkHttp OSGi ready. New: Add already-implemented interfaces Closeable and Flushable to the cache.","title":"Version 3.0.0"},{"location":"changelog_3x/#version-300-rc1","text":"2016-01-02 OkHttp 3 is a major release focused on API simplicity and consistency. The API changes are numerous but most are cosmetic. Applications should be able to upgrade from the 2.x API to the 3.x API mechanically and without risk. Because the release includes breaking API changes, we\u2019re changing the project\u2019s package name from com.squareup.okhttp to okhttp3 . This should make it possible for large applications to migrate incrementally. The Maven group ID is now com.squareup.okhttp3 . For an explanation of this strategy, see Jake Wharton\u2019s post, Java Interoperability Policy for Major Version Updates . This release obsoletes OkHttp 2.x, and all code that uses OkHttp\u2019s com.squareup.okhttp package should upgrade to the okhttp3 package. Libraries that depend on OkHttp should upgrade quickly to prevent applications from being stuck on the old version. There is no longer a global singleton connection pool. In OkHttp 2.x, all OkHttpClient instances shared a common connection pool by default. In OkHttp 3.x, each new OkHttpClient gets its own private connection pool. Applications should avoid creating many connection pools as doing so prevents connection reuse. Each connection pool holds its own set of connections alive so applications that have many pools also risk exhausting memory! The best practice in OkHttp 3 is to create a single OkHttpClient instance and share it throughout the application. Requests that needs a customized client should call OkHttpClient.newBuilder() on that shared instance. This allows customization without the drawbacks of separate connection pools. OkHttpClient is now stateless. In the 2.x API OkHttpClient had getters and setters. Internally each request was forced to make its own complete snapshot of the OkHttpClient instance to defend against racy configuration changes. In 3.x, OkHttpClient is now stateless and has a builder. Note that this class is not strictly immutable as it has stateful members like the connection pool and cache. Get and Set prefixes are now avoided. With ubiquitous builders throughout OkHttp these accessor prefixes aren\u2019t necessary. Previously OkHttp used get and set prefixes sporadically which make the API inconsistent and awkward to explore. OkHttpClient now implements the new Call.Factory interface. This interface will make your code easier to test. When you test code that makes HTTP requests, you can use this interface to replace the real OkHttpClient with your own mocks or fakes. The interface will also let you use OkHttp\u2019s API with another HTTP client\u2019s implementation. This is useful in sandboxed environments like Google App Engine. OkHttp now does cookies. We\u2019ve replaced java.net.CookieHandler with a new interface, CookieJar and added our own Cookie model class. This new cookie follows the latest RFC and supports the same cookie attributes as modern web browsers. Form and Multipart bodies are now modeled. We\u2019ve replaced the opaque FormEncodingBuilder with the more powerful FormBody and FormBody.Builder combo. Similarly we\u2019ve upgraded MultipartBuilder into MultipartBody , MultipartBody.Part , and MultipartBody.Builder . The Apache HTTP client and HttpURLConnection APIs are deprecated. They continue to work as they always have, but we\u2019re moving everything to the new OkHttp 3 API. The okhttp-apache and okhttp-urlconnection modules should be only be used to accelerate a transition to OkHttp\u2019s request/response API. These deprecated modules will be dropped in an upcoming OkHttp 3.x release. Canceling batches of calls is now the application\u2019s responsibility. The API to cancel calls by tag has been removed and replaced with a more general mechanism. The dispatcher now exposes all in-flight calls via its runningCalls() and queuedCalls() methods. You can write code that selects calls by tag, host, or whatever, and invokes Call.cancel() on the ones that are no longer necessary. OkHttp no longer uses the global java.net.Authenticator by default. We\u2019ve changed our Authenticator interface to authenticate web and proxy authentication failures through a single method. An adapter for the old authenticator is available in the okhttp-urlconnection module. Fix: Don\u2019t throw IOException on ResponseBody.contentLength() or close() . Fix: Never throw converting an HttpUrl to a java.net.URI . This changes the uri() method to handle malformed percent-escapes and characters forbidden by URI . Fix: When a connect times out, attempt an alternate route. Previously route selection was less efficient when differentiating failures. New: Response.peekBody() lets you access the response body without consuming it. This may be handy for interceptors! New: HttpUrl.newBuilder() resolves a link to a builder. New: Add the TLS version to the Handshake . New: Drop Request.uri() and Request#urlString() . Just use Request.url().uri() and Request.url().toString() . New: Add URL to HTTP response logging. New: Make HttpUrl the blessed URL method of Request .","title":"Version 3.0.0-RC1"},{"location":"changelog_3x/#version-2x","text":"Change log","title":"Version 2.x"},{"location":"code_of_conduct/","text":"Open Source Code of Conduct \u00b6 At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement \u00b6 We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks \u00b6 Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"code_of_conduct/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"code_of_conduct/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"code_of_conduct/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"code_of_conduct/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"code_of_conduct/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"concurrency/","text":"Concurrency \u00b6 This document describes the concurrency considerations for http/2 connections and the connection pool within OkHttp. HTTP/2 Connections \u00b6 The HttpURLConnection API is a blocking API. You make a blocking write to send a request, and a blocking read to receive the response. Blocking APIs \u00b6 Blocking APIs are convenient because you get top-to-bottom procedural code without indirection. Network calls work like regular method calls: ask for data and it is returned. If the request fails, you get a stacktrace right where the call was made. Blocking APIs may be inefficient because you hold a thread idle while waiting on the network. Threads are expensive because they have both a memory overhead and a context-switching overhead. Framed protocols \u00b6 Framed protocols like http/2 don\u2019t lend themselves to blocking APIs. Each application-layer thread wants to do blocking I/O for a specific stream, but the streams are multiplexed on the socket. You can\u2019t just talk to the socket, you need to cooperate with the other application-layer threads that you\u2019re sharing it with. Framing rules make it impractical to implement http/2 correctly on a single blocking thread. The flow-control features introduce feedback between reads and writes, requiring writes to acknowledge reads and reads to throttle writes. In OkHttp we expose a blocking API over a framed protocol. This document explains the code and policy that makes that work. Threads \u00b6 Application\u2019s calling thread \u00b6 The application-layer must block on writing I/O. We can\u2019t return from a write until we\u2019ve pushed its bytes onto the socket. Otherwise, if the write fails we are unable to deliver its IOException to the application. We would have told the application layer that the write succeeded, but it didn\u2019t! The application-layer can also do blocking reads. If the application asks to read and there\u2019s nothing available, we need to hold that thread until either the bytes arrive, the stream is closed, or a timeout elapses. If we get bytes but there\u2019s nobody asking for them, we buffer them. We don\u2019t consider bytes as delivered for flow control until they\u2019re consumed by the application. Consider an application streaming a video over http/2. Perhaps the user pauses the video and the application stops reading bytes from this stream. The buffer will fill up, and flow control prevents the server from sending more data on this stream. When the user unpauses her video the buffer drains, the read is acknowledged, and the server proceeds to stream data. Shared reader thread \u00b6 We can\u2019t rely on application threads to read data from the socket. Application threads are transient: sometimes they\u2019re reading and writing and sometimes they\u2019re off doing application-layer things. But the socket is permanent, and it needs constant attention: we dispatch all incoming frames so the connection is good-to-go when the application layer needs it. So we have a dedicated thread for every socket that just reads frames and dispatches them. The reader thread must never run application-layer code. Otherwise one slow stream can hold up the entire connection. Similarly, the reader thread must never block on writing because this can deadlock the connection. Consider a client and server that both violate this rule. If you get unlucky, they could fill up their TCP buffers (so that writes block) and then use their reader threads to write a frame. Nobody is reading on either end, and the buffers are never drained. Do-stuff-later pool \u00b6 Sometimes there\u2019s an action required like calling the application layer or responding to a ping, and the thread discovering the action is not the thread that should do the work. We enqueue a runnable on this executor and it gets handled by one of the executor\u2019s threads. Locks \u00b6 We have 3 different things that we synchronize on. Http2Connection \u00b6 This lock guards internal state of each connection. This lock is never held for blocking operations. That means that we acquire the lock, read or write a few fields and release the lock. No I/O and no application-layer callbacks. Http2Stream \u00b6 This lock guards the internal state of each stream. As above, it is never held for blocking operations. When we need to hold an application thread to block a read, we use wait/notify on this lock. This works because the lock is released while wait() is waiting. Http2Writer \u00b6 Socket writes are guarded by the Http2Writer. Only one stream can write at a time so that messages are not interleaved. Writes are either made by application-layer threads or the do-stuff-later pool. Holding multiple locks \u00b6 You\u2019re allowed to take the Http2Connection lock while holding the Http2Writer lock. But not vice-versa. Because taking the Http2Writer lock can block. This is necessary for bookkeeping when creating new streams. Correct framing requires that stream IDs are sequential on the socket, so we need to bundle assigning the ID with sending the SYN_STREAM frame. Connection Pool \u00b6 A primary responsibility for any HTTP client is to efficiently manage network connections. Creating and establishing new connections require a fair amount of overhead and added latency. OkHttp will make every effort to reuse existing connections to avoid this overhead and added latency. Every OkHttpClient uses a connection pool. Its job is to maintain a reference to all open connections. When an HTTP request is started, OkHttp will attempt to reuse an existing connection from the pool. If there are no existing connections, a new one is created and put into the connection pool. For HTTP/2, the connection can be reused immediately. For HTTP/1, the request must be completed before it can be reused. Since HTTP requests frequently happen in parallel, connection pooling must be thread-safe. These are the primary classes involved with establishing, sharing, and terminating connections: RealConnectionPool manages reuse of HTTP and HTTP/2 connections for reduced latency. Every OkHttpClient has one, and its lifetime spans the lifetime of the OkHttpClient. RealConnection is the socket and streams of an HTTP/1 or HTTP/2 connection. These are created on demand to fulfill HTTP requests. They may be reused for many HTTP request/response exchanges. Their lifetime is typically shorter than a connection pool. Exchange carries a single HTTP request/response pair. ExchangeFinder chooses which connection carries each exchange. Where possible it will use the same connection for all exchanges in a single call. It prefers reusing pooled connections over establishing new connections. Per-Connection Locks \u00b6 Each connection has its own lock. The connections in the pool are all in a ConcurrentLinkedQueue . Due to data races, iterators of this queue may return removed connections. Callers must check the connection\u2019s noNewExchanges property before using connections from the pool. The connection lock is never held while doing I/O (even closing a socket) to prevent contention. A lock-per-connection is used to maximize concurrency.","title":"Concurrency"},{"location":"concurrency/#concurrency","text":"This document describes the concurrency considerations for http/2 connections and the connection pool within OkHttp.","title":"Concurrency"},{"location":"concurrency/#http2-connections","text":"The HttpURLConnection API is a blocking API. You make a blocking write to send a request, and a blocking read to receive the response.","title":"HTTP/2 Connections"},{"location":"concurrency/#blocking-apis","text":"Blocking APIs are convenient because you get top-to-bottom procedural code without indirection. Network calls work like regular method calls: ask for data and it is returned. If the request fails, you get a stacktrace right where the call was made. Blocking APIs may be inefficient because you hold a thread idle while waiting on the network. Threads are expensive because they have both a memory overhead and a context-switching overhead.","title":"Blocking APIs"},{"location":"concurrency/#framed-protocols","text":"Framed protocols like http/2 don\u2019t lend themselves to blocking APIs. Each application-layer thread wants to do blocking I/O for a specific stream, but the streams are multiplexed on the socket. You can\u2019t just talk to the socket, you need to cooperate with the other application-layer threads that you\u2019re sharing it with. Framing rules make it impractical to implement http/2 correctly on a single blocking thread. The flow-control features introduce feedback between reads and writes, requiring writes to acknowledge reads and reads to throttle writes. In OkHttp we expose a blocking API over a framed protocol. This document explains the code and policy that makes that work.","title":"Framed protocols"},{"location":"concurrency/#threads","text":"","title":"Threads"},{"location":"concurrency/#applications-calling-thread","text":"The application-layer must block on writing I/O. We can\u2019t return from a write until we\u2019ve pushed its bytes onto the socket. Otherwise, if the write fails we are unable to deliver its IOException to the application. We would have told the application layer that the write succeeded, but it didn\u2019t! The application-layer can also do blocking reads. If the application asks to read and there\u2019s nothing available, we need to hold that thread until either the bytes arrive, the stream is closed, or a timeout elapses. If we get bytes but there\u2019s nobody asking for them, we buffer them. We don\u2019t consider bytes as delivered for flow control until they\u2019re consumed by the application. Consider an application streaming a video over http/2. Perhaps the user pauses the video and the application stops reading bytes from this stream. The buffer will fill up, and flow control prevents the server from sending more data on this stream. When the user unpauses her video the buffer drains, the read is acknowledged, and the server proceeds to stream data.","title":"Application's calling thread"},{"location":"concurrency/#shared-reader-thread","text":"We can\u2019t rely on application threads to read data from the socket. Application threads are transient: sometimes they\u2019re reading and writing and sometimes they\u2019re off doing application-layer things. But the socket is permanent, and it needs constant attention: we dispatch all incoming frames so the connection is good-to-go when the application layer needs it. So we have a dedicated thread for every socket that just reads frames and dispatches them. The reader thread must never run application-layer code. Otherwise one slow stream can hold up the entire connection. Similarly, the reader thread must never block on writing because this can deadlock the connection. Consider a client and server that both violate this rule. If you get unlucky, they could fill up their TCP buffers (so that writes block) and then use their reader threads to write a frame. Nobody is reading on either end, and the buffers are never drained.","title":"Shared reader thread"},{"location":"concurrency/#do-stuff-later-pool","text":"Sometimes there\u2019s an action required like calling the application layer or responding to a ping, and the thread discovering the action is not the thread that should do the work. We enqueue a runnable on this executor and it gets handled by one of the executor\u2019s threads.","title":"Do-stuff-later pool"},{"location":"concurrency/#locks","text":"We have 3 different things that we synchronize on.","title":"Locks"},{"location":"concurrency/#http2connection","text":"This lock guards internal state of each connection. This lock is never held for blocking operations. That means that we acquire the lock, read or write a few fields and release the lock. No I/O and no application-layer callbacks.","title":"Http2Connection"},{"location":"concurrency/#http2stream","text":"This lock guards the internal state of each stream. As above, it is never held for blocking operations. When we need to hold an application thread to block a read, we use wait/notify on this lock. This works because the lock is released while wait() is waiting.","title":"Http2Stream"},{"location":"concurrency/#http2writer","text":"Socket writes are guarded by the Http2Writer. Only one stream can write at a time so that messages are not interleaved. Writes are either made by application-layer threads or the do-stuff-later pool.","title":"Http2Writer"},{"location":"concurrency/#holding-multiple-locks","text":"You\u2019re allowed to take the Http2Connection lock while holding the Http2Writer lock. But not vice-versa. Because taking the Http2Writer lock can block. This is necessary for bookkeeping when creating new streams. Correct framing requires that stream IDs are sequential on the socket, so we need to bundle assigning the ID with sending the SYN_STREAM frame.","title":"Holding multiple locks"},{"location":"concurrency/#connection-pool","text":"A primary responsibility for any HTTP client is to efficiently manage network connections. Creating and establishing new connections require a fair amount of overhead and added latency. OkHttp will make every effort to reuse existing connections to avoid this overhead and added latency. Every OkHttpClient uses a connection pool. Its job is to maintain a reference to all open connections. When an HTTP request is started, OkHttp will attempt to reuse an existing connection from the pool. If there are no existing connections, a new one is created and put into the connection pool. For HTTP/2, the connection can be reused immediately. For HTTP/1, the request must be completed before it can be reused. Since HTTP requests frequently happen in parallel, connection pooling must be thread-safe. These are the primary classes involved with establishing, sharing, and terminating connections: RealConnectionPool manages reuse of HTTP and HTTP/2 connections for reduced latency. Every OkHttpClient has one, and its lifetime spans the lifetime of the OkHttpClient. RealConnection is the socket and streams of an HTTP/1 or HTTP/2 connection. These are created on demand to fulfill HTTP requests. They may be reused for many HTTP request/response exchanges. Their lifetime is typically shorter than a connection pool. Exchange carries a single HTTP request/response pair. ExchangeFinder chooses which connection carries each exchange. Where possible it will use the same connection for all exchanges in a single call. It prefers reusing pooled connections over establishing new connections.","title":"Connection Pool"},{"location":"concurrency/#per-connection-locks","text":"Each connection has its own lock. The connections in the pool are all in a ConcurrentLinkedQueue . Due to data races, iterators of this queue may return removed connections. Callers must check the connection\u2019s noNewExchanges property before using connections from the pool. The connection lock is never held while doing I/O (even closing a socket) to prevent contention. A lock-per-connection is used to maximize concurrency.","title":"Per-Connection Locks"},{"location":"connections/","text":"Connections \u00b6 Although you provide only the URL, OkHttp plans its connection to your webserver using three types: URL, Address, and Route. URLs \u00b6 URLs (like https://github.com/square/okhttp ) are fundamental to HTTP and the Internet. In addition to being a universal, decentralized naming scheme for everything on the web, they also specify how to access web resources. URLs are abstract: They specify that the call may be plaintext ( http ) or encrypted ( https ), but not which cryptographic algorithms should be used. Nor do they specify how to verify the peer\u2019s certificates (the HostnameVerifier ) or which certificates can be trusted (the SSLSocketFactory ). They don\u2019t specify whether a specific proxy server should be used or how to authenticate with that proxy server. They\u2019re also concrete: each URL identifies a specific path (like /square/okhttp ) and query (like ?q=sharks&lang=en ). Each webserver hosts many URLs. Addresses \u00b6 Addresses specify a webserver (like github.com ) and all of the static configuration necessary to connect to that server: the port number, HTTPS settings, and preferred network protocols (like HTTP/2 or SPDY). URLs that share the same address may also share the same underlying TCP socket connection. Sharing a connection has substantial performance benefits: lower latency, higher throughput (due to TCP slow start ) and conserved battery. OkHttp uses a ConnectionPool that automatically reuses HTTP/1.x connections and multiplexes HTTP/2 and SPDY connections. In OkHttp some fields of the address come from the URL (scheme, hostname, port) and the rest come from the OkHttpClient . Routes \u00b6 Routes supply the dynamic information necessary to actually connect to a webserver. This is the specific IP address to attempt (as discovered by a DNS query), the exact proxy server to use (if a ProxySelector is in use), and which version of TLS to negotiate (for HTTPS connections). There may be many routes for a single address. For example, a webserver that is hosted in multiple datacenters may yield multiple IP addresses in its DNS response. Connections \u00b6 When you request a URL with OkHttp, here\u2019s what it does: It uses the URL and configured OkHttpClient to create an address . This address specifies how we\u2019ll connect to the webserver. It attempts to retrieve a connection with that address from the connection pool . If it doesn\u2019t find a connection in the pool, it selects a route to attempt. This usually means making a DNS request to get the server\u2019s IP addresses. It then selects a TLS version and proxy server if necessary. If it\u2019s a new route, it connects by building either a direct socket connection, a TLS tunnel (for HTTPS over an HTTP proxy), or a direct TLS connection. It does TLS handshakes as necessary. It sends the HTTP request and reads the response. If there\u2019s a problem with the connection, OkHttp will select another route and try again. This allows OkHttp to recover when a subset of a server\u2019s addresses are unreachable. It\u2019s also useful when a pooled connection is stale or if the attempted TLS version is unsupported. Once the response has been received, the connection will be returned to the pool so it can be reused for a future request. Connections are evicted from the pool after a period of inactivity.","title":"Connections"},{"location":"connections/#connections","text":"Although you provide only the URL, OkHttp plans its connection to your webserver using three types: URL, Address, and Route.","title":"Connections"},{"location":"connections/#urls","text":"URLs (like https://github.com/square/okhttp ) are fundamental to HTTP and the Internet. In addition to being a universal, decentralized naming scheme for everything on the web, they also specify how to access web resources. URLs are abstract: They specify that the call may be plaintext ( http ) or encrypted ( https ), but not which cryptographic algorithms should be used. Nor do they specify how to verify the peer\u2019s certificates (the HostnameVerifier ) or which certificates can be trusted (the SSLSocketFactory ). They don\u2019t specify whether a specific proxy server should be used or how to authenticate with that proxy server. They\u2019re also concrete: each URL identifies a specific path (like /square/okhttp ) and query (like ?q=sharks&lang=en ). Each webserver hosts many URLs.","title":"URLs"},{"location":"connections/#addresses","text":"Addresses specify a webserver (like github.com ) and all of the static configuration necessary to connect to that server: the port number, HTTPS settings, and preferred network protocols (like HTTP/2 or SPDY). URLs that share the same address may also share the same underlying TCP socket connection. Sharing a connection has substantial performance benefits: lower latency, higher throughput (due to TCP slow start ) and conserved battery. OkHttp uses a ConnectionPool that automatically reuses HTTP/1.x connections and multiplexes HTTP/2 and SPDY connections. In OkHttp some fields of the address come from the URL (scheme, hostname, port) and the rest come from the OkHttpClient .","title":"Addresses"},{"location":"connections/#routes","text":"Routes supply the dynamic information necessary to actually connect to a webserver. This is the specific IP address to attempt (as discovered by a DNS query), the exact proxy server to use (if a ProxySelector is in use), and which version of TLS to negotiate (for HTTPS connections). There may be many routes for a single address. For example, a webserver that is hosted in multiple datacenters may yield multiple IP addresses in its DNS response.","title":"Routes"},{"location":"connections/#connections_1","text":"When you request a URL with OkHttp, here\u2019s what it does: It uses the URL and configured OkHttpClient to create an address . This address specifies how we\u2019ll connect to the webserver. It attempts to retrieve a connection with that address from the connection pool . If it doesn\u2019t find a connection in the pool, it selects a route to attempt. This usually means making a DNS request to get the server\u2019s IP addresses. It then selects a TLS version and proxy server if necessary. If it\u2019s a new route, it connects by building either a direct socket connection, a TLS tunnel (for HTTPS over an HTTP proxy), or a direct TLS connection. It does TLS handshakes as necessary. It sends the HTTP request and reads the response. If there\u2019s a problem with the connection, OkHttp will select another route and try again. This allows OkHttp to recover when a subset of a server\u2019s addresses are unreachable. It\u2019s also useful when a pooled connection is stale or if the attempted TLS version is unsupported. Once the response has been received, the connection will be returned to the pool so it can be reused for a future request. Connections are evicted from the pool after a period of inactivity.","title":"Connections"},{"location":"contributing/","text":"Contributing \u00b6 Keeping the project small and stable limits our ability to accept new contributors. We are not seeking new committers at this time, but some small contributions are welcome. If you\u2019ve found a security problem, please follow our bug bounty program. If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it. If you have a new feature idea, please build it in an external library. There are many libraries that sit on top or hook in via existing APIs. If you build something that integrates with OkHttp, tell us so that we can link it! Before code can be accepted all contributors must complete our Individual Contributor License Agreement (CLA) . Code Contributions \u00b6 Get working code on a personal branch with tests passing before you submit a PR: ./gradlew clean check Please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Contribute code changes through GitHub by forking the repository and sending a pull request. We squash all pull requests on merge. Gradle Setup \u00b6 $ cat local.properties sdk.dir=PATH_TO_ANDROID_HOME/sdk org.gradle.caching=true Running Android Tests \u00b6 $ ANDROID_SDK_ROOT=PATH_TO_ANDROID_HOME/sdk ./gradlew :android-test:connectedCheck Committer\u2019s Guides \u00b6 Concurrency Debug Logging Releasing","title":"Contributing"},{"location":"contributing/#contributing","text":"Keeping the project small and stable limits our ability to accept new contributors. We are not seeking new committers at this time, but some small contributions are welcome. If you\u2019ve found a security problem, please follow our bug bounty program. If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it. If you have a new feature idea, please build it in an external library. There are many libraries that sit on top or hook in via existing APIs. If you build something that integrates with OkHttp, tell us so that we can link it! Before code can be accepted all contributors must complete our Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"contributing/#code-contributions","text":"Get working code on a personal branch with tests passing before you submit a PR: ./gradlew clean check Please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Contribute code changes through GitHub by forking the repository and sending a pull request. We squash all pull requests on merge.","title":"Code Contributions"},{"location":"contributing/#gradle-setup","text":"$ cat local.properties sdk.dir=PATH_TO_ANDROID_HOME/sdk org.gradle.caching=true","title":"Gradle Setup"},{"location":"contributing/#running-android-tests","text":"$ ANDROID_SDK_ROOT=PATH_TO_ANDROID_HOME/sdk ./gradlew :android-test:connectedCheck","title":"Running Android Tests"},{"location":"contributing/#committers-guides","text":"Concurrency Debug Logging Releasing","title":"Committer's Guides"},{"location":"debug_logging/","text":"Debug Logging \u00b6 OkHttp has internal APIs to enable debug logging. It uses the java.util.logging API which can be tricky to configure. As a shortcut, you can paste OkHttpDebugLogging.kt . Then enable debug logging for whichever features you need: OkHttpDebugLogging.enableHttp2() OkHttpDebugLogging.enableTaskRunner() Activating on Android \u00b6 $ adb shell setprop log.tag.okhttp.Http2 DEBUG $ adb shell setprop log.tag.okhttp.TaskRunner DEBUG $ adb logcat '*:E' 'okhttp.Http2:D' 'okhttp.TaskRunner:D' HTTP/2 Frame Logging \u00b6 This logs inbound ( << ) and outbound ( >> ) frames for HTTP/2 connections. [2020-01-01 00:00:00] >> CONNECTION 505249202a20485454502f322e300d0a0d0a534d0d0a0d0a [2020-01-01 00:00:00] >> 0x00000000 6 SETTINGS [2020-01-01 00:00:00] >> 0x00000000 4 WINDOW_UPDATE [2020-01-01 00:00:00] >> 0x00000003 47 HEADERS END_STREAM|END_HEADERS [2020-01-01 00:00:00] << 0x00000000 6 SETTINGS [2020-01-01 00:00:00] << 0x00000000 0 SETTINGS ACK [2020-01-01 00:00:00] << 0x00000000 4 WINDOW_UPDATE [2020-01-01 00:00:00] >> 0x00000000 0 SETTINGS ACK [2020-01-01 00:00:00] << 0x00000003 322 HEADERS END_HEADERS [2020-01-01 00:00:00] << 0x00000003 288 DATA [2020-01-01 00:00:00] << 0x00000003 0 DATA END_STREAM [2020-01-01 00:00:00] << 0x00000000 8 GOAWAY [2020-01-01 00:00:05] << 0x00000000 8 GOAWAY Task Runner Logging \u00b6 This logs task enqueues, starts, and finishes. [2020-01-01 00:00:00] Q10000 scheduled after 0 \u00b5s: OkHttp ConnectionPool [2020-01-01 00:00:00] Q10000 starting : OkHttp ConnectionPool [2020-01-01 00:00:00] Q10000 run again after 300 s : OkHttp ConnectionPool [2020-01-01 00:00:00] Q10000 finished run in 1 ms: OkHttp ConnectionPool [2020-01-01 00:00:00] Q10001 scheduled after 0 \u00b5s: OkHttp squareup.com applyAndAckSettings [2020-01-01 00:00:00] Q10001 starting : OkHttp squareup.com applyAndAckSettings [2020-01-01 00:00:00] Q10003 scheduled after 0 \u00b5s: OkHttp squareup.com onSettings [2020-01-01 00:00:00] Q10003 starting : OkHttp squareup.com onSettings [2020-01-01 00:00:00] Q10001 finished run in 3 ms: OkHttp squareup.com applyAndAckSettings [2020-01-01 00:00:00] Q10003 finished run in 528 \u00b5s: OkHttp squareup.com onSettings [2020-01-01 00:00:00] Q10000 scheduled after 0 \u00b5s: OkHttp ConnectionPool [2020-01-01 00:00:00] Q10000 starting : OkHttp ConnectionPool [2020-01-01 00:00:00] Q10000 run again after 300 s : OkHttp ConnectionPool [2020-01-01 00:00:00] Q10000 finished run in 739 \u00b5s: OkHttp ConnectionPool","title":"Debug logging"},{"location":"debug_logging/#debug-logging","text":"OkHttp has internal APIs to enable debug logging. It uses the java.util.logging API which can be tricky to configure. As a shortcut, you can paste OkHttpDebugLogging.kt . Then enable debug logging for whichever features you need: OkHttpDebugLogging.enableHttp2() OkHttpDebugLogging.enableTaskRunner()","title":"Debug Logging"},{"location":"debug_logging/#activating-on-android","text":"$ adb shell setprop log.tag.okhttp.Http2 DEBUG $ adb shell setprop log.tag.okhttp.TaskRunner DEBUG $ adb logcat '*:E' 'okhttp.Http2:D' 'okhttp.TaskRunner:D'","title":"Activating on Android"},{"location":"debug_logging/#http2-frame-logging","text":"This logs inbound ( << ) and outbound ( >> ) frames for HTTP/2 connections. [2020-01-01 00:00:00] >> CONNECTION 505249202a20485454502f322e300d0a0d0a534d0d0a0d0a [2020-01-01 00:00:00] >> 0x00000000 6 SETTINGS [2020-01-01 00:00:00] >> 0x00000000 4 WINDOW_UPDATE [2020-01-01 00:00:00] >> 0x00000003 47 HEADERS END_STREAM|END_HEADERS [2020-01-01 00:00:00] << 0x00000000 6 SETTINGS [2020-01-01 00:00:00] << 0x00000000 0 SETTINGS ACK [2020-01-01 00:00:00] << 0x00000000 4 WINDOW_UPDATE [2020-01-01 00:00:00] >> 0x00000000 0 SETTINGS ACK [2020-01-01 00:00:00] << 0x00000003 322 HEADERS END_HEADERS [2020-01-01 00:00:00] << 0x00000003 288 DATA [2020-01-01 00:00:00] << 0x00000003 0 DATA END_STREAM [2020-01-01 00:00:00] << 0x00000000 8 GOAWAY [2020-01-01 00:00:05] << 0x00000000 8 GOAWAY","title":"HTTP/2 Frame Logging"},{"location":"debug_logging/#task-runner-logging","text":"This logs task enqueues, starts, and finishes. [2020-01-01 00:00:00] Q10000 scheduled after 0 \u00b5s: OkHttp ConnectionPool [2020-01-01 00:00:00] Q10000 starting : OkHttp ConnectionPool [2020-01-01 00:00:00] Q10000 run again after 300 s : OkHttp ConnectionPool [2020-01-01 00:00:00] Q10000 finished run in 1 ms: OkHttp ConnectionPool [2020-01-01 00:00:00] Q10001 scheduled after 0 \u00b5s: OkHttp squareup.com applyAndAckSettings [2020-01-01 00:00:00] Q10001 starting : OkHttp squareup.com applyAndAckSettings [2020-01-01 00:00:00] Q10003 scheduled after 0 \u00b5s: OkHttp squareup.com onSettings [2020-01-01 00:00:00] Q10003 starting : OkHttp squareup.com onSettings [2020-01-01 00:00:00] Q10001 finished run in 3 ms: OkHttp squareup.com applyAndAckSettings [2020-01-01 00:00:00] Q10003 finished run in 528 \u00b5s: OkHttp squareup.com onSettings [2020-01-01 00:00:00] Q10000 scheduled after 0 \u00b5s: OkHttp ConnectionPool [2020-01-01 00:00:00] Q10000 starting : OkHttp ConnectionPool [2020-01-01 00:00:00] Q10000 run again after 300 s : OkHttp ConnectionPool [2020-01-01 00:00:00] Q10000 finished run in 739 \u00b5s: OkHttp ConnectionPool","title":"Task Runner Logging"},{"location":"events/","text":"Events \u00b6 Events allow you to capture metrics on your application\u2019s HTTP calls. Use events to monitor: The size and frequency of the HTTP calls your application makes. If you\u2019re making too many calls, or your calls are too large, you should know about it! The performance of these calls on the underlying network. If the network\u2019s performance isn\u2019t sufficient, you need to either improve the network or use less of it. EventListener \u00b6 Subclass EventListener and override methods for the events you are interested in. In a successful HTTP call with no redirects or retries the sequence of events is described by this flow. Here\u2019s a sample event listener that prints each event with a timestamp. class PrintingEventListener extends EventListener { private long callStartNanos ; private void printEvent ( String name ) { long nowNanos = System . nanoTime (); if ( name . equals ( \"callStart\" )) { callStartNanos = nowNanos ; } long elapsedNanos = nowNanos - callStartNanos ; System . out . printf ( \"%.3f %s%n\" , elapsedNanos / 1000000000 d , name ); } @Override public void callStart ( Call call ) { printEvent ( \"callStart\" ); } @Override public void callEnd ( Call call ) { printEvent ( \"callEnd\" ); } @Override public void dnsStart ( Call call , String domainName ) { printEvent ( \"dnsStart\" ); } @Override public void dnsEnd ( Call call , String domainName , List < InetAddress > inetAddressList ) { printEvent ( \"dnsEnd\" ); } ... } We make a couple calls: Request request = new Request . Builder () . url ( \"https://publicobject.com/helloworld.txt\" ) . build (); System . out . println ( \"REQUEST 1 (new connection)\" ); try ( Response response = client . newCall ( request ). execute ()) { // Consume and discard the response body. response . body (). source (). readByteString (); } System . out . println ( \"REQUEST 2 (pooled connection)\" ); try ( Response response = client . newCall ( request ). execute ()) { // Consume and discard the response body. response . body (). source (). readByteString (); } And the listener prints the corresponding events: REQUEST 1 (new connection) 0.000 callStart 0.010 dnsStart 0.017 dnsEnd 0.025 connectStart 0.117 secureConnectStart 0.586 secureConnectEnd 0.586 connectEnd 0.587 connectionAcquired 0.588 requestHeadersStart 0.590 requestHeadersEnd 0.591 responseHeadersStart 0.675 responseHeadersEnd 0.676 responseBodyStart 0.679 responseBodyEnd 0.679 connectionReleased 0.680 callEnd REQUEST 2 (pooled connection) 0.000 callStart 0.001 connectionAcquired 0.001 requestHeadersStart 0.001 requestHeadersEnd 0.002 responseHeadersStart 0.082 responseHeadersEnd 0.082 responseBodyStart 0.082 responseBodyEnd 0.083 connectionReleased 0.083 callEnd Notice how no connect events are fired for the second call. It reused the connection from the first request for dramatically better performance. EventListener.Factory \u00b6 In the preceding example we used a field, callStartNanos , to track the elapsed time of each event. This is handy, but it won\u2019t work if multiple calls are executing concurrently. To accommodate this, use a Factory to create a new EventListener instance for each Call . This allows each listener to keep call-specific state. This sample factory creates a unique ID for each call and uses that ID to differentiate calls in log messages. class PrintingEventListener extends EventListener { public static final Factory FACTORY = new Factory () { final AtomicLong nextCallId = new AtomicLong ( 1L ); @Override public EventListener create ( Call call ) { long callId = nextCallId . getAndIncrement (); System . out . printf ( \"%04d %s%n\" , callId , call . request (). url ()); return new PrintingEventListener ( callId , System . nanoTime ()); } }; final long callId ; final long callStartNanos ; public PrintingEventListener ( long callId , long callStartNanos ) { this . callId = callId ; this . callStartNanos = callStartNanos ; } private void printEvent ( String name ) { long elapsedNanos = System . nanoTime () - callStartNanos ; System . out . printf ( \"%04d %.3f %s%n\" , callId , elapsedNanos / 1000000000 d , name ); } @Override public void callStart ( Call call ) { printEvent ( \"callStart\" ); } @Override public void callEnd ( Call call ) { printEvent ( \"callEnd\" ); } ... } We can use this listener to race a pair of concurrent HTTP requests: Request washingtonPostRequest = new Request . Builder () . url ( \"https://www.washingtonpost.com/\" ) . build (); client . newCall ( washingtonPostRequest ). enqueue ( new Callback () { ... }); Request newYorkTimesRequest = new Request . Builder () . url ( \"https://www.nytimes.com/\" ) . build (); client . newCall ( newYorkTimesRequest ). enqueue ( new Callback () { ... }); Running this race over home WiFi shows the Times ( 0002 ) completes just slightly sooner than the Post ( 0001 ): 0001 https://www.washingtonpost.com/ 0001 0.000 callStart 0002 https://www.nytimes.com/ 0002 0.000 callStart 0002 0.010 dnsStart 0001 0.013 dnsStart 0001 0.022 dnsEnd 0002 0.019 dnsEnd 0001 0.028 connectStart 0002 0.025 connectStart 0002 0.072 secureConnectStart 0001 0.075 secureConnectStart 0001 0.386 secureConnectEnd 0002 0.390 secureConnectEnd 0002 0.400 connectEnd 0001 0.403 connectEnd 0002 0.401 connectionAcquired 0001 0.404 connectionAcquired 0001 0.406 requestHeadersStart 0002 0.403 requestHeadersStart 0001 0.414 requestHeadersEnd 0002 0.411 requestHeadersEnd 0002 0.412 responseHeadersStart 0001 0.415 responseHeadersStart 0002 0.474 responseHeadersEnd 0002 0.475 responseBodyStart 0001 0.554 responseHeadersEnd 0001 0.555 responseBodyStart 0002 0.554 responseBodyEnd 0002 0.554 connectionReleased 0002 0.554 callEnd 0001 0.624 responseBodyEnd 0001 0.624 connectionReleased 0001 0.624 callEnd The EventListener.Factory also makes it possible to limit metrics to a subset of calls. This one captures metrics on a random 10%: class MetricsEventListener extends EventListener { private static final Factory FACTORY = new Factory () { @Override public EventListener create ( Call call ) { if ( Math . random () < 0.10 ) { return new MetricsEventListener ( call ); } else { return EventListener . NONE ; } } }; ... } Events with Failures \u00b6 When an operation fails, a failure method is called. This is connectFailed() for failures while building a connection to the server, and callFailed() when the HTTP call fails permanently. When a failure happens it is possible that a start event won\u2019t have a corresponding end event. Events with Retries and Follow-Ups \u00b6 OkHttp is resilient and can automatically recover from some connectivity failures. In this case, the connectFailed() event is not terminal and not followed by callFailed() . Event listeners will receive multiple events of the same type when retries are attempted. A single HTTP call may require follow-up requests to be made to handle authentication challenges, redirects, and HTTP-layer timeouts. In such cases multiple connections, requests, and responses may be attempted. Follow-ups are another reason a single call may trigger multiple events of the same type. Availability \u00b6 Events is available as a public API in OkHttp 3.11. Future releases may introduce new event types; you will need to override the corresponding methods to handle them.","title":"Events"},{"location":"events/#events","text":"Events allow you to capture metrics on your application\u2019s HTTP calls. Use events to monitor: The size and frequency of the HTTP calls your application makes. If you\u2019re making too many calls, or your calls are too large, you should know about it! The performance of these calls on the underlying network. If the network\u2019s performance isn\u2019t sufficient, you need to either improve the network or use less of it.","title":"Events"},{"location":"events/#eventlistener","text":"Subclass EventListener and override methods for the events you are interested in. In a successful HTTP call with no redirects or retries the sequence of events is described by this flow. Here\u2019s a sample event listener that prints each event with a timestamp. class PrintingEventListener extends EventListener { private long callStartNanos ; private void printEvent ( String name ) { long nowNanos = System . nanoTime (); if ( name . equals ( \"callStart\" )) { callStartNanos = nowNanos ; } long elapsedNanos = nowNanos - callStartNanos ; System . out . printf ( \"%.3f %s%n\" , elapsedNanos / 1000000000 d , name ); } @Override public void callStart ( Call call ) { printEvent ( \"callStart\" ); } @Override public void callEnd ( Call call ) { printEvent ( \"callEnd\" ); } @Override public void dnsStart ( Call call , String domainName ) { printEvent ( \"dnsStart\" ); } @Override public void dnsEnd ( Call call , String domainName , List < InetAddress > inetAddressList ) { printEvent ( \"dnsEnd\" ); } ... } We make a couple calls: Request request = new Request . Builder () . url ( \"https://publicobject.com/helloworld.txt\" ) . build (); System . out . println ( \"REQUEST 1 (new connection)\" ); try ( Response response = client . newCall ( request ). execute ()) { // Consume and discard the response body. response . body (). source (). readByteString (); } System . out . println ( \"REQUEST 2 (pooled connection)\" ); try ( Response response = client . newCall ( request ). execute ()) { // Consume and discard the response body. response . body (). source (). readByteString (); } And the listener prints the corresponding events: REQUEST 1 (new connection) 0.000 callStart 0.010 dnsStart 0.017 dnsEnd 0.025 connectStart 0.117 secureConnectStart 0.586 secureConnectEnd 0.586 connectEnd 0.587 connectionAcquired 0.588 requestHeadersStart 0.590 requestHeadersEnd 0.591 responseHeadersStart 0.675 responseHeadersEnd 0.676 responseBodyStart 0.679 responseBodyEnd 0.679 connectionReleased 0.680 callEnd REQUEST 2 (pooled connection) 0.000 callStart 0.001 connectionAcquired 0.001 requestHeadersStart 0.001 requestHeadersEnd 0.002 responseHeadersStart 0.082 responseHeadersEnd 0.082 responseBodyStart 0.082 responseBodyEnd 0.083 connectionReleased 0.083 callEnd Notice how no connect events are fired for the second call. It reused the connection from the first request for dramatically better performance.","title":"EventListener"},{"location":"events/#eventlistenerfactory","text":"In the preceding example we used a field, callStartNanos , to track the elapsed time of each event. This is handy, but it won\u2019t work if multiple calls are executing concurrently. To accommodate this, use a Factory to create a new EventListener instance for each Call . This allows each listener to keep call-specific state. This sample factory creates a unique ID for each call and uses that ID to differentiate calls in log messages. class PrintingEventListener extends EventListener { public static final Factory FACTORY = new Factory () { final AtomicLong nextCallId = new AtomicLong ( 1L ); @Override public EventListener create ( Call call ) { long callId = nextCallId . getAndIncrement (); System . out . printf ( \"%04d %s%n\" , callId , call . request (). url ()); return new PrintingEventListener ( callId , System . nanoTime ()); } }; final long callId ; final long callStartNanos ; public PrintingEventListener ( long callId , long callStartNanos ) { this . callId = callId ; this . callStartNanos = callStartNanos ; } private void printEvent ( String name ) { long elapsedNanos = System . nanoTime () - callStartNanos ; System . out . printf ( \"%04d %.3f %s%n\" , callId , elapsedNanos / 1000000000 d , name ); } @Override public void callStart ( Call call ) { printEvent ( \"callStart\" ); } @Override public void callEnd ( Call call ) { printEvent ( \"callEnd\" ); } ... } We can use this listener to race a pair of concurrent HTTP requests: Request washingtonPostRequest = new Request . Builder () . url ( \"https://www.washingtonpost.com/\" ) . build (); client . newCall ( washingtonPostRequest ). enqueue ( new Callback () { ... }); Request newYorkTimesRequest = new Request . Builder () . url ( \"https://www.nytimes.com/\" ) . build (); client . newCall ( newYorkTimesRequest ). enqueue ( new Callback () { ... }); Running this race over home WiFi shows the Times ( 0002 ) completes just slightly sooner than the Post ( 0001 ): 0001 https://www.washingtonpost.com/ 0001 0.000 callStart 0002 https://www.nytimes.com/ 0002 0.000 callStart 0002 0.010 dnsStart 0001 0.013 dnsStart 0001 0.022 dnsEnd 0002 0.019 dnsEnd 0001 0.028 connectStart 0002 0.025 connectStart 0002 0.072 secureConnectStart 0001 0.075 secureConnectStart 0001 0.386 secureConnectEnd 0002 0.390 secureConnectEnd 0002 0.400 connectEnd 0001 0.403 connectEnd 0002 0.401 connectionAcquired 0001 0.404 connectionAcquired 0001 0.406 requestHeadersStart 0002 0.403 requestHeadersStart 0001 0.414 requestHeadersEnd 0002 0.411 requestHeadersEnd 0002 0.412 responseHeadersStart 0001 0.415 responseHeadersStart 0002 0.474 responseHeadersEnd 0002 0.475 responseBodyStart 0001 0.554 responseHeadersEnd 0001 0.555 responseBodyStart 0002 0.554 responseBodyEnd 0002 0.554 connectionReleased 0002 0.554 callEnd 0001 0.624 responseBodyEnd 0001 0.624 connectionReleased 0001 0.624 callEnd The EventListener.Factory also makes it possible to limit metrics to a subset of calls. This one captures metrics on a random 10%: class MetricsEventListener extends EventListener { private static final Factory FACTORY = new Factory () { @Override public EventListener create ( Call call ) { if ( Math . random () < 0.10 ) { return new MetricsEventListener ( call ); } else { return EventListener . NONE ; } } }; ... }","title":"EventListener.Factory"},{"location":"events/#events-with-failures","text":"When an operation fails, a failure method is called. This is connectFailed() for failures while building a connection to the server, and callFailed() when the HTTP call fails permanently. When a failure happens it is possible that a start event won\u2019t have a corresponding end event.","title":"Events with Failures"},{"location":"events/#events-with-retries-and-follow-ups","text":"OkHttp is resilient and can automatically recover from some connectivity failures. In this case, the connectFailed() event is not terminal and not followed by callFailed() . Event listeners will receive multiple events of the same type when retries are attempted. A single HTTP call may require follow-up requests to be made to handle authentication challenges, redirects, and HTTP-layer timeouts. In such cases multiple connections, requests, and responses may be attempted. Follow-ups are another reason a single call may trigger multiple events of the same type.","title":"Events with Retries and Follow-Ups"},{"location":"events/#availability","text":"Events is available as a public API in OkHttp 3.11. Future releases may introduce new event types; you will need to override the corresponding methods to handle them.","title":"Availability"},{"location":"https/","text":"HTTPS \u00b6 OkHttp attempts to balance two competing concerns: Connectivity to as many hosts as possible. That includes advanced hosts that run the latest versions of boringssl and less out of date hosts running older versions of OpenSSL . Security of the connection. This includes verification of the remote webserver with certificates and the privacy of data exchanged with strong ciphers. When negotiating a connection to an HTTPS server, OkHttp needs to know which TLS versions and cipher suites to offer. A client that wants to maximize connectivity would include obsolete TLS versions and weak-by-design cipher suites. A strict client that wants to maximize security would be limited to only the latest TLS version and strongest cipher suites. Specific security vs. connectivity decisions are implemented by ConnectionSpec . OkHttp includes four built-in connection specs: RESTRICTED_TLS is a secure configuration, intended to meet stricter compliance requirements. MODERN_TLS is a secure configuration that connects to modern HTTPS servers. COMPATIBLE_TLS is a secure configuration that connects to secure\u2013but not current\u2013HTTPS servers. CLEARTEXT is an insecure configuration that is used for http:// URLs. These loosely follow the model set in Google Cloud Policies . We track changes to this policy. By default, OkHttp will attempt a MODERN_TLS connection. However by configuring the client connectionSpecs you can allow a fall back to COMPATIBLE_TLS connection if the modern configuration fails. OkHttpClient client = new OkHttpClient . Builder () . connectionSpecs ( Arrays . asList ( ConnectionSpec . MODERN_TLS , ConnectionSpec . COMPATIBLE_TLS )) . build (); The TLS versions and cipher suites in each spec can change with each release. For example, in OkHttp 2.2 we dropped support for SSL 3.0 in response to the POODLE attack. And in OkHttp 2.3 we dropped support for RC4 . As with your desktop web browser, staying up-to-date with OkHttp is the best way to stay secure. You can build your own connection spec with a custom set of TLS versions and cipher suites. For example, this configuration is limited to three highly-regarded cipher suites. Its drawback is that it requires Android 5.0+ and a similarly current webserver. ConnectionSpec spec = new ConnectionSpec . Builder ( ConnectionSpec . MODERN_TLS ) . tlsVersions ( TlsVersion . TLS_1_2 ) . cipherSuites ( CipherSuite . TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 , CipherSuite . TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 , CipherSuite . TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ) . build (); OkHttpClient client = new OkHttpClient . Builder () . connectionSpecs ( Collections . singletonList ( spec )) . build (); Debugging TLS Handshake Failures \u00b6 The TLS handshake requires clients and servers to share a common TLS version and cipher suite. This depends on the JVM or Android version, OkHttp version, and web server configuration. If there is no common cipher suite and TLS version, your call will fail like this: Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0x7f2719a89e80: Failure in SSL library, usually a protocol error error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:770 0x7f2728a53ea0:0x00000000) at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method) You can check a web server\u2019s configuration using Qualys SSL Labs . OkHttp\u2019s TLS configuration history is tracked here . Applications expected to be installed on older Android devices should consider adopting the Google Play Services\u2019 ProviderInstaller . This will increase security for users and increase connectivity with web servers. Certificate Pinning ( .kt , .java ) \u00b6 By default, OkHttp trusts the certificate authorities of the host platform. This strategy maximizes connectivity, but it is subject to certificate authority attacks such as the 2011 DigiNotar attack . It also assumes your HTTPS servers\u2019 certificates are signed by a certificate authority. Use CertificatePinner to restrict which certificates and certificate authorities are trusted. Certificate pinning increases security, but limits your server team\u2019s abilities to update their TLS certificates. Do not use certificate pinning without the blessing of your server\u2019s TLS administrator! Kotlin private val client = OkHttpClient . Builder () . certificatePinner ( CertificatePinner . Builder () . add ( \"publicobject.com\" , \"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\" ) . build ()) . build () fun run () { val request = Request . Builder () . url ( \"https://publicobject.com/robots.txt\" ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) for ( certificate in response . handshake !! . peerCertificates ) { println ( CertificatePinner . pin ( certificate )) } } } Java private final OkHttpClient client = new OkHttpClient . Builder () . certificatePinner ( new CertificatePinner . Builder () . add ( \"publicobject.com\" , \"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\" ) . build ()) . build (); public void run () throws Exception { Request request = new Request . Builder () . url ( \"https://publicobject.com/robots.txt\" ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); for ( Certificate certificate : response . handshake (). peerCertificates ()) { System . out . println ( CertificatePinner . pin ( certificate )); } } } Customizing Trusted Certificates ( .kt , .java ) \u00b6 The full code sample shows how to replace the host platform\u2019s certificate authorities with your own set. As above, do not use custom certificates without the blessing of your server\u2019s TLS administrator! Kotlin private val client : OkHttpClient init { val trustManager = trustManagerForCertificates ( trustedCertificatesInputStream ()) val sslContext = SSLContext . getInstance ( \"TLS\" ) sslContext . init ( null , arrayOf < TrustManager >( trustManager ), null ) val sslSocketFactory = sslContext . socketFactory client = OkHttpClient . Builder () . sslSocketFactory ( sslSocketFactory , trustManager ) . build () } fun run () { val request = Request . Builder () . url ( \"https://publicobject.com/helloworld.txt\" ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) for (( name , value ) in response . headers ) { println ( \"$name: $value\" ) } println ( response . body !! . string ()) } } /** * Returns an input stream containing one or more certificate PEM files. This implementation just * embeds the PEM files in Java strings; most applications will instead read this from a resource * file that gets bundled with the application. */ private fun trustedCertificatesInputStream (): InputStream { ... // Full source omitted. See sample. } private fun trustManagerForCertificates ( inputStream : InputStream ): X509TrustManager { ... // Full source omitted. See sample. } Java private final OkHttpClient client ; public CustomTrust () { X509TrustManager trustManager ; SSLSocketFactory sslSocketFactory ; try { trustManager = trustManagerForCertificates ( trustedCertificatesInputStream ()); SSLContext sslContext = SSLContext . getInstance ( \"TLS\" ); sslContext . init ( null , new TrustManager [] { trustManager }, null ); sslSocketFactory = sslContext . getSocketFactory (); } catch ( GeneralSecurityException e ) { throw new RuntimeException ( e ); } client = new OkHttpClient . Builder () . sslSocketFactory ( sslSocketFactory , trustManager ) . build (); } public void run () throws Exception { Request request = new Request . Builder () . url ( \"https://publicobject.com/helloworld.txt\" ) . build (); Response response = client . newCall ( request ). execute (); System . out . println ( response . body (). string ()); } private InputStream trustedCertificatesInputStream () { ... // Full source omitted. See sample. } public SSLContext sslContextForTrustedCertificates ( InputStream in ) { ... // Full source omitted. See sample. }","title":"HTTPS"},{"location":"https/#https","text":"OkHttp attempts to balance two competing concerns: Connectivity to as many hosts as possible. That includes advanced hosts that run the latest versions of boringssl and less out of date hosts running older versions of OpenSSL . Security of the connection. This includes verification of the remote webserver with certificates and the privacy of data exchanged with strong ciphers. When negotiating a connection to an HTTPS server, OkHttp needs to know which TLS versions and cipher suites to offer. A client that wants to maximize connectivity would include obsolete TLS versions and weak-by-design cipher suites. A strict client that wants to maximize security would be limited to only the latest TLS version and strongest cipher suites. Specific security vs. connectivity decisions are implemented by ConnectionSpec . OkHttp includes four built-in connection specs: RESTRICTED_TLS is a secure configuration, intended to meet stricter compliance requirements. MODERN_TLS is a secure configuration that connects to modern HTTPS servers. COMPATIBLE_TLS is a secure configuration that connects to secure\u2013but not current\u2013HTTPS servers. CLEARTEXT is an insecure configuration that is used for http:// URLs. These loosely follow the model set in Google Cloud Policies . We track changes to this policy. By default, OkHttp will attempt a MODERN_TLS connection. However by configuring the client connectionSpecs you can allow a fall back to COMPATIBLE_TLS connection if the modern configuration fails. OkHttpClient client = new OkHttpClient . Builder () . connectionSpecs ( Arrays . asList ( ConnectionSpec . MODERN_TLS , ConnectionSpec . COMPATIBLE_TLS )) . build (); The TLS versions and cipher suites in each spec can change with each release. For example, in OkHttp 2.2 we dropped support for SSL 3.0 in response to the POODLE attack. And in OkHttp 2.3 we dropped support for RC4 . As with your desktop web browser, staying up-to-date with OkHttp is the best way to stay secure. You can build your own connection spec with a custom set of TLS versions and cipher suites. For example, this configuration is limited to three highly-regarded cipher suites. Its drawback is that it requires Android 5.0+ and a similarly current webserver. ConnectionSpec spec = new ConnectionSpec . Builder ( ConnectionSpec . MODERN_TLS ) . tlsVersions ( TlsVersion . TLS_1_2 ) . cipherSuites ( CipherSuite . TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 , CipherSuite . TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 , CipherSuite . TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ) . build (); OkHttpClient client = new OkHttpClient . Builder () . connectionSpecs ( Collections . singletonList ( spec )) . build ();","title":"HTTPS"},{"location":"https/#debugging-tls-handshake-failures","text":"The TLS handshake requires clients and servers to share a common TLS version and cipher suite. This depends on the JVM or Android version, OkHttp version, and web server configuration. If there is no common cipher suite and TLS version, your call will fail like this: Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0x7f2719a89e80: Failure in SSL library, usually a protocol error error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:770 0x7f2728a53ea0:0x00000000) at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method) You can check a web server\u2019s configuration using Qualys SSL Labs . OkHttp\u2019s TLS configuration history is tracked here . Applications expected to be installed on older Android devices should consider adopting the Google Play Services\u2019 ProviderInstaller . This will increase security for users and increase connectivity with web servers.","title":"Debugging TLS Handshake Failures"},{"location":"https/#certificate-pinning-kt-java","text":"By default, OkHttp trusts the certificate authorities of the host platform. This strategy maximizes connectivity, but it is subject to certificate authority attacks such as the 2011 DigiNotar attack . It also assumes your HTTPS servers\u2019 certificates are signed by a certificate authority. Use CertificatePinner to restrict which certificates and certificate authorities are trusted. Certificate pinning increases security, but limits your server team\u2019s abilities to update their TLS certificates. Do not use certificate pinning without the blessing of your server\u2019s TLS administrator! Kotlin private val client = OkHttpClient . Builder () . certificatePinner ( CertificatePinner . Builder () . add ( \"publicobject.com\" , \"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\" ) . build ()) . build () fun run () { val request = Request . Builder () . url ( \"https://publicobject.com/robots.txt\" ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) for ( certificate in response . handshake !! . peerCertificates ) { println ( CertificatePinner . pin ( certificate )) } } } Java private final OkHttpClient client = new OkHttpClient . Builder () . certificatePinner ( new CertificatePinner . Builder () . add ( \"publicobject.com\" , \"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\" ) . build ()) . build (); public void run () throws Exception { Request request = new Request . Builder () . url ( \"https://publicobject.com/robots.txt\" ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); for ( Certificate certificate : response . handshake (). peerCertificates ()) { System . out . println ( CertificatePinner . pin ( certificate )); } } }","title":"Certificate Pinning (.kt, .java)"},{"location":"https/#customizing-trusted-certificates-kt-java","text":"The full code sample shows how to replace the host platform\u2019s certificate authorities with your own set. As above, do not use custom certificates without the blessing of your server\u2019s TLS administrator! Kotlin private val client : OkHttpClient init { val trustManager = trustManagerForCertificates ( trustedCertificatesInputStream ()) val sslContext = SSLContext . getInstance ( \"TLS\" ) sslContext . init ( null , arrayOf < TrustManager >( trustManager ), null ) val sslSocketFactory = sslContext . socketFactory client = OkHttpClient . Builder () . sslSocketFactory ( sslSocketFactory , trustManager ) . build () } fun run () { val request = Request . Builder () . url ( \"https://publicobject.com/helloworld.txt\" ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) for (( name , value ) in response . headers ) { println ( \"$name: $value\" ) } println ( response . body !! . string ()) } } /** * Returns an input stream containing one or more certificate PEM files. This implementation just * embeds the PEM files in Java strings; most applications will instead read this from a resource * file that gets bundled with the application. */ private fun trustedCertificatesInputStream (): InputStream { ... // Full source omitted. See sample. } private fun trustManagerForCertificates ( inputStream : InputStream ): X509TrustManager { ... // Full source omitted. See sample. } Java private final OkHttpClient client ; public CustomTrust () { X509TrustManager trustManager ; SSLSocketFactory sslSocketFactory ; try { trustManager = trustManagerForCertificates ( trustedCertificatesInputStream ()); SSLContext sslContext = SSLContext . getInstance ( \"TLS\" ); sslContext . init ( null , new TrustManager [] { trustManager }, null ); sslSocketFactory = sslContext . getSocketFactory (); } catch ( GeneralSecurityException e ) { throw new RuntimeException ( e ); } client = new OkHttpClient . Builder () . sslSocketFactory ( sslSocketFactory , trustManager ) . build (); } public void run () throws Exception { Request request = new Request . Builder () . url ( \"https://publicobject.com/helloworld.txt\" ) . build (); Response response = client . newCall ( request ). execute (); System . out . println ( response . body (). string ()); } private InputStream trustedCertificatesInputStream () { ... // Full source omitted. See sample. } public SSLContext sslContextForTrustedCertificates ( InputStream in ) { ... // Full source omitted. See sample. }","title":"Customizing Trusted Certificates (.kt, .java)"},{"location":"interceptors/","text":"Interceptors \u00b6 Interceptors are a powerful mechanism that can monitor, rewrite, and retry calls. Here\u2019s a simple interceptor that logs the outgoing request and the incoming response. class LoggingInterceptor implements Interceptor { @Override public Response intercept ( Interceptor . Chain chain ) throws IOException { Request request = chain . request (); long t1 = System . nanoTime (); logger . info ( String . format ( \"Sending request %s on %s%n%s\" , request . url (), chain . connection (), request . headers ())); Response response = chain . proceed ( request ); long t2 = System . nanoTime (); logger . info ( String . format ( \"Received response for %s in %.1fms%n%s\" , response . request (). url (), ( t2 - t1 ) / 1e6d , response . headers ())); return response ; } } A call to chain.proceed(request) is a critical part of each interceptor\u2019s implementation. This simple-looking method is where all the HTTP work happens, producing a response to satisfy the request. If chain.proceed(request) is being called more than once previous response bodies must be closed. Interceptors can be chained. Suppose you have both a compressing interceptor and a checksumming interceptor: you\u2019ll need to decide whether data is compressed and then checksummed, or checksummed and then compressed. OkHttp uses lists to track interceptors, and interceptors are called in order. Application Interceptors \u00b6 Interceptors are registered as either application or network interceptors. We\u2019ll use the LoggingInterceptor defined above to show the difference. Register an application interceptor by calling addInterceptor() on OkHttpClient.Builder : OkHttpClient client = new OkHttpClient . Builder () . addInterceptor ( new LoggingInterceptor ()) . build (); Request request = new Request . Builder () . url ( \"http://www.publicobject.com/helloworld.txt\" ) . header ( \"User-Agent\" , \"OkHttp Example\" ) . build (); Response response = client . newCall ( request ). execute (); response . body (). close (); The URL http://www.publicobject.com/helloworld.txt redirects to https://publicobject.com/helloworld.txt , and OkHttp follows this redirect automatically. Our application interceptor is called once and the response returned from chain.proceed() has the redirected response: INFO: Sending request http://www.publicobject.com/helloworld.txt on null User-Agent: OkHttp Example INFO: Received response for https://publicobject.com/helloworld.txt in 1179.7ms Server: nginx/1.4.6 (Ubuntu) Content-Type: text/plain Content-Length: 1759 Connection: keep-alive We can see that we were redirected because response.request().url() is different from request.url() . The two log statements log two different URLs. Network Interceptors \u00b6 Registering a network interceptor is quite similar. Call addNetworkInterceptor() instead of addInterceptor() : OkHttpClient client = new OkHttpClient . Builder () . addNetworkInterceptor ( new LoggingInterceptor ()) . build (); Request request = new Request . Builder () . url ( \"http://www.publicobject.com/helloworld.txt\" ) . header ( \"User-Agent\" , \"OkHttp Example\" ) . build (); Response response = client . newCall ( request ). execute (); response . body (). close (); When we run this code, the interceptor runs twice. Once for the initial request to http://www.publicobject.com/helloworld.txt , and another for the redirect to https://publicobject.com/helloworld.txt . INFO: Sending request http://www.publicobject.com/helloworld.txt on Connection{www.publicobject.com:80, proxy=DIRECT hostAddress=54.187.32.157 cipherSuite=none protocol=http/1.1} User-Agent: OkHttp Example Host: www.publicobject.com Connection: Keep-Alive Accept-Encoding: gzip INFO: Received response for http://www.publicobject.com/helloworld.txt in 115.6ms Server: nginx/1.4.6 (Ubuntu) Content-Type: text/html Content-Length: 193 Connection: keep-alive Location: https://publicobject.com/helloworld.txt INFO: Sending request https://publicobject.com/helloworld.txt on Connection{publicobject.com:443, proxy=DIRECT hostAddress=54.187.32.157 cipherSuite=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA protocol=http/1.1} User-Agent: OkHttp Example Host: publicobject.com Connection: Keep-Alive Accept-Encoding: gzip INFO: Received response for https://publicobject.com/helloworld.txt in 80.9ms Server: nginx/1.4.6 (Ubuntu) Content-Type: text/plain Content-Length: 1759 Connection: keep-alive The network requests also contain more data, such as the Accept-Encoding: gzip header added by OkHttp to advertise support for response compression. The network interceptor\u2019s Chain has a non-null Connection that can be used to interrogate the IP address and TLS configuration that were used to connect to the webserver. Choosing between application and network interceptors \u00b6 Each interceptor chain has relative merits. Application interceptors Don\u2019t need to worry about intermediate responses like redirects and retries. Are always invoked once, even if the HTTP response is served from the cache. Observe the application\u2019s original intent. Unconcerned with OkHttp-injected headers like If-None-Match . Permitted to short-circuit and not call Chain.proceed() . Permitted to retry and make multiple calls to Chain.proceed() . Can adjust Call timeouts using withConnectTimeout, withReadTimeout, withWriteTimeout. Network Interceptors Able to operate on intermediate responses like redirects and retries. Not invoked for cached responses that short-circuit the network. Observe the data just as it will be transmitted over the network. Access to the Connection that carries the request. Rewriting Requests \u00b6 Interceptors can add, remove, or replace request headers. They can also transform the body of those requests that have one. For example, you can use an application interceptor to add request body compression if you\u2019re connecting to a webserver known to support it. /** This interceptor compresses the HTTP request body. Many webservers can't handle this! */ final class GzipRequestInterceptor implements Interceptor { @Override public Response intercept ( Interceptor . Chain chain ) throws IOException { Request originalRequest = chain . request (); if ( originalRequest . body () == null || originalRequest . header ( \"Content-Encoding\" ) != null ) { return chain . proceed ( originalRequest ); } Request compressedRequest = originalRequest . newBuilder () . header ( \"Content-Encoding\" , \"gzip\" ) . method ( originalRequest . method (), gzip ( originalRequest . body ())) . build (); return chain . proceed ( compressedRequest ); } private RequestBody gzip ( final RequestBody body ) { return new RequestBody () { @Override public MediaType contentType () { return body . contentType (); } @Override public long contentLength () { return - 1 ; // We don't know the compressed length in advance! } @Override public void writeTo ( BufferedSink sink ) throws IOException { BufferedSink gzipSink = Okio . buffer ( new GzipSink ( sink )); body . writeTo ( gzipSink ); gzipSink . close (); } }; } } Rewriting Responses \u00b6 Symmetrically, interceptors can rewrite response headers and transform the response body. This is generally more dangerous than rewriting request headers because it may violate the webserver\u2019s expectations! If you\u2019re in a tricky situation and prepared to deal with the consequences, rewriting response headers is a powerful way to work around problems. For example, you can fix a server\u2019s misconfigured Cache-Control response header to enable better response caching: /** Dangerous interceptor that rewrites the server's cache-control header. */ private static final Interceptor REWRITE_CACHE_CONTROL_INTERCEPTOR = new Interceptor () { @Override public Response intercept ( Interceptor . Chain chain ) throws IOException { Response originalResponse = chain . proceed ( chain . request ()); return originalResponse . newBuilder () . header ( \"Cache-Control\" , \"max-age=60\" ) . build (); } }; Typically this approach works best when it complements a corresponding fix on the webserver!","title":"Interceptors"},{"location":"interceptors/#interceptors","text":"Interceptors are a powerful mechanism that can monitor, rewrite, and retry calls. Here\u2019s a simple interceptor that logs the outgoing request and the incoming response. class LoggingInterceptor implements Interceptor { @Override public Response intercept ( Interceptor . Chain chain ) throws IOException { Request request = chain . request (); long t1 = System . nanoTime (); logger . info ( String . format ( \"Sending request %s on %s%n%s\" , request . url (), chain . connection (), request . headers ())); Response response = chain . proceed ( request ); long t2 = System . nanoTime (); logger . info ( String . format ( \"Received response for %s in %.1fms%n%s\" , response . request (). url (), ( t2 - t1 ) / 1e6d , response . headers ())); return response ; } } A call to chain.proceed(request) is a critical part of each interceptor\u2019s implementation. This simple-looking method is where all the HTTP work happens, producing a response to satisfy the request. If chain.proceed(request) is being called more than once previous response bodies must be closed. Interceptors can be chained. Suppose you have both a compressing interceptor and a checksumming interceptor: you\u2019ll need to decide whether data is compressed and then checksummed, or checksummed and then compressed. OkHttp uses lists to track interceptors, and interceptors are called in order.","title":"Interceptors"},{"location":"interceptors/#application-interceptors","text":"Interceptors are registered as either application or network interceptors. We\u2019ll use the LoggingInterceptor defined above to show the difference. Register an application interceptor by calling addInterceptor() on OkHttpClient.Builder : OkHttpClient client = new OkHttpClient . Builder () . addInterceptor ( new LoggingInterceptor ()) . build (); Request request = new Request . Builder () . url ( \"http://www.publicobject.com/helloworld.txt\" ) . header ( \"User-Agent\" , \"OkHttp Example\" ) . build (); Response response = client . newCall ( request ). execute (); response . body (). close (); The URL http://www.publicobject.com/helloworld.txt redirects to https://publicobject.com/helloworld.txt , and OkHttp follows this redirect automatically. Our application interceptor is called once and the response returned from chain.proceed() has the redirected response: INFO: Sending request http://www.publicobject.com/helloworld.txt on null User-Agent: OkHttp Example INFO: Received response for https://publicobject.com/helloworld.txt in 1179.7ms Server: nginx/1.4.6 (Ubuntu) Content-Type: text/plain Content-Length: 1759 Connection: keep-alive We can see that we were redirected because response.request().url() is different from request.url() . The two log statements log two different URLs.","title":"Application Interceptors"},{"location":"interceptors/#network-interceptors","text":"Registering a network interceptor is quite similar. Call addNetworkInterceptor() instead of addInterceptor() : OkHttpClient client = new OkHttpClient . Builder () . addNetworkInterceptor ( new LoggingInterceptor ()) . build (); Request request = new Request . Builder () . url ( \"http://www.publicobject.com/helloworld.txt\" ) . header ( \"User-Agent\" , \"OkHttp Example\" ) . build (); Response response = client . newCall ( request ). execute (); response . body (). close (); When we run this code, the interceptor runs twice. Once for the initial request to http://www.publicobject.com/helloworld.txt , and another for the redirect to https://publicobject.com/helloworld.txt . INFO: Sending request http://www.publicobject.com/helloworld.txt on Connection{www.publicobject.com:80, proxy=DIRECT hostAddress=54.187.32.157 cipherSuite=none protocol=http/1.1} User-Agent: OkHttp Example Host: www.publicobject.com Connection: Keep-Alive Accept-Encoding: gzip INFO: Received response for http://www.publicobject.com/helloworld.txt in 115.6ms Server: nginx/1.4.6 (Ubuntu) Content-Type: text/html Content-Length: 193 Connection: keep-alive Location: https://publicobject.com/helloworld.txt INFO: Sending request https://publicobject.com/helloworld.txt on Connection{publicobject.com:443, proxy=DIRECT hostAddress=54.187.32.157 cipherSuite=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA protocol=http/1.1} User-Agent: OkHttp Example Host: publicobject.com Connection: Keep-Alive Accept-Encoding: gzip INFO: Received response for https://publicobject.com/helloworld.txt in 80.9ms Server: nginx/1.4.6 (Ubuntu) Content-Type: text/plain Content-Length: 1759 Connection: keep-alive The network requests also contain more data, such as the Accept-Encoding: gzip header added by OkHttp to advertise support for response compression. The network interceptor\u2019s Chain has a non-null Connection that can be used to interrogate the IP address and TLS configuration that were used to connect to the webserver.","title":"Network Interceptors"},{"location":"interceptors/#choosing-between-application-and-network-interceptors","text":"Each interceptor chain has relative merits. Application interceptors Don\u2019t need to worry about intermediate responses like redirects and retries. Are always invoked once, even if the HTTP response is served from the cache. Observe the application\u2019s original intent. Unconcerned with OkHttp-injected headers like If-None-Match . Permitted to short-circuit and not call Chain.proceed() . Permitted to retry and make multiple calls to Chain.proceed() . Can adjust Call timeouts using withConnectTimeout, withReadTimeout, withWriteTimeout. Network Interceptors Able to operate on intermediate responses like redirects and retries. Not invoked for cached responses that short-circuit the network. Observe the data just as it will be transmitted over the network. Access to the Connection that carries the request.","title":"Choosing between application and network interceptors"},{"location":"interceptors/#rewriting-requests","text":"Interceptors can add, remove, or replace request headers. They can also transform the body of those requests that have one. For example, you can use an application interceptor to add request body compression if you\u2019re connecting to a webserver known to support it. /** This interceptor compresses the HTTP request body. Many webservers can't handle this! */ final class GzipRequestInterceptor implements Interceptor { @Override public Response intercept ( Interceptor . Chain chain ) throws IOException { Request originalRequest = chain . request (); if ( originalRequest . body () == null || originalRequest . header ( \"Content-Encoding\" ) != null ) { return chain . proceed ( originalRequest ); } Request compressedRequest = originalRequest . newBuilder () . header ( \"Content-Encoding\" , \"gzip\" ) . method ( originalRequest . method (), gzip ( originalRequest . body ())) . build (); return chain . proceed ( compressedRequest ); } private RequestBody gzip ( final RequestBody body ) { return new RequestBody () { @Override public MediaType contentType () { return body . contentType (); } @Override public long contentLength () { return - 1 ; // We don't know the compressed length in advance! } @Override public void writeTo ( BufferedSink sink ) throws IOException { BufferedSink gzipSink = Okio . buffer ( new GzipSink ( sink )); body . writeTo ( gzipSink ); gzipSink . close (); } }; } }","title":"Rewriting Requests"},{"location":"interceptors/#rewriting-responses","text":"Symmetrically, interceptors can rewrite response headers and transform the response body. This is generally more dangerous than rewriting request headers because it may violate the webserver\u2019s expectations! If you\u2019re in a tricky situation and prepared to deal with the consequences, rewriting response headers is a powerful way to work around problems. For example, you can fix a server\u2019s misconfigured Cache-Control response header to enable better response caching: /** Dangerous interceptor that rewrites the server's cache-control header. */ private static final Interceptor REWRITE_CACHE_CONTROL_INTERCEPTOR = new Interceptor () { @Override public Response intercept ( Interceptor . Chain chain ) throws IOException { Response originalResponse = chain . proceed ( chain . request ()); return originalResponse . newBuilder () . header ( \"Cache-Control\" , \"max-age=60\" ) . build (); } }; Typically this approach works best when it complements a corresponding fix on the webserver!","title":"Rewriting Responses"},{"location":"r8_proguard/","text":"R8 / ProGuard \u00b6 If you use OkHttp as a dependency in an Android project which uses R8 as a default compiler you don\u2019t have to do anything. The specific rules are already bundled into the JAR which can be interpreted by R8 automatically. If you, however, don\u2019t use R8 you have to apply the rules from this file . You might also need rules from Okio which is a dependency of this library.","title":"R8 proguard"},{"location":"r8_proguard/#r8-proguard","text":"If you use OkHttp as a dependency in an Android project which uses R8 as a default compiler you don\u2019t have to do anything. The specific rules are already bundled into the JAR which can be interpreted by R8 automatically. If you, however, don\u2019t use R8 you have to apply the rules from this file . You might also need rules from Okio which is a dependency of this library.","title":"R8 / ProGuard"},{"location":"recipes/","text":"Recipes \u00b6 We\u2019ve written some recipes that demonstrate how to solve common problems with OkHttp. Read through them to learn about how everything works together. Cut-and-paste these examples freely; that\u2019s what they\u2019re for. Synchronous Get ( .kt , .java ) \u00b6 Download a file, print its headers, and print its response body as a string. The string() method on response body is convenient and efficient for small documents. But if the response body is large (greater than 1 MiB), avoid string() because it will load the entire document into memory. In that case, prefer to process the body as a stream. Kotlin private val client = OkHttpClient () fun run () { val request = Request . Builder () . url ( \"https://publicobject.com/helloworld.txt\" ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) for (( name , value ) in response . headers ) { println ( \"$name: $value\" ) } println ( response . body !! . string ()) } } Java private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { Request request = new Request . Builder () . url ( \"https://publicobject.com/helloworld.txt\" ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); Headers responseHeaders = response . headers (); for ( int i = 0 ; i < responseHeaders . size (); i ++ ) { System . out . println ( responseHeaders . name ( i ) + \": \" + responseHeaders . value ( i )); } System . out . println ( response . body (). string ()); } } Asynchronous Get ( .kt , .java ) \u00b6 Download a file on a worker thread, and get called back when the response is readable. The callback is made after the response headers are ready. Reading the response body may still block. OkHttp doesn\u2019t currently offer asynchronous APIs to receive a response body in parts. Kotlin private val client = OkHttpClient () fun run () { val request = Request . Builder () . url ( \"http://publicobject.com/helloworld.txt\" ) . build () client . newCall ( request ). enqueue ( object : Callback { override fun onFailure ( call : Call , e : IOException ) { e . printStackTrace () } override fun onResponse ( call : Call , response : Response ) { response . use { if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) for (( name , value ) in response . headers ) { println ( \"$name: $value\" ) } println ( response . body !! . string ()) } } }) } Java private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { Request request = new Request . Builder () . url ( \"http://publicobject.com/helloworld.txt\" ) . build (); client . newCall ( request ). enqueue ( new Callback () { @Override public void onFailure ( Call call , IOException e ) { e . printStackTrace (); } @Override public void onResponse ( Call call , Response response ) throws IOException { try ( ResponseBody responseBody = response . body ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); Headers responseHeaders = response . headers (); for ( int i = 0 , size = responseHeaders . size (); i < size ; i ++ ) { System . out . println ( responseHeaders . name ( i ) + \": \" + responseHeaders . value ( i )); } System . out . println ( responseBody . string ()); } } }); } Accessing Headers ( .kt , .java ) \u00b6 Typically HTTP headers work like a Map<String, String> : each field has one value or none. But some headers permit multiple values, like Guava\u2019s Multimap . For example, it\u2019s legal and common for an HTTP response to supply multiple Vary headers. OkHttp\u2019s APIs attempt to make both cases comfortable. When writing request headers, use header(name, value) to set the only occurrence of name to value . If there are existing values, they will be removed before the new value is added. Use addHeader(name, value) to add a header without removing the headers already present. When reading response a header, use header(name) to return the last occurrence of the named value. Usually this is also the only occurrence! If no value is present, header(name) will return null. To read all of a field\u2019s values as a list, use headers(name) . To visit all headers, use the Headers class which supports access by index. Kotlin private val client = OkHttpClient () fun run () { val request = Request . Builder () . url ( \"https://api.github.com/repos/square/okhttp/issues\" ) . header ( \"User-Agent\" , \"OkHttp Headers.java\" ) . addHeader ( \"Accept\" , \"application/json; q=0.5\" ) . addHeader ( \"Accept\" , \"application/vnd.github.v3+json\" ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) println ( \"Server: ${response.header(\" Server \")}\" ) println ( \"Date: ${response.header(\" Date \")}\" ) println ( \"Vary: ${response.headers(\" Vary \")}\" ) } } Java private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { Request request = new Request . Builder () . url ( \"https://api.github.com/repos/square/okhttp/issues\" ) . header ( \"User-Agent\" , \"OkHttp Headers.java\" ) . addHeader ( \"Accept\" , \"application/json; q=0.5\" ) . addHeader ( \"Accept\" , \"application/vnd.github.v3+json\" ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); System . out . println ( \"Server: \" + response . header ( \"Server\" )); System . out . println ( \"Date: \" + response . header ( \"Date\" )); System . out . println ( \"Vary: \" + response . headers ( \"Vary\" )); } } Posting a String ( .kt , .java ) \u00b6 Use an HTTP POST to send a request body to a service. This example posts a markdown document to a web service that renders markdown as HTML. Because the entire request body is in memory simultaneously, avoid posting large (greater than 1 MiB) documents using this API. Kotlin private val client = OkHttpClient () fun run () { val postBody = \"\"\" |Releases |-------- | | * _1.0_ May 6, 2013 | * _1.1_ June 15, 2013 | * _1.2_ August 11, 2013 |\"\"\" . trimMargin () val request = Request . Builder () . url ( \"https://api.github.com/markdown/raw\" ) . post ( postBody . toRequestBody ( MEDIA_TYPE_MARKDOWN )) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) println ( response . body !! . string ()) } } companion object { val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\" . toMediaType () } Java public static final MediaType MEDIA_TYPE_MARKDOWN = MediaType . parse ( \"text/x-markdown; charset=utf-8\" ); private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { String postBody = \"\" + \"Releases\\n\" + \"--------\\n\" + \"\\n\" + \" * _1.0_ May 6, 2013\\n\" + \" * _1.1_ June 15, 2013\\n\" + \" * _1.2_ August 11, 2013\\n\" ; Request request = new Request . Builder () . url ( \"https://api.github.com/markdown/raw\" ) . post ( RequestBody . create ( MEDIA_TYPE_MARKDOWN , postBody )) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); System . out . println ( response . body (). string ()); } } Post Streaming ( .kt , .java ) \u00b6 Here we POST a request body as a stream. The content of this request body is being generated as it\u2019s being written. This example streams directly into the Okio buffered sink. Your programs may prefer an OutputStream , which you can get from BufferedSink.outputStream() . Kotlin private val client = OkHttpClient () fun run () { val requestBody = object : RequestBody () { override fun contentType () = MEDIA_TYPE_MARKDOWN override fun writeTo ( sink : BufferedSink ) { sink . writeUtf8 ( \"Numbers\\n\" ) sink . writeUtf8 ( \"-------\\n\" ) for ( i in 2. . 997 ) { sink . writeUtf8 ( String . format ( \" * $i = ${factor(i)}\\n\" )) } } private fun factor ( n : Int ): String { for ( i in 2 until n ) { val x = n / i if ( x * i == n ) return \"${factor(x)} \u00d7 $i\" } return n . toString () } } val request = Request . Builder () . url ( \"https://api.github.com/markdown/raw\" ) . post ( requestBody ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) println ( response . body !! . string ()) } } companion object { val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\" . toMediaType () } Java public static final MediaType MEDIA_TYPE_MARKDOWN = MediaType . parse ( \"text/x-markdown; charset=utf-8\" ); private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { RequestBody requestBody = new RequestBody () { @Override public MediaType contentType () { return MEDIA_TYPE_MARKDOWN ; } @Override public void writeTo ( BufferedSink sink ) throws IOException { sink . writeUtf8 ( \"Numbers\\n\" ); sink . writeUtf8 ( \"-------\\n\" ); for ( int i = 2 ; i <= 997 ; i ++ ) { sink . writeUtf8 ( String . format ( \" * %s = %s\\n\" , i , factor ( i ))); } } private String factor ( int n ) { for ( int i = 2 ; i < n ; i ++ ) { int x = n / i ; if ( x * i == n ) return factor ( x ) + \" \u00d7 \" + i ; } return Integer . toString ( n ); } }; Request request = new Request . Builder () . url ( \"https://api.github.com/markdown/raw\" ) . post ( requestBody ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); System . out . println ( response . body (). string ()); } } Posting a File ( .kt , .java ) \u00b6 It\u2019s easy to use a file as a request body. Kotlin private val client = OkHttpClient () fun run () { val file = File ( \"README.md\" ) val request = Request . Builder () . url ( \"https://api.github.com/markdown/raw\" ) . post ( file . asRequestBody ( MEDIA_TYPE_MARKDOWN )) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) println ( response . body !! . string ()) } } companion object { val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\" . toMediaType () } Java public static final MediaType MEDIA_TYPE_MARKDOWN = MediaType . parse ( \"text/x-markdown; charset=utf-8\" ); private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { File file = new File ( \"README.md\" ); Request request = new Request . Builder () . url ( \"https://api.github.com/markdown/raw\" ) . post ( RequestBody . create ( MEDIA_TYPE_MARKDOWN , file )) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); System . out . println ( response . body (). string ()); } } Posting form parameters ( .kt , .java ) \u00b6 Use FormBody.Builder to build a request body that works like an HTML <form> tag. Names and values will be encoded using an HTML-compatible form URL encoding. Kotlin private val client = OkHttpClient () fun run () { val formBody = FormBody . Builder () . add ( \"search\" , \"Jurassic Park\" ) . build () val request = Request . Builder () . url ( \"https://en.wikipedia.org/w/index.php\" ) . post ( formBody ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) println ( response . body !! . string ()) } } Java private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { RequestBody formBody = new FormBody . Builder () . add ( \"search\" , \"Jurassic Park\" ) . build (); Request request = new Request . Builder () . url ( \"https://en.wikipedia.org/w/index.php\" ) . post ( formBody ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); System . out . println ( response . body (). string ()); } } Posting a multipart request ( .kt , .java ) \u00b6 MultipartBody.Builder can build sophisticated request bodies compatible with HTML file upload forms. Each part of a multipart request body is itself a request body, and can define its own headers. If present, these headers should describe the part body, such as its Content-Disposition . The Content-Length and Content-Type headers are added automatically if they\u2019re available. Kotlin private val client = OkHttpClient () fun run () { // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image val requestBody = MultipartBody . Builder () . setType ( MultipartBody . FORM ) . addFormDataPart ( \"title\" , \"Square Logo\" ) . addFormDataPart ( \"image\" , \"logo-square.png\" , File ( \"docs/images/logo-square.png\" ). asRequestBody ( MEDIA_TYPE_PNG )) . build () val request = Request . Builder () . header ( \"Authorization\" , \"Client-ID $IMGUR_CLIENT_ID\" ) . url ( \"https://api.imgur.com/3/image\" ) . post ( requestBody ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) println ( response . body !! . string ()) } } companion object { /** * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running * these examples, please request your own client ID! https://api.imgur.com/oauth2 */ private val IMGUR_CLIENT_ID = \"9199fdef135c122\" private val MEDIA_TYPE_PNG = \"image/png\" . toMediaType () } Java /** * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running * these examples, please request your own client ID! https://api.imgur.com/oauth2 */ private static final String IMGUR_CLIENT_ID = \"...\" ; private static final MediaType MEDIA_TYPE_PNG = MediaType . parse ( \"image/png\" ); private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image RequestBody requestBody = new MultipartBody . Builder () . setType ( MultipartBody . FORM ) . addFormDataPart ( \"title\" , \"Square Logo\" ) . addFormDataPart ( \"image\" , \"logo-square.png\" , RequestBody . create ( MEDIA_TYPE_PNG , new File ( \"website/static/logo-square.png\" ))) . build (); Request request = new Request . Builder () . header ( \"Authorization\" , \"Client-ID \" + IMGUR_CLIENT_ID ) . url ( \"https://api.imgur.com/3/image\" ) . post ( requestBody ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); System . out . println ( response . body (). string ()); } } Parse a JSON Response With Moshi ( .kt , .java ) \u00b6 Moshi is a handy API for converting between JSON and Java objects. Here we\u2019re using it to decode a JSON response from a GitHub API. Note that ResponseBody.charStream() uses the Content-Type response header to select which charset to use when decoding the response body. It defaults to UTF-8 if no charset is specified. Kotlin private val client = OkHttpClient () private val moshi = Moshi . Builder (). build () private val gistJsonAdapter = moshi . adapter ( Gist :: class . java ) fun run () { val request = Request . Builder () . url ( \"https://api.github.com/gists/c2a7c39532239ff261be\" ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) val gist = gistJsonAdapter . fromJson ( response . body !! . source ()) for (( key , value ) in gist !! . files !! ) { println ( key ) println ( value . content ) } } } @JsonClass ( generateAdapter = true ) data class Gist ( var files : Map < String , GistFile >?) @JsonClass ( generateAdapter = true ) data class GistFile ( var content : String ?) Java private final OkHttpClient client = new OkHttpClient (); private final Moshi moshi = new Moshi . Builder (). build (); private final JsonAdapter < Gist > gistJsonAdapter = moshi . adapter ( Gist . class ); public void run () throws Exception { Request request = new Request . Builder () . url ( \"https://api.github.com/gists/c2a7c39532239ff261be\" ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); Gist gist = gistJsonAdapter . fromJson ( response . body (). source ()); for ( Map . Entry < String , GistFile > entry : gist . files . entrySet ()) { System . out . println ( entry . getKey ()); System . out . println ( entry . getValue (). content ); } } } static class Gist { Map < String , GistFile > files ; } static class GistFile { String content ; } Response Caching ( .kt , .java ) \u00b6 To cache responses, you\u2019ll need a cache directory that you can read and write to, and a limit on the cache\u2019s size. The cache directory should be private, and untrusted applications should not be able to read its contents! It is an error to have multiple caches accessing the same cache directory simultaneously. Most applications should call new OkHttpClient() exactly once, configure it with their cache, and use that same instance everywhere. Otherwise the two cache instances will stomp on each other, corrupt the response cache, and possibly crash your program. Response caching uses HTTP headers for all configuration. You can add request headers like Cache-Control: max-stale=3600 and OkHttp\u2019s cache will honor them. Your webserver configures how long responses are cached with its own response headers, like Cache-Control: max-age=9600 . There are cache headers to force a cached response, force a network response, or force the network response to be validated with a conditional GET. Kotlin private val client : OkHttpClient = OkHttpClient . Builder () . cache ( Cache ( directory = cacheDirectory , maxSize = 10L * 1024L * 1024L // 10 MiB )) . build () fun run () { val request = Request . Builder () . url ( \"http://publicobject.com/helloworld.txt\" ) . build () val response1Body = client . newCall ( request ). execute (). use { if (! it . isSuccessful ) throw IOException ( \"Unexpected code $it\" ) println ( \"Response 1 response: $it\" ) println ( \"Response 1 cache response: ${it.cacheResponse}\" ) println ( \"Response 1 network response: ${it.networkResponse}\" ) return @use it . body !! . string () } val response2Body = client . newCall ( request ). execute (). use { if (! it . isSuccessful ) throw IOException ( \"Unexpected code $it\" ) println ( \"Response 2 response: $it\" ) println ( \"Response 2 cache response: ${it.cacheResponse}\" ) println ( \"Response 2 network response: ${it.networkResponse}\" ) return @use it . body !! . string () } println ( \"Response 2 equals Response 1? \" + ( response1Body == response2Body )) } Java private final OkHttpClient client ; public CacheResponse ( File cacheDirectory ) throws Exception { int cacheSize = 10 * 1024 * 1024 ; // 10 MiB Cache cache = new Cache ( cacheDirectory , cacheSize ); client = new OkHttpClient . Builder () . cache ( cache ) . build (); } public void run () throws Exception { Request request = new Request . Builder () . url ( \"http://publicobject.com/helloworld.txt\" ) . build (); String response1Body ; try ( Response response1 = client . newCall ( request ). execute ()) { if ( ! response1 . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response1 ); response1Body = response1 . body (). string (); System . out . println ( \"Response 1 response: \" + response1 ); System . out . println ( \"Response 1 cache response: \" + response1 . cacheResponse ()); System . out . println ( \"Response 1 network response: \" + response1 . networkResponse ()); } String response2Body ; try ( Response response2 = client . newCall ( request ). execute ()) { if ( ! response2 . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response2 ); response2Body = response2 . body (). string (); System . out . println ( \"Response 2 response: \" + response2 ); System . out . println ( \"Response 2 cache response: \" + response2 . cacheResponse ()); System . out . println ( \"Response 2 network response: \" + response2 . networkResponse ()); } System . out . println ( \"Response 2 equals Response 1? \" + response1Body . equals ( response2Body )); } To prevent a response from using the cache, use CacheControl.FORCE_NETWORK . To prevent it from using the network, use CacheControl.FORCE_CACHE . Be warned: if you use FORCE_CACHE and the response requires the network, OkHttp will return a 504 Unsatisfiable Request response. Canceling a Call ( .kt , .java ) \u00b6 Use Call.cancel() to stop an ongoing call immediately. If a thread is currently writing a request or reading a response, it will receive an IOException . Use this to conserve the network when a call is no longer necessary; for example when your user navigates away from an application. Both synchronous and asynchronous calls can be canceled. Kotlin private val executor = Executors . newScheduledThreadPool ( 1 ) private val client = OkHttpClient () fun run () { val request = Request . Builder () . url ( \"http://httpbin.org/delay/2\" ) // This URL is served with a 2 second delay. . build () val startNanos = System . nanoTime () val call = client . newCall ( request ) // Schedule a job to cancel the call in 1 second. executor . schedule ({ System . out . printf ( \"%.2f Canceling call.%n\" , ( System . nanoTime () - startNanos ) / 1 e9f ) call . cancel () System . out . printf ( \"%.2f Canceled call.%n\" , ( System . nanoTime () - startNanos ) / 1 e9f ) }, 1 , TimeUnit . SECONDS ) System . out . printf ( \"%.2f Executing call.%n\" , ( System . nanoTime () - startNanos ) / 1 e9f ) try { call . execute (). use { response -> System . out . printf ( \"%.2f Call was expected to fail, but completed: %s%n\" , ( System . nanoTime () - startNanos ) / 1 e9f , response ) } } catch ( e : IOException ) { System . out . printf ( \"%.2f Call failed as expected: %s%n\" , ( System . nanoTime () - startNanos ) / 1 e9f , e ) } } Java private final ScheduledExecutorService executor = Executors . newScheduledThreadPool ( 1 ); private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { Request request = new Request . Builder () . url ( \"http://httpbin.org/delay/2\" ) // This URL is served with a 2 second delay. . build (); final long startNanos = System . nanoTime (); final Call call = client . newCall ( request ); // Schedule a job to cancel the call in 1 second. executor . schedule ( new Runnable () { @Override public void run () { System . out . printf ( \"%.2f Canceling call.%n\" , ( System . nanoTime () - startNanos ) / 1e9f ); call . cancel (); System . out . printf ( \"%.2f Canceled call.%n\" , ( System . nanoTime () - startNanos ) / 1e9f ); } }, 1 , TimeUnit . SECONDS ); System . out . printf ( \"%.2f Executing call.%n\" , ( System . nanoTime () - startNanos ) / 1e9f ); try ( Response response = call . execute ()) { System . out . printf ( \"%.2f Call was expected to fail, but completed: %s%n\" , ( System . nanoTime () - startNanos ) / 1e9f , response ); } catch ( IOException e ) { System . out . printf ( \"%.2f Call failed as expected: %s%n\" , ( System . nanoTime () - startNanos ) / 1e9f , e ); } } Timeouts ( .kt , .java ) \u00b6 Use timeouts to fail a call when its peer is unreachable. Network partitions can be due to client connectivity problems, server availability problems, or anything between. OkHttp supports connect, write, read, and full call timeouts. Kotlin private val client : OkHttpClient = OkHttpClient . Builder () . connectTimeout ( 5 , TimeUnit . SECONDS ) . writeTimeout ( 5 , TimeUnit . SECONDS ) . readTimeout ( 5 , TimeUnit . SECONDS ) . callTimeout ( 10 , TimeUnit . SECONDS ) . build () fun run () { val request = Request . Builder () . url ( \"http://httpbin.org/delay/2\" ) // This URL is served with a 2 second delay. . build () client . newCall ( request ). execute (). use { response -> println ( \"Response completed: $response\" ) } } Java private final OkHttpClient client ; public ConfigureTimeouts () throws Exception { client = new OkHttpClient . Builder () . connectTimeout ( 10 , TimeUnit . SECONDS ) . writeTimeout ( 10 , TimeUnit . SECONDS ) . readTimeout ( 30 , TimeUnit . SECONDS ) . build (); } public void run () throws Exception { Request request = new Request . Builder () . url ( \"http://httpbin.org/delay/2\" ) // This URL is served with a 2 second delay. . build (); try ( Response response = client . newCall ( request ). execute ()) { System . out . println ( \"Response completed: \" + response ); } } Per-call Configuration ( .kt , .java ) \u00b6 All the HTTP client configuration lives in OkHttpClient including proxy settings, timeouts, and caches. When you need to change the configuration of a single call, call OkHttpClient.newBuilder() . This returns a builder that shares the same connection pool, dispatcher, and configuration with the original client. In the example below, we make one request with a 500 ms timeout and another with a 3000 ms timeout. Kotlin private val client = OkHttpClient () fun run () { val request = Request . Builder () . url ( \"http://httpbin.org/delay/1\" ) // This URL is served with a 1 second delay. . build () // Copy to customize OkHttp for this request. val client1 = client . newBuilder () . readTimeout ( 500 , TimeUnit . MILLISECONDS ) . build () try { client1 . newCall ( request ). execute (). use { response -> println ( \"Response 1 succeeded: $response\" ) } } catch ( e : IOException ) { println ( \"Response 1 failed: $e\" ) } // Copy to customize OkHttp for this request. val client2 = client . newBuilder () . readTimeout ( 3000 , TimeUnit . MILLISECONDS ) . build () try { client2 . newCall ( request ). execute (). use { response -> println ( \"Response 2 succeeded: $response\" ) } } catch ( e : IOException ) { println ( \"Response 2 failed: $e\" ) } } Java private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { Request request = new Request . Builder () . url ( \"http://httpbin.org/delay/1\" ) // This URL is served with a 1 second delay. . build (); // Copy to customize OkHttp for this request. OkHttpClient client1 = client . newBuilder () . readTimeout ( 500 , TimeUnit . MILLISECONDS ) . build (); try ( Response response = client1 . newCall ( request ). execute ()) { System . out . println ( \"Response 1 succeeded: \" + response ); } catch ( IOException e ) { System . out . println ( \"Response 1 failed: \" + e ); } // Copy to customize OkHttp for this request. OkHttpClient client2 = client . newBuilder () . readTimeout ( 3000 , TimeUnit . MILLISECONDS ) . build (); try ( Response response = client2 . newCall ( request ). execute ()) { System . out . println ( \"Response 2 succeeded: \" + response ); } catch ( IOException e ) { System . out . println ( \"Response 2 failed: \" + e ); } } Handling authentication ( .kt , .java ) \u00b6 OkHttp can automatically retry unauthenticated requests. When a response is 401 Not Authorized , an Authenticator is asked to supply credentials. Implementations should build a new request that includes the missing credentials. If no credentials are available, return null to skip the retry. Use Response.challenges() to get the schemes and realms of any authentication challenges. When fulfilling a Basic challenge, use Credentials.basic(username, password) to encode the request header. Kotlin private val client = OkHttpClient . Builder () . authenticator ( object : Authenticator { @Throws ( IOException :: class ) override fun authenticate ( route : Route ?, response : Response ): Request ? { if ( response . request . header ( \"Authorization\" ) != null ) { return null // Give up, we've already attempted to authenticate. } println ( \"Authenticating for response: $response\" ) println ( \"Challenges: ${response.challenges()}\" ) val credential = Credentials . basic ( \"jesse\" , \"password1\" ) return response . request . newBuilder () . header ( \"Authorization\" , credential ) . build () } }) . build () fun run () { val request = Request . Builder () . url ( \"http://publicobject.com/secrets/hellosecret.txt\" ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) println ( response . body !! . string ()) } } Java private final OkHttpClient client ; public Authenticate () { client = new OkHttpClient . Builder () . authenticator ( new Authenticator () { @Override public Request authenticate ( Route route , Response response ) throws IOException { if ( response . request (). header ( \"Authorization\" ) != null ) { return null ; // Give up, we've already attempted to authenticate. } System . out . println ( \"Authenticating for response: \" + response ); System . out . println ( \"Challenges: \" + response . challenges ()); String credential = Credentials . basic ( \"jesse\" , \"password1\" ); return response . request (). newBuilder () . header ( \"Authorization\" , credential ) . build (); } }) . build (); } public void run () throws Exception { Request request = new Request . Builder () . url ( \"http://publicobject.com/secrets/hellosecret.txt\" ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); System . out . println ( response . body (). string ()); } } To avoid making many retries when authentication isn\u2019t working, you can return null to give up. For example, you may want to skip the retry when these exact credentials have already been attempted: if ( credential . equals ( response . request (). header ( \"Authorization\" ))) { return null ; // If we already failed with these credentials, don't retry. } You may also skip the retry when you\u2019ve hit an application-defined attempt limit: if ( responseCount ( response ) >= 3 ) { return null ; // If we've failed 3 times, give up. } This above code relies on this responseCount() method: private int responseCount ( Response response ) { int result = 1 ; while (( response = response . priorResponse ()) != null ) { result ++ ; } return result ; }","title":"Recipes"},{"location":"recipes/#recipes","text":"We\u2019ve written some recipes that demonstrate how to solve common problems with OkHttp. Read through them to learn about how everything works together. Cut-and-paste these examples freely; that\u2019s what they\u2019re for.","title":"Recipes"},{"location":"recipes/#synchronous-get-kt-java","text":"Download a file, print its headers, and print its response body as a string. The string() method on response body is convenient and efficient for small documents. But if the response body is large (greater than 1 MiB), avoid string() because it will load the entire document into memory. In that case, prefer to process the body as a stream. Kotlin private val client = OkHttpClient () fun run () { val request = Request . Builder () . url ( \"https://publicobject.com/helloworld.txt\" ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) for (( name , value ) in response . headers ) { println ( \"$name: $value\" ) } println ( response . body !! . string ()) } } Java private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { Request request = new Request . Builder () . url ( \"https://publicobject.com/helloworld.txt\" ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); Headers responseHeaders = response . headers (); for ( int i = 0 ; i < responseHeaders . size (); i ++ ) { System . out . println ( responseHeaders . name ( i ) + \": \" + responseHeaders . value ( i )); } System . out . println ( response . body (). string ()); } }","title":"Synchronous Get (.kt, .java)"},{"location":"recipes/#asynchronous-get-kt-java","text":"Download a file on a worker thread, and get called back when the response is readable. The callback is made after the response headers are ready. Reading the response body may still block. OkHttp doesn\u2019t currently offer asynchronous APIs to receive a response body in parts. Kotlin private val client = OkHttpClient () fun run () { val request = Request . Builder () . url ( \"http://publicobject.com/helloworld.txt\" ) . build () client . newCall ( request ). enqueue ( object : Callback { override fun onFailure ( call : Call , e : IOException ) { e . printStackTrace () } override fun onResponse ( call : Call , response : Response ) { response . use { if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) for (( name , value ) in response . headers ) { println ( \"$name: $value\" ) } println ( response . body !! . string ()) } } }) } Java private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { Request request = new Request . Builder () . url ( \"http://publicobject.com/helloworld.txt\" ) . build (); client . newCall ( request ). enqueue ( new Callback () { @Override public void onFailure ( Call call , IOException e ) { e . printStackTrace (); } @Override public void onResponse ( Call call , Response response ) throws IOException { try ( ResponseBody responseBody = response . body ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); Headers responseHeaders = response . headers (); for ( int i = 0 , size = responseHeaders . size (); i < size ; i ++ ) { System . out . println ( responseHeaders . name ( i ) + \": \" + responseHeaders . value ( i )); } System . out . println ( responseBody . string ()); } } }); }","title":"Asynchronous Get (.kt, .java)"},{"location":"recipes/#accessing-headers-kt-java","text":"Typically HTTP headers work like a Map<String, String> : each field has one value or none. But some headers permit multiple values, like Guava\u2019s Multimap . For example, it\u2019s legal and common for an HTTP response to supply multiple Vary headers. OkHttp\u2019s APIs attempt to make both cases comfortable. When writing request headers, use header(name, value) to set the only occurrence of name to value . If there are existing values, they will be removed before the new value is added. Use addHeader(name, value) to add a header without removing the headers already present. When reading response a header, use header(name) to return the last occurrence of the named value. Usually this is also the only occurrence! If no value is present, header(name) will return null. To read all of a field\u2019s values as a list, use headers(name) . To visit all headers, use the Headers class which supports access by index. Kotlin private val client = OkHttpClient () fun run () { val request = Request . Builder () . url ( \"https://api.github.com/repos/square/okhttp/issues\" ) . header ( \"User-Agent\" , \"OkHttp Headers.java\" ) . addHeader ( \"Accept\" , \"application/json; q=0.5\" ) . addHeader ( \"Accept\" , \"application/vnd.github.v3+json\" ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) println ( \"Server: ${response.header(\" Server \")}\" ) println ( \"Date: ${response.header(\" Date \")}\" ) println ( \"Vary: ${response.headers(\" Vary \")}\" ) } } Java private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { Request request = new Request . Builder () . url ( \"https://api.github.com/repos/square/okhttp/issues\" ) . header ( \"User-Agent\" , \"OkHttp Headers.java\" ) . addHeader ( \"Accept\" , \"application/json; q=0.5\" ) . addHeader ( \"Accept\" , \"application/vnd.github.v3+json\" ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); System . out . println ( \"Server: \" + response . header ( \"Server\" )); System . out . println ( \"Date: \" + response . header ( \"Date\" )); System . out . println ( \"Vary: \" + response . headers ( \"Vary\" )); } }","title":"Accessing Headers (.kt, .java)"},{"location":"recipes/#posting-a-string-kt-java","text":"Use an HTTP POST to send a request body to a service. This example posts a markdown document to a web service that renders markdown as HTML. Because the entire request body is in memory simultaneously, avoid posting large (greater than 1 MiB) documents using this API. Kotlin private val client = OkHttpClient () fun run () { val postBody = \"\"\" |Releases |-------- | | * _1.0_ May 6, 2013 | * _1.1_ June 15, 2013 | * _1.2_ August 11, 2013 |\"\"\" . trimMargin () val request = Request . Builder () . url ( \"https://api.github.com/markdown/raw\" ) . post ( postBody . toRequestBody ( MEDIA_TYPE_MARKDOWN )) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) println ( response . body !! . string ()) } } companion object { val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\" . toMediaType () } Java public static final MediaType MEDIA_TYPE_MARKDOWN = MediaType . parse ( \"text/x-markdown; charset=utf-8\" ); private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { String postBody = \"\" + \"Releases\\n\" + \"--------\\n\" + \"\\n\" + \" * _1.0_ May 6, 2013\\n\" + \" * _1.1_ June 15, 2013\\n\" + \" * _1.2_ August 11, 2013\\n\" ; Request request = new Request . Builder () . url ( \"https://api.github.com/markdown/raw\" ) . post ( RequestBody . create ( MEDIA_TYPE_MARKDOWN , postBody )) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); System . out . println ( response . body (). string ()); } }","title":"Posting a String (.kt, .java)"},{"location":"recipes/#post-streaming-kt-java","text":"Here we POST a request body as a stream. The content of this request body is being generated as it\u2019s being written. This example streams directly into the Okio buffered sink. Your programs may prefer an OutputStream , which you can get from BufferedSink.outputStream() . Kotlin private val client = OkHttpClient () fun run () { val requestBody = object : RequestBody () { override fun contentType () = MEDIA_TYPE_MARKDOWN override fun writeTo ( sink : BufferedSink ) { sink . writeUtf8 ( \"Numbers\\n\" ) sink . writeUtf8 ( \"-------\\n\" ) for ( i in 2. . 997 ) { sink . writeUtf8 ( String . format ( \" * $i = ${factor(i)}\\n\" )) } } private fun factor ( n : Int ): String { for ( i in 2 until n ) { val x = n / i if ( x * i == n ) return \"${factor(x)} \u00d7 $i\" } return n . toString () } } val request = Request . Builder () . url ( \"https://api.github.com/markdown/raw\" ) . post ( requestBody ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) println ( response . body !! . string ()) } } companion object { val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\" . toMediaType () } Java public static final MediaType MEDIA_TYPE_MARKDOWN = MediaType . parse ( \"text/x-markdown; charset=utf-8\" ); private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { RequestBody requestBody = new RequestBody () { @Override public MediaType contentType () { return MEDIA_TYPE_MARKDOWN ; } @Override public void writeTo ( BufferedSink sink ) throws IOException { sink . writeUtf8 ( \"Numbers\\n\" ); sink . writeUtf8 ( \"-------\\n\" ); for ( int i = 2 ; i <= 997 ; i ++ ) { sink . writeUtf8 ( String . format ( \" * %s = %s\\n\" , i , factor ( i ))); } } private String factor ( int n ) { for ( int i = 2 ; i < n ; i ++ ) { int x = n / i ; if ( x * i == n ) return factor ( x ) + \" \u00d7 \" + i ; } return Integer . toString ( n ); } }; Request request = new Request . Builder () . url ( \"https://api.github.com/markdown/raw\" ) . post ( requestBody ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); System . out . println ( response . body (). string ()); } }","title":"Post Streaming (.kt, .java)"},{"location":"recipes/#posting-a-file-kt-java","text":"It\u2019s easy to use a file as a request body. Kotlin private val client = OkHttpClient () fun run () { val file = File ( \"README.md\" ) val request = Request . Builder () . url ( \"https://api.github.com/markdown/raw\" ) . post ( file . asRequestBody ( MEDIA_TYPE_MARKDOWN )) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) println ( response . body !! . string ()) } } companion object { val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\" . toMediaType () } Java public static final MediaType MEDIA_TYPE_MARKDOWN = MediaType . parse ( \"text/x-markdown; charset=utf-8\" ); private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { File file = new File ( \"README.md\" ); Request request = new Request . Builder () . url ( \"https://api.github.com/markdown/raw\" ) . post ( RequestBody . create ( MEDIA_TYPE_MARKDOWN , file )) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); System . out . println ( response . body (). string ()); } }","title":"Posting a File (.kt, .java)"},{"location":"recipes/#posting-form-parameters-kt-java","text":"Use FormBody.Builder to build a request body that works like an HTML <form> tag. Names and values will be encoded using an HTML-compatible form URL encoding. Kotlin private val client = OkHttpClient () fun run () { val formBody = FormBody . Builder () . add ( \"search\" , \"Jurassic Park\" ) . build () val request = Request . Builder () . url ( \"https://en.wikipedia.org/w/index.php\" ) . post ( formBody ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) println ( response . body !! . string ()) } } Java private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { RequestBody formBody = new FormBody . Builder () . add ( \"search\" , \"Jurassic Park\" ) . build (); Request request = new Request . Builder () . url ( \"https://en.wikipedia.org/w/index.php\" ) . post ( formBody ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); System . out . println ( response . body (). string ()); } }","title":"Posting form parameters (.kt, .java)"},{"location":"recipes/#posting-a-multipart-request-kt-java","text":"MultipartBody.Builder can build sophisticated request bodies compatible with HTML file upload forms. Each part of a multipart request body is itself a request body, and can define its own headers. If present, these headers should describe the part body, such as its Content-Disposition . The Content-Length and Content-Type headers are added automatically if they\u2019re available. Kotlin private val client = OkHttpClient () fun run () { // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image val requestBody = MultipartBody . Builder () . setType ( MultipartBody . FORM ) . addFormDataPart ( \"title\" , \"Square Logo\" ) . addFormDataPart ( \"image\" , \"logo-square.png\" , File ( \"docs/images/logo-square.png\" ). asRequestBody ( MEDIA_TYPE_PNG )) . build () val request = Request . Builder () . header ( \"Authorization\" , \"Client-ID $IMGUR_CLIENT_ID\" ) . url ( \"https://api.imgur.com/3/image\" ) . post ( requestBody ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) println ( response . body !! . string ()) } } companion object { /** * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running * these examples, please request your own client ID! https://api.imgur.com/oauth2 */ private val IMGUR_CLIENT_ID = \"9199fdef135c122\" private val MEDIA_TYPE_PNG = \"image/png\" . toMediaType () } Java /** * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running * these examples, please request your own client ID! https://api.imgur.com/oauth2 */ private static final String IMGUR_CLIENT_ID = \"...\" ; private static final MediaType MEDIA_TYPE_PNG = MediaType . parse ( \"image/png\" ); private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image RequestBody requestBody = new MultipartBody . Builder () . setType ( MultipartBody . FORM ) . addFormDataPart ( \"title\" , \"Square Logo\" ) . addFormDataPart ( \"image\" , \"logo-square.png\" , RequestBody . create ( MEDIA_TYPE_PNG , new File ( \"website/static/logo-square.png\" ))) . build (); Request request = new Request . Builder () . header ( \"Authorization\" , \"Client-ID \" + IMGUR_CLIENT_ID ) . url ( \"https://api.imgur.com/3/image\" ) . post ( requestBody ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); System . out . println ( response . body (). string ()); } }","title":"Posting a multipart request (.kt, .java)"},{"location":"recipes/#parse-a-json-response-with-moshi-kt-java","text":"Moshi is a handy API for converting between JSON and Java objects. Here we\u2019re using it to decode a JSON response from a GitHub API. Note that ResponseBody.charStream() uses the Content-Type response header to select which charset to use when decoding the response body. It defaults to UTF-8 if no charset is specified. Kotlin private val client = OkHttpClient () private val moshi = Moshi . Builder (). build () private val gistJsonAdapter = moshi . adapter ( Gist :: class . java ) fun run () { val request = Request . Builder () . url ( \"https://api.github.com/gists/c2a7c39532239ff261be\" ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) val gist = gistJsonAdapter . fromJson ( response . body !! . source ()) for (( key , value ) in gist !! . files !! ) { println ( key ) println ( value . content ) } } } @JsonClass ( generateAdapter = true ) data class Gist ( var files : Map < String , GistFile >?) @JsonClass ( generateAdapter = true ) data class GistFile ( var content : String ?) Java private final OkHttpClient client = new OkHttpClient (); private final Moshi moshi = new Moshi . Builder (). build (); private final JsonAdapter < Gist > gistJsonAdapter = moshi . adapter ( Gist . class ); public void run () throws Exception { Request request = new Request . Builder () . url ( \"https://api.github.com/gists/c2a7c39532239ff261be\" ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); Gist gist = gistJsonAdapter . fromJson ( response . body (). source ()); for ( Map . Entry < String , GistFile > entry : gist . files . entrySet ()) { System . out . println ( entry . getKey ()); System . out . println ( entry . getValue (). content ); } } } static class Gist { Map < String , GistFile > files ; } static class GistFile { String content ; }","title":"Parse a JSON Response With Moshi (.kt, .java)"},{"location":"recipes/#response-caching-kt-java","text":"To cache responses, you\u2019ll need a cache directory that you can read and write to, and a limit on the cache\u2019s size. The cache directory should be private, and untrusted applications should not be able to read its contents! It is an error to have multiple caches accessing the same cache directory simultaneously. Most applications should call new OkHttpClient() exactly once, configure it with their cache, and use that same instance everywhere. Otherwise the two cache instances will stomp on each other, corrupt the response cache, and possibly crash your program. Response caching uses HTTP headers for all configuration. You can add request headers like Cache-Control: max-stale=3600 and OkHttp\u2019s cache will honor them. Your webserver configures how long responses are cached with its own response headers, like Cache-Control: max-age=9600 . There are cache headers to force a cached response, force a network response, or force the network response to be validated with a conditional GET. Kotlin private val client : OkHttpClient = OkHttpClient . Builder () . cache ( Cache ( directory = cacheDirectory , maxSize = 10L * 1024L * 1024L // 10 MiB )) . build () fun run () { val request = Request . Builder () . url ( \"http://publicobject.com/helloworld.txt\" ) . build () val response1Body = client . newCall ( request ). execute (). use { if (! it . isSuccessful ) throw IOException ( \"Unexpected code $it\" ) println ( \"Response 1 response: $it\" ) println ( \"Response 1 cache response: ${it.cacheResponse}\" ) println ( \"Response 1 network response: ${it.networkResponse}\" ) return @use it . body !! . string () } val response2Body = client . newCall ( request ). execute (). use { if (! it . isSuccessful ) throw IOException ( \"Unexpected code $it\" ) println ( \"Response 2 response: $it\" ) println ( \"Response 2 cache response: ${it.cacheResponse}\" ) println ( \"Response 2 network response: ${it.networkResponse}\" ) return @use it . body !! . string () } println ( \"Response 2 equals Response 1? \" + ( response1Body == response2Body )) } Java private final OkHttpClient client ; public CacheResponse ( File cacheDirectory ) throws Exception { int cacheSize = 10 * 1024 * 1024 ; // 10 MiB Cache cache = new Cache ( cacheDirectory , cacheSize ); client = new OkHttpClient . Builder () . cache ( cache ) . build (); } public void run () throws Exception { Request request = new Request . Builder () . url ( \"http://publicobject.com/helloworld.txt\" ) . build (); String response1Body ; try ( Response response1 = client . newCall ( request ). execute ()) { if ( ! response1 . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response1 ); response1Body = response1 . body (). string (); System . out . println ( \"Response 1 response: \" + response1 ); System . out . println ( \"Response 1 cache response: \" + response1 . cacheResponse ()); System . out . println ( \"Response 1 network response: \" + response1 . networkResponse ()); } String response2Body ; try ( Response response2 = client . newCall ( request ). execute ()) { if ( ! response2 . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response2 ); response2Body = response2 . body (). string (); System . out . println ( \"Response 2 response: \" + response2 ); System . out . println ( \"Response 2 cache response: \" + response2 . cacheResponse ()); System . out . println ( \"Response 2 network response: \" + response2 . networkResponse ()); } System . out . println ( \"Response 2 equals Response 1? \" + response1Body . equals ( response2Body )); } To prevent a response from using the cache, use CacheControl.FORCE_NETWORK . To prevent it from using the network, use CacheControl.FORCE_CACHE . Be warned: if you use FORCE_CACHE and the response requires the network, OkHttp will return a 504 Unsatisfiable Request response.","title":"Response Caching (.kt, .java)"},{"location":"recipes/#canceling-a-call-kt-java","text":"Use Call.cancel() to stop an ongoing call immediately. If a thread is currently writing a request or reading a response, it will receive an IOException . Use this to conserve the network when a call is no longer necessary; for example when your user navigates away from an application. Both synchronous and asynchronous calls can be canceled. Kotlin private val executor = Executors . newScheduledThreadPool ( 1 ) private val client = OkHttpClient () fun run () { val request = Request . Builder () . url ( \"http://httpbin.org/delay/2\" ) // This URL is served with a 2 second delay. . build () val startNanos = System . nanoTime () val call = client . newCall ( request ) // Schedule a job to cancel the call in 1 second. executor . schedule ({ System . out . printf ( \"%.2f Canceling call.%n\" , ( System . nanoTime () - startNanos ) / 1 e9f ) call . cancel () System . out . printf ( \"%.2f Canceled call.%n\" , ( System . nanoTime () - startNanos ) / 1 e9f ) }, 1 , TimeUnit . SECONDS ) System . out . printf ( \"%.2f Executing call.%n\" , ( System . nanoTime () - startNanos ) / 1 e9f ) try { call . execute (). use { response -> System . out . printf ( \"%.2f Call was expected to fail, but completed: %s%n\" , ( System . nanoTime () - startNanos ) / 1 e9f , response ) } } catch ( e : IOException ) { System . out . printf ( \"%.2f Call failed as expected: %s%n\" , ( System . nanoTime () - startNanos ) / 1 e9f , e ) } } Java private final ScheduledExecutorService executor = Executors . newScheduledThreadPool ( 1 ); private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { Request request = new Request . Builder () . url ( \"http://httpbin.org/delay/2\" ) // This URL is served with a 2 second delay. . build (); final long startNanos = System . nanoTime (); final Call call = client . newCall ( request ); // Schedule a job to cancel the call in 1 second. executor . schedule ( new Runnable () { @Override public void run () { System . out . printf ( \"%.2f Canceling call.%n\" , ( System . nanoTime () - startNanos ) / 1e9f ); call . cancel (); System . out . printf ( \"%.2f Canceled call.%n\" , ( System . nanoTime () - startNanos ) / 1e9f ); } }, 1 , TimeUnit . SECONDS ); System . out . printf ( \"%.2f Executing call.%n\" , ( System . nanoTime () - startNanos ) / 1e9f ); try ( Response response = call . execute ()) { System . out . printf ( \"%.2f Call was expected to fail, but completed: %s%n\" , ( System . nanoTime () - startNanos ) / 1e9f , response ); } catch ( IOException e ) { System . out . printf ( \"%.2f Call failed as expected: %s%n\" , ( System . nanoTime () - startNanos ) / 1e9f , e ); } }","title":"Canceling a Call (.kt, .java)"},{"location":"recipes/#timeouts-kt-java","text":"Use timeouts to fail a call when its peer is unreachable. Network partitions can be due to client connectivity problems, server availability problems, or anything between. OkHttp supports connect, write, read, and full call timeouts. Kotlin private val client : OkHttpClient = OkHttpClient . Builder () . connectTimeout ( 5 , TimeUnit . SECONDS ) . writeTimeout ( 5 , TimeUnit . SECONDS ) . readTimeout ( 5 , TimeUnit . SECONDS ) . callTimeout ( 10 , TimeUnit . SECONDS ) . build () fun run () { val request = Request . Builder () . url ( \"http://httpbin.org/delay/2\" ) // This URL is served with a 2 second delay. . build () client . newCall ( request ). execute (). use { response -> println ( \"Response completed: $response\" ) } } Java private final OkHttpClient client ; public ConfigureTimeouts () throws Exception { client = new OkHttpClient . Builder () . connectTimeout ( 10 , TimeUnit . SECONDS ) . writeTimeout ( 10 , TimeUnit . SECONDS ) . readTimeout ( 30 , TimeUnit . SECONDS ) . build (); } public void run () throws Exception { Request request = new Request . Builder () . url ( \"http://httpbin.org/delay/2\" ) // This URL is served with a 2 second delay. . build (); try ( Response response = client . newCall ( request ). execute ()) { System . out . println ( \"Response completed: \" + response ); } }","title":"Timeouts (.kt, .java)"},{"location":"recipes/#per-call-configuration-kt-java","text":"All the HTTP client configuration lives in OkHttpClient including proxy settings, timeouts, and caches. When you need to change the configuration of a single call, call OkHttpClient.newBuilder() . This returns a builder that shares the same connection pool, dispatcher, and configuration with the original client. In the example below, we make one request with a 500 ms timeout and another with a 3000 ms timeout. Kotlin private val client = OkHttpClient () fun run () { val request = Request . Builder () . url ( \"http://httpbin.org/delay/1\" ) // This URL is served with a 1 second delay. . build () // Copy to customize OkHttp for this request. val client1 = client . newBuilder () . readTimeout ( 500 , TimeUnit . MILLISECONDS ) . build () try { client1 . newCall ( request ). execute (). use { response -> println ( \"Response 1 succeeded: $response\" ) } } catch ( e : IOException ) { println ( \"Response 1 failed: $e\" ) } // Copy to customize OkHttp for this request. val client2 = client . newBuilder () . readTimeout ( 3000 , TimeUnit . MILLISECONDS ) . build () try { client2 . newCall ( request ). execute (). use { response -> println ( \"Response 2 succeeded: $response\" ) } } catch ( e : IOException ) { println ( \"Response 2 failed: $e\" ) } } Java private final OkHttpClient client = new OkHttpClient (); public void run () throws Exception { Request request = new Request . Builder () . url ( \"http://httpbin.org/delay/1\" ) // This URL is served with a 1 second delay. . build (); // Copy to customize OkHttp for this request. OkHttpClient client1 = client . newBuilder () . readTimeout ( 500 , TimeUnit . MILLISECONDS ) . build (); try ( Response response = client1 . newCall ( request ). execute ()) { System . out . println ( \"Response 1 succeeded: \" + response ); } catch ( IOException e ) { System . out . println ( \"Response 1 failed: \" + e ); } // Copy to customize OkHttp for this request. OkHttpClient client2 = client . newBuilder () . readTimeout ( 3000 , TimeUnit . MILLISECONDS ) . build (); try ( Response response = client2 . newCall ( request ). execute ()) { System . out . println ( \"Response 2 succeeded: \" + response ); } catch ( IOException e ) { System . out . println ( \"Response 2 failed: \" + e ); } }","title":"Per-call Configuration (.kt, .java)"},{"location":"recipes/#handling-authentication-kt-java","text":"OkHttp can automatically retry unauthenticated requests. When a response is 401 Not Authorized , an Authenticator is asked to supply credentials. Implementations should build a new request that includes the missing credentials. If no credentials are available, return null to skip the retry. Use Response.challenges() to get the schemes and realms of any authentication challenges. When fulfilling a Basic challenge, use Credentials.basic(username, password) to encode the request header. Kotlin private val client = OkHttpClient . Builder () . authenticator ( object : Authenticator { @Throws ( IOException :: class ) override fun authenticate ( route : Route ?, response : Response ): Request ? { if ( response . request . header ( \"Authorization\" ) != null ) { return null // Give up, we've already attempted to authenticate. } println ( \"Authenticating for response: $response\" ) println ( \"Challenges: ${response.challenges()}\" ) val credential = Credentials . basic ( \"jesse\" , \"password1\" ) return response . request . newBuilder () . header ( \"Authorization\" , credential ) . build () } }) . build () fun run () { val request = Request . Builder () . url ( \"http://publicobject.com/secrets/hellosecret.txt\" ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) println ( response . body !! . string ()) } } Java private final OkHttpClient client ; public Authenticate () { client = new OkHttpClient . Builder () . authenticator ( new Authenticator () { @Override public Request authenticate ( Route route , Response response ) throws IOException { if ( response . request (). header ( \"Authorization\" ) != null ) { return null ; // Give up, we've already attempted to authenticate. } System . out . println ( \"Authenticating for response: \" + response ); System . out . println ( \"Challenges: \" + response . challenges ()); String credential = Credentials . basic ( \"jesse\" , \"password1\" ); return response . request (). newBuilder () . header ( \"Authorization\" , credential ) . build (); } }) . build (); } public void run () throws Exception { Request request = new Request . Builder () . url ( \"http://publicobject.com/secrets/hellosecret.txt\" ) . build (); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); System . out . println ( response . body (). string ()); } } To avoid making many retries when authentication isn\u2019t working, you can return null to give up. For example, you may want to skip the retry when these exact credentials have already been attempted: if ( credential . equals ( response . request (). header ( \"Authorization\" ))) { return null ; // If we already failed with these credentials, don't retry. } You may also skip the retry when you\u2019ve hit an application-defined attempt limit: if ( responseCount ( response ) >= 3 ) { return null ; // If we've failed 3 times, give up. } This above code relies on this responseCount() method: private int responseCount ( Response response ) { int result = 1 ; while (( response = response . priorResponse ()) != null ) { result ++ ; } return result ; }","title":"Handling authentication (.kt, .java)"},{"location":"releasing/","text":"Releasing \u00b6 Prerequisite: Sonatype (Maven Central) Account \u00b6 Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for com.squareup projects. Prerequisite: GPG Keys \u00b6 Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the password empty for this key. $ gpg --full-generate-key Upload the GPG keys to public servers: $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber <jbarber@squareup.com> sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX Prerequisite: Gradle Properties \u00b6 Define publishing properties in ~/.gradle/gradle.properties : signing.keyId=1A2345F8 signing.password= signing.secretKeyRingFile=/Users/jbarber/.gnupg/secring.gpg signing.keyId is the GPG key\u2019s ID. Get it with this: $ gpg --list-keys --keyid-format SHORT signing.password is the password for this key. This might be empty! signing.secretKeyRingFile is the absolute path for secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the keyId above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg Cutting a Release \u00b6 Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Set environment variables with your Sonatype credentials . export SONATYPE_NEXUS_USERNAME=johnbarber export SONATYPE_NEXUS_PASSWORD=`pbpaste` Update, build, and upload: sed -i \"\" \\ \"s/version = '.*'/version = '$RELEASE_VERSION'/g\" \\ build.gradle sed -i \"\" \\ \"s/\\\"com.squareup.okhttp3:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"com.squareup.okhttp3:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` sed -i \"\" \\ \"s/\\/com.squareup.okhttp3\\/\\([^\\:]*\\)\\/[^\\/]*\\//\\/com.squareup.okhttp3\\/\\1\\/$RELEASE_VERSION\\//g\" \\ `find . -name \"README.md\"` ./gradlew clean publishAllPublicationsToMavencentralRepository Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a parent-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/version = '.*'/version = '$NEXT_VERSION'/g\" \\ build.gradle git commit -am \"Prepare next development version.\" git push && git push --tags","title":"Releasing"},{"location":"releasing/#releasing","text":"","title":"Releasing"},{"location":"releasing/#prerequisite-sonatype-maven-central-account","text":"Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for com.squareup projects.","title":"Prerequisite: Sonatype (Maven Central) Account"},{"location":"releasing/#prerequisite-gpg-keys","text":"Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the password empty for this key. $ gpg --full-generate-key Upload the GPG keys to public servers: $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber <jbarber@squareup.com> sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX","title":"Prerequisite: GPG Keys"},{"location":"releasing/#prerequisite-gradle-properties","text":"Define publishing properties in ~/.gradle/gradle.properties : signing.keyId=1A2345F8 signing.password= signing.secretKeyRingFile=/Users/jbarber/.gnupg/secring.gpg signing.keyId is the GPG key\u2019s ID. Get it with this: $ gpg --list-keys --keyid-format SHORT signing.password is the password for this key. This might be empty! signing.secretKeyRingFile is the absolute path for secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the keyId above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg","title":"Prerequisite: Gradle Properties"},{"location":"releasing/#cutting-a-release","text":"Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Set environment variables with your Sonatype credentials . export SONATYPE_NEXUS_USERNAME=johnbarber export SONATYPE_NEXUS_PASSWORD=`pbpaste` Update, build, and upload: sed -i \"\" \\ \"s/version = '.*'/version = '$RELEASE_VERSION'/g\" \\ build.gradle sed -i \"\" \\ \"s/\\\"com.squareup.okhttp3:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"com.squareup.okhttp3:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` sed -i \"\" \\ \"s/\\/com.squareup.okhttp3\\/\\([^\\:]*\\)\\/[^\\/]*\\//\\/com.squareup.okhttp3\\/\\1\\/$RELEASE_VERSION\\//g\" \\ `find . -name \"README.md\"` ./gradlew clean publishAllPublicationsToMavencentralRepository Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a parent-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/version = '.*'/version = '$NEXT_VERSION'/g\" \\ build.gradle git commit -am \"Prepare next development version.\" git push && git push --tags","title":"Cutting a Release"},{"location":"security/","text":"Security Policy \u00b6 Supported Versions \u00b6 Version Supported Notes 4.x \u2705 Android 5.0+ (API level 21+) and on Java 8+. 3.12.x Until 2021-12-31 Android 2.3+ (API level 9+) and Java 7+. Platforms may not support TLSv1.2. Reporting a Vulnerability \u00b6 Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository. If you believe you have discovered a security vulnerability, please follow the guidelines at https://bugcrowd.com/squareopensource","title":"Security"},{"location":"security/#security-policy","text":"","title":"Security Policy"},{"location":"security/#supported-versions","text":"Version Supported Notes 4.x \u2705 Android 5.0+ (API level 21+) and on Java 8+. 3.12.x Until 2021-12-31 Android 2.3+ (API level 9+) and Java 7+. Platforms may not support TLSv1.2.","title":"Supported Versions"},{"location":"security/#reporting-a-vulnerability","text":"Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository. If you believe you have discovered a security vulnerability, please follow the guidelines at https://bugcrowd.com/squareopensource","title":"Reporting a Vulnerability"},{"location":"security_providers/","text":"Security Providers \u00b6 Provider Status \u00b6 Provider HTTP/2 TLSv1.3 Powered By Notes JVM default Java 9+ Java 11+ OpenJDK Android default \u2705 Android 10+ BoringSSL GraalVM \u2705 OpenJDK Only actively tested with JDK 11, not with 8 target Bouncy Castle \u2705 Bouncy Castle Tracking bug. Conscrypt \u2705 \u2705 BoringSSL Activated if Conscrypt is first registered provider. OpenJSSE \u2705 OpenJDK OpenJDK backport. Corretto \u2705 \u2705 OpenSSL Amazon\u2019s high-performance provider. Tracking bug. All providers support HTTP/1.1 and TLSv1.2.","title":"Security Providers"},{"location":"security_providers/#security-providers","text":"","title":"Security Providers"},{"location":"security_providers/#provider-status","text":"Provider HTTP/2 TLSv1.3 Powered By Notes JVM default Java 9+ Java 11+ OpenJDK Android default \u2705 Android 10+ BoringSSL GraalVM \u2705 OpenJDK Only actively tested with JDK 11, not with 8 target Bouncy Castle \u2705 Bouncy Castle Tracking bug. Conscrypt \u2705 \u2705 BoringSSL Activated if Conscrypt is first registered provider. OpenJSSE \u2705 OpenJDK OpenJDK backport. Corretto \u2705 \u2705 OpenSSL Amazon\u2019s high-performance provider. Tracking bug. All providers support HTTP/1.1 and TLSv1.2.","title":"Provider Status"},{"location":"tls_configuration_history/","text":"TLS Configuration History \u00b6 OkHttp tracks the dynamic TLS ecosystem to balance connectivity and security. This page is a log of changes we\u2019ve made over time to OkHttp\u2019s default TLS options. OkHttp 3.14 \u00b6 2019-03-14 Remove 2 TLSv1.3 cipher suites that are neither available on OkHttp\u2019s host platforms nor enabled in releases of Chrome and Firefox. RESTRICTED_TLS cipher suites \u00b6 TLS_AES_128_GCM_SHA256 \u00b9 TLS_AES_256_GCM_SHA384 \u00b9 TLS_CHACHA20_POLY1305_SHA256 \u00b9 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 REMOVED: TLS_AES_128_CCM_SHA256 \u00b9 REMOVED: TLS_AES_128_CCM_8_SHA256 \u00b9 MODERN_TLS / COMPATIBLE_TLS cipher suites \u00b6 TLS_AES_128_GCM_SHA256 \u00b9 TLS_AES_256_GCM_SHA384 \u00b9 TLS_CHACHA20_POLY1305_SHA256 \u00b9 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_AES_128_GCM_SHA256 \u00b2 TLS_RSA_WITH_AES_256_GCM_SHA384 \u00b2 TLS_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_3DES_EDE_CBC_SHA \u00b2 REMOVED: TLS_AES_128_CCM_SHA256 \u00b9 REMOVED: TLS_AES_128_CCM_8_SHA256 \u00b9 OkHttp 3.13 \u00b6 2019-02-04 Remove TLSv1.1 and TLSv1 from MODERN_TLS. Change COMPATIBLE_TLS to support all TLS versions. RESTRICTED_TLS versions \u00b6 TLSv1.3 TLSv1.2 MODERN_TLS versions \u00b6 TLSv1.3 TLSv1.2 REMOVED: TLSv1.1 REMOVED: TLSv1 COMPATIBLE_TLS versions \u00b6 NEW: TLSv1.3 NEW: TLSv1.2 NEW: TLSv1.1 TLSv1 OkHttp 3.12 \u00b6 2018-11-16 Added support for TLSv1.3. RESTRICTED_TLS cipher suites \u00b6 NEW: TLS_AES_128_GCM_SHA256 \u00b9 NEW: TLS_AES_256_GCM_SHA384 \u00b9 NEW: TLS_CHACHA20_POLY1305_SHA256 \u00b9 NEW: TLS_AES_128_CCM_SHA256 \u00b9 NEW: TLS_AES_128_CCM_8_SHA256 \u00b9 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 MODERN_TLS / COMPATIBLE_TLS cipher suites \u00b6 NEW: TLS_AES_128_GCM_SHA256 \u00b9 NEW: TLS_AES_256_GCM_SHA384 \u00b9 NEW: TLS_CHACHA20_POLY1305_SHA256 \u00b9 NEW: TLS_AES_128_CCM_SHA256 \u00b9 NEW: TLS_AES_128_CCM_8_SHA256 \u00b9 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_AES_128_GCM_SHA256 \u00b2 TLS_RSA_WITH_AES_256_GCM_SHA384 \u00b2 TLS_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_3DES_EDE_CBC_SHA \u00b2 RESTRICTED_TLS versions \u00b6 NEW: TLSv1.3 TLSv1.2 MODERN_TLS versions \u00b6 NEW: TLSv1.3 TLSv1.2 TLSv1.1 TLSv1 COMPATIBLE_TLS versions \u00b6 TLSv1 OkHttp 3.11 \u00b6 2018-07-12 Added a new extra strict RESTRICTED_TLS configuration inspired by Google Cloud\u2019s similar policy . It is appropriate when both the host platform (JVM/Conscrypt/Android) and target webserver are current. RESTRICTED_TLS cipher suites \u00b6 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 RESTRICTED_TLS versions \u00b6 TLSv1.2 OkHttp 3.10 \u00b6 2018-02-24 Remove two rarely-used cipher suites from the default set. This tracks a Chromium change to remove these cipher suites because they are fragile and rarely-used. MODERN_TLS / COMPATIBLE_TLS cipher suites \u00b6 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_AES_128_GCM_SHA256 \u00b2 TLS_RSA_WITH_AES_256_GCM_SHA384 \u00b2 TLS_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_3DES_EDE_CBC_SHA \u00b2 REMOVED: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA REMOVED: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA OkHttp 3.5 \u00b6 2016-11-30 Remove three old cipher suites and add five new ones. This tracks changes in what\u2019s available on Android and Java, and also what cipher suites recent releases of Chrome and Firefox support by default. MODERN_TLS / COMPATIBLE_TLS cipher suites \u00b6 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 NEW: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 NEW: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 NEW: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 NEW: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA \u00b2 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA \u00b2 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_AES_128_GCM_SHA256 \u00b2 NEW: TLS_RSA_WITH_AES_256_GCM_SHA384 \u00b2 TLS_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_3DES_EDE_CBC_SHA \u00b2 REMOVED: TLS_DHE_RSA_WITH_AES_128_CBC_SHA REMOVED: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 REMOVED: TLS_DHE_RSA_WITH_AES_256_CBC_SHA OkHttp 3.0 \u00b6 2016-01-13 MODERN_TLS / COMPATIBLE_TLS cipher suites \u00b6 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA \u00b2 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA \u00b2 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_DHE_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_DHE_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_AES_128_GCM_SHA256 \u00b2 TLS_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_3DES_EDE_CBC_SHA \u00b2 MODERN_TLS versions \u00b6 TLSv1.2 TLSv1.1 TLSv1 COMPATIBLE_TLS versions \u00b6 TLSv1 \u00b9 TLSv1.3 Only \u00b6 Cipher suites that are only available with TLSv1.3. \u00b2 HTTP/2 Cipher Suite Denylist \u00b6 Cipher suites that are discouraged for use with HTTP/2. OkHttp includes them because better suites are not commonly available. For example, none of the better cipher suites listed above shipped with Android 4.4 or Java 7.","title":"Tls configuration history"},{"location":"tls_configuration_history/#tls-configuration-history","text":"OkHttp tracks the dynamic TLS ecosystem to balance connectivity and security. This page is a log of changes we\u2019ve made over time to OkHttp\u2019s default TLS options.","title":"TLS Configuration History"},{"location":"tls_configuration_history/#okhttp-314","text":"2019-03-14 Remove 2 TLSv1.3 cipher suites that are neither available on OkHttp\u2019s host platforms nor enabled in releases of Chrome and Firefox.","title":"OkHttp 3.14"},{"location":"tls_configuration_history/#restricted_tls-cipher-suites","text":"TLS_AES_128_GCM_SHA256 \u00b9 TLS_AES_256_GCM_SHA384 \u00b9 TLS_CHACHA20_POLY1305_SHA256 \u00b9 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 REMOVED: TLS_AES_128_CCM_SHA256 \u00b9 REMOVED: TLS_AES_128_CCM_8_SHA256 \u00b9","title":"RESTRICTED_TLS cipher suites"},{"location":"tls_configuration_history/#modern_tls-compatible_tls-cipher-suites","text":"TLS_AES_128_GCM_SHA256 \u00b9 TLS_AES_256_GCM_SHA384 \u00b9 TLS_CHACHA20_POLY1305_SHA256 \u00b9 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_AES_128_GCM_SHA256 \u00b2 TLS_RSA_WITH_AES_256_GCM_SHA384 \u00b2 TLS_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_3DES_EDE_CBC_SHA \u00b2 REMOVED: TLS_AES_128_CCM_SHA256 \u00b9 REMOVED: TLS_AES_128_CCM_8_SHA256 \u00b9","title":"MODERN_TLS / COMPATIBLE_TLS cipher suites"},{"location":"tls_configuration_history/#okhttp-313","text":"2019-02-04 Remove TLSv1.1 and TLSv1 from MODERN_TLS. Change COMPATIBLE_TLS to support all TLS versions.","title":"OkHttp 3.13"},{"location":"tls_configuration_history/#restricted_tls-versions","text":"TLSv1.3 TLSv1.2","title":"RESTRICTED_TLS versions"},{"location":"tls_configuration_history/#modern_tls-versions","text":"TLSv1.3 TLSv1.2 REMOVED: TLSv1.1 REMOVED: TLSv1","title":"MODERN_TLS versions"},{"location":"tls_configuration_history/#compatible_tls-versions","text":"NEW: TLSv1.3 NEW: TLSv1.2 NEW: TLSv1.1 TLSv1","title":"COMPATIBLE_TLS versions"},{"location":"tls_configuration_history/#okhttp-312","text":"2018-11-16 Added support for TLSv1.3.","title":"OkHttp 3.12"},{"location":"tls_configuration_history/#restricted_tls-cipher-suites_1","text":"NEW: TLS_AES_128_GCM_SHA256 \u00b9 NEW: TLS_AES_256_GCM_SHA384 \u00b9 NEW: TLS_CHACHA20_POLY1305_SHA256 \u00b9 NEW: TLS_AES_128_CCM_SHA256 \u00b9 NEW: TLS_AES_128_CCM_8_SHA256 \u00b9 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256","title":"RESTRICTED_TLS cipher suites"},{"location":"tls_configuration_history/#modern_tls-compatible_tls-cipher-suites_1","text":"NEW: TLS_AES_128_GCM_SHA256 \u00b9 NEW: TLS_AES_256_GCM_SHA384 \u00b9 NEW: TLS_CHACHA20_POLY1305_SHA256 \u00b9 NEW: TLS_AES_128_CCM_SHA256 \u00b9 NEW: TLS_AES_128_CCM_8_SHA256 \u00b9 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_AES_128_GCM_SHA256 \u00b2 TLS_RSA_WITH_AES_256_GCM_SHA384 \u00b2 TLS_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_3DES_EDE_CBC_SHA \u00b2","title":"MODERN_TLS / COMPATIBLE_TLS cipher suites"},{"location":"tls_configuration_history/#restricted_tls-versions_1","text":"NEW: TLSv1.3 TLSv1.2","title":"RESTRICTED_TLS versions"},{"location":"tls_configuration_history/#modern_tls-versions_1","text":"NEW: TLSv1.3 TLSv1.2 TLSv1.1 TLSv1","title":"MODERN_TLS versions"},{"location":"tls_configuration_history/#compatible_tls-versions_1","text":"TLSv1","title":"COMPATIBLE_TLS versions"},{"location":"tls_configuration_history/#okhttp-311","text":"2018-07-12 Added a new extra strict RESTRICTED_TLS configuration inspired by Google Cloud\u2019s similar policy . It is appropriate when both the host platform (JVM/Conscrypt/Android) and target webserver are current.","title":"OkHttp 3.11"},{"location":"tls_configuration_history/#restricted_tls-cipher-suites_2","text":"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256","title":"RESTRICTED_TLS cipher suites"},{"location":"tls_configuration_history/#restricted_tls-versions_2","text":"TLSv1.2","title":"RESTRICTED_TLS versions"},{"location":"tls_configuration_history/#okhttp-310","text":"2018-02-24 Remove two rarely-used cipher suites from the default set. This tracks a Chromium change to remove these cipher suites because they are fragile and rarely-used.","title":"OkHttp 3.10"},{"location":"tls_configuration_history/#modern_tls-compatible_tls-cipher-suites_2","text":"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_AES_128_GCM_SHA256 \u00b2 TLS_RSA_WITH_AES_256_GCM_SHA384 \u00b2 TLS_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_3DES_EDE_CBC_SHA \u00b2 REMOVED: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA REMOVED: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA","title":"MODERN_TLS / COMPATIBLE_TLS cipher suites"},{"location":"tls_configuration_history/#okhttp-35","text":"2016-11-30 Remove three old cipher suites and add five new ones. This tracks changes in what\u2019s available on Android and Java, and also what cipher suites recent releases of Chrome and Firefox support by default.","title":"OkHttp 3.5"},{"location":"tls_configuration_history/#modern_tls-compatible_tls-cipher-suites_3","text":"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 NEW: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 NEW: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 NEW: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 NEW: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA \u00b2 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA \u00b2 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_AES_128_GCM_SHA256 \u00b2 NEW: TLS_RSA_WITH_AES_256_GCM_SHA384 \u00b2 TLS_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_3DES_EDE_CBC_SHA \u00b2 REMOVED: TLS_DHE_RSA_WITH_AES_128_CBC_SHA REMOVED: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 REMOVED: TLS_DHE_RSA_WITH_AES_256_CBC_SHA","title":"MODERN_TLS / COMPATIBLE_TLS cipher suites"},{"location":"tls_configuration_history/#okhttp-30","text":"2016-01-13","title":"OkHttp 3.0"},{"location":"tls_configuration_history/#modern_tls-compatible_tls-cipher-suites_4","text":"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA \u00b2 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA \u00b2 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_DHE_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_DHE_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_AES_128_GCM_SHA256 \u00b2 TLS_RSA_WITH_AES_128_CBC_SHA \u00b2 TLS_RSA_WITH_AES_256_CBC_SHA \u00b2 TLS_RSA_WITH_3DES_EDE_CBC_SHA \u00b2","title":"MODERN_TLS / COMPATIBLE_TLS cipher suites"},{"location":"tls_configuration_history/#modern_tls-versions_2","text":"TLSv1.2 TLSv1.1 TLSv1","title":"MODERN_TLS versions"},{"location":"tls_configuration_history/#compatible_tls-versions_2","text":"TLSv1","title":"COMPATIBLE_TLS versions"},{"location":"tls_configuration_history/#1-tlsv13-only","text":"Cipher suites that are only available with TLSv1.3.","title":"\u00b9 TLSv1.3 Only"},{"location":"tls_configuration_history/#2-http2-cipher-suite-denylist","text":"Cipher suites that are discouraged for use with HTTP/2. OkHttp includes them because better suites are not commonly available. For example, none of the better cipher suites listed above shipped with Android 4.4 or Java 7.","title":"\u00b2 HTTP/2 Cipher Suite Denylist"},{"location":"upgrading_to_okhttp_4/","text":"Upgrading to OkHttp 4 \u00b6 OkHttp 4.x upgrades our implementation language from Java to Kotlin and keeps everything else the same. We\u2019ve chosen Kotlin because it gives us powerful new capabilities while integrating closely with Java. We spent a lot of time and energy on retaining strict compatibility with OkHttp 3.x. We\u2019re even keeping the package name the same: okhttp3 ! There are three kinds of compatibility we\u2019re tracking: Binary compatibility is the ability to compile a program against OkHttp 3.x, and then to run it against OkHttp 4.x. We\u2019re using the excellent japicmp library via its Gradle plugin to enforce binary compatibility. Java source compatibility is the ability to upgrade Java uses of OkHttp 3.x to 4.x without changing .java files. Kotlin source compatibility is the ability to upgrade Kotlin uses of OkHttp 3.x to 4.x without changing .kt files. With a few small exceptions (below), OkHttp 4.x is both binary- and Java source-compatible with OkHttp 3.x. You can use an OkHttp 4.x .jar file with applications or libraries built for OkHttp 3.x. OkHttp is not source-compatible for Kotlin callers, but upgrading should be automatic thanks to Kotlin\u2019s powerful deprecation features. Most developers should be able to use IntelliJ\u2019s Code Cleanup for a safe and fast upgrade. Backwards-Incompatible Changes \u00b6 OkHttpClient final methods \u00b6 OkHttpClient has 26 accessors like interceptors() and writeTimeoutMillis() that were non-final in OkHttp 3.x and are final in 4.x. These were made non-final for use with mocking frameworks like Mockito . We believe subtyping OkHttpClient is the wrong way to test with OkHttp. If you must, mock Call.Factory which is the interface that OkHttpClient implements. Internal API changes \u00b6 The okhttp3.internal package is not a published API and we change it frequently without warning. Depending on code in this package is bad and will cause you problems with any upgrade! But the 4.x will be particularly painful to naughty developers that import from this package! We changed a lot to take advantage of sweet Kotlin features. Credentials.basic() \u00b6 The username and password parameters to Credentials.basic() are now non-null strings. In OkHttp 3.x, null would yield a username or password of \u201cnull\u201d. HttpUrl.queryParameterValues() \u00b6 The return type of HttpUrl.queryParameterValues() is List<String?> . Lists that may contain null are uncommon and Kotlin callers may have incorrectly assigned the result to List<String> . Code Cleanup \u00b6 IntelliJ and Android Studio offer a Code Cleanup feature that will automatically update deprecated APIs with their replacements. Access this feature from the Search Anywhere dialog (double-press shift) or under the Analyze menu. We\u2019ve included deprecated APIs in OkHttp 4.0 because they make migration easy. We will remove them in a future release! If you\u2019re skipping releases, it\u2019ll be much easier if you upgrade to OkHttp 4.0 as an intermediate step. Vars and Vals \u00b6 Java doesn\u2019t have language support for properties so developers make do with getters and setters. Kotlin does have properties and we take advantage of them in OkHttp. Address : certificatePinner, connectionSpecs, dns, hostnameVerifier, protocols, proxy, proxyAuthenticator, proxySelector, socketFactory, sslSocketFactory, url Cache : directory CacheControl : immutable, maxAgeSeconds, maxStaleSeconds, minFreshSeconds, mustRevalidate, noCache, noStore, noTransform, onlyIfCached, sMaxAgeSeconds Challenge : authParams, charset, realm, scheme CipherSuite : javaName ConnectionSpec : cipherSuites, supportsTlsExtensions, tlsVersions Cookie : domain, expiresAt, hostOnly, httpOnly, name, path, persistent, value Dispatcher : executorService FormBody : size Handshake : cipherSuite, localCertificates, localPrincipal, peerCertificates, peerPrincipal, tlsVersion HandshakeCertificates : keyManager, trustManager Headers : size HeldCertificate : certificate, keyPair HttpLoggingInterceptor : level HttpUrl : encodedFragment, encodedPassword, encodedPath, encodedPathSegments, encodedQuery, encodedUsername, fragment, host, password, pathSegments, pathSize, port, query, queryParameterNames, querySize, scheme, username MockResponse : headers, http2ErrorCode, socketPolicy, status, trailers MockWebServer : bodyLimit, port, protocolNegotiationEnabled, protocols, requestCount, serverSocketFactory MultipartBody.Part : body, headers MultipartBody. : boundary, parts, size, type OkHttpClient : authenticator, cache, callTimeoutMillis, certificatePinner, connectTimeoutMillis, connectionPool, connectionSpecs, cookieJar, dispatcher, dns, eventListenerFactory, followRedirects, followSslRedirects, hostnameVerifier, interceptors, networkInterceptors, pingIntervalMillis, protocols, proxy, proxyAuthenticator, proxySelector, readTimeoutMillis, retryOnConnectionFailure, socketFactory, sslSocketFactory, writeTimeoutMillis PushPromise : headers, method, path, response Request : body, cacheControl, headers, method, url Response : body, cacheControl, cacheResponse, code, handshake, headers, message, networkResponse, priorResponse, protocol, receivedResponseAtMillis, request, sentRequestAtMillis Route : address, proxy, socketAddress TlsVersion : javaName Renamed Functions \u00b6 Headers.of() : for symmetry with listOf() , setOf() , etc., we\u2019ve replaced Headers.of(String...) with headersOf(vararg String) . Extension Functions \u00b6 We\u2019ve migrated from static functions to extension functions where we think they fit. Java Kotlin Handshake.get(SSLSession) SSLSession.handshake() Headers.of(Map ) Map .toHeaders() HttpUrl.get(String) String.toHttpUrl() HttpUrl.get(URI) URI.toHttpUrlOrNull() HttpUrl.get(URL) URL.toHttpUrlOrNull() HttpUrl.parse(String) String.toHttpUrlOrNull() HttpUrl.uri() HttpUrl.toUri() HttpUrl.url() HttpUrl.toUrl() MediaType.get(String) String.toMediaType() MediaType.parse(String) String.toMediaTypeOrNull() RequestBody.create(ByteArray) ByteArray.toRequestBody() RequestBody.create(ByteString) ByteString.toRequestBody() RequestBody.create(File) File.asRequestBody() RequestBody.create(String) String.toRequestBody() ResponseBody.create(BufferedSource) BufferedSource.asResponseBody() ResponseBody.create(ByteArray) ByteArray.toResponseBody() ResponseBody.create(ByteString) ByteString.toResponseBody() ResponseBody.create(String) String.toResponseBody() SAM Conversions \u00b6 When you use Java APIs from Kotlin you can operate on Java interfaces as if they were Kotlin lambdas. The feature is available for interfaces that define a Single Abstract Method (SAM). But when you use Kotlin APIs from Kotlin there\u2019s no automatic conversion. Code that used SAM lambdas with OkHttp 3.x: must use object : with OkHttp 4.x: Kotlin calling OkHttp 3.x: val client = OkHttpClient . Builder () . dns { hostname -> InetAddress . getAllByName ( hostname ). toList () } . build () Kotlin calling OkHttp 4.x: val client = OkHttpClient . Builder () . dns ( object : Dns { override fun lookup ( hostname : String ) = InetAddress . getAllByName ( hostname ). toList () }) . build () SAM conversion impacts these APIs: Authenticator Dispatcher.setIdleCallback(Runnable) Dns EventListener.Factory HttpLoggingInterceptor.Logger LoggingEventListener.Factory OkHttpClient.Builder.hostnameVerifier(HostnameVerifier) JetBrains is working on SAM conversions of Kotlin interfaces. Expect it in a future release of the Kotlin language. Companion Imports \u00b6 The equivalent of static methods in Java is companion object functions in Kotlin. The bytecode is the same but .kt files now need Companion in the import. This works with OkHttp 3.x: import okhttp3.CipherSuite.forJavaName But OkHttp 4.x needs a Companion : import okhttp3.CipherSuite.Companion.forJavaName In the unlikely event that you have a lot of these, run this: sed -i \"\" \\ 's/^\\(import okhttp3\\.[^.]*\\)\\.\\([a-z][a-zA-Z]*\\)$/\\1.Companion.\\2/g' \\ ` find . -name \"*.kt\" ` Advanced Profiling \u00b6 Android Studio\u2019s Advanced Profiling feature rewrites OkHttp bytecode for instrumentation. Unfortunately it crashes on OkHttp 4.x\u2019s bytecode. Until Google\u2019s bug is fixed you must disable advanced profiling in Android Studio. R8 / ProGuard \u00b6 R8 and ProGuard are both code optimizers for .class files. R8 is the default optimizer in Android Studio 3.4 and newer. It works well with all releases of OkHttp. ProGuard was the previous default. We\u2019re tracking problems with interactions between ProGuard, OkHttp 4.x, and Kotlin-originated .class files. Make sure you\u2019re on the latest release if you\u2019re using ProGuard, Gradle \u00b6 OkHttp 4\u2019s minimum requirements are Java 8+ and Android 5+. These requirements were first introduced with OkHttp 3.13. Here\u2019s what you need in build.gradle to target Java 8 byte code for Kotlin, Java, and Android plugins respectively. compileKotlin { kotlinOptions { jvmTarget = \"1.8\" } } compileTestKotlin { kotlinOptions { jvmTarget = \"1.8\" } } compileJava { sourceCompatibility = JavaVersion . VERSION_1_8 targetCompatibility = JavaVersion . VERSION_1_8 } android { compileOptions { sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } }","title":"Upgrading to OkHttp 4"},{"location":"upgrading_to_okhttp_4/#upgrading-to-okhttp-4","text":"OkHttp 4.x upgrades our implementation language from Java to Kotlin and keeps everything else the same. We\u2019ve chosen Kotlin because it gives us powerful new capabilities while integrating closely with Java. We spent a lot of time and energy on retaining strict compatibility with OkHttp 3.x. We\u2019re even keeping the package name the same: okhttp3 ! There are three kinds of compatibility we\u2019re tracking: Binary compatibility is the ability to compile a program against OkHttp 3.x, and then to run it against OkHttp 4.x. We\u2019re using the excellent japicmp library via its Gradle plugin to enforce binary compatibility. Java source compatibility is the ability to upgrade Java uses of OkHttp 3.x to 4.x without changing .java files. Kotlin source compatibility is the ability to upgrade Kotlin uses of OkHttp 3.x to 4.x without changing .kt files. With a few small exceptions (below), OkHttp 4.x is both binary- and Java source-compatible with OkHttp 3.x. You can use an OkHttp 4.x .jar file with applications or libraries built for OkHttp 3.x. OkHttp is not source-compatible for Kotlin callers, but upgrading should be automatic thanks to Kotlin\u2019s powerful deprecation features. Most developers should be able to use IntelliJ\u2019s Code Cleanup for a safe and fast upgrade.","title":"Upgrading to OkHttp 4"},{"location":"upgrading_to_okhttp_4/#backwards-incompatible-changes","text":"","title":"Backwards-Incompatible Changes"},{"location":"upgrading_to_okhttp_4/#okhttpclient-final-methods","text":"OkHttpClient has 26 accessors like interceptors() and writeTimeoutMillis() that were non-final in OkHttp 3.x and are final in 4.x. These were made non-final for use with mocking frameworks like Mockito . We believe subtyping OkHttpClient is the wrong way to test with OkHttp. If you must, mock Call.Factory which is the interface that OkHttpClient implements.","title":"OkHttpClient final methods"},{"location":"upgrading_to_okhttp_4/#internal-api-changes","text":"The okhttp3.internal package is not a published API and we change it frequently without warning. Depending on code in this package is bad and will cause you problems with any upgrade! But the 4.x will be particularly painful to naughty developers that import from this package! We changed a lot to take advantage of sweet Kotlin features.","title":"Internal API changes"},{"location":"upgrading_to_okhttp_4/#credentialsbasic","text":"The username and password parameters to Credentials.basic() are now non-null strings. In OkHttp 3.x, null would yield a username or password of \u201cnull\u201d.","title":"Credentials.basic()"},{"location":"upgrading_to_okhttp_4/#httpurlqueryparametervalues","text":"The return type of HttpUrl.queryParameterValues() is List<String?> . Lists that may contain null are uncommon and Kotlin callers may have incorrectly assigned the result to List<String> .","title":"HttpUrl.queryParameterValues()"},{"location":"upgrading_to_okhttp_4/#code-cleanup","text":"IntelliJ and Android Studio offer a Code Cleanup feature that will automatically update deprecated APIs with their replacements. Access this feature from the Search Anywhere dialog (double-press shift) or under the Analyze menu. We\u2019ve included deprecated APIs in OkHttp 4.0 because they make migration easy. We will remove them in a future release! If you\u2019re skipping releases, it\u2019ll be much easier if you upgrade to OkHttp 4.0 as an intermediate step.","title":"Code Cleanup"},{"location":"upgrading_to_okhttp_4/#vars-and-vals","text":"Java doesn\u2019t have language support for properties so developers make do with getters and setters. Kotlin does have properties and we take advantage of them in OkHttp. Address : certificatePinner, connectionSpecs, dns, hostnameVerifier, protocols, proxy, proxyAuthenticator, proxySelector, socketFactory, sslSocketFactory, url Cache : directory CacheControl : immutable, maxAgeSeconds, maxStaleSeconds, minFreshSeconds, mustRevalidate, noCache, noStore, noTransform, onlyIfCached, sMaxAgeSeconds Challenge : authParams, charset, realm, scheme CipherSuite : javaName ConnectionSpec : cipherSuites, supportsTlsExtensions, tlsVersions Cookie : domain, expiresAt, hostOnly, httpOnly, name, path, persistent, value Dispatcher : executorService FormBody : size Handshake : cipherSuite, localCertificates, localPrincipal, peerCertificates, peerPrincipal, tlsVersion HandshakeCertificates : keyManager, trustManager Headers : size HeldCertificate : certificate, keyPair HttpLoggingInterceptor : level HttpUrl : encodedFragment, encodedPassword, encodedPath, encodedPathSegments, encodedQuery, encodedUsername, fragment, host, password, pathSegments, pathSize, port, query, queryParameterNames, querySize, scheme, username MockResponse : headers, http2ErrorCode, socketPolicy, status, trailers MockWebServer : bodyLimit, port, protocolNegotiationEnabled, protocols, requestCount, serverSocketFactory MultipartBody.Part : body, headers MultipartBody. : boundary, parts, size, type OkHttpClient : authenticator, cache, callTimeoutMillis, certificatePinner, connectTimeoutMillis, connectionPool, connectionSpecs, cookieJar, dispatcher, dns, eventListenerFactory, followRedirects, followSslRedirects, hostnameVerifier, interceptors, networkInterceptors, pingIntervalMillis, protocols, proxy, proxyAuthenticator, proxySelector, readTimeoutMillis, retryOnConnectionFailure, socketFactory, sslSocketFactory, writeTimeoutMillis PushPromise : headers, method, path, response Request : body, cacheControl, headers, method, url Response : body, cacheControl, cacheResponse, code, handshake, headers, message, networkResponse, priorResponse, protocol, receivedResponseAtMillis, request, sentRequestAtMillis Route : address, proxy, socketAddress TlsVersion : javaName","title":"Vars and Vals"},{"location":"upgrading_to_okhttp_4/#renamed-functions","text":"Headers.of() : for symmetry with listOf() , setOf() , etc., we\u2019ve replaced Headers.of(String...) with headersOf(vararg String) .","title":"Renamed Functions"},{"location":"upgrading_to_okhttp_4/#extension-functions","text":"We\u2019ve migrated from static functions to extension functions where we think they fit. Java Kotlin Handshake.get(SSLSession) SSLSession.handshake() Headers.of(Map ) Map .toHeaders() HttpUrl.get(String) String.toHttpUrl() HttpUrl.get(URI) URI.toHttpUrlOrNull() HttpUrl.get(URL) URL.toHttpUrlOrNull() HttpUrl.parse(String) String.toHttpUrlOrNull() HttpUrl.uri() HttpUrl.toUri() HttpUrl.url() HttpUrl.toUrl() MediaType.get(String) String.toMediaType() MediaType.parse(String) String.toMediaTypeOrNull() RequestBody.create(ByteArray) ByteArray.toRequestBody() RequestBody.create(ByteString) ByteString.toRequestBody() RequestBody.create(File) File.asRequestBody() RequestBody.create(String) String.toRequestBody() ResponseBody.create(BufferedSource) BufferedSource.asResponseBody() ResponseBody.create(ByteArray) ByteArray.toResponseBody() ResponseBody.create(ByteString) ByteString.toResponseBody() ResponseBody.create(String) String.toResponseBody()","title":"Extension Functions"},{"location":"upgrading_to_okhttp_4/#sam-conversions","text":"When you use Java APIs from Kotlin you can operate on Java interfaces as if they were Kotlin lambdas. The feature is available for interfaces that define a Single Abstract Method (SAM). But when you use Kotlin APIs from Kotlin there\u2019s no automatic conversion. Code that used SAM lambdas with OkHttp 3.x: must use object : with OkHttp 4.x: Kotlin calling OkHttp 3.x: val client = OkHttpClient . Builder () . dns { hostname -> InetAddress . getAllByName ( hostname ). toList () } . build () Kotlin calling OkHttp 4.x: val client = OkHttpClient . Builder () . dns ( object : Dns { override fun lookup ( hostname : String ) = InetAddress . getAllByName ( hostname ). toList () }) . build () SAM conversion impacts these APIs: Authenticator Dispatcher.setIdleCallback(Runnable) Dns EventListener.Factory HttpLoggingInterceptor.Logger LoggingEventListener.Factory OkHttpClient.Builder.hostnameVerifier(HostnameVerifier) JetBrains is working on SAM conversions of Kotlin interfaces. Expect it in a future release of the Kotlin language.","title":"SAM Conversions"},{"location":"upgrading_to_okhttp_4/#companion-imports","text":"The equivalent of static methods in Java is companion object functions in Kotlin. The bytecode is the same but .kt files now need Companion in the import. This works with OkHttp 3.x: import okhttp3.CipherSuite.forJavaName But OkHttp 4.x needs a Companion : import okhttp3.CipherSuite.Companion.forJavaName In the unlikely event that you have a lot of these, run this: sed -i \"\" \\ 's/^\\(import okhttp3\\.[^.]*\\)\\.\\([a-z][a-zA-Z]*\\)$/\\1.Companion.\\2/g' \\ ` find . -name \"*.kt\" `","title":"Companion Imports"},{"location":"upgrading_to_okhttp_4/#advanced-profiling","text":"Android Studio\u2019s Advanced Profiling feature rewrites OkHttp bytecode for instrumentation. Unfortunately it crashes on OkHttp 4.x\u2019s bytecode. Until Google\u2019s bug is fixed you must disable advanced profiling in Android Studio.","title":"Advanced Profiling"},{"location":"upgrading_to_okhttp_4/#r8-proguard","text":"R8 and ProGuard are both code optimizers for .class files. R8 is the default optimizer in Android Studio 3.4 and newer. It works well with all releases of OkHttp. ProGuard was the previous default. We\u2019re tracking problems with interactions between ProGuard, OkHttp 4.x, and Kotlin-originated .class files. Make sure you\u2019re on the latest release if you\u2019re using ProGuard,","title":"R8 / ProGuard"},{"location":"upgrading_to_okhttp_4/#gradle","text":"OkHttp 4\u2019s minimum requirements are Java 8+ and Android 5+. These requirements were first introduced with OkHttp 3.13. Here\u2019s what you need in build.gradle to target Java 8 byte code for Kotlin, Java, and Android plugins respectively. compileKotlin { kotlinOptions { jvmTarget = \"1.8\" } } compileTestKotlin { kotlinOptions { jvmTarget = \"1.8\" } } compileJava { sourceCompatibility = JavaVersion . VERSION_1_8 targetCompatibility = JavaVersion . VERSION_1_8 } android { compileOptions { sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } }","title":"Gradle"},{"location":"works_with_okhttp/","text":"Works with OkHttp \u00b6 Here\u2019s some libraries that work nicely with OkHttp. Chucker : An in-app HTTP inspector for Android OkHttp clients. Coil : An image loading library for Android backed by Kotlin Coroutines. Communicator : An OkHttp wrapper for Scala built with Android in mind. CWAC-NetSecurity : Simplifying Secure Internet Access. Flipper : A desktop debugging platform for mobile developers. Fresco : An Android library for managing images and the memory they use. Glide : An image loading and caching library for Android focused on smooth scrolling. GoogleAppEngineOkHttp : An OkHttp Call that works on Google App Engine. Hunter : Configure all OkHttpClients centrally. \u2b1c\ufe0f Moshi : A modern JSON library for Android and Java. Ok2Curl : Convert OkHttp requests into curl logs. OkHttp AWS Signer : AWS V4 signing algorithm for OkHttp requests okhttp-digest : A digest authenticator for OkHttp. OkHttp Idling Resource : An Espresso IdlingResource for OkHttp. okhttp-client-mock : A simple OKHttp client mock, using a programmable request interceptor. OkHttp Profiler : An IntelliJ plugin for monitoring OkHttp calls. OkReplay : Record and replay OkHttp network interaction in your tests. okhttp-signpost : OAuth signing with signpost and OkHttp. okhttp-staleiferror-interceptor : serve stale responses when the server isn\u2019t reachable. okhttp-stats : Get stats like average network speed. \u2b1c\ufe0f Okio : A modern I/O API for Java. OkLog : Response logging interceptor for OkHttp. Logs a URL link with URL-encoded response for every OkHttp call. Okurl A curl-like client for social networks and other APIs. PersistentCookieJar : A persistent CookieJar . \u2b1c\ufe0f Picasso : A powerful image downloading and caching library for Android. \u2b1c\ufe0f Retrofit : Type-safe HTTP client for Android and Java by Square. Stetho : Stetho is a debug bridge for Android applications. Thrifty : An implementation of Apache Thrift for Android. \u2b1c\ufe0f Wire : Clean, lightweight protocol buffers for Android and Java.","title":"Works with OkHttp"},{"location":"works_with_okhttp/#works-with-okhttp","text":"Here\u2019s some libraries that work nicely with OkHttp. Chucker : An in-app HTTP inspector for Android OkHttp clients. Coil : An image loading library for Android backed by Kotlin Coroutines. Communicator : An OkHttp wrapper for Scala built with Android in mind. CWAC-NetSecurity : Simplifying Secure Internet Access. Flipper : A desktop debugging platform for mobile developers. Fresco : An Android library for managing images and the memory they use. Glide : An image loading and caching library for Android focused on smooth scrolling. GoogleAppEngineOkHttp : An OkHttp Call that works on Google App Engine. Hunter : Configure all OkHttpClients centrally. \u2b1c\ufe0f Moshi : A modern JSON library for Android and Java. Ok2Curl : Convert OkHttp requests into curl logs. OkHttp AWS Signer : AWS V4 signing algorithm for OkHttp requests okhttp-digest : A digest authenticator for OkHttp. OkHttp Idling Resource : An Espresso IdlingResource for OkHttp. okhttp-client-mock : A simple OKHttp client mock, using a programmable request interceptor. OkHttp Profiler : An IntelliJ plugin for monitoring OkHttp calls. OkReplay : Record and replay OkHttp network interaction in your tests. okhttp-signpost : OAuth signing with signpost and OkHttp. okhttp-staleiferror-interceptor : serve stale responses when the server isn\u2019t reachable. okhttp-stats : Get stats like average network speed. \u2b1c\ufe0f Okio : A modern I/O API for Java. OkLog : Response logging interceptor for OkHttp. Logs a URL link with URL-encoded response for every OkHttp call. Okurl A curl-like client for social networks and other APIs. PersistentCookieJar : A persistent CookieJar . \u2b1c\ufe0f Picasso : A powerful image downloading and caching library for Android. \u2b1c\ufe0f Retrofit : Type-safe HTTP client for Android and Java by Square. Stetho : Stetho is a debug bridge for Android applications. Thrifty : An implementation of Apache Thrift for Android. \u2b1c\ufe0f Wire : Clean, lightweight protocol buffers for Android and Java.","title":"Works with OkHttp"},{"location":"4.x/mockwebserver/","text":"mockwebserver A scriptable web server for testing HTTP clients. Packages \u00b6 Name Summary mockwebserver3 mockwebserver3.internal.duplex Index \u00b6 All Types","title":"Packages - OkHttp"},{"location":"4.x/mockwebserver/#packages","text":"Name Summary mockwebserver3 mockwebserver3.internal.duplex","title":"Packages"},{"location":"4.x/mockwebserver/#index","text":"All Types","title":"Index"},{"location":"4.x/mockwebserver/alltypes/","text":"A scriptable web server for testing HTTP clients. All Types \u00b6 Name Summary mockwebserver3.Dispatcher \u00b6 Handler for mock server requests. | mockwebserver3.internal.duplex.DuplexResponseBody \u00b6 | mockwebserver3.internal.duplex.MockDuplexResponseBody \u00b6 A scriptable request/response conversation. Create the script by calling methods like receiveRequest in the sequence they are run. | mockwebserver3.MockResponse \u00b6 A scripted response to be replayed by the mock web server. | mockwebserver3.MockWebServer \u00b6 A scriptable web server. Callers supply canned responses and the server replays them upon request in sequence. | mockwebserver3.PushPromise \u00b6 An HTTP request initiated by the server. | mockwebserver3.QueueDispatcher \u00b6 Default dispatcher that processes a script of responses. Populate the script by calling enqueueResponse . | mockwebserver3.RecordedRequest \u00b6 An HTTP request that came into the mock web server. | mockwebserver3.SocketPolicy \u00b6 What should be done with the incoming socket.","title":"All Types - OkHttp"},{"location":"4.x/mockwebserver/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"4.x/mockwebserver/alltypes/#mockwebserver3dispatcher","text":"Handler for mock server requests. |","title":"mockwebserver3.Dispatcher"},{"location":"4.x/mockwebserver/alltypes/#mockwebserver3internalduplexduplexresponsebody","text":"|","title":"mockwebserver3.internal.duplex.DuplexResponseBody"},{"location":"4.x/mockwebserver/alltypes/#mockwebserver3internalduplexmockduplexresponsebody","text":"A scriptable request/response conversation. Create the script by calling methods like receiveRequest in the sequence they are run. |","title":"mockwebserver3.internal.duplex.MockDuplexResponseBody"},{"location":"4.x/mockwebserver/alltypes/#mockwebserver3mockresponse","text":"A scripted response to be replayed by the mock web server. |","title":"mockwebserver3.MockResponse"},{"location":"4.x/mockwebserver/alltypes/#mockwebserver3mockwebserver","text":"A scriptable web server. Callers supply canned responses and the server replays them upon request in sequence. |","title":"mockwebserver3.MockWebServer"},{"location":"4.x/mockwebserver/alltypes/#mockwebserver3pushpromise","text":"An HTTP request initiated by the server. |","title":"mockwebserver3.PushPromise"},{"location":"4.x/mockwebserver/alltypes/#mockwebserver3queuedispatcher","text":"Default dispatcher that processes a script of responses. Populate the script by calling enqueueResponse . |","title":"mockwebserver3.QueueDispatcher"},{"location":"4.x/mockwebserver/alltypes/#mockwebserver3recordedrequest","text":"An HTTP request that came into the mock web server. |","title":"mockwebserver3.RecordedRequest"},{"location":"4.x/mockwebserver/alltypes/#mockwebserver3socketpolicy","text":"What should be done with the incoming socket.","title":"mockwebserver3.SocketPolicy"},{"location":"4.x/mockwebserver/mockwebserver3/","text":"mockwebserver / mockwebserver3 Package mockwebserver3 \u00b6 Types \u00b6 Name Summary Dispatcher Handler for mock server requests. abstract class Dispatcher MockResponse A scripted response to be replayed by the mock web server. class MockResponse : Cloneable MockWebServer A scriptable web server. Callers supply canned responses and the server replays them upon request in sequence. class MockWebServer : Closeable PushPromise An HTTP request initiated by the server. class PushPromise QueueDispatcher Default dispatcher that processes a script of responses. Populate the script by calling enqueueResponse . open class QueueDispatcher : Dispatcher RecordedRequest An HTTP request that came into the mock web server. class RecordedRequest SocketPolicy What should be done with the incoming socket. enum class SocketPolicy","title":"Package mockwebserver3 - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/#package-mockwebserver3","text":"","title":"Package mockwebserver3"},{"location":"4.x/mockwebserver/mockwebserver3/#types","text":"Name Summary Dispatcher Handler for mock server requests. abstract class Dispatcher MockResponse A scripted response to be replayed by the mock web server. class MockResponse : Cloneable MockWebServer A scriptable web server. Callers supply canned responses and the server replays them upon request in sequence. class MockWebServer : Closeable PushPromise An HTTP request initiated by the server. class PushPromise QueueDispatcher Default dispatcher that processes a script of responses. Populate the script by calling enqueueResponse . open class QueueDispatcher : Dispatcher RecordedRequest An HTTP request that came into the mock web server. class RecordedRequest SocketPolicy What should be done with the incoming socket. enum class SocketPolicy","title":"Types"},{"location":"4.x/mockwebserver/mockwebserver3/-dispatcher/","text":"mockwebserver / mockwebserver3 / Dispatcher Dispatcher \u00b6 abstract class Dispatcher Handler for mock server requests. Constructors \u00b6 Name Summary <init> Handler for mock server requests. Dispatcher() Functions \u00b6 Name Summary dispatch Returns a response to satisfy request . This method may block (for instance, to wait on a CountdownLatch). abstract fun dispatch(request: RecordedRequest ): MockResponse peek Returns an early guess of the next response, used for policy on how an incoming request should be received. The default implementation returns an empty response. Mischievous implementations can return other values to test HTTP edge cases, such as unhappy socket policies or throttled request bodies. open fun peek(): MockResponse shutdown Release any resources held by this dispatcher. Any requests that are currently being dispatched should return immediately. Responses returned after shutdown will not be transmitted: their socket connections have already been closed. open fun shutdown(): Unit Inheritors \u00b6 Name Summary QueueDispatcher Default dispatcher that processes a script of responses. Populate the script by calling enqueueResponse . open class QueueDispatcher : Dispatcher","title":"Dispatcher - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-dispatcher/#dispatcher","text":"abstract class Dispatcher Handler for mock server requests.","title":"Dispatcher"},{"location":"4.x/mockwebserver/mockwebserver3/-dispatcher/#constructors","text":"Name Summary <init> Handler for mock server requests. Dispatcher()","title":"Constructors"},{"location":"4.x/mockwebserver/mockwebserver3/-dispatcher/#functions","text":"Name Summary dispatch Returns a response to satisfy request . This method may block (for instance, to wait on a CountdownLatch). abstract fun dispatch(request: RecordedRequest ): MockResponse peek Returns an early guess of the next response, used for policy on how an incoming request should be received. The default implementation returns an empty response. Mischievous implementations can return other values to test HTTP edge cases, such as unhappy socket policies or throttled request bodies. open fun peek(): MockResponse shutdown Release any resources held by this dispatcher. Any requests that are currently being dispatched should return immediately. Responses returned after shutdown will not be transmitted: their socket connections have already been closed. open fun shutdown(): Unit","title":"Functions"},{"location":"4.x/mockwebserver/mockwebserver3/-dispatcher/#inheritors","text":"Name Summary QueueDispatcher Default dispatcher that processes a script of responses. Populate the script by calling enqueueResponse . open class QueueDispatcher : Dispatcher","title":"Inheritors"},{"location":"4.x/mockwebserver/mockwebserver3/-dispatcher/-init-/","text":"mockwebserver / mockwebserver3 / Dispatcher / <init> <init> \u00b6 Dispatcher() Handler for mock server requests.","title":" init "},{"location":"4.x/mockwebserver/mockwebserver3/-dispatcher/-init-/#init","text":"Dispatcher() Handler for mock server requests.","title":"&lt;init&gt;"},{"location":"4.x/mockwebserver/mockwebserver3/-dispatcher/dispatch/","text":"mockwebserver / mockwebserver3 / Dispatcher / dispatch dispatch \u00b6 abstract fun dispatch(request: RecordedRequest ): MockResponse Returns a response to satisfy request . This method may block (for instance, to wait on a CountdownLatch).","title":"dispatch - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-dispatcher/dispatch/#dispatch","text":"abstract fun dispatch(request: RecordedRequest ): MockResponse Returns a response to satisfy request . This method may block (for instance, to wait on a CountdownLatch).","title":"dispatch"},{"location":"4.x/mockwebserver/mockwebserver3/-dispatcher/peek/","text":"mockwebserver / mockwebserver3 / Dispatcher / peek peek \u00b6 open fun peek(): MockResponse Returns an early guess of the next response, used for policy on how an incoming request should be received. The default implementation returns an empty response. Mischievous implementations can return other values to test HTTP edge cases, such as unhappy socket policies or throttled request bodies.","title":"peek - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-dispatcher/peek/#peek","text":"open fun peek(): MockResponse Returns an early guess of the next response, used for policy on how an incoming request should be received. The default implementation returns an empty response. Mischievous implementations can return other values to test HTTP edge cases, such as unhappy socket policies or throttled request bodies.","title":"peek"},{"location":"4.x/mockwebserver/mockwebserver3/-dispatcher/shutdown/","text":"mockwebserver / mockwebserver3 / Dispatcher / shutdown shutdown \u00b6 open fun shutdown(): Unit Release any resources held by this dispatcher. Any requests that are currently being dispatched should return immediately. Responses returned after shutdown will not be transmitted: their socket connections have already been closed.","title":"shutdown - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-dispatcher/shutdown/#shutdown","text":"open fun shutdown(): Unit Release any resources held by this dispatcher. Any requests that are currently being dispatched should return immediately. Responses returned after shutdown will not be transmitted: their socket connections have already been closed.","title":"shutdown"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/","text":"mockwebserver / mockwebserver3 / MockResponse MockResponse \u00b6 class MockResponse : Cloneable A scripted response to be replayed by the mock web server. Constructors \u00b6 Name Summary <init> A scripted response to be replayed by the mock web server. MockResponse() Properties \u00b6 Name Summary duplexResponseBody var duplexResponseBody: DuplexResponseBody ? headers The HTTP headers, such as \u201cContent-Length: 0\u201d. var headers: Headers http2ErrorCode Sets the HTTP/2 error code to be returned when resetting the stream. This is only valid with SocketPolicy.RESET_STREAM_AT_START and SocketPolicy.DO_NOT_READ_REQUEST_BODY . var http2ErrorCode: Int isDuplex val isDuplex: Boolean pushPromises Returns the streams the server will push with this response. val pushPromises: List < PushPromise > settings var settings: Settings socketPolicy var socketPolicy: SocketPolicy status Returns the HTTP response line, such as \u201cHTTP/1.1 200 OK\u201d. var status: String throttleBytesPerPeriod var throttleBytesPerPeriod: Long trailers var trailers: Headers webSocketListener var webSocketListener: WebSocketListener? Functions \u00b6 Name Summary addHeader Adds header as an HTTP header. For well-formed HTTP header should contain a name followed by a colon and a value. fun addHeader(header: String ): MockResponse Adds a new header with the name and value. This may be used to add multiple headers with the same name. fun addHeader(name: String , value: Any ): MockResponse addHeaderLenient Adds a new header with the name and value. This may be used to add multiple headers with the same name. Unlike addHeader this does not validate the name and value. fun addHeaderLenient(name: String , value: Any ): MockResponse clearHeaders Removes all HTTP headers including any \u201cContent-Length\u201d and \u201cTransfer-encoding\u201d headers that were added by default. fun clearHeaders(): MockResponse clone fun clone(): MockResponse getBody Returns a copy of the raw HTTP payload. fun getBody(): Buffer ? getBodyDelay fun getBodyDelay(unit: TimeUnit ): Long getHeadersDelay fun getHeadersDelay(unit: TimeUnit ): Long getThrottlePeriod fun getThrottlePeriod(unit: TimeUnit ): Long removeHeader Removes all headers named name . fun removeHeader(name: String ): MockResponse setBody fun setBody(body: Buffer ): MockResponse fun setBody(duplexResponseBody: DuplexResponseBody ): MockResponse Sets the response body to the UTF-8 encoded bytes of body . fun setBody(body: String ): MockResponse setBodyDelay Set the delayed time of the response body to delay . This applies to the response body only; response headers are not affected. fun setBodyDelay(delay: Long , unit: TimeUnit ): MockResponse setChunkedBody Sets the response body to body , chunked every maxChunkSize bytes. fun setChunkedBody(body: Buffer , maxChunkSize: Int ): MockResponse Sets the response body to the UTF-8 encoded bytes of body , chunked every maxChunkSize bytes. fun setChunkedBody(body: String , maxChunkSize: Int ): MockResponse setHeader Removes all headers named name , then adds a new header with the name and value. fun setHeader(name: String , value: Any ): MockResponse setHeaders Sets the headers and returns this. fun setHeaders(headers: Headers): MockResponse setHeadersDelay fun setHeadersDelay(delay: Long , unit: TimeUnit ): MockResponse setHttp2ErrorCode Sets the HTTP/2 error code and returns this. fun setHttp2ErrorCode(http2ErrorCode: Int ): MockResponse setResponseCode fun setResponseCode(code: Int ): MockResponse setSocketPolicy Sets the socket policy and returns this. fun setSocketPolicy(socketPolicy: SocketPolicy ): MockResponse setStatus Sets the status and returns this. fun setStatus(status: String ): MockResponse setTrailers Sets the trailers and returns this. fun setTrailers(trailers: Headers): MockResponse throttleBody Throttles the request reader and response writer to sleep for the given period after each series of bytesPerPeriod bytes are transferred. Use this to simulate network behavior. fun throttleBody(bytesPerPeriod: Long , period: Long , unit: TimeUnit ): MockResponse toString fun toString(): String withPush When protocols include HTTP_2 , this attaches a pushed stream to this response. fun withPush(promise: PushPromise ): MockResponse withSettings When protocols include HTTP_2 , this pushes settings before writing the response. fun withSettings(settings: Settings): MockResponse withWebSocketUpgrade Attempts to perform a web socket upgrade on the connection. This will overwrite any previously set status or body. fun withWebSocketUpgrade(listener: WebSocketListener): MockResponse","title":"MockResponse - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/#mockresponse","text":"class MockResponse : Cloneable A scripted response to be replayed by the mock web server.","title":"MockResponse"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/#constructors","text":"Name Summary <init> A scripted response to be replayed by the mock web server. MockResponse()","title":"Constructors"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/#properties","text":"Name Summary duplexResponseBody var duplexResponseBody: DuplexResponseBody ? headers The HTTP headers, such as \u201cContent-Length: 0\u201d. var headers: Headers http2ErrorCode Sets the HTTP/2 error code to be returned when resetting the stream. This is only valid with SocketPolicy.RESET_STREAM_AT_START and SocketPolicy.DO_NOT_READ_REQUEST_BODY . var http2ErrorCode: Int isDuplex val isDuplex: Boolean pushPromises Returns the streams the server will push with this response. val pushPromises: List < PushPromise > settings var settings: Settings socketPolicy var socketPolicy: SocketPolicy status Returns the HTTP response line, such as \u201cHTTP/1.1 200 OK\u201d. var status: String throttleBytesPerPeriod var throttleBytesPerPeriod: Long trailers var trailers: Headers webSocketListener var webSocketListener: WebSocketListener?","title":"Properties"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/#functions","text":"Name Summary addHeader Adds header as an HTTP header. For well-formed HTTP header should contain a name followed by a colon and a value. fun addHeader(header: String ): MockResponse Adds a new header with the name and value. This may be used to add multiple headers with the same name. fun addHeader(name: String , value: Any ): MockResponse addHeaderLenient Adds a new header with the name and value. This may be used to add multiple headers with the same name. Unlike addHeader this does not validate the name and value. fun addHeaderLenient(name: String , value: Any ): MockResponse clearHeaders Removes all HTTP headers including any \u201cContent-Length\u201d and \u201cTransfer-encoding\u201d headers that were added by default. fun clearHeaders(): MockResponse clone fun clone(): MockResponse getBody Returns a copy of the raw HTTP payload. fun getBody(): Buffer ? getBodyDelay fun getBodyDelay(unit: TimeUnit ): Long getHeadersDelay fun getHeadersDelay(unit: TimeUnit ): Long getThrottlePeriod fun getThrottlePeriod(unit: TimeUnit ): Long removeHeader Removes all headers named name . fun removeHeader(name: String ): MockResponse setBody fun setBody(body: Buffer ): MockResponse fun setBody(duplexResponseBody: DuplexResponseBody ): MockResponse Sets the response body to the UTF-8 encoded bytes of body . fun setBody(body: String ): MockResponse setBodyDelay Set the delayed time of the response body to delay . This applies to the response body only; response headers are not affected. fun setBodyDelay(delay: Long , unit: TimeUnit ): MockResponse setChunkedBody Sets the response body to body , chunked every maxChunkSize bytes. fun setChunkedBody(body: Buffer , maxChunkSize: Int ): MockResponse Sets the response body to the UTF-8 encoded bytes of body , chunked every maxChunkSize bytes. fun setChunkedBody(body: String , maxChunkSize: Int ): MockResponse setHeader Removes all headers named name , then adds a new header with the name and value. fun setHeader(name: String , value: Any ): MockResponse setHeaders Sets the headers and returns this. fun setHeaders(headers: Headers): MockResponse setHeadersDelay fun setHeadersDelay(delay: Long , unit: TimeUnit ): MockResponse setHttp2ErrorCode Sets the HTTP/2 error code and returns this. fun setHttp2ErrorCode(http2ErrorCode: Int ): MockResponse setResponseCode fun setResponseCode(code: Int ): MockResponse setSocketPolicy Sets the socket policy and returns this. fun setSocketPolicy(socketPolicy: SocketPolicy ): MockResponse setStatus Sets the status and returns this. fun setStatus(status: String ): MockResponse setTrailers Sets the trailers and returns this. fun setTrailers(trailers: Headers): MockResponse throttleBody Throttles the request reader and response writer to sleep for the given period after each series of bytesPerPeriod bytes are transferred. Use this to simulate network behavior. fun throttleBody(bytesPerPeriod: Long , period: Long , unit: TimeUnit ): MockResponse toString fun toString(): String withPush When protocols include HTTP_2 , this attaches a pushed stream to this response. fun withPush(promise: PushPromise ): MockResponse withSettings When protocols include HTTP_2 , this pushes settings before writing the response. fun withSettings(settings: Settings): MockResponse withWebSocketUpgrade Attempts to perform a web socket upgrade on the connection. This will overwrite any previously set status or body. fun withWebSocketUpgrade(listener: WebSocketListener): MockResponse","title":"Functions"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/-init-/","text":"mockwebserver / mockwebserver3 / MockResponse / <init> <init> \u00b6 MockResponse() A scripted response to be replayed by the mock web server.","title":" init "},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/-init-/#init","text":"MockResponse() A scripted response to be replayed by the mock web server.","title":"&lt;init&gt;"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/add-header-lenient/","text":"mockwebserver / mockwebserver3 / MockResponse / addHeaderLenient addHeaderLenient \u00b6 fun addHeaderLenient(name: String , value: Any ): MockResponse Adds a new header with the name and value. This may be used to add multiple headers with the same name. Unlike addHeader this does not validate the name and value.","title":"addHeaderLenient - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/add-header-lenient/#addheaderlenient","text":"fun addHeaderLenient(name: String , value: Any ): MockResponse Adds a new header with the name and value. This may be used to add multiple headers with the same name. Unlike addHeader this does not validate the name and value.","title":"addHeaderLenient"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/add-header/","text":"mockwebserver / mockwebserver3 / MockResponse / addHeader addHeader \u00b6 fun addHeader(header: String ): MockResponse Adds header as an HTTP header. For well-formed HTTP header should contain a name followed by a colon and a value. fun addHeader(name: String , value: Any ): MockResponse Adds a new header with the name and value. This may be used to add multiple headers with the same name.","title":"addHeader - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/add-header/#addheader","text":"fun addHeader(header: String ): MockResponse Adds header as an HTTP header. For well-formed HTTP header should contain a name followed by a colon and a value. fun addHeader(name: String , value: Any ): MockResponse Adds a new header with the name and value. This may be used to add multiple headers with the same name.","title":"addHeader"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/clear-headers/","text":"mockwebserver / mockwebserver3 / MockResponse / clearHeaders clearHeaders \u00b6 fun clearHeaders(): MockResponse Removes all HTTP headers including any \u201cContent-Length\u201d and \u201cTransfer-encoding\u201d headers that were added by default.","title":"clearHeaders - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/clear-headers/#clearheaders","text":"fun clearHeaders(): MockResponse Removes all HTTP headers including any \u201cContent-Length\u201d and \u201cTransfer-encoding\u201d headers that were added by default.","title":"clearHeaders"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/clone/","text":"mockwebserver / mockwebserver3 / MockResponse / clone clone \u00b6 fun clone(): MockResponse","title":"clone - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/clone/#clone","text":"fun clone(): MockResponse","title":"clone"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/duplex-response-body/","text":"mockwebserver / mockwebserver3 / MockResponse / duplexResponseBody duplexResponseBody \u00b6 var duplexResponseBody: DuplexResponseBody ?","title":"duplexResponseBody - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/duplex-response-body/#duplexresponsebody","text":"var duplexResponseBody: DuplexResponseBody ?","title":"duplexResponseBody"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/get-body-delay/","text":"mockwebserver / mockwebserver3 / MockResponse / getBodyDelay getBodyDelay \u00b6 fun getBodyDelay(unit: TimeUnit ): Long","title":"getBodyDelay - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/get-body-delay/#getbodydelay","text":"fun getBodyDelay(unit: TimeUnit ): Long","title":"getBodyDelay"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/get-body/","text":"mockwebserver / mockwebserver3 / MockResponse / getBody getBody \u00b6 fun getBody(): Buffer ? Returns a copy of the raw HTTP payload.","title":"getBody - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/get-body/#getbody","text":"fun getBody(): Buffer ? Returns a copy of the raw HTTP payload.","title":"getBody"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/get-headers-delay/","text":"mockwebserver / mockwebserver3 / MockResponse / getHeadersDelay getHeadersDelay \u00b6 fun getHeadersDelay(unit: TimeUnit ): Long","title":"getHeadersDelay - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/get-headers-delay/#getheadersdelay","text":"fun getHeadersDelay(unit: TimeUnit ): Long","title":"getHeadersDelay"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/get-throttle-period/","text":"mockwebserver / mockwebserver3 / MockResponse / getThrottlePeriod getThrottlePeriod \u00b6 fun getThrottlePeriod(unit: TimeUnit ): Long","title":"getThrottlePeriod - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/get-throttle-period/#getthrottleperiod","text":"fun getThrottlePeriod(unit: TimeUnit ): Long","title":"getThrottlePeriod"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/headers/","text":"mockwebserver / mockwebserver3 / MockResponse / headers headers \u00b6 var headers: Headers The HTTP headers, such as \u201cContent-Length: 0\u201d.","title":"headers - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/headers/#headers","text":"var headers: Headers The HTTP headers, such as \u201cContent-Length: 0\u201d.","title":"headers"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/http2-error-code/","text":"mockwebserver / mockwebserver3 / MockResponse / http2ErrorCode http2ErrorCode \u00b6 var http2ErrorCode: Int Sets the HTTP/2 error code to be returned when resetting the stream. This is only valid with SocketPolicy.RESET_STREAM_AT_START and SocketPolicy.DO_NOT_READ_REQUEST_BODY . Setter Sets the HTTP/2 error code to be returned when resetting the stream. This is only valid with SocketPolicy.RESET_STREAM_AT_START and SocketPolicy.DO_NOT_READ_REQUEST_BODY .","title":"http2ErrorCode - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/http2-error-code/#http2errorcode","text":"var http2ErrorCode: Int Sets the HTTP/2 error code to be returned when resetting the stream. This is only valid with SocketPolicy.RESET_STREAM_AT_START and SocketPolicy.DO_NOT_READ_REQUEST_BODY . Setter Sets the HTTP/2 error code to be returned when resetting the stream. This is only valid with SocketPolicy.RESET_STREAM_AT_START and SocketPolicy.DO_NOT_READ_REQUEST_BODY .","title":"http2ErrorCode"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/is-duplex/","text":"mockwebserver / mockwebserver3 / MockResponse / isDuplex isDuplex \u00b6 val isDuplex: Boolean","title":"isDuplex - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/is-duplex/#isduplex","text":"val isDuplex: Boolean","title":"isDuplex"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/push-promises/","text":"mockwebserver / mockwebserver3 / MockResponse / pushPromises pushPromises \u00b6 val pushPromises: List < PushPromise > Returns the streams the server will push with this response.","title":"pushPromises - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/push-promises/#pushpromises","text":"val pushPromises: List < PushPromise > Returns the streams the server will push with this response.","title":"pushPromises"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/remove-header/","text":"mockwebserver / mockwebserver3 / MockResponse / removeHeader removeHeader \u00b6 fun removeHeader(name: String ): MockResponse Removes all headers named name .","title":"removeHeader - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/remove-header/#removeheader","text":"fun removeHeader(name: String ): MockResponse Removes all headers named name .","title":"removeHeader"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-body-delay/","text":"mockwebserver / mockwebserver3 / MockResponse / setBodyDelay setBodyDelay \u00b6 fun setBodyDelay(delay: Long , unit: TimeUnit ): MockResponse Set the delayed time of the response body to delay . This applies to the response body only; response headers are not affected.","title":"setBodyDelay - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-body-delay/#setbodydelay","text":"fun setBodyDelay(delay: Long , unit: TimeUnit ): MockResponse Set the delayed time of the response body to delay . This applies to the response body only; response headers are not affected.","title":"setBodyDelay"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-body/","text":"mockwebserver / mockwebserver3 / MockResponse / setBody setBody \u00b6 fun setBody(body: Buffer ): MockResponse fun setBody(duplexResponseBody: DuplexResponseBody ): MockResponse fun setBody(body: String ): MockResponse Sets the response body to the UTF-8 encoded bytes of body .","title":"setBody - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-body/#setbody","text":"fun setBody(body: Buffer ): MockResponse fun setBody(duplexResponseBody: DuplexResponseBody ): MockResponse fun setBody(body: String ): MockResponse Sets the response body to the UTF-8 encoded bytes of body .","title":"setBody"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-chunked-body/","text":"mockwebserver / mockwebserver3 / MockResponse / setChunkedBody setChunkedBody \u00b6 fun setChunkedBody(body: Buffer , maxChunkSize: Int ): MockResponse Sets the response body to body , chunked every maxChunkSize bytes. fun setChunkedBody(body: String , maxChunkSize: Int ): MockResponse Sets the response body to the UTF-8 encoded bytes of body , chunked every maxChunkSize bytes.","title":"setChunkedBody - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-chunked-body/#setchunkedbody","text":"fun setChunkedBody(body: Buffer , maxChunkSize: Int ): MockResponse Sets the response body to body , chunked every maxChunkSize bytes. fun setChunkedBody(body: String , maxChunkSize: Int ): MockResponse Sets the response body to the UTF-8 encoded bytes of body , chunked every maxChunkSize bytes.","title":"setChunkedBody"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-header/","text":"mockwebserver / mockwebserver3 / MockResponse / setHeader setHeader \u00b6 fun setHeader(name: String , value: Any ): MockResponse Removes all headers named name , then adds a new header with the name and value.","title":"setHeader - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-header/#setheader","text":"fun setHeader(name: String , value: Any ): MockResponse Removes all headers named name , then adds a new header with the name and value.","title":"setHeader"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-headers-delay/","text":"mockwebserver / mockwebserver3 / MockResponse / setHeadersDelay setHeadersDelay \u00b6 fun setHeadersDelay(delay: Long , unit: TimeUnit ): MockResponse","title":"setHeadersDelay - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-headers-delay/#setheadersdelay","text":"fun setHeadersDelay(delay: Long , unit: TimeUnit ): MockResponse","title":"setHeadersDelay"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-headers/","text":"mockwebserver / mockwebserver3 / MockResponse / setHeaders setHeaders \u00b6 fun setHeaders(headers: Headers): MockResponse Sets the headers and returns this. This was deprecated in OkHttp 4.0 in favor of the headers val. In OkHttp 4.3 it is un-deprecated because Java callers can\u2019t chain when assigning Kotlin vals. (The getter remains deprecated).","title":"setHeaders - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-headers/#setheaders","text":"fun setHeaders(headers: Headers): MockResponse Sets the headers and returns this. This was deprecated in OkHttp 4.0 in favor of the headers val. In OkHttp 4.3 it is un-deprecated because Java callers can\u2019t chain when assigning Kotlin vals. (The getter remains deprecated).","title":"setHeaders"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-http2-error-code/","text":"mockwebserver / mockwebserver3 / MockResponse / setHttp2ErrorCode setHttp2ErrorCode \u00b6 fun setHttp2ErrorCode(http2ErrorCode: Int ): MockResponse Sets the HTTP/2 error code and returns this. This was deprecated in OkHttp 4.0 in favor of the http2ErrorCode val. In OkHttp 4.3 it is un-deprecated because Java callers can\u2019t chain when assigning Kotlin vals. (The getter remains deprecated).","title":"setHttp2ErrorCode - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-http2-error-code/#sethttp2errorcode","text":"fun setHttp2ErrorCode(http2ErrorCode: Int ): MockResponse Sets the HTTP/2 error code and returns this. This was deprecated in OkHttp 4.0 in favor of the http2ErrorCode val. In OkHttp 4.3 it is un-deprecated because Java callers can\u2019t chain when assigning Kotlin vals. (The getter remains deprecated).","title":"setHttp2ErrorCode"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-response-code/","text":"mockwebserver / mockwebserver3 / MockResponse / setResponseCode setResponseCode \u00b6 fun setResponseCode(code: Int ): MockResponse","title":"setResponseCode - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-response-code/#setresponsecode","text":"fun setResponseCode(code: Int ): MockResponse","title":"setResponseCode"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-socket-policy/","text":"mockwebserver / mockwebserver3 / MockResponse / setSocketPolicy setSocketPolicy \u00b6 fun setSocketPolicy(socketPolicy: SocketPolicy ): MockResponse Sets the socket policy and returns this. This was deprecated in OkHttp 4.0 in favor of the socketPolicy val. In OkHttp 4.3 it is un-deprecated because Java callers can\u2019t chain when assigning Kotlin vals. (The getter remains deprecated).","title":"setSocketPolicy - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-socket-policy/#setsocketpolicy","text":"fun setSocketPolicy(socketPolicy: SocketPolicy ): MockResponse Sets the socket policy and returns this. This was deprecated in OkHttp 4.0 in favor of the socketPolicy val. In OkHttp 4.3 it is un-deprecated because Java callers can\u2019t chain when assigning Kotlin vals. (The getter remains deprecated).","title":"setSocketPolicy"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-status/","text":"mockwebserver / mockwebserver3 / MockResponse / setStatus setStatus \u00b6 fun setStatus(status: String ): MockResponse Sets the status and returns this. This was deprecated in OkHttp 4.0 in favor of the status val. In OkHttp 4.3 it is un-deprecated because Java callers can\u2019t chain when assigning Kotlin vals. (The getter remains deprecated).","title":"setStatus - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-status/#setstatus","text":"fun setStatus(status: String ): MockResponse Sets the status and returns this. This was deprecated in OkHttp 4.0 in favor of the status val. In OkHttp 4.3 it is un-deprecated because Java callers can\u2019t chain when assigning Kotlin vals. (The getter remains deprecated).","title":"setStatus"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-trailers/","text":"mockwebserver / mockwebserver3 / MockResponse / setTrailers setTrailers \u00b6 fun setTrailers(trailers: Headers): MockResponse Sets the trailers and returns this. This was deprecated in OkHttp 4.0 in favor of the trailers val. In OkHttp 4.3 it is un-deprecated because Java callers can\u2019t chain when assigning Kotlin vals. (The getter remains deprecated).","title":"setTrailers - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/set-trailers/#settrailers","text":"fun setTrailers(trailers: Headers): MockResponse Sets the trailers and returns this. This was deprecated in OkHttp 4.0 in favor of the trailers val. In OkHttp 4.3 it is un-deprecated because Java callers can\u2019t chain when assigning Kotlin vals. (The getter remains deprecated).","title":"setTrailers"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/settings/","text":"mockwebserver / mockwebserver3 / MockResponse / settings settings \u00b6 var settings: Settings","title":"settings - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/settings/#settings","text":"var settings: Settings","title":"settings"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/socket-policy/","text":"mockwebserver / mockwebserver3 / MockResponse / socketPolicy socketPolicy \u00b6 var socketPolicy: SocketPolicy","title":"socketPolicy - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/socket-policy/#socketpolicy","text":"var socketPolicy: SocketPolicy","title":"socketPolicy"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/status/","text":"mockwebserver / mockwebserver3 / MockResponse / status status \u00b6 var status: String Returns the HTTP response line, such as \u201cHTTP/1.1 200 OK\u201d. Setter Returns the HTTP response line, such as \u201cHTTP/1.1 200 OK\u201d.","title":"status - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/status/#status","text":"var status: String Returns the HTTP response line, such as \u201cHTTP/1.1 200 OK\u201d. Setter Returns the HTTP response line, such as \u201cHTTP/1.1 200 OK\u201d.","title":"status"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/throttle-body/","text":"mockwebserver / mockwebserver3 / MockResponse / throttleBody throttleBody \u00b6 fun throttleBody(bytesPerPeriod: Long , period: Long , unit: TimeUnit ): MockResponse Throttles the request reader and response writer to sleep for the given period after each series of bytesPerPeriod bytes are transferred. Use this to simulate network behavior.","title":"throttleBody - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/throttle-body/#throttlebody","text":"fun throttleBody(bytesPerPeriod: Long , period: Long , unit: TimeUnit ): MockResponse Throttles the request reader and response writer to sleep for the given period after each series of bytesPerPeriod bytes are transferred. Use this to simulate network behavior.","title":"throttleBody"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/throttle-bytes-per-period/","text":"mockwebserver / mockwebserver3 / MockResponse / throttleBytesPerPeriod throttleBytesPerPeriod \u00b6 var throttleBytesPerPeriod: Long","title":"throttleBytesPerPeriod - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/throttle-bytes-per-period/#throttlebytesperperiod","text":"var throttleBytesPerPeriod: Long","title":"throttleBytesPerPeriod"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/to-string/","text":"mockwebserver / mockwebserver3 / MockResponse / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/trailers/","text":"mockwebserver / mockwebserver3 / MockResponse / trailers trailers \u00b6 var trailers: Headers","title":"trailers - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/trailers/#trailers","text":"var trailers: Headers","title":"trailers"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/web-socket-listener/","text":"mockwebserver / mockwebserver3 / MockResponse / webSocketListener webSocketListener \u00b6 var webSocketListener: WebSocketListener?","title":"webSocketListener - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/web-socket-listener/#websocketlistener","text":"var webSocketListener: WebSocketListener?","title":"webSocketListener"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/with-push/","text":"mockwebserver / mockwebserver3 / MockResponse / withPush withPush \u00b6 fun withPush(promise: PushPromise ): MockResponse When protocols include HTTP_2 , this attaches a pushed stream to this response.","title":"withPush - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/with-push/#withpush","text":"fun withPush(promise: PushPromise ): MockResponse When protocols include HTTP_2 , this attaches a pushed stream to this response.","title":"withPush"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/with-settings/","text":"mockwebserver / mockwebserver3 / MockResponse / withSettings withSettings \u00b6 fun withSettings(settings: Settings): MockResponse When protocols include HTTP_2 , this pushes settings before writing the response.","title":"withSettings - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/with-settings/#withsettings","text":"fun withSettings(settings: Settings): MockResponse When protocols include HTTP_2 , this pushes settings before writing the response.","title":"withSettings"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/with-web-socket-upgrade/","text":"mockwebserver / mockwebserver3 / MockResponse / withWebSocketUpgrade withWebSocketUpgrade \u00b6 fun withWebSocketUpgrade(listener: WebSocketListener): MockResponse Attempts to perform a web socket upgrade on the connection. This will overwrite any previously set status or body.","title":"withWebSocketUpgrade - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-response/with-web-socket-upgrade/#withwebsocketupgrade","text":"fun withWebSocketUpgrade(listener: WebSocketListener): MockResponse Attempts to perform a web socket upgrade on the connection. This will overwrite any previously set status or body.","title":"withWebSocketUpgrade"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/","text":"mockwebserver / mockwebserver3 / MockWebServer MockWebServer \u00b6 class MockWebServer : Closeable A scriptable web server. Callers supply canned responses and the server replays them upon request in sequence. Constructors \u00b6 Name Summary <init> A scriptable web server. Callers supply canned responses and the server replays them upon request in sequence. MockWebServer() Properties \u00b6 Name Summary bodyLimit The number of bytes of the POST body to keep in memory to the given limit. var bodyLimit: Long dispatcher The dispatcher used to respond to HTTP requests. The default dispatcher is a QueueDispatcher , which serves a fixed sequence of responses from a queue . var dispatcher: Dispatcher hostName val hostName: String port val port: Int protocolNegotiationEnabled True if ALPN is used on incoming HTTPS connections to negotiate a protocol like HTTP/1.1 or HTTP/2. This is true by default; set to false to disable negotiation and restrict connections to HTTP/1.1. var protocolNegotiationEnabled: Boolean protocols The protocols supported by ALPN on incoming HTTPS connections in order of preference. The list must contain Protocol.HTTP_1_1 . It must not contain null. var protocols: List <Protocol> requestCount The number of HTTP requests received thus far by this server. This may exceed the number of HTTP connections when connection reuse is in practice. val requestCount: Int serverSocketFactory var serverSocketFactory: ServerSocketFactory ? started var started: Boolean Functions \u00b6 Name Summary close fun close(): Unit enqueue Scripts response to be returned to a request made in sequence. The first request is served by the first enqueued response; the second request by the second enqueued response; and so on. fun enqueue(response: MockResponse ): Unit noClientAuth Configure the server to not perform SSL authentication of the client. This leaves authentication to another layer such as in an HTTP cookie or header. This is the default and most common configuration. fun noClientAuth(): Unit requestClientAuth Configure the server to want client auth . If the client presents a certificate that is trusted the handshake will proceed normally. The connection will also proceed normally if the client presents no certificate at all! But if the client presents an untrusted certificate the handshake will fail and no connection will be established. fun requestClientAuth(): Unit requireClientAuth Configure the server to need client auth . If the client presents a certificate that is trusted the handshake will proceed normally. If the client presents an untrusted certificate or no certificate at all the handshake will fail and no connection will be established. fun requireClientAuth(): Unit shutdown fun shutdown(): Unit start Starts the server on the loopback interface for the given port. fun start(port: Int = 0): Unit Starts the server on the given address and port. fun start(inetAddress: InetAddress , port: Int ): Unit takeRequest Awaits the next HTTP request, removes it, and returns it. Callers should use this to verify the request was sent as intended. This method will block until the request is available, possibly forever. fun takeRequest(): RecordedRequest Awaits the next HTTP request (waiting up to the specified wait time if necessary), removes it, and returns it. Callers should use this to verify the request was sent as intended within the given time. fun takeRequest(timeout: Long , unit: TimeUnit ): RecordedRequest ? toProxyAddress fun toProxyAddress(): Proxy toString fun toString(): String url Returns a URL for connecting to this server. fun url(path: String ): HttpUrl useHttps Serve requests with HTTPS rather than otherwise. fun useHttps(sslSocketFactory: SSLSocketFactory , tunnelProxy: Boolean ): Unit","title":"MockWebServer - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/#mockwebserver","text":"class MockWebServer : Closeable A scriptable web server. Callers supply canned responses and the server replays them upon request in sequence.","title":"MockWebServer"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/#constructors","text":"Name Summary <init> A scriptable web server. Callers supply canned responses and the server replays them upon request in sequence. MockWebServer()","title":"Constructors"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/#properties","text":"Name Summary bodyLimit The number of bytes of the POST body to keep in memory to the given limit. var bodyLimit: Long dispatcher The dispatcher used to respond to HTTP requests. The default dispatcher is a QueueDispatcher , which serves a fixed sequence of responses from a queue . var dispatcher: Dispatcher hostName val hostName: String port val port: Int protocolNegotiationEnabled True if ALPN is used on incoming HTTPS connections to negotiate a protocol like HTTP/1.1 or HTTP/2. This is true by default; set to false to disable negotiation and restrict connections to HTTP/1.1. var protocolNegotiationEnabled: Boolean protocols The protocols supported by ALPN on incoming HTTPS connections in order of preference. The list must contain Protocol.HTTP_1_1 . It must not contain null. var protocols: List <Protocol> requestCount The number of HTTP requests received thus far by this server. This may exceed the number of HTTP connections when connection reuse is in practice. val requestCount: Int serverSocketFactory var serverSocketFactory: ServerSocketFactory ? started var started: Boolean","title":"Properties"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/#functions","text":"Name Summary close fun close(): Unit enqueue Scripts response to be returned to a request made in sequence. The first request is served by the first enqueued response; the second request by the second enqueued response; and so on. fun enqueue(response: MockResponse ): Unit noClientAuth Configure the server to not perform SSL authentication of the client. This leaves authentication to another layer such as in an HTTP cookie or header. This is the default and most common configuration. fun noClientAuth(): Unit requestClientAuth Configure the server to want client auth . If the client presents a certificate that is trusted the handshake will proceed normally. The connection will also proceed normally if the client presents no certificate at all! But if the client presents an untrusted certificate the handshake will fail and no connection will be established. fun requestClientAuth(): Unit requireClientAuth Configure the server to need client auth . If the client presents a certificate that is trusted the handshake will proceed normally. If the client presents an untrusted certificate or no certificate at all the handshake will fail and no connection will be established. fun requireClientAuth(): Unit shutdown fun shutdown(): Unit start Starts the server on the loopback interface for the given port. fun start(port: Int = 0): Unit Starts the server on the given address and port. fun start(inetAddress: InetAddress , port: Int ): Unit takeRequest Awaits the next HTTP request, removes it, and returns it. Callers should use this to verify the request was sent as intended. This method will block until the request is available, possibly forever. fun takeRequest(): RecordedRequest Awaits the next HTTP request (waiting up to the specified wait time if necessary), removes it, and returns it. Callers should use this to verify the request was sent as intended within the given time. fun takeRequest(timeout: Long , unit: TimeUnit ): RecordedRequest ? toProxyAddress fun toProxyAddress(): Proxy toString fun toString(): String url Returns a URL for connecting to this server. fun url(path: String ): HttpUrl useHttps Serve requests with HTTPS rather than otherwise. fun useHttps(sslSocketFactory: SSLSocketFactory , tunnelProxy: Boolean ): Unit","title":"Functions"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/-init-/","text":"mockwebserver / mockwebserver3 / MockWebServer / <init> <init> \u00b6 MockWebServer() A scriptable web server. Callers supply canned responses and the server replays them upon request in sequence.","title":" init "},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/-init-/#init","text":"MockWebServer() A scriptable web server. Callers supply canned responses and the server replays them upon request in sequence.","title":"&lt;init&gt;"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/body-limit/","text":"mockwebserver / mockwebserver3 / MockWebServer / bodyLimit bodyLimit \u00b6 var bodyLimit: Long The number of bytes of the POST body to keep in memory to the given limit.","title":"bodyLimit - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/body-limit/#bodylimit","text":"var bodyLimit: Long The number of bytes of the POST body to keep in memory to the given limit.","title":"bodyLimit"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/close/","text":"mockwebserver / mockwebserver3 / MockWebServer / close close \u00b6 fun close(): Unit","title":"close - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/close/#close","text":"fun close(): Unit","title":"close"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/dispatcher/","text":"mockwebserver / mockwebserver3 / MockWebServer / dispatcher dispatcher \u00b6 var dispatcher: Dispatcher The dispatcher used to respond to HTTP requests. The default dispatcher is a QueueDispatcher , which serves a fixed sequence of responses from a queue . Other dispatchers can be configured. They can vary the response based on timing or the content of the request.","title":"dispatcher - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/dispatcher/#dispatcher","text":"var dispatcher: Dispatcher The dispatcher used to respond to HTTP requests. The default dispatcher is a QueueDispatcher , which serves a fixed sequence of responses from a queue . Other dispatchers can be configured. They can vary the response based on timing or the content of the request.","title":"dispatcher"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/enqueue/","text":"mockwebserver / mockwebserver3 / MockWebServer / enqueue enqueue \u00b6 fun enqueue(response: MockResponse ): Unit Scripts response to be returned to a request made in sequence. The first request is served by the first enqueued response; the second request by the second enqueued response; and so on. Exceptions \u00b6 ClassCastException - if the default dispatcher has been replaced with setDispatcher .","title":"enqueue - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/enqueue/#enqueue","text":"fun enqueue(response: MockResponse ): Unit Scripts response to be returned to a request made in sequence. The first request is served by the first enqueued response; the second request by the second enqueued response; and so on.","title":"enqueue"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/enqueue/#exceptions","text":"ClassCastException - if the default dispatcher has been replaced with setDispatcher .","title":"Exceptions"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/host-name/","text":"mockwebserver / mockwebserver3 / MockWebServer / hostName hostName \u00b6 val hostName: String","title":"hostName - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/host-name/#hostname","text":"val hostName: String","title":"hostName"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/no-client-auth/","text":"mockwebserver / mockwebserver3 / MockWebServer / noClientAuth noClientAuth \u00b6 fun noClientAuth(): Unit Configure the server to not perform SSL authentication of the client. This leaves authentication to another layer such as in an HTTP cookie or header. This is the default and most common configuration.","title":"noClientAuth - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/no-client-auth/#noclientauth","text":"fun noClientAuth(): Unit Configure the server to not perform SSL authentication of the client. This leaves authentication to another layer such as in an HTTP cookie or header. This is the default and most common configuration.","title":"noClientAuth"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/port/","text":"mockwebserver / mockwebserver3 / MockWebServer / port port \u00b6 val port: Int","title":"port - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/port/#port","text":"val port: Int","title":"port"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/protocol-negotiation-enabled/","text":"mockwebserver / mockwebserver3 / MockWebServer / protocolNegotiationEnabled protocolNegotiationEnabled \u00b6 var protocolNegotiationEnabled: Boolean True if ALPN is used on incoming HTTPS connections to negotiate a protocol like HTTP/1.1 or HTTP/2. This is true by default; set to false to disable negotiation and restrict connections to HTTP/1.1.","title":"protocolNegotiationEnabled - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/protocol-negotiation-enabled/#protocolnegotiationenabled","text":"var protocolNegotiationEnabled: Boolean True if ALPN is used on incoming HTTPS connections to negotiate a protocol like HTTP/1.1 or HTTP/2. This is true by default; set to false to disable negotiation and restrict connections to HTTP/1.1.","title":"protocolNegotiationEnabled"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/protocols/","text":"mockwebserver / mockwebserver3 / MockWebServer / protocols protocols \u00b6 var protocols: List <Protocol> The protocols supported by ALPN on incoming HTTPS connections in order of preference. The list must contain Protocol.HTTP_1_1 . It must not contain null. This list is ignored when negotiation is disabled . Getter The protocols supported by ALPN on incoming HTTPS connections in order of preference. The list must contain Protocol.HTTP_1_1 . It must not contain null. This list is ignored when negotiation is disabled .","title":"protocols - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/protocols/#protocols","text":"var protocols: List <Protocol> The protocols supported by ALPN on incoming HTTPS connections in order of preference. The list must contain Protocol.HTTP_1_1 . It must not contain null. This list is ignored when negotiation is disabled . Getter The protocols supported by ALPN on incoming HTTPS connections in order of preference. The list must contain Protocol.HTTP_1_1 . It must not contain null. This list is ignored when negotiation is disabled .","title":"protocols"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/request-client-auth/","text":"mockwebserver / mockwebserver3 / MockWebServer / requestClientAuth requestClientAuth \u00b6 fun requestClientAuth(): Unit Configure the server to want client auth . If the client presents a certificate that is trusted the handshake will proceed normally. The connection will also proceed normally if the client presents no certificate at all! But if the client presents an untrusted certificate the handshake will fail and no connection will be established.","title":"requestClientAuth - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/request-client-auth/#requestclientauth","text":"fun requestClientAuth(): Unit Configure the server to want client auth . If the client presents a certificate that is trusted the handshake will proceed normally. The connection will also proceed normally if the client presents no certificate at all! But if the client presents an untrusted certificate the handshake will fail and no connection will be established.","title":"requestClientAuth"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/request-count/","text":"mockwebserver / mockwebserver3 / MockWebServer / requestCount requestCount \u00b6 val requestCount: Int The number of HTTP requests received thus far by this server. This may exceed the number of HTTP connections when connection reuse is in practice.","title":"requestCount - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/request-count/#requestcount","text":"val requestCount: Int The number of HTTP requests received thus far by this server. This may exceed the number of HTTP connections when connection reuse is in practice.","title":"requestCount"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/require-client-auth/","text":"mockwebserver / mockwebserver3 / MockWebServer / requireClientAuth requireClientAuth \u00b6 fun requireClientAuth(): Unit Configure the server to need client auth . If the client presents a certificate that is trusted the handshake will proceed normally. If the client presents an untrusted certificate or no certificate at all the handshake will fail and no connection will be established.","title":"requireClientAuth - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/require-client-auth/#requireclientauth","text":"fun requireClientAuth(): Unit Configure the server to need client auth . If the client presents a certificate that is trusted the handshake will proceed normally. If the client presents an untrusted certificate or no certificate at all the handshake will fail and no connection will be established.","title":"requireClientAuth"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/server-socket-factory/","text":"mockwebserver / mockwebserver3 / MockWebServer / serverSocketFactory serverSocketFactory \u00b6 var serverSocketFactory: ServerSocketFactory ?","title":"serverSocketFactory - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/server-socket-factory/#serversocketfactory","text":"var serverSocketFactory: ServerSocketFactory ?","title":"serverSocketFactory"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/shutdown/","text":"mockwebserver / mockwebserver3 / MockWebServer / shutdown shutdown \u00b6 @Synchronized fun shutdown(): Unit","title":"shutdown - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/shutdown/#shutdown","text":"@Synchronized fun shutdown(): Unit","title":"shutdown"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/start/","text":"mockwebserver / mockwebserver3 / MockWebServer / start start \u00b6 @JvmOverloads fun start(port: Int = 0): Unit Starts the server on the loopback interface for the given port. Parameters \u00b6 port - the port to listen to, or 0 for any available port. Automated tests should always use port 0 to avoid flakiness when a specific port is unavailable. fun start(inetAddress: InetAddress , port: Int ): Unit Starts the server on the given address and port. Parameters \u00b6 inetAddress - the address to create the server socket on port - the port to listen to, or 0 for any available port. Automated tests should always use port 0 to avoid flakiness when a specific port is unavailable.","title":"start - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/start/#start","text":"@JvmOverloads fun start(port: Int = 0): Unit Starts the server on the loopback interface for the given port.","title":"start"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/start/#parameters","text":"port - the port to listen to, or 0 for any available port. Automated tests should always use port 0 to avoid flakiness when a specific port is unavailable. fun start(inetAddress: InetAddress , port: Int ): Unit Starts the server on the given address and port.","title":"Parameters"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/start/#parameters_1","text":"inetAddress - the address to create the server socket on port - the port to listen to, or 0 for any available port. Automated tests should always use port 0 to avoid flakiness when a specific port is unavailable.","title":"Parameters"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/started/","text":"mockwebserver / mockwebserver3 / MockWebServer / started started \u00b6 var started: Boolean","title":"started - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/started/#started","text":"var started: Boolean","title":"started"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/take-request/","text":"mockwebserver / mockwebserver3 / MockWebServer / takeRequest takeRequest \u00b6 fun takeRequest(): RecordedRequest Awaits the next HTTP request, removes it, and returns it. Callers should use this to verify the request was sent as intended. This method will block until the request is available, possibly forever. Return the head of the request queue fun takeRequest(timeout: Long , unit: TimeUnit ): RecordedRequest ? Awaits the next HTTP request (waiting up to the specified wait time if necessary), removes it, and returns it. Callers should use this to verify the request was sent as intended within the given time. Parameters \u00b6 timeout - how long to wait before giving up, in units of unit unit - a TimeUnit determining how to interpret the timeout parameter Return the head of the request queue","title":"takeRequest - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/take-request/#takerequest","text":"fun takeRequest(): RecordedRequest Awaits the next HTTP request, removes it, and returns it. Callers should use this to verify the request was sent as intended. This method will block until the request is available, possibly forever. Return the head of the request queue fun takeRequest(timeout: Long , unit: TimeUnit ): RecordedRequest ? Awaits the next HTTP request (waiting up to the specified wait time if necessary), removes it, and returns it. Callers should use this to verify the request was sent as intended within the given time.","title":"takeRequest"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/take-request/#parameters","text":"timeout - how long to wait before giving up, in units of unit unit - a TimeUnit determining how to interpret the timeout parameter Return the head of the request queue","title":"Parameters"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/to-proxy-address/","text":"mockwebserver / mockwebserver3 / MockWebServer / toProxyAddress toProxyAddress \u00b6 fun toProxyAddress(): Proxy","title":"toProxyAddress - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/to-proxy-address/#toproxyaddress","text":"fun toProxyAddress(): Proxy","title":"toProxyAddress"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/to-string/","text":"mockwebserver / mockwebserver3 / MockWebServer / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/url/","text":"mockwebserver / mockwebserver3 / MockWebServer / url url \u00b6 fun url(path: String ): HttpUrl Returns a URL for connecting to this server. Parameters \u00b6 path - the request path, such as \u201c/\u201d.","title":"url - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/url/#url","text":"fun url(path: String ): HttpUrl Returns a URL for connecting to this server.","title":"url"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/url/#parameters","text":"path - the request path, such as \u201c/\u201d.","title":"Parameters"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/use-https/","text":"mockwebserver / mockwebserver3 / MockWebServer / useHttps useHttps \u00b6 fun useHttps(sslSocketFactory: SSLSocketFactory , tunnelProxy: Boolean ): Unit Serve requests with HTTPS rather than otherwise. Parameters \u00b6 tunnelProxy - true to expect the HTTP CONNECT method before negotiating TLS.","title":"useHttps - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/use-https/#usehttps","text":"fun useHttps(sslSocketFactory: SSLSocketFactory , tunnelProxy: Boolean ): Unit Serve requests with HTTPS rather than otherwise.","title":"useHttps"},{"location":"4.x/mockwebserver/mockwebserver3/-mock-web-server/use-https/#parameters","text":"tunnelProxy - true to expect the HTTP CONNECT method before negotiating TLS.","title":"Parameters"},{"location":"4.x/mockwebserver/mockwebserver3/-push-promise/","text":"mockwebserver / mockwebserver3 / PushPromise PushPromise \u00b6 class PushPromise An HTTP request initiated by the server. Constructors \u00b6 Name Summary <init> An HTTP request initiated by the server. PushPromise(method: String , path: String , headers: Headers, response: MockResponse ) Properties \u00b6 Name Summary headers val headers: Headers method val method: String path val path: String response val response: MockResponse","title":"PushPromise - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-push-promise/#pushpromise","text":"class PushPromise An HTTP request initiated by the server.","title":"PushPromise"},{"location":"4.x/mockwebserver/mockwebserver3/-push-promise/#constructors","text":"Name Summary <init> An HTTP request initiated by the server. PushPromise(method: String , path: String , headers: Headers, response: MockResponse )","title":"Constructors"},{"location":"4.x/mockwebserver/mockwebserver3/-push-promise/#properties","text":"Name Summary headers val headers: Headers method val method: String path val path: String response val response: MockResponse","title":"Properties"},{"location":"4.x/mockwebserver/mockwebserver3/-push-promise/-init-/","text":"mockwebserver / mockwebserver3 / PushPromise / <init> <init> \u00b6 PushPromise(method: String , path: String , headers: Headers, response: MockResponse ) An HTTP request initiated by the server.","title":" init "},{"location":"4.x/mockwebserver/mockwebserver3/-push-promise/-init-/#init","text":"PushPromise(method: String , path: String , headers: Headers, response: MockResponse ) An HTTP request initiated by the server.","title":"&lt;init&gt;"},{"location":"4.x/mockwebserver/mockwebserver3/-push-promise/headers/","text":"mockwebserver / mockwebserver3 / PushPromise / headers headers \u00b6 val headers: Headers","title":"headers - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-push-promise/headers/#headers","text":"val headers: Headers","title":"headers"},{"location":"4.x/mockwebserver/mockwebserver3/-push-promise/method/","text":"mockwebserver / mockwebserver3 / PushPromise / method method \u00b6 val method: String","title":"method - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-push-promise/method/#method","text":"val method: String","title":"method"},{"location":"4.x/mockwebserver/mockwebserver3/-push-promise/path/","text":"mockwebserver / mockwebserver3 / PushPromise / path path \u00b6 val path: String","title":"path - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-push-promise/path/#path","text":"val path: String","title":"path"},{"location":"4.x/mockwebserver/mockwebserver3/-push-promise/response/","text":"mockwebserver / mockwebserver3 / PushPromise / response response \u00b6 val response: MockResponse","title":"response - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-push-promise/response/#response","text":"val response: MockResponse","title":"response"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/","text":"mockwebserver / mockwebserver3 / QueueDispatcher QueueDispatcher \u00b6 open class QueueDispatcher : Dispatcher Default dispatcher that processes a script of responses. Populate the script by calling enqueueResponse . Constructors \u00b6 Name Summary <init> Default dispatcher that processes a script of responses. Populate the script by calling enqueueResponse . QueueDispatcher() Properties \u00b6 Name Summary responseQueue val responseQueue: BlockingQueue < MockResponse > Functions \u00b6 Name Summary dispatch Returns a response to satisfy request . This method may block (for instance, to wait on a CountdownLatch). open fun dispatch(request: RecordedRequest ): MockResponse enqueueResponse open fun enqueueResponse(response: MockResponse ): Unit peek Returns an early guess of the next response, used for policy on how an incoming request should be received. The default implementation returns an empty response. Mischievous implementations can return other values to test HTTP edge cases, such as unhappy socket policies or throttled request bodies. open fun peek(): MockResponse setFailFast open fun setFailFast(failFast: Boolean ): Unit open fun setFailFast(failFastResponse: MockResponse ?): Unit shutdown Release any resources held by this dispatcher. Any requests that are currently being dispatched should return immediately. Responses returned after shutdown will not be transmitted: their socket connections have already been closed. open fun shutdown(): Unit","title":"QueueDispatcher - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/#queuedispatcher","text":"open class QueueDispatcher : Dispatcher Default dispatcher that processes a script of responses. Populate the script by calling enqueueResponse .","title":"QueueDispatcher"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/#constructors","text":"Name Summary <init> Default dispatcher that processes a script of responses. Populate the script by calling enqueueResponse . QueueDispatcher()","title":"Constructors"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/#properties","text":"Name Summary responseQueue val responseQueue: BlockingQueue < MockResponse >","title":"Properties"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/#functions","text":"Name Summary dispatch Returns a response to satisfy request . This method may block (for instance, to wait on a CountdownLatch). open fun dispatch(request: RecordedRequest ): MockResponse enqueueResponse open fun enqueueResponse(response: MockResponse ): Unit peek Returns an early guess of the next response, used for policy on how an incoming request should be received. The default implementation returns an empty response. Mischievous implementations can return other values to test HTTP edge cases, such as unhappy socket policies or throttled request bodies. open fun peek(): MockResponse setFailFast open fun setFailFast(failFast: Boolean ): Unit open fun setFailFast(failFastResponse: MockResponse ?): Unit shutdown Release any resources held by this dispatcher. Any requests that are currently being dispatched should return immediately. Responses returned after shutdown will not be transmitted: their socket connections have already been closed. open fun shutdown(): Unit","title":"Functions"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/-init-/","text":"mockwebserver / mockwebserver3 / QueueDispatcher / <init> <init> \u00b6 QueueDispatcher() Default dispatcher that processes a script of responses. Populate the script by calling enqueueResponse .","title":" init "},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/-init-/#init","text":"QueueDispatcher() Default dispatcher that processes a script of responses. Populate the script by calling enqueueResponse .","title":"&lt;init&gt;"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/dispatch/","text":"mockwebserver / mockwebserver3 / QueueDispatcher / dispatch dispatch \u00b6 open fun dispatch(request: RecordedRequest ): MockResponse Returns a response to satisfy request . This method may block (for instance, to wait on a CountdownLatch).","title":"dispatch - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/dispatch/#dispatch","text":"open fun dispatch(request: RecordedRequest ): MockResponse Returns a response to satisfy request . This method may block (for instance, to wait on a CountdownLatch).","title":"dispatch"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/enqueue-response/","text":"mockwebserver / mockwebserver3 / QueueDispatcher / enqueueResponse enqueueResponse \u00b6 open fun enqueueResponse(response: MockResponse ): Unit","title":"enqueueResponse - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/enqueue-response/#enqueueresponse","text":"open fun enqueueResponse(response: MockResponse ): Unit","title":"enqueueResponse"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/peek/","text":"mockwebserver / mockwebserver3 / QueueDispatcher / peek peek \u00b6 open fun peek(): MockResponse Returns an early guess of the next response, used for policy on how an incoming request should be received. The default implementation returns an empty response. Mischievous implementations can return other values to test HTTP edge cases, such as unhappy socket policies or throttled request bodies.","title":"peek - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/peek/#peek","text":"open fun peek(): MockResponse Returns an early guess of the next response, used for policy on how an incoming request should be received. The default implementation returns an empty response. Mischievous implementations can return other values to test HTTP edge cases, such as unhappy socket policies or throttled request bodies.","title":"peek"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/response-queue/","text":"mockwebserver / mockwebserver3 / QueueDispatcher / responseQueue responseQueue \u00b6 protected val responseQueue: BlockingQueue < MockResponse >","title":"responseQueue - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/response-queue/#responsequeue","text":"protected val responseQueue: BlockingQueue < MockResponse >","title":"responseQueue"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/set-fail-fast/","text":"mockwebserver / mockwebserver3 / QueueDispatcher / setFailFast setFailFast \u00b6 open fun setFailFast(failFast: Boolean ): Unit open fun setFailFast(failFastResponse: MockResponse ?): Unit","title":"setFailFast - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/set-fail-fast/#setfailfast","text":"open fun setFailFast(failFast: Boolean ): Unit open fun setFailFast(failFastResponse: MockResponse ?): Unit","title":"setFailFast"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/shutdown/","text":"mockwebserver / mockwebserver3 / QueueDispatcher / shutdown shutdown \u00b6 open fun shutdown(): Unit Release any resources held by this dispatcher. Any requests that are currently being dispatched should return immediately. Responses returned after shutdown will not be transmitted: their socket connections have already been closed.","title":"shutdown - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-queue-dispatcher/shutdown/#shutdown","text":"open fun shutdown(): Unit Release any resources held by this dispatcher. Any requests that are currently being dispatched should return immediately. Responses returned after shutdown will not be transmitted: their socket connections have already been closed.","title":"shutdown"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/","text":"mockwebserver / mockwebserver3 / RecordedRequest RecordedRequest \u00b6 class RecordedRequest An HTTP request that came into the mock web server. Constructors \u00b6 Name Summary <init> An HTTP request that came into the mock web server. RecordedRequest(requestLine: String , headers: Headers, chunkSizes: List < Int >, bodySize: Long , body: Buffer , sequenceNumber: Int , socket: Socket , failure: IOException ? = null) Properties \u00b6 Name Summary body The body of this POST request. This may be truncated. val body: Buffer bodySize The total size of the body of this POST request (before truncation). val bodySize: Long chunkSizes The sizes of the chunks of this request\u2019s body, or an empty list if the request\u2019s body was empty or unchunked. val chunkSizes: List < Int > failure The failure MockWebServer recorded when attempting to decode this request. If, for example, the inbound request was truncated, this exception will be non-null. val failure: IOException ? handshake The TLS handshake of the connection that carried this request, or null if the request was received without TLS. val handshake: Handshake? headers All headers. val headers: Headers method val method: String ? path val path: String ? requestLine val requestLine: String requestUrl val requestUrl: HttpUrl? sequenceNumber The index of this request on its HTTP connection. Since a single HTTP connection may serve multiple requests, each request is assigned its own sequence number. val sequenceNumber: Int tlsVersion Returns the connection\u2019s TLS version or null if the connection doesn\u2019t use SSL. val tlsVersion: TlsVersion? Functions \u00b6 Name Summary getHeader Returns the first header named name , or null if no such header exists. fun getHeader(name: String ): String ? toString fun toString(): String","title":"RecordedRequest - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/#recordedrequest","text":"class RecordedRequest An HTTP request that came into the mock web server.","title":"RecordedRequest"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/#constructors","text":"Name Summary <init> An HTTP request that came into the mock web server. RecordedRequest(requestLine: String , headers: Headers, chunkSizes: List < Int >, bodySize: Long , body: Buffer , sequenceNumber: Int , socket: Socket , failure: IOException ? = null)","title":"Constructors"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/#properties","text":"Name Summary body The body of this POST request. This may be truncated. val body: Buffer bodySize The total size of the body of this POST request (before truncation). val bodySize: Long chunkSizes The sizes of the chunks of this request\u2019s body, or an empty list if the request\u2019s body was empty or unchunked. val chunkSizes: List < Int > failure The failure MockWebServer recorded when attempting to decode this request. If, for example, the inbound request was truncated, this exception will be non-null. val failure: IOException ? handshake The TLS handshake of the connection that carried this request, or null if the request was received without TLS. val handshake: Handshake? headers All headers. val headers: Headers method val method: String ? path val path: String ? requestLine val requestLine: String requestUrl val requestUrl: HttpUrl? sequenceNumber The index of this request on its HTTP connection. Since a single HTTP connection may serve multiple requests, each request is assigned its own sequence number. val sequenceNumber: Int tlsVersion Returns the connection\u2019s TLS version or null if the connection doesn\u2019t use SSL. val tlsVersion: TlsVersion?","title":"Properties"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/#functions","text":"Name Summary getHeader Returns the first header named name , or null if no such header exists. fun getHeader(name: String ): String ? toString fun toString(): String","title":"Functions"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/-init-/","text":"mockwebserver / mockwebserver3 / RecordedRequest / <init> <init> \u00b6 RecordedRequest(requestLine: String , headers: Headers, chunkSizes: List < Int >, bodySize: Long , body: Buffer , sequenceNumber: Int , socket: Socket , failure: IOException ? = null) An HTTP request that came into the mock web server.","title":" init "},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/-init-/#init","text":"RecordedRequest(requestLine: String , headers: Headers, chunkSizes: List < Int >, bodySize: Long , body: Buffer , sequenceNumber: Int , socket: Socket , failure: IOException ? = null) An HTTP request that came into the mock web server.","title":"&lt;init&gt;"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/body-size/","text":"mockwebserver / mockwebserver3 / RecordedRequest / bodySize bodySize \u00b6 val bodySize: Long The total size of the body of this POST request (before truncation).","title":"bodySize - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/body-size/#bodysize","text":"val bodySize: Long The total size of the body of this POST request (before truncation).","title":"bodySize"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/body/","text":"mockwebserver / mockwebserver3 / RecordedRequest / body body \u00b6 val body: Buffer The body of this POST request. This may be truncated.","title":"body - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/body/#body","text":"val body: Buffer The body of this POST request. This may be truncated.","title":"body"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/chunk-sizes/","text":"mockwebserver / mockwebserver3 / RecordedRequest / chunkSizes chunkSizes \u00b6 val chunkSizes: List < Int > The sizes of the chunks of this request\u2019s body, or an empty list if the request\u2019s body was empty or unchunked.","title":"chunkSizes - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/chunk-sizes/#chunksizes","text":"val chunkSizes: List < Int > The sizes of the chunks of this request\u2019s body, or an empty list if the request\u2019s body was empty or unchunked.","title":"chunkSizes"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/failure/","text":"mockwebserver / mockwebserver3 / RecordedRequest / failure failure \u00b6 val failure: IOException ? The failure MockWebServer recorded when attempting to decode this request. If, for example, the inbound request was truncated, this exception will be non-null.","title":"failure - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/failure/#failure","text":"val failure: IOException ? The failure MockWebServer recorded when attempting to decode this request. If, for example, the inbound request was truncated, this exception will be non-null.","title":"failure"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/get-header/","text":"mockwebserver / mockwebserver3 / RecordedRequest / getHeader getHeader \u00b6 fun getHeader(name: String ): String ? Returns the first header named name , or null if no such header exists.","title":"getHeader - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/get-header/#getheader","text":"fun getHeader(name: String ): String ? Returns the first header named name , or null if no such header exists.","title":"getHeader"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/handshake/","text":"mockwebserver / mockwebserver3 / RecordedRequest / handshake handshake \u00b6 val handshake: Handshake? The TLS handshake of the connection that carried this request, or null if the request was received without TLS.","title":"handshake - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/handshake/#handshake","text":"val handshake: Handshake? The TLS handshake of the connection that carried this request, or null if the request was received without TLS.","title":"handshake"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/headers/","text":"mockwebserver / mockwebserver3 / RecordedRequest / headers headers \u00b6 val headers: Headers All headers.","title":"headers - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/headers/#headers","text":"val headers: Headers All headers.","title":"headers"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/method/","text":"mockwebserver / mockwebserver3 / RecordedRequest / method method \u00b6 val method: String ?","title":"method - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/method/#method","text":"val method: String ?","title":"method"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/path/","text":"mockwebserver / mockwebserver3 / RecordedRequest / path path \u00b6 val path: String ?","title":"path - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/path/#path","text":"val path: String ?","title":"path"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/request-line/","text":"mockwebserver / mockwebserver3 / RecordedRequest / requestLine requestLine \u00b6 val requestLine: String","title":"requestLine - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/request-line/#requestline","text":"val requestLine: String","title":"requestLine"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/request-url/","text":"mockwebserver / mockwebserver3 / RecordedRequest / requestUrl requestUrl \u00b6 val requestUrl: HttpUrl?","title":"requestUrl - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/request-url/#requesturl","text":"val requestUrl: HttpUrl?","title":"requestUrl"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/sequence-number/","text":"mockwebserver / mockwebserver3 / RecordedRequest / sequenceNumber sequenceNumber \u00b6 val sequenceNumber: Int The index of this request on its HTTP connection. Since a single HTTP connection may serve multiple requests, each request is assigned its own sequence number.","title":"sequenceNumber - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/sequence-number/#sequencenumber","text":"val sequenceNumber: Int The index of this request on its HTTP connection. Since a single HTTP connection may serve multiple requests, each request is assigned its own sequence number.","title":"sequenceNumber"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/tls-version/","text":"mockwebserver / mockwebserver3 / RecordedRequest / tlsVersion tlsVersion \u00b6 val tlsVersion: TlsVersion? Returns the connection\u2019s TLS version or null if the connection doesn\u2019t use SSL.","title":"tlsVersion - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/tls-version/#tlsversion","text":"val tlsVersion: TlsVersion? Returns the connection\u2019s TLS version or null if the connection doesn\u2019t use SSL.","title":"tlsVersion"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/to-string/","text":"mockwebserver / mockwebserver3 / RecordedRequest / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-recorded-request/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/","text":"mockwebserver / mockwebserver3 / SocketPolicy SocketPolicy \u00b6 enum class SocketPolicy What should be done with the incoming socket. Be careful when using values like DISCONNECT_AT_END , SHUTDOWN_INPUT_AT_END and SHUTDOWN_OUTPUT_AT_END that close a socket after a response, and where there are follow-up requests. The client is unblocked and free to continue as soon as it has received the entire response body. If and when the client makes a subsequent request using a pooled socket the server may not have had time to close the socket. The socket will be closed at an indeterminate point before or during the second request. It may be closed after client has started sending the request body. If a request body is not retryable then the client may fail the request, making client behavior non-deterministic. Add delays in the client to improve the chances that the server has closed the socket before follow up requests are made. Enum Values \u00b6 Name Summary SHUTDOWN_SERVER_AFTER_RESPONSE Shutdown MockWebServer after writing response. KEEP_OPEN Keep the socket open after the response. This is the default HTTP/1.1 behavior. DISCONNECT_AT_END Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2 connections, this sends a GOAWAYframe immediately after the response and will close the connection when the client\u2019s socket is exhausted. UPGRADE_TO_SSL_AT_END Wrap the socket with SSL at the completion of this request/response pair. Used for CONNECT messages to tunnel SSL over an HTTP proxy. DISCONNECT_AT_START Request immediate close of connection without even reading the request. Use to simulate buggy SSL servers closing connections in response to unrecognized TLS extensions. DISCONNECT_AFTER_REQUEST Close connection after reading the request but before writing the response. Use this to simulate late connection pool failures. DISCONNECT_DURING_REQUEST_BODY Close connection after reading half of the request body (if present). DISCONNECT_DURING_RESPONSE_BODY Close connection after writing half of the response body (if present). DO_NOT_READ_REQUEST_BODY Process the response without even attempting to reading the request body. For HTTP/2 this will send MockResponse.getHttp2ErrorCode after the response body or trailers. For HTTP/1 this will close the socket after the response body or trailers. FAIL_HANDSHAKE Don\u2019t trust the client during the SSL handshake. SHUTDOWN_INPUT_AT_END Shutdown the socket input after sending the response. For testing bad behavior. SHUTDOWN_OUTPUT_AT_END Shutdown the socket output after sending the response. For testing bad behavior. STALL_SOCKET_AT_START After accepting the connection and doing TLS (if configured) don\u2019t do HTTP/1.1 or HTTP/2 framing. Ignore the socket completely until the server is shut down. NO_RESPONSE Read the request but don\u2019t respond to it. Just keep the socket open. For testing read response header timeout issue. RESET_STREAM_AT_START Fail HTTP/2 requests without processing them by sending an MockResponse.getHttp2ErrorCode . EXPECT_CONTINUE Transmit a HTTP/1.1 100 Continue response before reading the HTTP request body. Typically this response is sent when a client makes a request with the header Expect: 100-continue . CONTINUE_ALWAYS Transmit a HTTP/1.1 100 Continue response before reading the HTTP request body even if the client does not send the header Expect: 100-continue in its request.","title":"SocketPolicy - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/#socketpolicy","text":"enum class SocketPolicy What should be done with the incoming socket. Be careful when using values like DISCONNECT_AT_END , SHUTDOWN_INPUT_AT_END and SHUTDOWN_OUTPUT_AT_END that close a socket after a response, and where there are follow-up requests. The client is unblocked and free to continue as soon as it has received the entire response body. If and when the client makes a subsequent request using a pooled socket the server may not have had time to close the socket. The socket will be closed at an indeterminate point before or during the second request. It may be closed after client has started sending the request body. If a request body is not retryable then the client may fail the request, making client behavior non-deterministic. Add delays in the client to improve the chances that the server has closed the socket before follow up requests are made.","title":"SocketPolicy"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/#enum-values","text":"Name Summary SHUTDOWN_SERVER_AFTER_RESPONSE Shutdown MockWebServer after writing response. KEEP_OPEN Keep the socket open after the response. This is the default HTTP/1.1 behavior. DISCONNECT_AT_END Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2 connections, this sends a GOAWAYframe immediately after the response and will close the connection when the client\u2019s socket is exhausted. UPGRADE_TO_SSL_AT_END Wrap the socket with SSL at the completion of this request/response pair. Used for CONNECT messages to tunnel SSL over an HTTP proxy. DISCONNECT_AT_START Request immediate close of connection without even reading the request. Use to simulate buggy SSL servers closing connections in response to unrecognized TLS extensions. DISCONNECT_AFTER_REQUEST Close connection after reading the request but before writing the response. Use this to simulate late connection pool failures. DISCONNECT_DURING_REQUEST_BODY Close connection after reading half of the request body (if present). DISCONNECT_DURING_RESPONSE_BODY Close connection after writing half of the response body (if present). DO_NOT_READ_REQUEST_BODY Process the response without even attempting to reading the request body. For HTTP/2 this will send MockResponse.getHttp2ErrorCode after the response body or trailers. For HTTP/1 this will close the socket after the response body or trailers. FAIL_HANDSHAKE Don\u2019t trust the client during the SSL handshake. SHUTDOWN_INPUT_AT_END Shutdown the socket input after sending the response. For testing bad behavior. SHUTDOWN_OUTPUT_AT_END Shutdown the socket output after sending the response. For testing bad behavior. STALL_SOCKET_AT_START After accepting the connection and doing TLS (if configured) don\u2019t do HTTP/1.1 or HTTP/2 framing. Ignore the socket completely until the server is shut down. NO_RESPONSE Read the request but don\u2019t respond to it. Just keep the socket open. For testing read response header timeout issue. RESET_STREAM_AT_START Fail HTTP/2 requests without processing them by sending an MockResponse.getHttp2ErrorCode . EXPECT_CONTINUE Transmit a HTTP/1.1 100 Continue response before reading the HTTP request body. Typically this response is sent when a client makes a request with the header Expect: 100-continue . CONTINUE_ALWAYS Transmit a HTTP/1.1 100 Continue response before reading the HTTP request body even if the client does not send the header Expect: 100-continue in its request.","title":"Enum Values"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-c-o-n-t-i-n-u-e_-a-l-w-a-y-s/","text":"mockwebserver / mockwebserver3 / SocketPolicy / CONTINUE_ALWAYS CONTINUE_ALWAYS \u00b6 CONTINUE_ALWAYS Transmit a HTTP/1.1 100 Continue response before reading the HTTP request body even if the client does not send the header Expect: 100-continue in its request.","title":"CONTINUE_ALWAYS - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-c-o-n-t-i-n-u-e_-a-l-w-a-y-s/#continue_always","text":"CONTINUE_ALWAYS Transmit a HTTP/1.1 100 Continue response before reading the HTTP request body even if the client does not send the header Expect: 100-continue in its request.","title":"CONTINUE_ALWAYS"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-d-i-s-c-o-n-n-e-c-t_-a-f-t-e-r_-r-e-q-u-e-s-t/","text":"mockwebserver / mockwebserver3 / SocketPolicy / DISCONNECT_AFTER_REQUEST DISCONNECT_AFTER_REQUEST \u00b6 DISCONNECT_AFTER_REQUEST Close connection after reading the request but before writing the response. Use this to simulate late connection pool failures.","title":"DISCONNECT_AFTER_REQUEST - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-d-i-s-c-o-n-n-e-c-t_-a-f-t-e-r_-r-e-q-u-e-s-t/#disconnect_after_request","text":"DISCONNECT_AFTER_REQUEST Close connection after reading the request but before writing the response. Use this to simulate late connection pool failures.","title":"DISCONNECT_AFTER_REQUEST"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-d-i-s-c-o-n-n-e-c-t_-a-t_-e-n-d/","text":"mockwebserver / mockwebserver3 / SocketPolicy / DISCONNECT_AT_END DISCONNECT_AT_END \u00b6 DISCONNECT_AT_END Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2 connections, this sends a GOAWAYframe immediately after the response and will close the connection when the client\u2019s socket is exhausted. See SocketPolicy for reasons why this can cause test flakiness and how to avoid it.","title":"DISCONNECT_AT_END - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-d-i-s-c-o-n-n-e-c-t_-a-t_-e-n-d/#disconnect_at_end","text":"DISCONNECT_AT_END Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2 connections, this sends a GOAWAYframe immediately after the response and will close the connection when the client\u2019s socket is exhausted. See SocketPolicy for reasons why this can cause test flakiness and how to avoid it.","title":"DISCONNECT_AT_END"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-d-i-s-c-o-n-n-e-c-t_-a-t_-s-t-a-r-t/","text":"mockwebserver / mockwebserver3 / SocketPolicy / DISCONNECT_AT_START DISCONNECT_AT_START \u00b6 DISCONNECT_AT_START Request immediate close of connection without even reading the request. Use to simulate buggy SSL servers closing connections in response to unrecognized TLS extensions.","title":"DISCONNECT_AT_START - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-d-i-s-c-o-n-n-e-c-t_-a-t_-s-t-a-r-t/#disconnect_at_start","text":"DISCONNECT_AT_START Request immediate close of connection without even reading the request. Use to simulate buggy SSL servers closing connections in response to unrecognized TLS extensions.","title":"DISCONNECT_AT_START"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-d-i-s-c-o-n-n-e-c-t_-d-u-r-i-n-g_-r-e-q-u-e-s-t_-b-o-d-y/","text":"mockwebserver / mockwebserver3 / SocketPolicy / DISCONNECT_DURING_REQUEST_BODY DISCONNECT_DURING_REQUEST_BODY \u00b6 DISCONNECT_DURING_REQUEST_BODY Close connection after reading half of the request body (if present).","title":"DISCONNECT_DURING_REQUEST_BODY - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-d-i-s-c-o-n-n-e-c-t_-d-u-r-i-n-g_-r-e-q-u-e-s-t_-b-o-d-y/#disconnect_during_request_body","text":"DISCONNECT_DURING_REQUEST_BODY Close connection after reading half of the request body (if present).","title":"DISCONNECT_DURING_REQUEST_BODY"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-d-i-s-c-o-n-n-e-c-t_-d-u-r-i-n-g_-r-e-s-p-o-n-s-e_-b-o-d-y/","text":"mockwebserver / mockwebserver3 / SocketPolicy / DISCONNECT_DURING_RESPONSE_BODY DISCONNECT_DURING_RESPONSE_BODY \u00b6 DISCONNECT_DURING_RESPONSE_BODY Close connection after writing half of the response body (if present).","title":"DISCONNECT_DURING_RESPONSE_BODY - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-d-i-s-c-o-n-n-e-c-t_-d-u-r-i-n-g_-r-e-s-p-o-n-s-e_-b-o-d-y/#disconnect_during_response_body","text":"DISCONNECT_DURING_RESPONSE_BODY Close connection after writing half of the response body (if present).","title":"DISCONNECT_DURING_RESPONSE_BODY"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-d-o_-n-o-t_-r-e-a-d_-r-e-q-u-e-s-t_-b-o-d-y/","text":"mockwebserver / mockwebserver3 / SocketPolicy / DO_NOT_READ_REQUEST_BODY DO_NOT_READ_REQUEST_BODY \u00b6 DO_NOT_READ_REQUEST_BODY Process the response without even attempting to reading the request body. For HTTP/2 this will send MockResponse.getHttp2ErrorCode after the response body or trailers. For HTTP/1 this will close the socket after the response body or trailers.","title":"DO_NOT_READ_REQUEST_BODY - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-d-o_-n-o-t_-r-e-a-d_-r-e-q-u-e-s-t_-b-o-d-y/#do_not_read_request_body","text":"DO_NOT_READ_REQUEST_BODY Process the response without even attempting to reading the request body. For HTTP/2 this will send MockResponse.getHttp2ErrorCode after the response body or trailers. For HTTP/1 this will close the socket after the response body or trailers.","title":"DO_NOT_READ_REQUEST_BODY"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-e-x-p-e-c-t_-c-o-n-t-i-n-u-e/","text":"mockwebserver / mockwebserver3 / SocketPolicy / EXPECT_CONTINUE EXPECT_CONTINUE \u00b6 EXPECT_CONTINUE Transmit a HTTP/1.1 100 Continue response before reading the HTTP request body. Typically this response is sent when a client makes a request with the header Expect: 100-continue .","title":"EXPECT_CONTINUE - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-e-x-p-e-c-t_-c-o-n-t-i-n-u-e/#expect_continue","text":"EXPECT_CONTINUE Transmit a HTTP/1.1 100 Continue response before reading the HTTP request body. Typically this response is sent when a client makes a request with the header Expect: 100-continue .","title":"EXPECT_CONTINUE"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-f-a-i-l_-h-a-n-d-s-h-a-k-e/","text":"mockwebserver / mockwebserver3 / SocketPolicy / FAIL_HANDSHAKE FAIL_HANDSHAKE \u00b6 FAIL_HANDSHAKE Don\u2019t trust the client during the SSL handshake.","title":"FAIL_HANDSHAKE - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-f-a-i-l_-h-a-n-d-s-h-a-k-e/#fail_handshake","text":"FAIL_HANDSHAKE Don\u2019t trust the client during the SSL handshake.","title":"FAIL_HANDSHAKE"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-k-e-e-p_-o-p-e-n/","text":"mockwebserver / mockwebserver3 / SocketPolicy / KEEP_OPEN KEEP_OPEN \u00b6 KEEP_OPEN Keep the socket open after the response. This is the default HTTP/1.1 behavior.","title":"KEEP_OPEN - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-k-e-e-p_-o-p-e-n/#keep_open","text":"KEEP_OPEN Keep the socket open after the response. This is the default HTTP/1.1 behavior.","title":"KEEP_OPEN"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-n-o_-r-e-s-p-o-n-s-e/","text":"mockwebserver / mockwebserver3 / SocketPolicy / NO_RESPONSE NO_RESPONSE \u00b6 NO_RESPONSE Read the request but don\u2019t respond to it. Just keep the socket open. For testing read response header timeout issue.","title":"NO_RESPONSE - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-n-o_-r-e-s-p-o-n-s-e/#no_response","text":"NO_RESPONSE Read the request but don\u2019t respond to it. Just keep the socket open. For testing read response header timeout issue.","title":"NO_RESPONSE"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-r-e-s-e-t_-s-t-r-e-a-m_-a-t_-s-t-a-r-t/","text":"mockwebserver / mockwebserver3 / SocketPolicy / RESET_STREAM_AT_START RESET_STREAM_AT_START \u00b6 RESET_STREAM_AT_START Fail HTTP/2 requests without processing them by sending an MockResponse.getHttp2ErrorCode .","title":"RESET_STREAM_AT_START - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-r-e-s-e-t_-s-t-r-e-a-m_-a-t_-s-t-a-r-t/#reset_stream_at_start","text":"RESET_STREAM_AT_START Fail HTTP/2 requests without processing them by sending an MockResponse.getHttp2ErrorCode .","title":"RESET_STREAM_AT_START"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-s-h-u-t-d-o-w-n_-i-n-p-u-t_-a-t_-e-n-d/","text":"mockwebserver / mockwebserver3 / SocketPolicy / SHUTDOWN_INPUT_AT_END SHUTDOWN_INPUT_AT_END \u00b6 SHUTDOWN_INPUT_AT_END Shutdown the socket input after sending the response. For testing bad behavior. See SocketPolicy for reasons why this can cause test flakiness and how to avoid it.","title":"SHUTDOWN_INPUT_AT_END - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-s-h-u-t-d-o-w-n_-i-n-p-u-t_-a-t_-e-n-d/#shutdown_input_at_end","text":"SHUTDOWN_INPUT_AT_END Shutdown the socket input after sending the response. For testing bad behavior. See SocketPolicy for reasons why this can cause test flakiness and how to avoid it.","title":"SHUTDOWN_INPUT_AT_END"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-s-h-u-t-d-o-w-n_-o-u-t-p-u-t_-a-t_-e-n-d/","text":"mockwebserver / mockwebserver3 / SocketPolicy / SHUTDOWN_OUTPUT_AT_END SHUTDOWN_OUTPUT_AT_END \u00b6 SHUTDOWN_OUTPUT_AT_END Shutdown the socket output after sending the response. For testing bad behavior. See SocketPolicy for reasons why this can cause test flakiness and how to avoid it.","title":"SHUTDOWN_OUTPUT_AT_END - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-s-h-u-t-d-o-w-n_-o-u-t-p-u-t_-a-t_-e-n-d/#shutdown_output_at_end","text":"SHUTDOWN_OUTPUT_AT_END Shutdown the socket output after sending the response. For testing bad behavior. See SocketPolicy for reasons why this can cause test flakiness and how to avoid it.","title":"SHUTDOWN_OUTPUT_AT_END"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-s-h-u-t-d-o-w-n_-s-e-r-v-e-r_-a-f-t-e-r_-r-e-s-p-o-n-s-e/","text":"mockwebserver / mockwebserver3 / SocketPolicy / SHUTDOWN_SERVER_AFTER_RESPONSE SHUTDOWN_SERVER_AFTER_RESPONSE \u00b6 SHUTDOWN_SERVER_AFTER_RESPONSE Shutdown MockWebServer after writing response.","title":"SHUTDOWN_SERVER_AFTER_RESPONSE - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-s-h-u-t-d-o-w-n_-s-e-r-v-e-r_-a-f-t-e-r_-r-e-s-p-o-n-s-e/#shutdown_server_after_response","text":"SHUTDOWN_SERVER_AFTER_RESPONSE Shutdown MockWebServer after writing response.","title":"SHUTDOWN_SERVER_AFTER_RESPONSE"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-s-t-a-l-l_-s-o-c-k-e-t_-a-t_-s-t-a-r-t/","text":"mockwebserver / mockwebserver3 / SocketPolicy / STALL_SOCKET_AT_START STALL_SOCKET_AT_START \u00b6 STALL_SOCKET_AT_START After accepting the connection and doing TLS (if configured) don\u2019t do HTTP/1.1 or HTTP/2 framing. Ignore the socket completely until the server is shut down.","title":"STALL_SOCKET_AT_START - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-s-t-a-l-l_-s-o-c-k-e-t_-a-t_-s-t-a-r-t/#stall_socket_at_start","text":"STALL_SOCKET_AT_START After accepting the connection and doing TLS (if configured) don\u2019t do HTTP/1.1 or HTTP/2 framing. Ignore the socket completely until the server is shut down.","title":"STALL_SOCKET_AT_START"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-u-p-g-r-a-d-e_-t-o_-s-s-l_-a-t_-e-n-d/","text":"mockwebserver / mockwebserver3 / SocketPolicy / UPGRADE_TO_SSL_AT_END UPGRADE_TO_SSL_AT_END \u00b6 UPGRADE_TO_SSL_AT_END Wrap the socket with SSL at the completion of this request/response pair. Used for CONNECT messages to tunnel SSL over an HTTP proxy.","title":"UPGRADE_TO_SSL_AT_END - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3/-socket-policy/-u-p-g-r-a-d-e_-t-o_-s-s-l_-a-t_-e-n-d/#upgrade_to_ssl_at_end","text":"UPGRADE_TO_SSL_AT_END Wrap the socket with SSL at the completion of this request/response pair. Used for CONNECT messages to tunnel SSL over an HTTP proxy.","title":"UPGRADE_TO_SSL_AT_END"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/","text":"mockwebserver / mockwebserver3.internal.duplex Package mockwebserver3.internal.duplex \u00b6 Types \u00b6 Name Summary DuplexResponseBody interface DuplexResponseBody MockDuplexResponseBody A scriptable request/response conversation. Create the script by calling methods like receiveRequest in the sequence they are run. class MockDuplexResponseBody : DuplexResponseBody","title":"Package mockwebserver3.internal.duplex - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/#package-mockwebserver3internalduplex","text":"","title":"Package mockwebserver3.internal.duplex"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/#types","text":"Name Summary DuplexResponseBody interface DuplexResponseBody MockDuplexResponseBody A scriptable request/response conversation. Create the script by calling methods like receiveRequest in the sequence they are run. class MockDuplexResponseBody : DuplexResponseBody","title":"Types"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-duplex-response-body/","text":"mockwebserver / mockwebserver3.internal.duplex / DuplexResponseBody DuplexResponseBody \u00b6 interface DuplexResponseBody Functions \u00b6 Name Summary onRequest abstract fun onRequest(request: RecordedRequest , http2Stream: Http2Stream): Unit Inheritors \u00b6 Name Summary MockDuplexResponseBody A scriptable request/response conversation. Create the script by calling methods like receiveRequest in the sequence they are run. class MockDuplexResponseBody : DuplexResponseBody","title":"DuplexResponseBody - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-duplex-response-body/#duplexresponsebody","text":"interface DuplexResponseBody","title":"DuplexResponseBody"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-duplex-response-body/#functions","text":"Name Summary onRequest abstract fun onRequest(request: RecordedRequest , http2Stream: Http2Stream): Unit","title":"Functions"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-duplex-response-body/#inheritors","text":"Name Summary MockDuplexResponseBody A scriptable request/response conversation. Create the script by calling methods like receiveRequest in the sequence they are run. class MockDuplexResponseBody : DuplexResponseBody","title":"Inheritors"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-duplex-response-body/on-request/","text":"mockwebserver / mockwebserver3.internal.duplex / DuplexResponseBody / onRequest onRequest \u00b6 abstract fun onRequest(request: RecordedRequest , http2Stream: Http2Stream): Unit","title":"onRequest - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-duplex-response-body/on-request/#onrequest","text":"abstract fun onRequest(request: RecordedRequest , http2Stream: Http2Stream): Unit","title":"onRequest"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/","text":"mockwebserver / mockwebserver3.internal.duplex / MockDuplexResponseBody MockDuplexResponseBody \u00b6 class MockDuplexResponseBody : DuplexResponseBody A scriptable request/response conversation. Create the script by calling methods like receiveRequest in the sequence they are run. Constructors \u00b6 Name Summary <init> A scriptable request/response conversation. Create the script by calling methods like receiveRequest in the sequence they are run. MockDuplexResponseBody() Functions \u00b6 Name Summary awaitSuccess Returns once the duplex conversation completes successfully. fun awaitSuccess(): Unit cancelStream fun cancelStream(errorCode: ErrorCode): MockDuplexResponseBody exhaustRequest fun exhaustRequest(): MockDuplexResponseBody exhaustResponse fun exhaustResponse(): MockDuplexResponseBody onRequest fun onRequest(request: RecordedRequest , http2Stream: Http2Stream): Unit receiveRequest fun receiveRequest(expected: String ): MockDuplexResponseBody requestIOException fun requestIOException(): MockDuplexResponseBody sendResponse fun sendResponse(s: String , responseSent: CountDownLatch = CountDownLatch(0)): MockDuplexResponseBody sleep fun sleep(duration: Long , unit: TimeUnit ): MockDuplexResponseBody","title":"MockDuplexResponseBody - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/#mockduplexresponsebody","text":"class MockDuplexResponseBody : DuplexResponseBody A scriptable request/response conversation. Create the script by calling methods like receiveRequest in the sequence they are run.","title":"MockDuplexResponseBody"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/#constructors","text":"Name Summary <init> A scriptable request/response conversation. Create the script by calling methods like receiveRequest in the sequence they are run. MockDuplexResponseBody()","title":"Constructors"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/#functions","text":"Name Summary awaitSuccess Returns once the duplex conversation completes successfully. fun awaitSuccess(): Unit cancelStream fun cancelStream(errorCode: ErrorCode): MockDuplexResponseBody exhaustRequest fun exhaustRequest(): MockDuplexResponseBody exhaustResponse fun exhaustResponse(): MockDuplexResponseBody onRequest fun onRequest(request: RecordedRequest , http2Stream: Http2Stream): Unit receiveRequest fun receiveRequest(expected: String ): MockDuplexResponseBody requestIOException fun requestIOException(): MockDuplexResponseBody sendResponse fun sendResponse(s: String , responseSent: CountDownLatch = CountDownLatch(0)): MockDuplexResponseBody sleep fun sleep(duration: Long , unit: TimeUnit ): MockDuplexResponseBody","title":"Functions"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/-init-/","text":"mockwebserver / mockwebserver3.internal.duplex / MockDuplexResponseBody / <init> <init> \u00b6 MockDuplexResponseBody() A scriptable request/response conversation. Create the script by calling methods like receiveRequest in the sequence they are run.","title":" init "},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/-init-/#init","text":"MockDuplexResponseBody() A scriptable request/response conversation. Create the script by calling methods like receiveRequest in the sequence they are run.","title":"&lt;init&gt;"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/await-success/","text":"mockwebserver / mockwebserver3.internal.duplex / MockDuplexResponseBody / awaitSuccess awaitSuccess \u00b6 fun awaitSuccess(): Unit Returns once the duplex conversation completes successfully.","title":"awaitSuccess - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/await-success/#awaitsuccess","text":"fun awaitSuccess(): Unit Returns once the duplex conversation completes successfully.","title":"awaitSuccess"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/cancel-stream/","text":"mockwebserver / mockwebserver3.internal.duplex / MockDuplexResponseBody / cancelStream cancelStream \u00b6 fun cancelStream(errorCode: ErrorCode): MockDuplexResponseBody","title":"cancelStream - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/cancel-stream/#cancelstream","text":"fun cancelStream(errorCode: ErrorCode): MockDuplexResponseBody","title":"cancelStream"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/exhaust-request/","text":"mockwebserver / mockwebserver3.internal.duplex / MockDuplexResponseBody / exhaustRequest exhaustRequest \u00b6 fun exhaustRequest(): MockDuplexResponseBody","title":"exhaustRequest - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/exhaust-request/#exhaustrequest","text":"fun exhaustRequest(): MockDuplexResponseBody","title":"exhaustRequest"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/exhaust-response/","text":"mockwebserver / mockwebserver3.internal.duplex / MockDuplexResponseBody / exhaustResponse exhaustResponse \u00b6 fun exhaustResponse(): MockDuplexResponseBody","title":"exhaustResponse - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/exhaust-response/#exhaustresponse","text":"fun exhaustResponse(): MockDuplexResponseBody","title":"exhaustResponse"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/on-request/","text":"mockwebserver / mockwebserver3.internal.duplex / MockDuplexResponseBody / onRequest onRequest \u00b6 fun onRequest(request: RecordedRequest , http2Stream: Http2Stream): Unit","title":"onRequest - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/on-request/#onrequest","text":"fun onRequest(request: RecordedRequest , http2Stream: Http2Stream): Unit","title":"onRequest"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/receive-request/","text":"mockwebserver / mockwebserver3.internal.duplex / MockDuplexResponseBody / receiveRequest receiveRequest \u00b6 fun receiveRequest(expected: String ): MockDuplexResponseBody","title":"receiveRequest - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/receive-request/#receiverequest","text":"fun receiveRequest(expected: String ): MockDuplexResponseBody","title":"receiveRequest"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/request-i-o-exception/","text":"mockwebserver / mockwebserver3.internal.duplex / MockDuplexResponseBody / requestIOException requestIOException \u00b6 fun requestIOException(): MockDuplexResponseBody","title":"requestIOException - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/request-i-o-exception/#requestioexception","text":"fun requestIOException(): MockDuplexResponseBody","title":"requestIOException"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/send-response/","text":"mockwebserver / mockwebserver3.internal.duplex / MockDuplexResponseBody / sendResponse sendResponse \u00b6 @JvmOverloads fun sendResponse(s: String , responseSent: CountDownLatch = CountDownLatch(0)): MockDuplexResponseBody","title":"sendResponse - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/send-response/#sendresponse","text":"@JvmOverloads fun sendResponse(s: String , responseSent: CountDownLatch = CountDownLatch(0)): MockDuplexResponseBody","title":"sendResponse"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/sleep/","text":"mockwebserver / mockwebserver3.internal.duplex / MockDuplexResponseBody / sleep sleep \u00b6 fun sleep(duration: Long , unit: TimeUnit ): MockDuplexResponseBody","title":"sleep - OkHttp"},{"location":"4.x/mockwebserver/mockwebserver3.internal.duplex/-mock-duplex-response-body/sleep/#sleep","text":"fun sleep(duration: Long , unit: TimeUnit ): MockDuplexResponseBody","title":"sleep"},{"location":"4.x/okhttp/","text":"okhttp An HTTP+HTTP/2 client for Android and Java applications. Packages \u00b6 Name Summary okhttp3 Index \u00b6 All Types","title":"Packages - OkHttp"},{"location":"4.x/okhttp/#packages","text":"Name Summary okhttp3","title":"Packages"},{"location":"4.x/okhttp/#index","text":"All Types","title":"Index"},{"location":"4.x/okhttp/alltypes/","text":"An HTTP+HTTP/2 client for Android and Java applications. All Types \u00b6 Name Summary okhttp3.Address \u00b6 A specification for a connection to an origin server. For simple connections, this is the server\u2019s hostname and port. If an explicit proxy is requested (or no proxy is explicitly requested), this also includes that proxy information. For secure connections the address also includes the SSL socket factory, hostname verifier, and certificate pinner. | okhttp3.Authenticator \u00b6 | okhttp3.Cache \u00b6 Caches HTTP and HTTPS responses to the filesystem so they may be reused, saving time and bandwidth. | okhttp3.CacheControl \u00b6 A Cache-Control header with cache directives from a server or client. These directives set policy on what responses can be stored, and which requests can be satisfied by those stored responses. | okhttp3.Call \u00b6 A call is a request that has been prepared for execution. A call can be canceled. As this object represents a single request/response pair (stream), it cannot be executed twice. | okhttp3.Callback \u00b6 | okhttp3.CertificatePinner \u00b6 Constrains which certificates are trusted. Pinning certificates defends against attacks on certificate authorities. It also prevents connections through man-in-the-middle certificate authorities either known or unknown to the application\u2019s user. This class currently pins a certificate\u2019s Subject Public Key Info as described on Adam Langley\u2019s Weblog . Pins are either base64 SHA-256 hashes as in HTTP Public Key Pinning (HPKP) or SHA-1 base64 hashes as in Chromium\u2019s static certificates . | okhttp3.Challenge \u00b6 An RFC 7235 challenge. | okhttp3.CipherSuite \u00b6 TLS cipher suites . | okhttp3.Connection \u00b6 The sockets and streams of an HTTP, HTTPS, or HTTPS+HTTP/2 connection. May be used for multiple HTTP request/response exchanges. Connections may be direct to the origin server or via a proxy. | okhttp3.ConnectionPool \u00b6 Manages reuse of HTTP and HTTP/2 connections for reduced network latency. HTTP requests that share the same Address may share a Connection . This class implements the policy of which connections to keep open for future use. | okhttp3.ConnectionSpec \u00b6 Specifies configuration for the socket connection that HTTP traffic travels through. For https: URLs, this includes the TLS version and cipher suites to use when negotiating a secure connection. | okhttp3.Cookie \u00b6 An RFC 6265 Cookie. | okhttp3.CookieJar \u00b6 Provides policy and persistence for HTTP cookies. | okhttp3.Credentials \u00b6 Factory for HTTP authorization credentials. | okhttp3.Dispatcher \u00b6 Policy on when async requests are executed. | okhttp3.Dns \u00b6 A domain name service that resolves IP addresses for host names. Most applications will use the system DNS service , which is the default. Some applications may provide their own implementation to use a different DNS server, to prefer IPv6 addresses, to prefer IPv4 addresses, or to force a specific known IP address. | okhttp3.EventListener \u00b6 Listener for metrics events. Extend this class to monitor the quantity, size, and duration of your application\u2019s HTTP calls. | okhttp3.FormBody \u00b6 | okhttp3.Handshake \u00b6 A record of a TLS handshake. For HTTPS clients, the client is local and the remote server is its peer . | okhttp3.Headers \u00b6 The header fields of a single HTTP message. Values are uninterpreted strings; use Request and Response for interpreted headers. This class maintains the order of the header fields within the HTTP message. | okhttp3.HttpUrl \u00b6 A uniform resource locator (URL) with a scheme of either http or https . Use this class to compose and decompose Internet addresses. For example, this code will compose and print a URL for Google search: | okhttp3.Interceptor \u00b6 | okhttp3.MediaType \u00b6 An RFC 2045 Media Type, appropriate to describe the content type of an HTTP request or response body. | okhttp3.MultipartBody \u00b6 An RFC 2387 -compliant request body. | okhttp3.MultipartReader \u00b6 Reads a stream of RFC 2046 multipart body parts. Callers read parts one-at-a-time until nextPart returns null. After calling nextPart any preceding parts should not be read. | okhttp3.OkHttp \u00b6 | okhttp3.OkHttpClient \u00b6 Factory for calls , which can be used to send HTTP requests and read their responses. | okhttp3.Protocol \u00b6 Protocols that OkHttp implements for ALPN selection. | okhttp3.Request \u00b6 An HTTP request. Instances of this class are immutable if their body is null or itself immutable. | okhttp3.RequestBody \u00b6 | okhttp3.Response \u00b6 An HTTP response. Instances of this class are not immutable: the response body is a one-shot value that may be consumed only once and then closed. All other properties are immutable. | okhttp3.ResponseBody \u00b6 A one-shot stream from the origin server to the client application with the raw bytes of the response body. Each response body is supported by an active connection to the webserver. This imposes both obligations and limits on the client application. | okhttp3.Route \u00b6 The concrete route used by a connection to reach an abstract origin server. When creating a connection the client has many options: | okhttp3.TlsVersion \u00b6 Versions of TLS that can be offered when negotiating a secure socket. See javax.net.ssl.SSLSocket.setEnabledProtocols . | okhttp3.WebSocket \u00b6 A non-blocking interface to a web socket. Use the factory to create instances; usually this is OkHttpClient . | okhttp3.WebSocketListener \u00b6","title":"All Types - OkHttp"},{"location":"4.x/okhttp/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"4.x/okhttp/alltypes/#okhttp3address","text":"A specification for a connection to an origin server. For simple connections, this is the server\u2019s hostname and port. If an explicit proxy is requested (or no proxy is explicitly requested), this also includes that proxy information. For secure connections the address also includes the SSL socket factory, hostname verifier, and certificate pinner. |","title":"okhttp3.Address"},{"location":"4.x/okhttp/alltypes/#okhttp3authenticator","text":"|","title":"okhttp3.Authenticator"},{"location":"4.x/okhttp/alltypes/#okhttp3cache","text":"Caches HTTP and HTTPS responses to the filesystem so they may be reused, saving time and bandwidth. |","title":"okhttp3.Cache"},{"location":"4.x/okhttp/alltypes/#okhttp3cachecontrol","text":"A Cache-Control header with cache directives from a server or client. These directives set policy on what responses can be stored, and which requests can be satisfied by those stored responses. |","title":"okhttp3.CacheControl"},{"location":"4.x/okhttp/alltypes/#okhttp3call","text":"A call is a request that has been prepared for execution. A call can be canceled. As this object represents a single request/response pair (stream), it cannot be executed twice. |","title":"okhttp3.Call"},{"location":"4.x/okhttp/alltypes/#okhttp3callback","text":"|","title":"okhttp3.Callback"},{"location":"4.x/okhttp/alltypes/#okhttp3certificatepinner","text":"Constrains which certificates are trusted. Pinning certificates defends against attacks on certificate authorities. It also prevents connections through man-in-the-middle certificate authorities either known or unknown to the application\u2019s user. This class currently pins a certificate\u2019s Subject Public Key Info as described on Adam Langley\u2019s Weblog . Pins are either base64 SHA-256 hashes as in HTTP Public Key Pinning (HPKP) or SHA-1 base64 hashes as in Chromium\u2019s static certificates . |","title":"okhttp3.CertificatePinner"},{"location":"4.x/okhttp/alltypes/#okhttp3challenge","text":"An RFC 7235 challenge. |","title":"okhttp3.Challenge"},{"location":"4.x/okhttp/alltypes/#okhttp3ciphersuite","text":"TLS cipher suites . |","title":"okhttp3.CipherSuite"},{"location":"4.x/okhttp/alltypes/#okhttp3connection","text":"The sockets and streams of an HTTP, HTTPS, or HTTPS+HTTP/2 connection. May be used for multiple HTTP request/response exchanges. Connections may be direct to the origin server or via a proxy. |","title":"okhttp3.Connection"},{"location":"4.x/okhttp/alltypes/#okhttp3connectionpool","text":"Manages reuse of HTTP and HTTP/2 connections for reduced network latency. HTTP requests that share the same Address may share a Connection . This class implements the policy of which connections to keep open for future use. |","title":"okhttp3.ConnectionPool"},{"location":"4.x/okhttp/alltypes/#okhttp3connectionspec","text":"Specifies configuration for the socket connection that HTTP traffic travels through. For https: URLs, this includes the TLS version and cipher suites to use when negotiating a secure connection. |","title":"okhttp3.ConnectionSpec"},{"location":"4.x/okhttp/alltypes/#okhttp3cookie","text":"An RFC 6265 Cookie. |","title":"okhttp3.Cookie"},{"location":"4.x/okhttp/alltypes/#okhttp3cookiejar","text":"Provides policy and persistence for HTTP cookies. |","title":"okhttp3.CookieJar"},{"location":"4.x/okhttp/alltypes/#okhttp3credentials","text":"Factory for HTTP authorization credentials. |","title":"okhttp3.Credentials"},{"location":"4.x/okhttp/alltypes/#okhttp3dispatcher","text":"Policy on when async requests are executed. |","title":"okhttp3.Dispatcher"},{"location":"4.x/okhttp/alltypes/#okhttp3dns","text":"A domain name service that resolves IP addresses for host names. Most applications will use the system DNS service , which is the default. Some applications may provide their own implementation to use a different DNS server, to prefer IPv6 addresses, to prefer IPv4 addresses, or to force a specific known IP address. |","title":"okhttp3.Dns"},{"location":"4.x/okhttp/alltypes/#okhttp3eventlistener","text":"Listener for metrics events. Extend this class to monitor the quantity, size, and duration of your application\u2019s HTTP calls. |","title":"okhttp3.EventListener"},{"location":"4.x/okhttp/alltypes/#okhttp3formbody","text":"|","title":"okhttp3.FormBody"},{"location":"4.x/okhttp/alltypes/#okhttp3handshake","text":"A record of a TLS handshake. For HTTPS clients, the client is local and the remote server is its peer . |","title":"okhttp3.Handshake"},{"location":"4.x/okhttp/alltypes/#okhttp3headers","text":"The header fields of a single HTTP message. Values are uninterpreted strings; use Request and Response for interpreted headers. This class maintains the order of the header fields within the HTTP message. |","title":"okhttp3.Headers"},{"location":"4.x/okhttp/alltypes/#okhttp3httpurl","text":"A uniform resource locator (URL) with a scheme of either http or https . Use this class to compose and decompose Internet addresses. For example, this code will compose and print a URL for Google search: |","title":"okhttp3.HttpUrl"},{"location":"4.x/okhttp/alltypes/#okhttp3interceptor","text":"|","title":"okhttp3.Interceptor"},{"location":"4.x/okhttp/alltypes/#okhttp3mediatype","text":"An RFC 2045 Media Type, appropriate to describe the content type of an HTTP request or response body. |","title":"okhttp3.MediaType"},{"location":"4.x/okhttp/alltypes/#okhttp3multipartbody","text":"An RFC 2387 -compliant request body. |","title":"okhttp3.MultipartBody"},{"location":"4.x/okhttp/alltypes/#okhttp3multipartreader","text":"Reads a stream of RFC 2046 multipart body parts. Callers read parts one-at-a-time until nextPart returns null. After calling nextPart any preceding parts should not be read. |","title":"okhttp3.MultipartReader"},{"location":"4.x/okhttp/alltypes/#okhttp3okhttp","text":"|","title":"okhttp3.OkHttp"},{"location":"4.x/okhttp/alltypes/#okhttp3okhttpclient","text":"Factory for calls , which can be used to send HTTP requests and read their responses. |","title":"okhttp3.OkHttpClient"},{"location":"4.x/okhttp/alltypes/#okhttp3protocol","text":"Protocols that OkHttp implements for ALPN selection. |","title":"okhttp3.Protocol"},{"location":"4.x/okhttp/alltypes/#okhttp3request","text":"An HTTP request. Instances of this class are immutable if their body is null or itself immutable. |","title":"okhttp3.Request"},{"location":"4.x/okhttp/alltypes/#okhttp3requestbody","text":"|","title":"okhttp3.RequestBody"},{"location":"4.x/okhttp/alltypes/#okhttp3response","text":"An HTTP response. Instances of this class are not immutable: the response body is a one-shot value that may be consumed only once and then closed. All other properties are immutable. |","title":"okhttp3.Response"},{"location":"4.x/okhttp/alltypes/#okhttp3responsebody","text":"A one-shot stream from the origin server to the client application with the raw bytes of the response body. Each response body is supported by an active connection to the webserver. This imposes both obligations and limits on the client application. |","title":"okhttp3.ResponseBody"},{"location":"4.x/okhttp/alltypes/#okhttp3route","text":"The concrete route used by a connection to reach an abstract origin server. When creating a connection the client has many options: |","title":"okhttp3.Route"},{"location":"4.x/okhttp/alltypes/#okhttp3tlsversion","text":"Versions of TLS that can be offered when negotiating a secure socket. See javax.net.ssl.SSLSocket.setEnabledProtocols . |","title":"okhttp3.TlsVersion"},{"location":"4.x/okhttp/alltypes/#okhttp3websocket","text":"A non-blocking interface to a web socket. Use the factory to create instances; usually this is OkHttpClient . |","title":"okhttp3.WebSocket"},{"location":"4.x/okhttp/alltypes/#okhttp3websocketlistener","text":"","title":"okhttp3.WebSocketListener"},{"location":"4.x/okhttp/okhttp3/","text":"okhttp / okhttp3 Package okhttp3 \u00b6 Types \u00b6 Name Summary Address A specification for a connection to an origin server. For simple connections, this is the server\u2019s hostname and port. If an explicit proxy is requested (or no proxy is explicitly requested), this also includes that proxy information. For secure connections the address also includes the SSL socket factory, hostname verifier, and certificate pinner. class Address Authenticator interface Authenticator Cache Caches HTTP and HTTPS responses to the filesystem so they may be reused, saving time and bandwidth. class Cache : Closeable , Flushable CacheControl A Cache-Control header with cache directives from a server or client. These directives set policy on what responses can be stored, and which requests can be satisfied by those stored responses. class CacheControl Call A call is a request that has been prepared for execution. A call can be canceled. As this object represents a single request/response pair (stream), it cannot be executed twice. interface Call : Cloneable Callback interface Callback CertificatePinner Constrains which certificates are trusted. Pinning certificates defends against attacks on certificate authorities. It also prevents connections through man-in-the-middle certificate authorities either known or unknown to the application\u2019s user. This class currently pins a certificate\u2019s Subject Public Key Info as described on Adam Langley\u2019s Weblog . Pins are either base64 SHA-256 hashes as in HTTP Public Key Pinning (HPKP) or SHA-1 base64 hashes as in Chromium\u2019s static certificates . class CertificatePinner Challenge An RFC 7235 challenge. class Challenge CipherSuite TLS cipher suites . class CipherSuite Connection The sockets and streams of an HTTP, HTTPS, or HTTPS+HTTP/2 connection. May be used for multiple HTTP request/response exchanges. Connections may be direct to the origin server or via a proxy. interface Connection ConnectionPool Manages reuse of HTTP and HTTP/2 connections for reduced network latency. HTTP requests that share the same Address may share a Connection . This class implements the policy of which connections to keep open for future use. class ConnectionPool ConnectionSpec Specifies configuration for the socket connection that HTTP traffic travels through. For https: URLs, this includes the TLS version and cipher suites to use when negotiating a secure connection. class ConnectionSpec Cookie An RFC 6265 Cookie. class Cookie CookieJar Provides policy and persistence for HTTP cookies. interface CookieJar Credentials Factory for HTTP authorization credentials. object Credentials Dispatcher Policy on when async requests are executed. class Dispatcher Dns A domain name service that resolves IP addresses for host names. Most applications will use the system DNS service , which is the default. Some applications may provide their own implementation to use a different DNS server, to prefer IPv6 addresses, to prefer IPv4 addresses, or to force a specific known IP address. interface Dns EventListener Listener for metrics events. Extend this class to monitor the quantity, size, and duration of your application\u2019s HTTP calls. abstract class EventListener FormBody class FormBody : RequestBody Handshake A record of a TLS handshake. For HTTPS clients, the client is local and the remote server is its peer . class Handshake Headers The header fields of a single HTTP message. Values are uninterpreted strings; use Request and Response for interpreted headers. This class maintains the order of the header fields within the HTTP message. class Headers : Iterable < Pair < String , String >> HttpUrl A uniform resource locator (URL) with a scheme of either http or https . Use this class to compose and decompose Internet addresses. For example, this code will compose and print a URL for Google search: class HttpUrl Interceptor interface Interceptor MediaType An RFC 2045 Media Type, appropriate to describe the content type of an HTTP request or response body. class MediaType MultipartBody An RFC 2387 -compliant request body. class MultipartBody : RequestBody MultipartReader Reads a stream of RFC 2046 multipart body parts. Callers read parts one-at-a-time until nextPart returns null. After calling nextPart any preceding parts should not be read. class MultipartReader : Closeable OkHttp object OkHttp OkHttpClient Factory for calls , which can be used to send HTTP requests and read their responses. open class OkHttpClient : Cloneable , Factory, Factory Protocol Protocols that OkHttp implements for ALPN selection. enum class Protocol Request An HTTP request. Instances of this class are immutable if their body is null or itself immutable. class Request RequestBody abstract class RequestBody Response An HTTP response. Instances of this class are not immutable: the response body is a one-shot value that may be consumed only once and then closed. All other properties are immutable. class Response : Closeable ResponseBody A one-shot stream from the origin server to the client application with the raw bytes of the response body. Each response body is supported by an active connection to the webserver. This imposes both obligations and limits on the client application. abstract class ResponseBody : Closeable Route The concrete route used by a connection to reach an abstract origin server. When creating a connection the client has many options: class Route TlsVersion Versions of TLS that can be offered when negotiating a secure socket. See javax.net.ssl.SSLSocket.setEnabledProtocols . enum class TlsVersion WebSocket A non-blocking interface to a web socket. Use the factory to create instances; usually this is OkHttpClient . interface WebSocket WebSocketListener abstract class WebSocketListener Functions \u00b6 Name Summary <no name provided> Performs either preemptive authentication before connecting to a proxy server, or reactive authentication after receiving a challenge from either an origin web server or proxy server. fun <no name provided>(): Unit","title":"okhttp"},{"location":"4.x/okhttp/okhttp3/#package-okhttp3","text":"","title":"Package okhttp3"},{"location":"4.x/okhttp/okhttp3/#types","text":"Name Summary Address A specification for a connection to an origin server. For simple connections, this is the server\u2019s hostname and port. If an explicit proxy is requested (or no proxy is explicitly requested), this also includes that proxy information. For secure connections the address also includes the SSL socket factory, hostname verifier, and certificate pinner. class Address Authenticator interface Authenticator Cache Caches HTTP and HTTPS responses to the filesystem so they may be reused, saving time and bandwidth. class Cache : Closeable , Flushable CacheControl A Cache-Control header with cache directives from a server or client. These directives set policy on what responses can be stored, and which requests can be satisfied by those stored responses. class CacheControl Call A call is a request that has been prepared for execution. A call can be canceled. As this object represents a single request/response pair (stream), it cannot be executed twice. interface Call : Cloneable Callback interface Callback CertificatePinner Constrains which certificates are trusted. Pinning certificates defends against attacks on certificate authorities. It also prevents connections through man-in-the-middle certificate authorities either known or unknown to the application\u2019s user. This class currently pins a certificate\u2019s Subject Public Key Info as described on Adam Langley\u2019s Weblog . Pins are either base64 SHA-256 hashes as in HTTP Public Key Pinning (HPKP) or SHA-1 base64 hashes as in Chromium\u2019s static certificates . class CertificatePinner Challenge An RFC 7235 challenge. class Challenge CipherSuite TLS cipher suites . class CipherSuite Connection The sockets and streams of an HTTP, HTTPS, or HTTPS+HTTP/2 connection. May be used for multiple HTTP request/response exchanges. Connections may be direct to the origin server or via a proxy. interface Connection ConnectionPool Manages reuse of HTTP and HTTP/2 connections for reduced network latency. HTTP requests that share the same Address may share a Connection . This class implements the policy of which connections to keep open for future use. class ConnectionPool ConnectionSpec Specifies configuration for the socket connection that HTTP traffic travels through. For https: URLs, this includes the TLS version and cipher suites to use when negotiating a secure connection. class ConnectionSpec Cookie An RFC 6265 Cookie. class Cookie CookieJar Provides policy and persistence for HTTP cookies. interface CookieJar Credentials Factory for HTTP authorization credentials. object Credentials Dispatcher Policy on when async requests are executed. class Dispatcher Dns A domain name service that resolves IP addresses for host names. Most applications will use the system DNS service , which is the default. Some applications may provide their own implementation to use a different DNS server, to prefer IPv6 addresses, to prefer IPv4 addresses, or to force a specific known IP address. interface Dns EventListener Listener for metrics events. Extend this class to monitor the quantity, size, and duration of your application\u2019s HTTP calls. abstract class EventListener FormBody class FormBody : RequestBody Handshake A record of a TLS handshake. For HTTPS clients, the client is local and the remote server is its peer . class Handshake Headers The header fields of a single HTTP message. Values are uninterpreted strings; use Request and Response for interpreted headers. This class maintains the order of the header fields within the HTTP message. class Headers : Iterable < Pair < String , String >> HttpUrl A uniform resource locator (URL) with a scheme of either http or https . Use this class to compose and decompose Internet addresses. For example, this code will compose and print a URL for Google search: class HttpUrl Interceptor interface Interceptor MediaType An RFC 2045 Media Type, appropriate to describe the content type of an HTTP request or response body. class MediaType MultipartBody An RFC 2387 -compliant request body. class MultipartBody : RequestBody MultipartReader Reads a stream of RFC 2046 multipart body parts. Callers read parts one-at-a-time until nextPart returns null. After calling nextPart any preceding parts should not be read. class MultipartReader : Closeable OkHttp object OkHttp OkHttpClient Factory for calls , which can be used to send HTTP requests and read their responses. open class OkHttpClient : Cloneable , Factory, Factory Protocol Protocols that OkHttp implements for ALPN selection. enum class Protocol Request An HTTP request. Instances of this class are immutable if their body is null or itself immutable. class Request RequestBody abstract class RequestBody Response An HTTP response. Instances of this class are not immutable: the response body is a one-shot value that may be consumed only once and then closed. All other properties are immutable. class Response : Closeable ResponseBody A one-shot stream from the origin server to the client application with the raw bytes of the response body. Each response body is supported by an active connection to the webserver. This imposes both obligations and limits on the client application. abstract class ResponseBody : Closeable Route The concrete route used by a connection to reach an abstract origin server. When creating a connection the client has many options: class Route TlsVersion Versions of TLS that can be offered when negotiating a secure socket. See javax.net.ssl.SSLSocket.setEnabledProtocols . enum class TlsVersion WebSocket A non-blocking interface to a web socket. Use the factory to create instances; usually this is OkHttpClient . interface WebSocket WebSocketListener abstract class WebSocketListener","title":"Types"},{"location":"4.x/okhttp/okhttp3/#functions","text":"Name Summary <no name provided> Performs either preemptive authentication before connecting to a proxy server, or reactive authentication after receiving a challenge from either an origin web server or proxy server. fun <no name provided>(): Unit","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-no%20name%20provided-/","text":"okhttp / okhttp3 / <no name provided> <no name provided> \u00b6 fun <no name provided>(): Unit Performs either preemptive authentication before connecting to a proxy server, or reactive authentication after receiving a challenge from either an origin web server or proxy server. Preemptive Authentication \u00b6 To make HTTPS calls using an HTTP proxy server OkHttp must first negotiate a connection with the proxy. This proxy connection is called a \u201cTLS Tunnel\u201d and is specified by RFC 2817 . The HTTP CONNECT request that creates this tunnel connection is special: it does not participate in any interceptors or event listeners . It doesn\u2019t include the motivating request\u2019s HTTP headers or even its full URL; only the target server\u2019s hostname is sent to the proxy. Prior to sending any CONNECT request OkHttp always calls the proxy authenticator so that it may prepare preemptive authentication. OkHttp will call authenticate with a fake HTTP/1.1 407 Proxy Authentication Required response that has a Proxy-Authenticate: OkHttp-Preemptive challenge. The proxy authenticator may return either an authenticated request, or null to connect without authentication. for (Challenge challenge : response.challenges()) { // If this is preemptive auth, use a preemptive credential. if (challenge.scheme().equalsIgnoreCase(\"OkHttp-Preemptive\")) { return response.request().newBuilder() .header(\"Proxy-Authorization\", \"secret\") .build(); } } return null; // Didn't find a preemptive auth scheme. Reactive Authentication \u00b6 Implementations authenticate by returning a follow-up request that includes an authorization header, or they may decline the challenge by returning null. In this case the unauthenticated response will be returned to the caller that triggered it. Implementations should check if the initial request already included an attempt to authenticate. If so it is likely that further attempts will not be useful and the authenticator should give up. When reactive authentication is requested by an origin web server, the response code is 401 and the implementation should respond with a new request that sets the \u201cAuthorization\u201d header. if (response.request().header(\"Authorization\") != null) { return null; // Give up, we've already failed to authenticate. } String credential = Credentials.basic(...) return response.request().newBuilder() .header(\"Authorization\", credential) .build(); When reactive authentication is requested by a proxy server, the response code is 407 and the implementation should respond with a new request that sets the \u201cProxy-Authorization\u201d header. if (response.request().header(\"Proxy-Authorization\") != null) { return null; // Give up, we've already failed to authenticate. } String credential = Credentials.basic(...) return response.request().newBuilder() .header(\"Proxy-Authorization\", credential) .build(); The proxy authenticator may implement preemptive authentication, reactive authentication, or both. Applications may configure OkHttp with an authenticator for origin servers, or proxy servers, or both. Authentication Retries \u00b6 If your authentication may be flaky and requires retries you should apply some policy to limit the retries by the class of errors and number of attempts. To get the number of attempts to the current point use this function. private int responseCount(Response response) { int result = 1; while ((response = response.priorResponse()) != null) { result++; } return result; }","title":" no name provided "},{"location":"4.x/okhttp/okhttp3/-no%20name%20provided-/#no-name-provided","text":"fun <no name provided>(): Unit Performs either preemptive authentication before connecting to a proxy server, or reactive authentication after receiving a challenge from either an origin web server or proxy server.","title":"&lt;no name provided&gt;"},{"location":"4.x/okhttp/okhttp3/-no%20name%20provided-/#preemptive-authentication","text":"To make HTTPS calls using an HTTP proxy server OkHttp must first negotiate a connection with the proxy. This proxy connection is called a \u201cTLS Tunnel\u201d and is specified by RFC 2817 . The HTTP CONNECT request that creates this tunnel connection is special: it does not participate in any interceptors or event listeners . It doesn\u2019t include the motivating request\u2019s HTTP headers or even its full URL; only the target server\u2019s hostname is sent to the proxy. Prior to sending any CONNECT request OkHttp always calls the proxy authenticator so that it may prepare preemptive authentication. OkHttp will call authenticate with a fake HTTP/1.1 407 Proxy Authentication Required response that has a Proxy-Authenticate: OkHttp-Preemptive challenge. The proxy authenticator may return either an authenticated request, or null to connect without authentication. for (Challenge challenge : response.challenges()) { // If this is preemptive auth, use a preemptive credential. if (challenge.scheme().equalsIgnoreCase(\"OkHttp-Preemptive\")) { return response.request().newBuilder() .header(\"Proxy-Authorization\", \"secret\") .build(); } } return null; // Didn't find a preemptive auth scheme.","title":"Preemptive Authentication"},{"location":"4.x/okhttp/okhttp3/-no%20name%20provided-/#reactive-authentication","text":"Implementations authenticate by returning a follow-up request that includes an authorization header, or they may decline the challenge by returning null. In this case the unauthenticated response will be returned to the caller that triggered it. Implementations should check if the initial request already included an attempt to authenticate. If so it is likely that further attempts will not be useful and the authenticator should give up. When reactive authentication is requested by an origin web server, the response code is 401 and the implementation should respond with a new request that sets the \u201cAuthorization\u201d header. if (response.request().header(\"Authorization\") != null) { return null; // Give up, we've already failed to authenticate. } String credential = Credentials.basic(...) return response.request().newBuilder() .header(\"Authorization\", credential) .build(); When reactive authentication is requested by a proxy server, the response code is 407 and the implementation should respond with a new request that sets the \u201cProxy-Authorization\u201d header. if (response.request().header(\"Proxy-Authorization\") != null) { return null; // Give up, we've already failed to authenticate. } String credential = Credentials.basic(...) return response.request().newBuilder() .header(\"Proxy-Authorization\", credential) .build(); The proxy authenticator may implement preemptive authentication, reactive authentication, or both. Applications may configure OkHttp with an authenticator for origin servers, or proxy servers, or both.","title":"Reactive Authentication"},{"location":"4.x/okhttp/okhttp3/-no%20name%20provided-/#authentication-retries","text":"If your authentication may be flaky and requires retries you should apply some policy to limit the retries by the class of errors and number of attempts. To get the number of attempts to the current point use this function. private int responseCount(Response response) { int result = 1; while ((response = response.priorResponse()) != null) { result++; } return result; }","title":"Authentication Retries"},{"location":"4.x/okhttp/okhttp3/-address/","text":"okhttp / okhttp3 / Address Address \u00b6 class Address A specification for a connection to an origin server. For simple connections, this is the server\u2019s hostname and port. If an explicit proxy is requested (or no proxy is explicitly requested), this also includes that proxy information. For secure connections the address also includes the SSL socket factory, hostname verifier, and certificate pinner. HTTP requests that share the same Address may also share the same Connection . Constructors \u00b6 Name Summary <init> A specification for a connection to an origin server. For simple connections, this is the server\u2019s hostname and port. If an explicit proxy is requested (or no proxy is explicitly requested), this also includes that proxy information. For secure connections the address also includes the SSL socket factory, hostname verifier, and certificate pinner. Address(uriHost: String , uriPort: Int , dns: Dns , socketFactory: SocketFactory , sslSocketFactory: SSLSocketFactory ?, hostnameVerifier: HostnameVerifier ?, certificatePinner: CertificatePinner ?, proxyAuthenticator: Authenticator , proxy: Proxy ?, protocols: List < Protocol >, connectionSpecs: List < ConnectionSpec >, proxySelector: ProxySelector ) Properties \u00b6 Name Summary certificatePinner Returns this address\u2019s certificate pinner, or null if this is not an HTTPS address. val certificatePinner: CertificatePinner ? connectionSpecs val connectionSpecs: List < ConnectionSpec > dns Returns the service that will be used to resolve IP addresses for hostnames. val dns: Dns hostnameVerifier Returns the hostname verifier, or null if this is not an HTTPS address. val hostnameVerifier: HostnameVerifier ? protocols The protocols the client supports. This method always returns a non-null list that contains minimally Protocol.HTTP_1_1 . val protocols: List < Protocol > proxy Returns this address\u2019s explicitly-specified HTTP proxy, or null to delegate to the {@linkplain #proxySelector proxy selector}. val proxy: Proxy ? proxyAuthenticator Returns the client\u2019s proxy authenticator. val proxyAuthenticator: Authenticator proxySelector Returns this address\u2019s proxy selector. Only used if the proxy is null. If none of this selector\u2019s proxies are reachable, a direct connection will be attempted. val proxySelector: ProxySelector socketFactory Returns the socket factory for new connections. val socketFactory: SocketFactory sslSocketFactory Returns the SSL socket factory, or null if this is not an HTTPS address. val sslSocketFactory: SSLSocketFactory ? url Returns a URL with the hostname and port of the origin server. The path, query, and fragment of this URL are always empty, since they are not significant for planning a route. val url: HttpUrl Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String","title":"Address - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/#address","text":"class Address A specification for a connection to an origin server. For simple connections, this is the server\u2019s hostname and port. If an explicit proxy is requested (or no proxy is explicitly requested), this also includes that proxy information. For secure connections the address also includes the SSL socket factory, hostname verifier, and certificate pinner. HTTP requests that share the same Address may also share the same Connection .","title":"Address"},{"location":"4.x/okhttp/okhttp3/-address/#constructors","text":"Name Summary <init> A specification for a connection to an origin server. For simple connections, this is the server\u2019s hostname and port. If an explicit proxy is requested (or no proxy is explicitly requested), this also includes that proxy information. For secure connections the address also includes the SSL socket factory, hostname verifier, and certificate pinner. Address(uriHost: String , uriPort: Int , dns: Dns , socketFactory: SocketFactory , sslSocketFactory: SSLSocketFactory ?, hostnameVerifier: HostnameVerifier ?, certificatePinner: CertificatePinner ?, proxyAuthenticator: Authenticator , proxy: Proxy ?, protocols: List < Protocol >, connectionSpecs: List < ConnectionSpec >, proxySelector: ProxySelector )","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-address/#properties","text":"Name Summary certificatePinner Returns this address\u2019s certificate pinner, or null if this is not an HTTPS address. val certificatePinner: CertificatePinner ? connectionSpecs val connectionSpecs: List < ConnectionSpec > dns Returns the service that will be used to resolve IP addresses for hostnames. val dns: Dns hostnameVerifier Returns the hostname verifier, or null if this is not an HTTPS address. val hostnameVerifier: HostnameVerifier ? protocols The protocols the client supports. This method always returns a non-null list that contains minimally Protocol.HTTP_1_1 . val protocols: List < Protocol > proxy Returns this address\u2019s explicitly-specified HTTP proxy, or null to delegate to the {@linkplain #proxySelector proxy selector}. val proxy: Proxy ? proxyAuthenticator Returns the client\u2019s proxy authenticator. val proxyAuthenticator: Authenticator proxySelector Returns this address\u2019s proxy selector. Only used if the proxy is null. If none of this selector\u2019s proxies are reachable, a direct connection will be attempted. val proxySelector: ProxySelector socketFactory Returns the socket factory for new connections. val socketFactory: SocketFactory sslSocketFactory Returns the SSL socket factory, or null if this is not an HTTPS address. val sslSocketFactory: SSLSocketFactory ? url Returns a URL with the hostname and port of the origin server. The path, query, and fragment of this URL are always empty, since they are not significant for planning a route. val url: HttpUrl","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-address/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-address/-init-/","text":"okhttp / okhttp3 / Address / <init> <init> \u00b6 Address(uriHost: String , uriPort: Int , dns: Dns , socketFactory: SocketFactory , sslSocketFactory: SSLSocketFactory ?, hostnameVerifier: HostnameVerifier ?, certificatePinner: CertificatePinner ?, proxyAuthenticator: Authenticator , proxy: Proxy ?, protocols: List < Protocol >, connectionSpecs: List < ConnectionSpec >, proxySelector: ProxySelector ) A specification for a connection to an origin server. For simple connections, this is the server\u2019s hostname and port. If an explicit proxy is requested (or no proxy is explicitly requested), this also includes that proxy information. For secure connections the address also includes the SSL socket factory, hostname verifier, and certificate pinner. HTTP requests that share the same Address may also share the same Connection .","title":" init "},{"location":"4.x/okhttp/okhttp3/-address/-init-/#init","text":"Address(uriHost: String , uriPort: Int , dns: Dns , socketFactory: SocketFactory , sslSocketFactory: SSLSocketFactory ?, hostnameVerifier: HostnameVerifier ?, certificatePinner: CertificatePinner ?, proxyAuthenticator: Authenticator , proxy: Proxy ?, protocols: List < Protocol >, connectionSpecs: List < ConnectionSpec >, proxySelector: ProxySelector ) A specification for a connection to an origin server. For simple connections, this is the server\u2019s hostname and port. If an explicit proxy is requested (or no proxy is explicitly requested), this also includes that proxy information. For secure connections the address also includes the SSL socket factory, hostname verifier, and certificate pinner. HTTP requests that share the same Address may also share the same Connection .","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-address/certificate-pinner/","text":"okhttp / okhttp3 / Address / certificatePinner certificatePinner \u00b6 val certificatePinner: CertificatePinner ? Returns this address\u2019s certificate pinner, or null if this is not an HTTPS address.","title":"certificatePinner - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/certificate-pinner/#certificatepinner","text":"val certificatePinner: CertificatePinner ? Returns this address\u2019s certificate pinner, or null if this is not an HTTPS address.","title":"certificatePinner"},{"location":"4.x/okhttp/okhttp3/-address/connection-specs/","text":"okhttp / okhttp3 / Address / connectionSpecs connectionSpecs \u00b6 val connectionSpecs: List < ConnectionSpec >","title":"connectionSpecs - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/connection-specs/#connectionspecs","text":"val connectionSpecs: List < ConnectionSpec >","title":"connectionSpecs"},{"location":"4.x/okhttp/okhttp3/-address/dns/","text":"okhttp / okhttp3 / Address / dns dns \u00b6 val dns: Dns Returns the service that will be used to resolve IP addresses for hostnames.","title":"dns - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/dns/#dns","text":"val dns: Dns Returns the service that will be used to resolve IP addresses for hostnames.","title":"dns"},{"location":"4.x/okhttp/okhttp3/-address/equals/","text":"okhttp / okhttp3 / Address / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"4.x/okhttp/okhttp3/-address/hash-code/","text":"okhttp / okhttp3 / Address / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"4.x/okhttp/okhttp3/-address/hostname-verifier/","text":"okhttp / okhttp3 / Address / hostnameVerifier hostnameVerifier \u00b6 val hostnameVerifier: HostnameVerifier ? Returns the hostname verifier, or null if this is not an HTTPS address.","title":"hostnameVerifier - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/hostname-verifier/#hostnameverifier","text":"val hostnameVerifier: HostnameVerifier ? Returns the hostname verifier, or null if this is not an HTTPS address.","title":"hostnameVerifier"},{"location":"4.x/okhttp/okhttp3/-address/protocols/","text":"okhttp / okhttp3 / Address / protocols protocols \u00b6 val protocols: List < Protocol > The protocols the client supports. This method always returns a non-null list that contains minimally Protocol.HTTP_1_1 . Getter The protocols the client supports. This method always returns a non-null list that contains minimally Protocol.HTTP_1_1 .","title":"protocols - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/protocols/#protocols","text":"val protocols: List < Protocol > The protocols the client supports. This method always returns a non-null list that contains minimally Protocol.HTTP_1_1 . Getter The protocols the client supports. This method always returns a non-null list that contains minimally Protocol.HTTP_1_1 .","title":"protocols"},{"location":"4.x/okhttp/okhttp3/-address/proxy-authenticator/","text":"okhttp / okhttp3 / Address / proxyAuthenticator proxyAuthenticator \u00b6 val proxyAuthenticator: Authenticator Returns the client\u2019s proxy authenticator.","title":"proxyAuthenticator - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/proxy-authenticator/#proxyauthenticator","text":"val proxyAuthenticator: Authenticator Returns the client\u2019s proxy authenticator.","title":"proxyAuthenticator"},{"location":"4.x/okhttp/okhttp3/-address/proxy-selector/","text":"okhttp / okhttp3 / Address / proxySelector proxySelector \u00b6 val proxySelector: ProxySelector Returns this address\u2019s proxy selector. Only used if the proxy is null. If none of this selector\u2019s proxies are reachable, a direct connection will be attempted.","title":"proxySelector - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/proxy-selector/#proxyselector","text":"val proxySelector: ProxySelector Returns this address\u2019s proxy selector. Only used if the proxy is null. If none of this selector\u2019s proxies are reachable, a direct connection will be attempted.","title":"proxySelector"},{"location":"4.x/okhttp/okhttp3/-address/proxy/","text":"okhttp / okhttp3 / Address / proxy proxy \u00b6 val proxy: Proxy ? Returns this address\u2019s explicitly-specified HTTP proxy, or null to delegate to the {@linkplain proxySelector proxy selector}. \u00b6","title":"proxy - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/proxy/#proxy","text":"val proxy: Proxy ? Returns this address\u2019s explicitly-specified HTTP proxy, or null to delegate to the {@linkplain","title":"proxy"},{"location":"4.x/okhttp/okhttp3/-address/proxy/#proxyselector-proxy-selector","text":"","title":"proxySelector proxy selector}."},{"location":"4.x/okhttp/okhttp3/-address/socket-factory/","text":"okhttp / okhttp3 / Address / socketFactory socketFactory \u00b6 val socketFactory: SocketFactory Returns the socket factory for new connections.","title":"socketFactory - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/socket-factory/#socketfactory","text":"val socketFactory: SocketFactory Returns the socket factory for new connections.","title":"socketFactory"},{"location":"4.x/okhttp/okhttp3/-address/ssl-socket-factory/","text":"okhttp / okhttp3 / Address / sslSocketFactory sslSocketFactory \u00b6 val sslSocketFactory: SSLSocketFactory ? Returns the SSL socket factory, or null if this is not an HTTPS address.","title":"sslSocketFactory - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/ssl-socket-factory/#sslsocketfactory","text":"val sslSocketFactory: SSLSocketFactory ? Returns the SSL socket factory, or null if this is not an HTTPS address.","title":"sslSocketFactory"},{"location":"4.x/okhttp/okhttp3/-address/to-string/","text":"okhttp / okhttp3 / Address / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/okhttp/okhttp3/-address/url/","text":"okhttp / okhttp3 / Address / url url \u00b6 val url: HttpUrl Returns a URL with the hostname and port of the origin server. The path, query, and fragment of this URL are always empty, since they are not significant for planning a route. Getter Returns a URL with the hostname and port of the origin server. The path, query, and fragment of this URL are always empty, since they are not significant for planning a route.","title":"url - OkHttp"},{"location":"4.x/okhttp/okhttp3/-address/url/#url","text":"val url: HttpUrl Returns a URL with the hostname and port of the origin server. The path, query, and fragment of this URL are always empty, since they are not significant for planning a route. Getter Returns a URL with the hostname and port of the origin server. The path, query, and fragment of this URL are always empty, since they are not significant for planning a route.","title":"url"},{"location":"4.x/okhttp/okhttp3/-authenticator/","text":"okhttp / okhttp3 / Authenticator Authenticator \u00b6 interface Authenticator Functions \u00b6 Name Summary authenticate Returns a request that includes a credential to satisfy an authentication challenge in response . Returns null if the challenge cannot be satisfied. abstract fun authenticate(route: Route ?, response: Response ): Request ? Companion Object Properties \u00b6 Name Summary JAVA_NET_AUTHENTICATOR An authenticator that uses the java.net.Authenticator global authenticator. val JAVA_NET_AUTHENTICATOR: Authenticator NONE An authenticator that knows no credentials and makes no attempt to authenticate. val NONE: Authenticator","title":"Authenticator - OkHttp"},{"location":"4.x/okhttp/okhttp3/-authenticator/#authenticator","text":"interface Authenticator","title":"Authenticator"},{"location":"4.x/okhttp/okhttp3/-authenticator/#functions","text":"Name Summary authenticate Returns a request that includes a credential to satisfy an authentication challenge in response . Returns null if the challenge cannot be satisfied. abstract fun authenticate(route: Route ?, response: Response ): Request ?","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-authenticator/#companion-object-properties","text":"Name Summary JAVA_NET_AUTHENTICATOR An authenticator that uses the java.net.Authenticator global authenticator. val JAVA_NET_AUTHENTICATOR: Authenticator NONE An authenticator that knows no credentials and makes no attempt to authenticate. val NONE: Authenticator","title":"Companion Object Properties"},{"location":"4.x/okhttp/okhttp3/-authenticator/-j-a-v-a_-n-e-t_-a-u-t-h-e-n-t-i-c-a-t-o-r/","text":"okhttp / okhttp3 / Authenticator / JAVA_NET_AUTHENTICATOR JAVA_NET_AUTHENTICATOR \u00b6 val JAVA_NET_AUTHENTICATOR: Authenticator An authenticator that uses the java.net.Authenticator global authenticator.","title":"JAVA_NET_AUTHENTICATOR - OkHttp"},{"location":"4.x/okhttp/okhttp3/-authenticator/-j-a-v-a_-n-e-t_-a-u-t-h-e-n-t-i-c-a-t-o-r/#java_net_authenticator","text":"val JAVA_NET_AUTHENTICATOR: Authenticator An authenticator that uses the java.net.Authenticator global authenticator.","title":"JAVA_NET_AUTHENTICATOR"},{"location":"4.x/okhttp/okhttp3/-authenticator/-n-o-n-e/","text":"okhttp / okhttp3 / Authenticator / NONE NONE \u00b6 val NONE: Authenticator An authenticator that knows no credentials and makes no attempt to authenticate.","title":"NONE - OkHttp"},{"location":"4.x/okhttp/okhttp3/-authenticator/-n-o-n-e/#none","text":"val NONE: Authenticator An authenticator that knows no credentials and makes no attempt to authenticate.","title":"NONE"},{"location":"4.x/okhttp/okhttp3/-authenticator/authenticate/","text":"okhttp / okhttp3 / Authenticator / authenticate authenticate \u00b6 abstract fun authenticate(route: Route ?, response: Response ): Request ? Returns a request that includes a credential to satisfy an authentication challenge in response . Returns null if the challenge cannot be satisfied. The route is best effort, it currently may not always be provided even when logically available. It may also not be provided when an authenticator is re-used manually in an application interceptor, such as when implementing client-specific retries.","title":"authenticate - OkHttp"},{"location":"4.x/okhttp/okhttp3/-authenticator/authenticate/#authenticate","text":"abstract fun authenticate(route: Route ?, response: Response ): Request ? Returns a request that includes a credential to satisfy an authentication challenge in response . Returns null if the challenge cannot be satisfied. The route is best effort, it currently may not always be provided even when logically available. It may also not be provided when an authenticator is re-used manually in an application interceptor, such as when implementing client-specific retries.","title":"authenticate"},{"location":"4.x/okhttp/okhttp3/-cache/","text":"okhttp / okhttp3 / Cache Cache \u00b6 class Cache : Closeable , Flushable Caches HTTP and HTTPS responses to the filesystem so they may be reused, saving time and bandwidth. Cache Optimization \u00b6 To measure cache effectiveness, this class tracks three statistics: Request Count: the number of HTTP requests issued since this cache was created. Network Count: the number of those requests that required network use. Hit Count: the number of those requests whose responses were served by the cache. Sometimes a request will result in a conditional cache hit. If the cache contains a stale copy of the response, the client will issue a conditional GET . The server will then send either the updated response if it has changed, or a short \u2018not modified\u2019 response if the client\u2019s copy is still valid. Such responses increment both the network count and hit count. The best way to improve the cache hit rate is by configuring the web server to return cacheable responses. Although this client honors all HTTP/1.1 (RFC 7234) cache headers, it doesn\u2019t cache partial responses. Force a Network Response \u00b6 In some situations, such as after a user clicks a \u2018refresh\u2019 button, it may be necessary to skip the cache, and fetch data directly from the server. To force a full refresh, add the no-cache directive: Request request = new Request.Builder() .cacheControl(new CacheControl.Builder().noCache().build()) .url(\"http://publicobject.com/helloworld.txt\") .build(); If it is only necessary to force a cached response to be validated by the server, use the more efficient max-age=0 directive instead: Request request = new Request.Builder() .cacheControl(new CacheControl.Builder() .maxAge(0, TimeUnit.SECONDS) .build()) .url(\"http://publicobject.com/helloworld.txt\") .build(); Force a Cache Response \u00b6 Sometimes you\u2019ll want to show resources if they are available immediately, but not otherwise. This can be used so your application can show something while waiting for the latest data to be downloaded. To restrict a request to locally-cached resources, add the only-if-cached directive: Request request = new Request.Builder() .cacheControl(new CacheControl.Builder() .onlyIfCached() .build()) .url(\"http://publicobject.com/helloworld.txt\") .build(); Response forceCacheResponse = client.newCall(request).execute(); if (forceCacheResponse.code() != 504) { // The resource was cached! Show it. } else { // The resource was not cached. } This technique works even better in situations where a stale response is better than no response. To permit stale cached responses, use the max-stale directive with the maximum staleness in seconds: Request request = new Request.Builder() .cacheControl(new CacheControl.Builder() .maxStale(365, TimeUnit.DAYS) .build()) .url(\"http://publicobject.com/helloworld.txt\") .build(); The CacheControl class can configure request caching directives and parse response caching directives. It even offers convenient constants CacheControl.FORCE_NETWORK and CacheControl.FORCE_CACHE that address the use cases above. Constructors \u00b6 Name Summary <init> Create a cache of at most maxSize bytes in directory . Cache(directory: File , maxSize: Long ) Properties \u00b6 Name Summary directory val directory: File isClosed val isClosed: Boolean Functions \u00b6 Name Summary close fun close(): Unit delete Closes the cache and deletes all of its stored values. This will delete all files in the cache directory including files that weren\u2019t created by the cache. fun delete(): Unit evictAll Deletes all values stored in the cache. In-flight writes to the cache will complete normally, but the corresponding responses will not be stored. fun evictAll(): Unit flush fun flush(): Unit hitCount fun hitCount(): Int initialize Initialize the cache. This will include reading the journal files from the storage and building up the necessary in-memory cache information. fun initialize(): Unit maxSize Max size of the cache (in bytes). fun maxSize(): Long networkCount fun networkCount(): Int requestCount fun requestCount(): Int size fun size(): Long urls Returns an iterator over the URLs in this cache. This iterator doesn\u2019t throw ConcurrentModificationException , but if new responses are added while iterating, their URLs will not be returned. If existing responses are evicted during iteration, they will be absent (unless they were already returned). fun urls(): MutableIterator < String > writeAbortCount fun writeAbortCount(): Int writeSuccessCount fun writeSuccessCount(): Int Companion Object Functions \u00b6 Name Summary hasVaryAll Returns true if a Vary header contains an asterisk. Such responses cannot be cached. fun Response .hasVaryAll(): Boolean key fun key(url: HttpUrl ): String varyHeaders Returns the subset of the headers in this\u2019s request that impact the content of this\u2019s body. fun Response .varyHeaders(): Headers varyMatches Returns true if none of the Vary headers have changed between cachedRequest and newRequest . fun varyMatches(cachedResponse: Response , cachedRequest: Headers , newRequest: Request ): Boolean","title":"Cache - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/#cache","text":"class Cache : Closeable , Flushable Caches HTTP and HTTPS responses to the filesystem so they may be reused, saving time and bandwidth.","title":"Cache"},{"location":"4.x/okhttp/okhttp3/-cache/#cache-optimization","text":"To measure cache effectiveness, this class tracks three statistics: Request Count: the number of HTTP requests issued since this cache was created. Network Count: the number of those requests that required network use. Hit Count: the number of those requests whose responses were served by the cache. Sometimes a request will result in a conditional cache hit. If the cache contains a stale copy of the response, the client will issue a conditional GET . The server will then send either the updated response if it has changed, or a short \u2018not modified\u2019 response if the client\u2019s copy is still valid. Such responses increment both the network count and hit count. The best way to improve the cache hit rate is by configuring the web server to return cacheable responses. Although this client honors all HTTP/1.1 (RFC 7234) cache headers, it doesn\u2019t cache partial responses.","title":"Cache Optimization"},{"location":"4.x/okhttp/okhttp3/-cache/#force-a-network-response","text":"In some situations, such as after a user clicks a \u2018refresh\u2019 button, it may be necessary to skip the cache, and fetch data directly from the server. To force a full refresh, add the no-cache directive: Request request = new Request.Builder() .cacheControl(new CacheControl.Builder().noCache().build()) .url(\"http://publicobject.com/helloworld.txt\") .build(); If it is only necessary to force a cached response to be validated by the server, use the more efficient max-age=0 directive instead: Request request = new Request.Builder() .cacheControl(new CacheControl.Builder() .maxAge(0, TimeUnit.SECONDS) .build()) .url(\"http://publicobject.com/helloworld.txt\") .build();","title":"Force a Network Response"},{"location":"4.x/okhttp/okhttp3/-cache/#force-a-cache-response","text":"Sometimes you\u2019ll want to show resources if they are available immediately, but not otherwise. This can be used so your application can show something while waiting for the latest data to be downloaded. To restrict a request to locally-cached resources, add the only-if-cached directive: Request request = new Request.Builder() .cacheControl(new CacheControl.Builder() .onlyIfCached() .build()) .url(\"http://publicobject.com/helloworld.txt\") .build(); Response forceCacheResponse = client.newCall(request).execute(); if (forceCacheResponse.code() != 504) { // The resource was cached! Show it. } else { // The resource was not cached. } This technique works even better in situations where a stale response is better than no response. To permit stale cached responses, use the max-stale directive with the maximum staleness in seconds: Request request = new Request.Builder() .cacheControl(new CacheControl.Builder() .maxStale(365, TimeUnit.DAYS) .build()) .url(\"http://publicobject.com/helloworld.txt\") .build(); The CacheControl class can configure request caching directives and parse response caching directives. It even offers convenient constants CacheControl.FORCE_NETWORK and CacheControl.FORCE_CACHE that address the use cases above.","title":"Force a Cache Response"},{"location":"4.x/okhttp/okhttp3/-cache/#constructors","text":"Name Summary <init> Create a cache of at most maxSize bytes in directory . Cache(directory: File , maxSize: Long )","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-cache/#properties","text":"Name Summary directory val directory: File isClosed val isClosed: Boolean","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-cache/#functions","text":"Name Summary close fun close(): Unit delete Closes the cache and deletes all of its stored values. This will delete all files in the cache directory including files that weren\u2019t created by the cache. fun delete(): Unit evictAll Deletes all values stored in the cache. In-flight writes to the cache will complete normally, but the corresponding responses will not be stored. fun evictAll(): Unit flush fun flush(): Unit hitCount fun hitCount(): Int initialize Initialize the cache. This will include reading the journal files from the storage and building up the necessary in-memory cache information. fun initialize(): Unit maxSize Max size of the cache (in bytes). fun maxSize(): Long networkCount fun networkCount(): Int requestCount fun requestCount(): Int size fun size(): Long urls Returns an iterator over the URLs in this cache. This iterator doesn\u2019t throw ConcurrentModificationException , but if new responses are added while iterating, their URLs will not be returned. If existing responses are evicted during iteration, they will be absent (unless they were already returned). fun urls(): MutableIterator < String > writeAbortCount fun writeAbortCount(): Int writeSuccessCount fun writeSuccessCount(): Int","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-cache/#companion-object-functions","text":"Name Summary hasVaryAll Returns true if a Vary header contains an asterisk. Such responses cannot be cached. fun Response .hasVaryAll(): Boolean key fun key(url: HttpUrl ): String varyHeaders Returns the subset of the headers in this\u2019s request that impact the content of this\u2019s body. fun Response .varyHeaders(): Headers varyMatches Returns true if none of the Vary headers have changed between cachedRequest and newRequest . fun varyMatches(cachedResponse: Response , cachedRequest: Headers , newRequest: Request ): Boolean","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-cache/-init-/","text":"okhttp / okhttp3 / Cache / <init> <init> \u00b6 Cache(directory: File , maxSize: Long ) Create a cache of at most maxSize bytes in directory .","title":" init "},{"location":"4.x/okhttp/okhttp3/-cache/-init-/#init","text":"Cache(directory: File , maxSize: Long ) Create a cache of at most maxSize bytes in directory .","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-cache/close/","text":"okhttp / okhttp3 / Cache / close close \u00b6 fun close(): Unit","title":"close - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/close/#close","text":"fun close(): Unit","title":"close"},{"location":"4.x/okhttp/okhttp3/-cache/delete/","text":"okhttp / okhttp3 / Cache / delete delete \u00b6 fun delete(): Unit Closes the cache and deletes all of its stored values. This will delete all files in the cache directory including files that weren\u2019t created by the cache.","title":"delete - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/delete/#delete","text":"fun delete(): Unit Closes the cache and deletes all of its stored values. This will delete all files in the cache directory including files that weren\u2019t created by the cache.","title":"delete"},{"location":"4.x/okhttp/okhttp3/-cache/directory/","text":"okhttp / okhttp3 / Cache / directory directory \u00b6 val directory: File","title":"directory - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/directory/#directory","text":"val directory: File","title":"directory"},{"location":"4.x/okhttp/okhttp3/-cache/evict-all/","text":"okhttp / okhttp3 / Cache / evictAll evictAll \u00b6 fun evictAll(): Unit Deletes all values stored in the cache. In-flight writes to the cache will complete normally, but the corresponding responses will not be stored.","title":"evictAll - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/evict-all/#evictall","text":"fun evictAll(): Unit Deletes all values stored in the cache. In-flight writes to the cache will complete normally, but the corresponding responses will not be stored.","title":"evictAll"},{"location":"4.x/okhttp/okhttp3/-cache/flush/","text":"okhttp / okhttp3 / Cache / flush flush \u00b6 fun flush(): Unit","title":"flush - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/flush/#flush","text":"fun flush(): Unit","title":"flush"},{"location":"4.x/okhttp/okhttp3/-cache/has-vary-all/","text":"okhttp / okhttp3 / Cache / hasVaryAll hasVaryAll \u00b6 fun Response .hasVaryAll(): Boolean Returns true if a Vary header contains an asterisk. Such responses cannot be cached.","title":"hasVaryAll - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/has-vary-all/#hasvaryall","text":"fun Response .hasVaryAll(): Boolean Returns true if a Vary header contains an asterisk. Such responses cannot be cached.","title":"hasVaryAll"},{"location":"4.x/okhttp/okhttp3/-cache/hit-count/","text":"okhttp / okhttp3 / Cache / hitCount hitCount \u00b6 @Synchronized fun hitCount(): Int","title":"hitCount - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/hit-count/#hitcount","text":"@Synchronized fun hitCount(): Int","title":"hitCount"},{"location":"4.x/okhttp/okhttp3/-cache/initialize/","text":"okhttp / okhttp3 / Cache / initialize initialize \u00b6 fun initialize(): Unit Initialize the cache. This will include reading the journal files from the storage and building up the necessary in-memory cache information. The initialization time may vary depending on the journal file size and the current actual cache size. The application needs to be aware of calling this function during the initialization phase and preferably in a background worker thread. Note that if the application chooses to not call this method to initialize the cache. By default, OkHttp will perform lazy initialization upon the first usage of the cache.","title":"initialize - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/initialize/#initialize","text":"fun initialize(): Unit Initialize the cache. This will include reading the journal files from the storage and building up the necessary in-memory cache information. The initialization time may vary depending on the journal file size and the current actual cache size. The application needs to be aware of calling this function during the initialization phase and preferably in a background worker thread. Note that if the application chooses to not call this method to initialize the cache. By default, OkHttp will perform lazy initialization upon the first usage of the cache.","title":"initialize"},{"location":"4.x/okhttp/okhttp3/-cache/is-closed/","text":"okhttp / okhttp3 / Cache / isClosed isClosed \u00b6 val isClosed: Boolean","title":"isClosed - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/is-closed/#isclosed","text":"val isClosed: Boolean","title":"isClosed"},{"location":"4.x/okhttp/okhttp3/-cache/key/","text":"okhttp / okhttp3 / Cache / key key \u00b6 @JvmStatic fun key(url: HttpUrl ): String","title":"key - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/key/#key","text":"@JvmStatic fun key(url: HttpUrl ): String","title":"key"},{"location":"4.x/okhttp/okhttp3/-cache/max-size/","text":"okhttp / okhttp3 / Cache / maxSize maxSize \u00b6 fun maxSize(): Long Max size of the cache (in bytes).","title":"maxSize - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/max-size/#maxsize","text":"fun maxSize(): Long Max size of the cache (in bytes).","title":"maxSize"},{"location":"4.x/okhttp/okhttp3/-cache/network-count/","text":"okhttp / okhttp3 / Cache / networkCount networkCount \u00b6 @Synchronized fun networkCount(): Int","title":"networkCount - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/network-count/#networkcount","text":"@Synchronized fun networkCount(): Int","title":"networkCount"},{"location":"4.x/okhttp/okhttp3/-cache/request-count/","text":"okhttp / okhttp3 / Cache / requestCount requestCount \u00b6 @Synchronized fun requestCount(): Int","title":"requestCount - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/request-count/#requestcount","text":"@Synchronized fun requestCount(): Int","title":"requestCount"},{"location":"4.x/okhttp/okhttp3/-cache/size/","text":"okhttp / okhttp3 / Cache / size size \u00b6 fun size(): Long","title":"size - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/size/#size","text":"fun size(): Long","title":"size"},{"location":"4.x/okhttp/okhttp3/-cache/urls/","text":"okhttp / okhttp3 / Cache / urls urls \u00b6 fun urls(): MutableIterator < String > Returns an iterator over the URLs in this cache. This iterator doesn\u2019t throw ConcurrentModificationException , but if new responses are added while iterating, their URLs will not be returned. If existing responses are evicted during iteration, they will be absent (unless they were already returned). The iterator supports MutableIterator.remove . Removing a URL from the iterator evicts the corresponding response from the cache. Use this to evict selected responses.","title":"urls - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/urls/#urls","text":"fun urls(): MutableIterator < String > Returns an iterator over the URLs in this cache. This iterator doesn\u2019t throw ConcurrentModificationException , but if new responses are added while iterating, their URLs will not be returned. If existing responses are evicted during iteration, they will be absent (unless they were already returned). The iterator supports MutableIterator.remove . Removing a URL from the iterator evicts the corresponding response from the cache. Use this to evict selected responses.","title":"urls"},{"location":"4.x/okhttp/okhttp3/-cache/vary-headers/","text":"okhttp / okhttp3 / Cache / varyHeaders varyHeaders \u00b6 fun Response .varyHeaders(): Headers Returns the subset of the headers in this\u2019s request that impact the content of this\u2019s body.","title":"varyHeaders - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/vary-headers/#varyheaders","text":"fun Response .varyHeaders(): Headers Returns the subset of the headers in this\u2019s request that impact the content of this\u2019s body.","title":"varyHeaders"},{"location":"4.x/okhttp/okhttp3/-cache/vary-matches/","text":"okhttp / okhttp3 / Cache / varyMatches varyMatches \u00b6 fun varyMatches(cachedResponse: Response , cachedRequest: Headers , newRequest: Request ): Boolean Returns true if none of the Vary headers have changed between cachedRequest and newRequest .","title":"varyMatches - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/vary-matches/#varymatches","text":"fun varyMatches(cachedResponse: Response , cachedRequest: Headers , newRequest: Request ): Boolean Returns true if none of the Vary headers have changed between cachedRequest and newRequest .","title":"varyMatches"},{"location":"4.x/okhttp/okhttp3/-cache/write-abort-count/","text":"okhttp / okhttp3 / Cache / writeAbortCount writeAbortCount \u00b6 @Synchronized fun writeAbortCount(): Int","title":"writeAbortCount - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/write-abort-count/#writeabortcount","text":"@Synchronized fun writeAbortCount(): Int","title":"writeAbortCount"},{"location":"4.x/okhttp/okhttp3/-cache/write-success-count/","text":"okhttp / okhttp3 / Cache / writeSuccessCount writeSuccessCount \u00b6 @Synchronized fun writeSuccessCount(): Int","title":"writeSuccessCount - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache/write-success-count/#writesuccesscount","text":"@Synchronized fun writeSuccessCount(): Int","title":"writeSuccessCount"},{"location":"4.x/okhttp/okhttp3/-cache-control/","text":"okhttp / okhttp3 / CacheControl CacheControl \u00b6 class CacheControl A Cache-Control header with cache directives from a server or client. These directives set policy on what responses can be stored, and which requests can be satisfied by those stored responses. See RFC 7234, 5.2 . Types \u00b6 Name Summary Builder Builds a Cache-Control request header. class Builder Properties \u00b6 Name Summary immutable val immutable: Boolean isPrivate val isPrivate: Boolean isPublic val isPublic: Boolean maxAgeSeconds The duration past the response\u2019s served date that it can be served without validation. val maxAgeSeconds: Int maxStaleSeconds val maxStaleSeconds: Int minFreshSeconds val minFreshSeconds: Int mustRevalidate val mustRevalidate: Boolean noCache In a response, this field\u2019s name \u201cno-cache\u201d is misleading. It doesn\u2019t prevent us from caching the response; it only means we have to validate the response with the origin server before returning it. We can do this with a conditional GET. val noCache: Boolean noStore If true, this response should not be cached. val noStore: Boolean noTransform val noTransform: Boolean onlyIfCached This field\u2019s name \u201conly-if-cached\u201d is misleading. It actually means \u201cdo not use the network\u201d. It is set by a client who only wants to make a request if it can be fully satisfied by the cache. Cached responses that would require validation (ie. conditional gets) are not permitted if this header is set. val onlyIfCached: Boolean sMaxAgeSeconds The \u201cs-maxage\u201d directive is the max age for shared caches. Not to be confused with \u201cmax-age\u201d for non-shared caches, As in Firefox and Chrome, this directive is not honored by this cache. val sMaxAgeSeconds: Int Functions \u00b6 Name Summary toString fun toString(): String Companion Object Properties \u00b6 Name Summary FORCE_CACHE Cache control request directives that uses the cache only, even if the cached response is stale. If the response isn\u2019t available in the cache or requires server validation, the call will fail with a 504 Unsatisfiable Request . val FORCE_CACHE: CacheControl FORCE_NETWORK Cache control request directives that require network validation of responses. Note that such requests may be assisted by the cache via conditional GET requests. val FORCE_NETWORK: CacheControl Companion Object Functions \u00b6 Name Summary parse Returns the cache directives of headers . This honors both Cache-Control and Pragma headers if they are present. fun parse(headers: Headers ): CacheControl","title":"CacheControl - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/#cachecontrol","text":"class CacheControl A Cache-Control header with cache directives from a server or client. These directives set policy on what responses can be stored, and which requests can be satisfied by those stored responses. See RFC 7234, 5.2 .","title":"CacheControl"},{"location":"4.x/okhttp/okhttp3/-cache-control/#types","text":"Name Summary Builder Builds a Cache-Control request header. class Builder","title":"Types"},{"location":"4.x/okhttp/okhttp3/-cache-control/#properties","text":"Name Summary immutable val immutable: Boolean isPrivate val isPrivate: Boolean isPublic val isPublic: Boolean maxAgeSeconds The duration past the response\u2019s served date that it can be served without validation. val maxAgeSeconds: Int maxStaleSeconds val maxStaleSeconds: Int minFreshSeconds val minFreshSeconds: Int mustRevalidate val mustRevalidate: Boolean noCache In a response, this field\u2019s name \u201cno-cache\u201d is misleading. It doesn\u2019t prevent us from caching the response; it only means we have to validate the response with the origin server before returning it. We can do this with a conditional GET. val noCache: Boolean noStore If true, this response should not be cached. val noStore: Boolean noTransform val noTransform: Boolean onlyIfCached This field\u2019s name \u201conly-if-cached\u201d is misleading. It actually means \u201cdo not use the network\u201d. It is set by a client who only wants to make a request if it can be fully satisfied by the cache. Cached responses that would require validation (ie. conditional gets) are not permitted if this header is set. val onlyIfCached: Boolean sMaxAgeSeconds The \u201cs-maxage\u201d directive is the max age for shared caches. Not to be confused with \u201cmax-age\u201d for non-shared caches, As in Firefox and Chrome, this directive is not honored by this cache. val sMaxAgeSeconds: Int","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-cache-control/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-cache-control/#companion-object-properties","text":"Name Summary FORCE_CACHE Cache control request directives that uses the cache only, even if the cached response is stale. If the response isn\u2019t available in the cache or requires server validation, the call will fail with a 504 Unsatisfiable Request . val FORCE_CACHE: CacheControl FORCE_NETWORK Cache control request directives that require network validation of responses. Note that such requests may be assisted by the cache via conditional GET requests. val FORCE_NETWORK: CacheControl","title":"Companion Object Properties"},{"location":"4.x/okhttp/okhttp3/-cache-control/#companion-object-functions","text":"Name Summary parse Returns the cache directives of headers . This honors both Cache-Control and Pragma headers if they are present. fun parse(headers: Headers ): CacheControl","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-c-a-c-h-e/","text":"okhttp / okhttp3 / CacheControl / FORCE_CACHE FORCE_CACHE \u00b6 val FORCE_CACHE: CacheControl Cache control request directives that uses the cache only, even if the cached response is stale. If the response isn\u2019t available in the cache or requires server validation, the call will fail with a 504 Unsatisfiable Request .","title":"FORCE_CACHE - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-c-a-c-h-e/#force_cache","text":"val FORCE_CACHE: CacheControl Cache control request directives that uses the cache only, even if the cached response is stale. If the response isn\u2019t available in the cache or requires server validation, the call will fail with a 504 Unsatisfiable Request .","title":"FORCE_CACHE"},{"location":"4.x/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-n-e-t-w-o-r-k/","text":"okhttp / okhttp3 / CacheControl / FORCE_NETWORK FORCE_NETWORK \u00b6 val FORCE_NETWORK: CacheControl Cache control request directives that require network validation of responses. Note that such requests may be assisted by the cache via conditional GET requests.","title":"FORCE_NETWORK - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-n-e-t-w-o-r-k/#force_network","text":"val FORCE_NETWORK: CacheControl Cache control request directives that require network validation of responses. Note that such requests may be assisted by the cache via conditional GET requests.","title":"FORCE_NETWORK"},{"location":"4.x/okhttp/okhttp3/-cache-control/immutable/","text":"okhttp / okhttp3 / CacheControl / immutable immutable \u00b6 val immutable: Boolean","title":"immutable - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/immutable/#immutable","text":"val immutable: Boolean","title":"immutable"},{"location":"4.x/okhttp/okhttp3/-cache-control/is-private/","text":"okhttp / okhttp3 / CacheControl / isPrivate isPrivate \u00b6 val isPrivate: Boolean","title":"isPrivate - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/is-private/#isprivate","text":"val isPrivate: Boolean","title":"isPrivate"},{"location":"4.x/okhttp/okhttp3/-cache-control/is-public/","text":"okhttp / okhttp3 / CacheControl / isPublic isPublic \u00b6 val isPublic: Boolean","title":"isPublic - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/is-public/#ispublic","text":"val isPublic: Boolean","title":"isPublic"},{"location":"4.x/okhttp/okhttp3/-cache-control/max-age-seconds/","text":"okhttp / okhttp3 / CacheControl / maxAgeSeconds maxAgeSeconds \u00b6 val maxAgeSeconds: Int The duration past the response\u2019s served date that it can be served without validation.","title":"maxAgeSeconds - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/max-age-seconds/#maxageseconds","text":"val maxAgeSeconds: Int The duration past the response\u2019s served date that it can be served without validation.","title":"maxAgeSeconds"},{"location":"4.x/okhttp/okhttp3/-cache-control/max-stale-seconds/","text":"okhttp / okhttp3 / CacheControl / maxStaleSeconds maxStaleSeconds \u00b6 val maxStaleSeconds: Int","title":"maxStaleSeconds - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/max-stale-seconds/#maxstaleseconds","text":"val maxStaleSeconds: Int","title":"maxStaleSeconds"},{"location":"4.x/okhttp/okhttp3/-cache-control/min-fresh-seconds/","text":"okhttp / okhttp3 / CacheControl / minFreshSeconds minFreshSeconds \u00b6 val minFreshSeconds: Int","title":"minFreshSeconds - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/min-fresh-seconds/#minfreshseconds","text":"val minFreshSeconds: Int","title":"minFreshSeconds"},{"location":"4.x/okhttp/okhttp3/-cache-control/must-revalidate/","text":"okhttp / okhttp3 / CacheControl / mustRevalidate mustRevalidate \u00b6 val mustRevalidate: Boolean","title":"mustRevalidate - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/must-revalidate/#mustrevalidate","text":"val mustRevalidate: Boolean","title":"mustRevalidate"},{"location":"4.x/okhttp/okhttp3/-cache-control/no-cache/","text":"okhttp / okhttp3 / CacheControl / noCache noCache \u00b6 val noCache: Boolean In a response, this field\u2019s name \u201cno-cache\u201d is misleading. It doesn\u2019t prevent us from caching the response; it only means we have to validate the response with the origin server before returning it. We can do this with a conditional GET. In a request, it means do not use a cache to satisfy the request.","title":"noCache - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/no-cache/#nocache","text":"val noCache: Boolean In a response, this field\u2019s name \u201cno-cache\u201d is misleading. It doesn\u2019t prevent us from caching the response; it only means we have to validate the response with the origin server before returning it. We can do this with a conditional GET. In a request, it means do not use a cache to satisfy the request.","title":"noCache"},{"location":"4.x/okhttp/okhttp3/-cache-control/no-store/","text":"okhttp / okhttp3 / CacheControl / noStore noStore \u00b6 val noStore: Boolean If true, this response should not be cached.","title":"noStore - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/no-store/#nostore","text":"val noStore: Boolean If true, this response should not be cached.","title":"noStore"},{"location":"4.x/okhttp/okhttp3/-cache-control/no-transform/","text":"okhttp / okhttp3 / CacheControl / noTransform noTransform \u00b6 val noTransform: Boolean","title":"noTransform - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/no-transform/#notransform","text":"val noTransform: Boolean","title":"noTransform"},{"location":"4.x/okhttp/okhttp3/-cache-control/only-if-cached/","text":"okhttp / okhttp3 / CacheControl / onlyIfCached onlyIfCached \u00b6 val onlyIfCached: Boolean This field\u2019s name \u201conly-if-cached\u201d is misleading. It actually means \u201cdo not use the network\u201d. It is set by a client who only wants to make a request if it can be fully satisfied by the cache. Cached responses that would require validation (ie. conditional gets) are not permitted if this header is set.","title":"onlyIfCached - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/only-if-cached/#onlyifcached","text":"val onlyIfCached: Boolean This field\u2019s name \u201conly-if-cached\u201d is misleading. It actually means \u201cdo not use the network\u201d. It is set by a client who only wants to make a request if it can be fully satisfied by the cache. Cached responses that would require validation (ie. conditional gets) are not permitted if this header is set.","title":"onlyIfCached"},{"location":"4.x/okhttp/okhttp3/-cache-control/parse/","text":"okhttp / okhttp3 / CacheControl / parse parse \u00b6 @JvmStatic fun parse(headers: Headers ): CacheControl Returns the cache directives of headers . This honors both Cache-Control and Pragma headers if they are present.","title":"parse - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/parse/#parse","text":"@JvmStatic fun parse(headers: Headers ): CacheControl Returns the cache directives of headers . This honors both Cache-Control and Pragma headers if they are present.","title":"parse"},{"location":"4.x/okhttp/okhttp3/-cache-control/s-max-age-seconds/","text":"okhttp / okhttp3 / CacheControl / sMaxAgeSeconds sMaxAgeSeconds \u00b6 val sMaxAgeSeconds: Int The \u201cs-maxage\u201d directive is the max age for shared caches. Not to be confused with \u201cmax-age\u201d for non-shared caches, As in Firefox and Chrome, this directive is not honored by this cache.","title":"sMaxAgeSeconds - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/s-max-age-seconds/#smaxageseconds","text":"val sMaxAgeSeconds: Int The \u201cs-maxage\u201d directive is the max age for shared caches. Not to be confused with \u201cmax-age\u201d for non-shared caches, As in Firefox and Chrome, this directive is not honored by this cache.","title":"sMaxAgeSeconds"},{"location":"4.x/okhttp/okhttp3/-cache-control/to-string/","text":"okhttp / okhttp3 / CacheControl / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/","text":"okhttp / okhttp3 / CacheControl / Builder Builder \u00b6 class Builder Builds a Cache-Control request header. Constructors \u00b6 Name Summary <init> Builds a Cache-Control request header. Builder() Functions \u00b6 Name Summary build fun build(): CacheControl immutable fun immutable(): Builder maxAge Sets the maximum age of a cached response. If the cache response\u2019s age exceeds maxAge , it will not be used and a network request will be made. fun maxAge(maxAge: Int , timeUnit: TimeUnit ): Builder maxStale Accept cached responses that have exceeded their freshness lifetime by up to maxStale . If unspecified, stale cache responses will not be used. fun maxStale(maxStale: Int , timeUnit: TimeUnit ): Builder minFresh Sets the minimum number of seconds that a response will continue to be fresh for. If the response will be stale when minFresh have elapsed, the cached response will not be used and a network request will be made. fun minFresh(minFresh: Int , timeUnit: TimeUnit ): Builder noCache Don\u2019t accept an unvalidated cached response. fun noCache(): Builder noStore Don\u2019t store the server\u2019s response in any cache. fun noStore(): Builder noTransform Don\u2019t accept a transformed response. fun noTransform(): Builder onlyIfCached Only accept the response if it is in the cache. If the response isn\u2019t cached, a `504 Unsatisfiable Request response will be returned. fun onlyIfCached(): Builder`","title":"Builder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/#builder","text":"class Builder Builds a Cache-Control request header.","title":"Builder"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/#constructors","text":"Name Summary <init> Builds a Cache-Control request header. Builder()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/#functions","text":"Name Summary build fun build(): CacheControl immutable fun immutable(): Builder maxAge Sets the maximum age of a cached response. If the cache response\u2019s age exceeds maxAge , it will not be used and a network request will be made. fun maxAge(maxAge: Int , timeUnit: TimeUnit ): Builder maxStale Accept cached responses that have exceeded their freshness lifetime by up to maxStale . If unspecified, stale cache responses will not be used. fun maxStale(maxStale: Int , timeUnit: TimeUnit ): Builder minFresh Sets the minimum number of seconds that a response will continue to be fresh for. If the response will be stale when minFresh have elapsed, the cached response will not be used and a network request will be made. fun minFresh(minFresh: Int , timeUnit: TimeUnit ): Builder noCache Don\u2019t accept an unvalidated cached response. fun noCache(): Builder noStore Don\u2019t store the server\u2019s response in any cache. fun noStore(): Builder noTransform Don\u2019t accept a transformed response. fun noTransform(): Builder onlyIfCached Only accept the response if it is in the cache. If the response isn\u2019t cached, a `504 Unsatisfiable Request response will be returned. fun onlyIfCached(): Builder`","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/-init-/","text":"okhttp / okhttp3 / CacheControl / Builder / <init> <init> \u00b6 Builder() Builds a Cache-Control request header.","title":" init "},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/-init-/#init","text":"Builder() Builds a Cache-Control request header.","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/build/","text":"okhttp / okhttp3 / CacheControl / Builder / build build \u00b6 fun build(): CacheControl","title":"build - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/build/#build","text":"fun build(): CacheControl","title":"build"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/immutable/","text":"okhttp / okhttp3 / CacheControl / Builder / immutable immutable \u00b6 fun immutable(): Builder","title":"immutable - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/immutable/#immutable","text":"fun immutable(): Builder","title":"immutable"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/max-age/","text":"okhttp / okhttp3 / CacheControl / Builder / maxAge maxAge \u00b6 fun maxAge(maxAge: Int , timeUnit: TimeUnit ): Builder Sets the maximum age of a cached response. If the cache response\u2019s age exceeds maxAge , it will not be used and a network request will be made. Parameters \u00b6 maxAge - a non-negative integer. This is stored and transmitted with TimeUnit.SECONDS precision; finer precision will be lost.","title":"maxAge - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/max-age/#maxage","text":"fun maxAge(maxAge: Int , timeUnit: TimeUnit ): Builder Sets the maximum age of a cached response. If the cache response\u2019s age exceeds maxAge , it will not be used and a network request will be made.","title":"maxAge"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/max-age/#parameters","text":"maxAge - a non-negative integer. This is stored and transmitted with TimeUnit.SECONDS precision; finer precision will be lost.","title":"Parameters"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/max-stale/","text":"okhttp / okhttp3 / CacheControl / Builder / maxStale maxStale \u00b6 fun maxStale(maxStale: Int , timeUnit: TimeUnit ): Builder Accept cached responses that have exceeded their freshness lifetime by up to maxStale . If unspecified, stale cache responses will not be used. Parameters \u00b6 maxStale - a non-negative integer. This is stored and transmitted with TimeUnit.SECONDS precision; finer precision will be lost.","title":"maxStale - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/max-stale/#maxstale","text":"fun maxStale(maxStale: Int , timeUnit: TimeUnit ): Builder Accept cached responses that have exceeded their freshness lifetime by up to maxStale . If unspecified, stale cache responses will not be used.","title":"maxStale"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/max-stale/#parameters","text":"maxStale - a non-negative integer. This is stored and transmitted with TimeUnit.SECONDS precision; finer precision will be lost.","title":"Parameters"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/min-fresh/","text":"okhttp / okhttp3 / CacheControl / Builder / minFresh minFresh \u00b6 fun minFresh(minFresh: Int , timeUnit: TimeUnit ): Builder Sets the minimum number of seconds that a response will continue to be fresh for. If the response will be stale when minFresh have elapsed, the cached response will not be used and a network request will be made. Parameters \u00b6 minFresh - a non-negative integer. This is stored and transmitted with TimeUnit.SECONDS precision; finer precision will be lost.","title":"minFresh - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/min-fresh/#minfresh","text":"fun minFresh(minFresh: Int , timeUnit: TimeUnit ): Builder Sets the minimum number of seconds that a response will continue to be fresh for. If the response will be stale when minFresh have elapsed, the cached response will not be used and a network request will be made.","title":"minFresh"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/min-fresh/#parameters","text":"minFresh - a non-negative integer. This is stored and transmitted with TimeUnit.SECONDS precision; finer precision will be lost.","title":"Parameters"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/no-cache/","text":"okhttp / okhttp3 / CacheControl / Builder / noCache noCache \u00b6 fun noCache(): Builder Don\u2019t accept an unvalidated cached response.","title":"noCache - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/no-cache/#nocache","text":"fun noCache(): Builder Don\u2019t accept an unvalidated cached response.","title":"noCache"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/no-store/","text":"okhttp / okhttp3 / CacheControl / Builder / noStore noStore \u00b6 fun noStore(): Builder Don\u2019t store the server\u2019s response in any cache.","title":"noStore - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/no-store/#nostore","text":"fun noStore(): Builder Don\u2019t store the server\u2019s response in any cache.","title":"noStore"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/no-transform/","text":"okhttp / okhttp3 / CacheControl / Builder / noTransform noTransform \u00b6 fun noTransform(): Builder Don\u2019t accept a transformed response.","title":"noTransform - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/no-transform/#notransform","text":"fun noTransform(): Builder Don\u2019t accept a transformed response.","title":"noTransform"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/only-if-cached/","text":"okhttp / okhttp3 / CacheControl / Builder / onlyIfCached onlyIfCached \u00b6 fun onlyIfCached(): Builder Only accept the response if it is in the cache. If the response isn\u2019t cached, a 504 Unsatisfiable Request response will be returned.","title":"onlyIfCached - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cache-control/-builder/only-if-cached/#onlyifcached","text":"fun onlyIfCached(): Builder Only accept the response if it is in the cache. If the response isn\u2019t cached, a 504 Unsatisfiable Request response will be returned.","title":"onlyIfCached"},{"location":"4.x/okhttp/okhttp3/-call/","text":"okhttp / okhttp3 / Call Call \u00b6 interface Call : Cloneable A call is a request that has been prepared for execution. A call can be canceled. As this object represents a single request/response pair (stream), it cannot be executed twice. Types \u00b6 Name Summary Factory interface Factory Functions \u00b6 Name Summary <no name provided> abstract fun <no name provided>(): Unit cancel Cancels the request, if possible. Requests that are already complete cannot be canceled. abstract fun cancel(): Unit clone Create a new, identical call to this one which can be enqueued or executed even if this call has already been. abstract fun clone(): Call enqueue Schedules the request to be executed at some point in the future. abstract fun enqueue(responseCallback: Callback ): Unit execute Invokes the request immediately, and blocks until the response can be processed or is in error. abstract fun execute(): Response isCanceled abstract fun isCanceled(): Boolean isExecuted Returns true if this call has been either executed or enqueued . It is an error to execute a call more than once. abstract fun isExecuted(): Boolean request Returns the original request that initiated this call. abstract fun request(): Request timeout Returns a timeout that spans the entire call: resolving DNS, connecting, writing the request body, server processing, and reading the response body. If the call requires redirects or retries all must complete within one timeout period. abstract fun timeout(): Timeout","title":"Call - OkHttp"},{"location":"4.x/okhttp/okhttp3/-call/#call","text":"interface Call : Cloneable A call is a request that has been prepared for execution. A call can be canceled. As this object represents a single request/response pair (stream), it cannot be executed twice.","title":"Call"},{"location":"4.x/okhttp/okhttp3/-call/#types","text":"Name Summary Factory interface Factory","title":"Types"},{"location":"4.x/okhttp/okhttp3/-call/#functions","text":"Name Summary <no name provided> abstract fun <no name provided>(): Unit cancel Cancels the request, if possible. Requests that are already complete cannot be canceled. abstract fun cancel(): Unit clone Create a new, identical call to this one which can be enqueued or executed even if this call has already been. abstract fun clone(): Call enqueue Schedules the request to be executed at some point in the future. abstract fun enqueue(responseCallback: Callback ): Unit execute Invokes the request immediately, and blocks until the response can be processed or is in error. abstract fun execute(): Response isCanceled abstract fun isCanceled(): Boolean isExecuted Returns true if this call has been either executed or enqueued . It is an error to execute a call more than once. abstract fun isExecuted(): Boolean request Returns the original request that initiated this call. abstract fun request(): Request timeout Returns a timeout that spans the entire call: resolving DNS, connecting, writing the request body, server processing, and reading the response body. If the call requires redirects or retries all must complete within one timeout period. abstract fun timeout(): Timeout","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-call/-no%20name%20provided-/","text":"okhttp / okhttp3 / Call / <no name provided> <no name provided> \u00b6 abstract fun <no name provided>(): Unit","title":" no name provided "},{"location":"4.x/okhttp/okhttp3/-call/-no%20name%20provided-/#no-name-provided","text":"abstract fun <no name provided>(): Unit","title":"&lt;no name provided&gt;"},{"location":"4.x/okhttp/okhttp3/-call/cancel/","text":"okhttp / okhttp3 / Call / cancel cancel \u00b6 abstract fun cancel(): Unit Cancels the request, if possible. Requests that are already complete cannot be canceled.","title":"cancel - OkHttp"},{"location":"4.x/okhttp/okhttp3/-call/cancel/#cancel","text":"abstract fun cancel(): Unit Cancels the request, if possible. Requests that are already complete cannot be canceled.","title":"cancel"},{"location":"4.x/okhttp/okhttp3/-call/clone/","text":"okhttp / okhttp3 / Call / clone clone \u00b6 abstract fun clone(): Call Create a new, identical call to this one which can be enqueued or executed even if this call has already been.","title":"clone - OkHttp"},{"location":"4.x/okhttp/okhttp3/-call/clone/#clone","text":"abstract fun clone(): Call Create a new, identical call to this one which can be enqueued or executed even if this call has already been.","title":"clone"},{"location":"4.x/okhttp/okhttp3/-call/enqueue/","text":"okhttp / okhttp3 / Call / enqueue enqueue \u00b6 abstract fun enqueue(responseCallback: Callback ): Unit Schedules the request to be executed at some point in the future. The dispatcher defines when the request will run: usually immediately unless there are several other requests currently being executed. This client will later call back responseCallback with either an HTTP response or a failure exception. Exceptions \u00b6 IllegalStateException - when the call has already been executed.","title":"enqueue - OkHttp"},{"location":"4.x/okhttp/okhttp3/-call/enqueue/#enqueue","text":"abstract fun enqueue(responseCallback: Callback ): Unit Schedules the request to be executed at some point in the future. The dispatcher defines when the request will run: usually immediately unless there are several other requests currently being executed. This client will later call back responseCallback with either an HTTP response or a failure exception.","title":"enqueue"},{"location":"4.x/okhttp/okhttp3/-call/enqueue/#exceptions","text":"IllegalStateException - when the call has already been executed.","title":"Exceptions"},{"location":"4.x/okhttp/okhttp3/-call/execute/","text":"okhttp / okhttp3 / Call / execute execute \u00b6 abstract fun execute(): Response Invokes the request immediately, and blocks until the response can be processed or is in error. To avoid leaking resources callers should close the Response which in turn will close the underlying ResponseBody . // ensure the response (and underlying response body) is closed try (Response response = client.newCall(request).execute()) { ... } The caller may read the response body with the response\u2019s Response.body method. To avoid leaking resources callers must close the response body or the response. Note that transport-layer success (receiving a HTTP response code, headers and body) does not necessarily indicate application-layer success: response may still indicate an unhappy HTTP response code like 404 or 500. Exceptions \u00b6 IOException - if the request could not be executed due to cancellation, a connectivity problem or timeout. Because networks can fail during an exchange, it is possible that the remote server accepted the request before the failure. IllegalStateException - when the call has already been executed.","title":"execute - OkHttp"},{"location":"4.x/okhttp/okhttp3/-call/execute/#execute","text":"abstract fun execute(): Response Invokes the request immediately, and blocks until the response can be processed or is in error. To avoid leaking resources callers should close the Response which in turn will close the underlying ResponseBody . // ensure the response (and underlying response body) is closed try (Response response = client.newCall(request).execute()) { ... } The caller may read the response body with the response\u2019s Response.body method. To avoid leaking resources callers must close the response body or the response. Note that transport-layer success (receiving a HTTP response code, headers and body) does not necessarily indicate application-layer success: response may still indicate an unhappy HTTP response code like 404 or 500.","title":"execute"},{"location":"4.x/okhttp/okhttp3/-call/execute/#exceptions","text":"IOException - if the request could not be executed due to cancellation, a connectivity problem or timeout. Because networks can fail during an exchange, it is possible that the remote server accepted the request before the failure. IllegalStateException - when the call has already been executed.","title":"Exceptions"},{"location":"4.x/okhttp/okhttp3/-call/is-canceled/","text":"okhttp / okhttp3 / Call / isCanceled isCanceled \u00b6 abstract fun isCanceled(): Boolean","title":"isCanceled - OkHttp"},{"location":"4.x/okhttp/okhttp3/-call/is-canceled/#iscanceled","text":"abstract fun isCanceled(): Boolean","title":"isCanceled"},{"location":"4.x/okhttp/okhttp3/-call/is-executed/","text":"okhttp / okhttp3 / Call / isExecuted isExecuted \u00b6 abstract fun isExecuted(): Boolean Returns true if this call has been either executed or enqueued . It is an error to execute a call more than once.","title":"isExecuted - OkHttp"},{"location":"4.x/okhttp/okhttp3/-call/is-executed/#isexecuted","text":"abstract fun isExecuted(): Boolean Returns true if this call has been either executed or enqueued . It is an error to execute a call more than once.","title":"isExecuted"},{"location":"4.x/okhttp/okhttp3/-call/request/","text":"okhttp / okhttp3 / Call / request request \u00b6 abstract fun request(): Request Returns the original request that initiated this call.","title":"request - OkHttp"},{"location":"4.x/okhttp/okhttp3/-call/request/#request","text":"abstract fun request(): Request Returns the original request that initiated this call.","title":"request"},{"location":"4.x/okhttp/okhttp3/-call/timeout/","text":"okhttp / okhttp3 / Call / timeout timeout \u00b6 abstract fun timeout(): Timeout Returns a timeout that spans the entire call: resolving DNS, connecting, writing the request body, server processing, and reading the response body. If the call requires redirects or retries all must complete within one timeout period. Configure the client\u2019s default timeout with OkHttpClient.Builder.callTimeout .","title":"timeout - OkHttp"},{"location":"4.x/okhttp/okhttp3/-call/timeout/#timeout","text":"abstract fun timeout(): Timeout Returns a timeout that spans the entire call: resolving DNS, connecting, writing the request body, server processing, and reading the response body. If the call requires redirects or retries all must complete within one timeout period. Configure the client\u2019s default timeout with OkHttpClient.Builder.callTimeout .","title":"timeout"},{"location":"4.x/okhttp/okhttp3/-call/-factory/","text":"okhttp / okhttp3 / Call / Factory Factory \u00b6 interface Factory Functions \u00b6 Name Summary newCall abstract fun newCall(request: Request ): Call","title":"Factory - OkHttp"},{"location":"4.x/okhttp/okhttp3/-call/-factory/#factory","text":"interface Factory","title":"Factory"},{"location":"4.x/okhttp/okhttp3/-call/-factory/#functions","text":"Name Summary newCall abstract fun newCall(request: Request ): Call","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-call/-factory/new-call/","text":"okhttp / okhttp3 / Call / Factory / newCall newCall \u00b6 abstract fun newCall(request: Request ): Call","title":"newCall - OkHttp"},{"location":"4.x/okhttp/okhttp3/-call/-factory/new-call/#newcall","text":"abstract fun newCall(request: Request ): Call","title":"newCall"},{"location":"4.x/okhttp/okhttp3/-callback/","text":"okhttp / okhttp3 / Callback Callback \u00b6 interface Callback Functions \u00b6 Name Summary onFailure Called when the request could not be executed due to cancellation, a connectivity problem or timeout. Because networks can fail during an exchange, it is possible that the remote server accepted the request before the failure. abstract fun onFailure(call: Call , e: IOException ): Unit onResponse Called when the HTTP response was successfully returned by the remote server. The callback may proceed to read the response body with Response.body . The response is still live until its response body is closed . The recipient of the callback may consume the response body on another thread. abstract fun onResponse(call: Call , response: Response ): Unit","title":"Callback - OkHttp"},{"location":"4.x/okhttp/okhttp3/-callback/#callback","text":"interface Callback","title":"Callback"},{"location":"4.x/okhttp/okhttp3/-callback/#functions","text":"Name Summary onFailure Called when the request could not be executed due to cancellation, a connectivity problem or timeout. Because networks can fail during an exchange, it is possible that the remote server accepted the request before the failure. abstract fun onFailure(call: Call , e: IOException ): Unit onResponse Called when the HTTP response was successfully returned by the remote server. The callback may proceed to read the response body with Response.body . The response is still live until its response body is closed . The recipient of the callback may consume the response body on another thread. abstract fun onResponse(call: Call , response: Response ): Unit","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-callback/on-failure/","text":"okhttp / okhttp3 / Callback / onFailure onFailure \u00b6 abstract fun onFailure(call: Call , e: IOException ): Unit Called when the request could not be executed due to cancellation, a connectivity problem or timeout. Because networks can fail during an exchange, it is possible that the remote server accepted the request before the failure.","title":"onFailure - OkHttp"},{"location":"4.x/okhttp/okhttp3/-callback/on-failure/#onfailure","text":"abstract fun onFailure(call: Call , e: IOException ): Unit Called when the request could not be executed due to cancellation, a connectivity problem or timeout. Because networks can fail during an exchange, it is possible that the remote server accepted the request before the failure.","title":"onFailure"},{"location":"4.x/okhttp/okhttp3/-callback/on-response/","text":"okhttp / okhttp3 / Callback / onResponse onResponse \u00b6 abstract fun onResponse(call: Call , response: Response ): Unit Called when the HTTP response was successfully returned by the remote server. The callback may proceed to read the response body with Response.body . The response is still live until its response body is closed . The recipient of the callback may consume the response body on another thread. Note that transport-layer success (receiving a HTTP response code, headers and body) does not necessarily indicate application-layer success: response may still indicate an unhappy HTTP response code like 404 or 500.","title":"onResponse - OkHttp"},{"location":"4.x/okhttp/okhttp3/-callback/on-response/#onresponse","text":"abstract fun onResponse(call: Call , response: Response ): Unit Called when the HTTP response was successfully returned by the remote server. The callback may proceed to read the response body with Response.body . The response is still live until its response body is closed . The recipient of the callback may consume the response body on another thread. Note that transport-layer success (receiving a HTTP response code, headers and body) does not necessarily indicate application-layer success: response may still indicate an unhappy HTTP response code like 404 or 500.","title":"onResponse"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/","text":"okhttp / okhttp3 / CertificatePinner CertificatePinner \u00b6 class CertificatePinner Constrains which certificates are trusted. Pinning certificates defends against attacks on certificate authorities. It also prevents connections through man-in-the-middle certificate authorities either known or unknown to the application\u2019s user. This class currently pins a certificate\u2019s Subject Public Key Info as described on Adam Langley\u2019s Weblog . Pins are either base64 SHA-256 hashes as in HTTP Public Key Pinning (HPKP) or SHA-1 base64 hashes as in Chromium\u2019s static certificates . Setting up Certificate Pinning \u00b6 The easiest way to pin a host is turn on pinning with a broken configuration and read the expected configuration when the connection fails. Be sure to do this on a trusted network, and without man-in-the-middle tools like Charles or Fiddler . For example, to pin https://publicobject.com , start with a broken configuration: String hostname = \"publicobject.com\"; CertificatePinner certificatePinner = new CertificatePinner.Builder() .add(hostname, \"sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\") .build(); OkHttpClient client = OkHttpClient.Builder() .certificatePinner(certificatePinner) .build(); Request request = new Request.Builder() .url(\"https://\" + hostname) .build(); client.newCall(request).execute(); As expected, this fails with a certificate pinning exception: javax.net.ssl.SSLPeerUnverifiedException: Certificate pinning failure! Peer certificate chain: sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=: CN=publicobject.com, OU=PositiveSSL sha256/klO23nT2ehFDXCfx3eHTDRESMz3asj1muO+4aIdjiuY=: CN=COMODO RSA Secure Server CA sha256/grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=: CN=COMODO RSA Certification Authority sha256/lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=: CN=AddTrust External CA Root Pinned certificates for publicobject.com: sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA= at okhttp3.CertificatePinner.check(CertificatePinner.java) at okhttp3.Connection.upgradeToTls(Connection.java) at okhttp3.Connection.connect(Connection.java) at okhttp3.Connection.connectAndSetOwner(Connection.java) Follow up by pasting the public key hashes from the exception into the certificate pinner\u2019s configuration: CertificatePinner certificatePinner = new CertificatePinner.Builder() .add(\"publicobject.com\", \"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\") .add(\"publicobject.com\", \"sha256/klO23nT2ehFDXCfx3eHTDRESMz3asj1muO+4aIdjiuY=\") .add(\"publicobject.com\", \"sha256/grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=\") .add(\"publicobject.com\", \"sha256/lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\") .build(); Domain Patterns \u00b6 Pinning is per-hostname and/or per-wildcard pattern. To pin both publicobject.com and www.publicobject.com you must configure both hostnames. Or you may use patterns to match sets of related domain names. The following forms are permitted: Full domain name : you may pin an exact domain name like www.publicobject.com . It won\u2019t match additional prefixes ( us-west.www.publicobject.com ) or suffixes ( publicobject.com ). Any number of subdomains : Use two asterisks to like **.publicobject.com to match any number of prefixes ( us-west.www.publicobject.com , www.publicobject.com ) including no prefix at all ( publicobject.com ). For most applications this is the best way to configure certificate pinning. Exactly one subdomain : Use a single asterisk like *.publicobject.com to match exactly one prefix ( www.publicobject.com , api.publicobject.com ). Be careful with this approach as no pinning will be enforced if additional prefixes are present, or if no prefixes are present. Note that any other form is unsupported. You may not use asterisks in any position other than the leftmost label. If multiple patterns match a hostname, any match is sufficient. For example, suppose pin A applies to *.publicobject.com and pin B applies to api.publicobject.com . Handshakes for api.publicobject.com are valid if either A\u2019s or B\u2019s certificate is in the chain. Warning: Certificate Pinning is Dangerous! \u00b6 Pinning certificates limits your server team\u2019s abilities to update their TLS certificates. By pinning certificates, you take on additional operational complexity and limit your ability to migrate between certificate authorities. Do not use certificate pinning without the blessing of your server\u2019s TLS administrator! Note about self-signed certificates \u00b6 CertificatePinner can not be used to pin self-signed certificate if such certificate is not accepted by javax.net.ssl.TrustManager . See also OWASP: Certificate and Public Key Pinning . Types \u00b6 Name Summary Builder Builds a configured certificate pinner. class Builder Pin A hostname pattern and certificate hash for Certificate Pinning. class Pin Properties \u00b6 Name Summary pins val pins: Set <Pin> Functions \u00b6 Name Summary check Confirms that at least one of the certificates pinned for hostname is in peerCertificates . Does nothing if there are no certificates pinned for hostname . OkHttp calls this after a successful TLS handshake, but before the connection is used. fun check(hostname: String , peerCertificates: List < Certificate >): Unit equals fun equals(other: Any ?): Boolean findMatchingPins Returns list of matching certificates\u2019 pins for the hostname. Returns an empty list if the hostname does not have pinned certificates. fun findMatchingPins(hostname: String ): List <Pin> hashCode fun hashCode(): Int Companion Object Properties \u00b6 Name Summary DEFAULT val DEFAULT: CertificatePinner Companion Object Functions \u00b6 Name Summary pin Returns the SHA-256 of certificate \u2018s public key. fun pin(certificate: Certificate ): String sha1Hash fun X509Certificate .sha1Hash(): ByteString sha256Hash fun X509Certificate .sha256Hash(): ByteString","title":"CertificatePinner - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/#certificatepinner","text":"class CertificatePinner Constrains which certificates are trusted. Pinning certificates defends against attacks on certificate authorities. It also prevents connections through man-in-the-middle certificate authorities either known or unknown to the application\u2019s user. This class currently pins a certificate\u2019s Subject Public Key Info as described on Adam Langley\u2019s Weblog . Pins are either base64 SHA-256 hashes as in HTTP Public Key Pinning (HPKP) or SHA-1 base64 hashes as in Chromium\u2019s static certificates .","title":"CertificatePinner"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/#setting-up-certificate-pinning","text":"The easiest way to pin a host is turn on pinning with a broken configuration and read the expected configuration when the connection fails. Be sure to do this on a trusted network, and without man-in-the-middle tools like Charles or Fiddler . For example, to pin https://publicobject.com , start with a broken configuration: String hostname = \"publicobject.com\"; CertificatePinner certificatePinner = new CertificatePinner.Builder() .add(hostname, \"sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\") .build(); OkHttpClient client = OkHttpClient.Builder() .certificatePinner(certificatePinner) .build(); Request request = new Request.Builder() .url(\"https://\" + hostname) .build(); client.newCall(request).execute(); As expected, this fails with a certificate pinning exception: javax.net.ssl.SSLPeerUnverifiedException: Certificate pinning failure! Peer certificate chain: sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=: CN=publicobject.com, OU=PositiveSSL sha256/klO23nT2ehFDXCfx3eHTDRESMz3asj1muO+4aIdjiuY=: CN=COMODO RSA Secure Server CA sha256/grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=: CN=COMODO RSA Certification Authority sha256/lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=: CN=AddTrust External CA Root Pinned certificates for publicobject.com: sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA= at okhttp3.CertificatePinner.check(CertificatePinner.java) at okhttp3.Connection.upgradeToTls(Connection.java) at okhttp3.Connection.connect(Connection.java) at okhttp3.Connection.connectAndSetOwner(Connection.java) Follow up by pasting the public key hashes from the exception into the certificate pinner\u2019s configuration: CertificatePinner certificatePinner = new CertificatePinner.Builder() .add(\"publicobject.com\", \"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\") .add(\"publicobject.com\", \"sha256/klO23nT2ehFDXCfx3eHTDRESMz3asj1muO+4aIdjiuY=\") .add(\"publicobject.com\", \"sha256/grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=\") .add(\"publicobject.com\", \"sha256/lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=\") .build();","title":"Setting up Certificate Pinning"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/#domain-patterns","text":"Pinning is per-hostname and/or per-wildcard pattern. To pin both publicobject.com and www.publicobject.com you must configure both hostnames. Or you may use patterns to match sets of related domain names. The following forms are permitted: Full domain name : you may pin an exact domain name like www.publicobject.com . It won\u2019t match additional prefixes ( us-west.www.publicobject.com ) or suffixes ( publicobject.com ). Any number of subdomains : Use two asterisks to like **.publicobject.com to match any number of prefixes ( us-west.www.publicobject.com , www.publicobject.com ) including no prefix at all ( publicobject.com ). For most applications this is the best way to configure certificate pinning. Exactly one subdomain : Use a single asterisk like *.publicobject.com to match exactly one prefix ( www.publicobject.com , api.publicobject.com ). Be careful with this approach as no pinning will be enforced if additional prefixes are present, or if no prefixes are present. Note that any other form is unsupported. You may not use asterisks in any position other than the leftmost label. If multiple patterns match a hostname, any match is sufficient. For example, suppose pin A applies to *.publicobject.com and pin B applies to api.publicobject.com . Handshakes for api.publicobject.com are valid if either A\u2019s or B\u2019s certificate is in the chain.","title":"Domain Patterns"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/#warning-certificate-pinning-is-dangerous","text":"Pinning certificates limits your server team\u2019s abilities to update their TLS certificates. By pinning certificates, you take on additional operational complexity and limit your ability to migrate between certificate authorities. Do not use certificate pinning without the blessing of your server\u2019s TLS administrator!","title":"Warning: Certificate Pinning is Dangerous!"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/#note-about-self-signed-certificates","text":"CertificatePinner can not be used to pin self-signed certificate if such certificate is not accepted by javax.net.ssl.TrustManager . See also OWASP: Certificate and Public Key Pinning .","title":"Note about self-signed certificates"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/#types","text":"Name Summary Builder Builds a configured certificate pinner. class Builder Pin A hostname pattern and certificate hash for Certificate Pinning. class Pin","title":"Types"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/#properties","text":"Name Summary pins val pins: Set <Pin>","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/#functions","text":"Name Summary check Confirms that at least one of the certificates pinned for hostname is in peerCertificates . Does nothing if there are no certificates pinned for hostname . OkHttp calls this after a successful TLS handshake, but before the connection is used. fun check(hostname: String , peerCertificates: List < Certificate >): Unit equals fun equals(other: Any ?): Boolean findMatchingPins Returns list of matching certificates\u2019 pins for the hostname. Returns an empty list if the hostname does not have pinned certificates. fun findMatchingPins(hostname: String ): List <Pin> hashCode fun hashCode(): Int","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/#companion-object-properties","text":"Name Summary DEFAULT val DEFAULT: CertificatePinner","title":"Companion Object Properties"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/#companion-object-functions","text":"Name Summary pin Returns the SHA-256 of certificate \u2018s public key. fun pin(certificate: Certificate ): String sha1Hash fun X509Certificate .sha1Hash(): ByteString sha256Hash fun X509Certificate .sha256Hash(): ByteString","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-d-e-f-a-u-l-t/","text":"okhttp / okhttp3 / CertificatePinner / DEFAULT DEFAULT \u00b6 val DEFAULT: CertificatePinner","title":"DEFAULT - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-d-e-f-a-u-l-t/#default","text":"val DEFAULT: CertificatePinner","title":"DEFAULT"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/check/","text":"okhttp / okhttp3 / CertificatePinner / check check \u00b6 fun check(hostname: String , peerCertificates: List < Certificate >): Unit Confirms that at least one of the certificates pinned for hostname is in peerCertificates . Does nothing if there are no certificates pinned for hostname . OkHttp calls this after a successful TLS handshake, but before the connection is used. Exceptions \u00b6 SSLPeerUnverifiedException - if peerCertificates don\u2019t match the certificates pinned for hostname .","title":"check - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/check/#check","text":"fun check(hostname: String , peerCertificates: List < Certificate >): Unit Confirms that at least one of the certificates pinned for hostname is in peerCertificates . Does nothing if there are no certificates pinned for hostname . OkHttp calls this after a successful TLS handshake, but before the connection is used.","title":"check"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/check/#exceptions","text":"SSLPeerUnverifiedException - if peerCertificates don\u2019t match the certificates pinned for hostname .","title":"Exceptions"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/equals/","text":"okhttp / okhttp3 / CertificatePinner / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/find-matching-pins/","text":"okhttp / okhttp3 / CertificatePinner / findMatchingPins findMatchingPins \u00b6 fun findMatchingPins(hostname: String ): List <Pin> Returns list of matching certificates\u2019 pins for the hostname. Returns an empty list if the hostname does not have pinned certificates.","title":"findMatchingPins - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/find-matching-pins/#findmatchingpins","text":"fun findMatchingPins(hostname: String ): List <Pin> Returns list of matching certificates\u2019 pins for the hostname. Returns an empty list if the hostname does not have pinned certificates.","title":"findMatchingPins"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/hash-code/","text":"okhttp / okhttp3 / CertificatePinner / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/pin/","text":"okhttp / okhttp3 / CertificatePinner / pin pin \u00b6 @JvmStatic fun pin(certificate: Certificate ): String Returns the SHA-256 of certificate \u2018s public key. In OkHttp 3.1.2 and earlier, this returned a SHA-1 hash of the public key. Both types are supported, but SHA-256 is preferred.","title":"pin - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/pin/#pin","text":"@JvmStatic fun pin(certificate: Certificate ): String Returns the SHA-256 of certificate \u2018s public key. In OkHttp 3.1.2 and earlier, this returned a SHA-1 hash of the public key. Both types are supported, but SHA-256 is preferred.","title":"pin"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/pins/","text":"okhttp / okhttp3 / CertificatePinner / pins pins \u00b6 val pins: Set <Pin>","title":"pins - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/pins/#pins","text":"val pins: Set <Pin>","title":"pins"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/sha1-hash/","text":"okhttp / okhttp3 / CertificatePinner / sha1Hash sha1Hash \u00b6 @JvmStatic fun X509Certificate .sha1Hash(): ByteString","title":"sha1Hash - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/sha1-hash/#sha1hash","text":"@JvmStatic fun X509Certificate .sha1Hash(): ByteString","title":"sha1Hash"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/sha256-hash/","text":"okhttp / okhttp3 / CertificatePinner / sha256Hash sha256Hash \u00b6 @JvmStatic fun X509Certificate .sha256Hash(): ByteString","title":"sha256Hash - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/sha256-hash/#sha256hash","text":"@JvmStatic fun X509Certificate .sha256Hash(): ByteString","title":"sha256Hash"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-builder/","text":"okhttp / okhttp3 / CertificatePinner / Builder Builder \u00b6 class Builder Builds a configured certificate pinner. Constructors \u00b6 Name Summary <init> Builds a configured certificate pinner. Builder() Properties \u00b6 Name Summary pins val pins: MutableList <Pin> Functions \u00b6 Name Summary add Pins certificates for pattern . fun add(pattern: String , vararg pins: String ): Builder build fun build(): CertificatePinner","title":"Builder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-builder/#builder","text":"class Builder Builds a configured certificate pinner.","title":"Builder"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-builder/#constructors","text":"Name Summary <init> Builds a configured certificate pinner. Builder()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-builder/#properties","text":"Name Summary pins val pins: MutableList <Pin>","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-builder/#functions","text":"Name Summary add Pins certificates for pattern . fun add(pattern: String , vararg pins: String ): Builder build fun build(): CertificatePinner","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-builder/-init-/","text":"okhttp / okhttp3 / CertificatePinner / Builder / <init> <init> \u00b6 Builder() Builds a configured certificate pinner.","title":" init "},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-builder/-init-/#init","text":"Builder() Builds a configured certificate pinner.","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-builder/add/","text":"okhttp / okhttp3 / CertificatePinner / Builder / add add \u00b6 fun add(pattern: String , vararg pins: String ): Builder Pins certificates for pattern . Parameters \u00b6 pattern - lower-case host name or wildcard pattern such as *.example.com . pins - SHA-256 or SHA-1 hashes. Each pin is a hash of a certificate\u2019s Subject Public Key Info, base64-encoded and prefixed with either sha256/ or sha1/ .","title":"add - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-builder/add/#add","text":"fun add(pattern: String , vararg pins: String ): Builder Pins certificates for pattern .","title":"add"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-builder/add/#parameters","text":"pattern - lower-case host name or wildcard pattern such as *.example.com . pins - SHA-256 or SHA-1 hashes. Each pin is a hash of a certificate\u2019s Subject Public Key Info, base64-encoded and prefixed with either sha256/ or sha1/ .","title":"Parameters"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-builder/build/","text":"okhttp / okhttp3 / CertificatePinner / Builder / build build \u00b6 fun build(): CertificatePinner","title":"build - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-builder/build/#build","text":"fun build(): CertificatePinner","title":"build"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-builder/pins/","text":"okhttp / okhttp3 / CertificatePinner / Builder / pins pins \u00b6 val pins: MutableList <Pin>","title":"pins - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-builder/pins/#pins","text":"val pins: MutableList <Pin>","title":"pins"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/","text":"okhttp / okhttp3 / CertificatePinner / Pin Pin \u00b6 class Pin A hostname pattern and certificate hash for Certificate Pinning. Constructors \u00b6 Name Summary <init> A hostname pattern and certificate hash for Certificate Pinning. Pin(pattern: String , pin: String ) Properties \u00b6 Name Summary hash The hash of the pinned certificate using hashAlgorithm . val hash: ByteString hashAlgorithm Either sha1 or sha256 . val hashAlgorithm: String pattern A hostname like example.com or a pattern like *.example.com (canonical form). val pattern: String Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int matchesCertificate fun matchesCertificate(certificate: X509Certificate ): Boolean matchesHostname fun matchesHostname(hostname: String ): Boolean toString fun toString(): String","title":"Pin - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/#pin","text":"class Pin A hostname pattern and certificate hash for Certificate Pinning.","title":"Pin"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/#constructors","text":"Name Summary <init> A hostname pattern and certificate hash for Certificate Pinning. Pin(pattern: String , pin: String )","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/#properties","text":"Name Summary hash The hash of the pinned certificate using hashAlgorithm . val hash: ByteString hashAlgorithm Either sha1 or sha256 . val hashAlgorithm: String pattern A hostname like example.com or a pattern like *.example.com (canonical form). val pattern: String","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int matchesCertificate fun matchesCertificate(certificate: X509Certificate ): Boolean matchesHostname fun matchesHostname(hostname: String ): Boolean toString fun toString(): String","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/-init-/","text":"okhttp / okhttp3 / CertificatePinner / Pin / <init> <init> \u00b6 Pin(pattern: String , pin: String ) A hostname pattern and certificate hash for Certificate Pinning.","title":" init "},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/-init-/#init","text":"Pin(pattern: String , pin: String ) A hostname pattern and certificate hash for Certificate Pinning.","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/equals/","text":"okhttp / okhttp3 / CertificatePinner / Pin / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/hash-algorithm/","text":"okhttp / okhttp3 / CertificatePinner / Pin / hashAlgorithm hashAlgorithm \u00b6 val hashAlgorithm: String Either sha1 or sha256 .","title":"hashAlgorithm - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/hash-algorithm/#hashalgorithm","text":"val hashAlgorithm: String Either sha1 or sha256 .","title":"hashAlgorithm"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/hash-code/","text":"okhttp / okhttp3 / CertificatePinner / Pin / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/hash/","text":"okhttp / okhttp3 / CertificatePinner / Pin / hash hash \u00b6 val hash: ByteString The hash of the pinned certificate using hashAlgorithm .","title":"hash - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/hash/#hash","text":"val hash: ByteString The hash of the pinned certificate using hashAlgorithm .","title":"hash"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/matches-certificate/","text":"okhttp / okhttp3 / CertificatePinner / Pin / matchesCertificate matchesCertificate \u00b6 fun matchesCertificate(certificate: X509Certificate ): Boolean","title":"matchesCertificate - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/matches-certificate/#matchescertificate","text":"fun matchesCertificate(certificate: X509Certificate ): Boolean","title":"matchesCertificate"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/matches-hostname/","text":"okhttp / okhttp3 / CertificatePinner / Pin / matchesHostname matchesHostname \u00b6 fun matchesHostname(hostname: String ): Boolean","title":"matchesHostname - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/matches-hostname/#matcheshostname","text":"fun matchesHostname(hostname: String ): Boolean","title":"matchesHostname"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/pattern/","text":"okhttp / okhttp3 / CertificatePinner / Pin / pattern pattern \u00b6 val pattern: String A hostname like example.com or a pattern like *.example.com (canonical form).","title":"pattern - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/pattern/#pattern","text":"val pattern: String A hostname like example.com or a pattern like *.example.com (canonical form).","title":"pattern"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/to-string/","text":"okhttp / okhttp3 / CertificatePinner / Pin / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-certificate-pinner/-pin/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/okhttp/okhttp3/-challenge/","text":"okhttp / okhttp3 / Challenge Challenge \u00b6 class Challenge An RFC 7235 challenge. Constructors \u00b6 Name Summary <init> Challenge(scheme: String , realm: String ) An RFC 7235 challenge. Challenge(scheme: String , authParams: Map < String ?, String >) Properties \u00b6 Name Summary authParams Returns the auth params, including realm and charset if present, but as strings. The map\u2019s keys are lowercase and should be treated case-insensitively. val authParams: Map < String ?, String > charset The charset that should be used to encode the credentials. val charset: Charset realm Returns the protection space. val realm: String ? scheme Returns the authentication scheme, like Basic . val scheme: String Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String withCharset Returns a copy of this charset that expects a credential encoded with charset . fun withCharset(charset: Charset ): Challenge","title":"Challenge - OkHttp"},{"location":"4.x/okhttp/okhttp3/-challenge/#challenge","text":"class Challenge An RFC 7235 challenge.","title":"Challenge"},{"location":"4.x/okhttp/okhttp3/-challenge/#constructors","text":"Name Summary <init> Challenge(scheme: String , realm: String ) An RFC 7235 challenge. Challenge(scheme: String , authParams: Map < String ?, String >)","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-challenge/#properties","text":"Name Summary authParams Returns the auth params, including realm and charset if present, but as strings. The map\u2019s keys are lowercase and should be treated case-insensitively. val authParams: Map < String ?, String > charset The charset that should be used to encode the credentials. val charset: Charset realm Returns the protection space. val realm: String ? scheme Returns the authentication scheme, like Basic . val scheme: String","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-challenge/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String withCharset Returns a copy of this charset that expects a credential encoded with charset . fun withCharset(charset: Charset ): Challenge","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-challenge/-init-/","text":"okhttp / okhttp3 / Challenge / <init> <init> \u00b6 Challenge(scheme: String , realm: String )``Challenge(scheme: String , authParams: Map < String ?, String >) An RFC 7235 challenge.","title":" init "},{"location":"4.x/okhttp/okhttp3/-challenge/-init-/#init","text":"Challenge(scheme: String , realm: String )``Challenge(scheme: String , authParams: Map < String ?, String >) An RFC 7235 challenge.","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-challenge/auth-params/","text":"okhttp / okhttp3 / Challenge / authParams authParams \u00b6 val authParams: Map < String ?, String > Returns the auth params, including realm and charset if present, but as strings. The map\u2019s keys are lowercase and should be treated case-insensitively. Getter Returns the auth params, including realm and charset if present, but as strings. The map\u2019s keys are lowercase and should be treated case-insensitively.","title":"authParams - OkHttp"},{"location":"4.x/okhttp/okhttp3/-challenge/auth-params/#authparams","text":"val authParams: Map < String ?, String > Returns the auth params, including realm and charset if present, but as strings. The map\u2019s keys are lowercase and should be treated case-insensitively. Getter Returns the auth params, including realm and charset if present, but as strings. The map\u2019s keys are lowercase and should be treated case-insensitively.","title":"authParams"},{"location":"4.x/okhttp/okhttp3/-challenge/charset/","text":"okhttp / okhttp3 / Challenge / charset charset \u00b6 val charset: Charset The charset that should be used to encode the credentials.","title":"charset - OkHttp"},{"location":"4.x/okhttp/okhttp3/-challenge/charset/#charset","text":"val charset: Charset The charset that should be used to encode the credentials.","title":"charset"},{"location":"4.x/okhttp/okhttp3/-challenge/equals/","text":"okhttp / okhttp3 / Challenge / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - OkHttp"},{"location":"4.x/okhttp/okhttp3/-challenge/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"4.x/okhttp/okhttp3/-challenge/hash-code/","text":"okhttp / okhttp3 / Challenge / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - OkHttp"},{"location":"4.x/okhttp/okhttp3/-challenge/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"4.x/okhttp/okhttp3/-challenge/realm/","text":"okhttp / okhttp3 / Challenge / realm realm \u00b6 val realm: String ? Returns the protection space.","title":"realm - OkHttp"},{"location":"4.x/okhttp/okhttp3/-challenge/realm/#realm","text":"val realm: String ? Returns the protection space.","title":"realm"},{"location":"4.x/okhttp/okhttp3/-challenge/scheme/","text":"okhttp / okhttp3 / Challenge / scheme scheme \u00b6 val scheme: String Returns the authentication scheme, like Basic .","title":"scheme - OkHttp"},{"location":"4.x/okhttp/okhttp3/-challenge/scheme/#scheme","text":"val scheme: String Returns the authentication scheme, like Basic .","title":"scheme"},{"location":"4.x/okhttp/okhttp3/-challenge/to-string/","text":"okhttp / okhttp3 / Challenge / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-challenge/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/okhttp/okhttp3/-challenge/with-charset/","text":"okhttp / okhttp3 / Challenge / withCharset withCharset \u00b6 fun withCharset(charset: Charset ): Challenge Returns a copy of this charset that expects a credential encoded with charset .","title":"withCharset - OkHttp"},{"location":"4.x/okhttp/okhttp3/-challenge/with-charset/#withcharset","text":"fun withCharset(charset: Charset ): Challenge Returns a copy of this charset that expects a credential encoded with charset .","title":"withCharset"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/","text":"okhttp / okhttp3 / CipherSuite CipherSuite \u00b6 class CipherSuite TLS cipher suites . Not all cipher suites are supported on all platforms. As newer cipher suites are created (for stronger privacy, better performance, etc.) they will be adopted by the platform and then exposed here. Cipher suites that are not available on either Android (through API level 24) or Java (through JDK 9) are omitted for brevity. See Android SSLEngine which lists the cipher suites supported by Android. See JDK Providers which lists the cipher suites supported by Oracle. See NativeCrypto.java which lists the cipher suites supported by Conscrypt. Properties \u00b6 Name Summary javaName Returns the Java name of this cipher suite. For some older cipher suites the Java name has the prefix SSL_ , causing the Java name to be different from the instance name which is always prefixed TLS_ . For example, TLS_RSA_EXPORT_WITH_RC4_40_MD5.javaName() is \"SSL_RSA_EXPORT_WITH_RC4_40_MD5\" . val javaName: String Functions \u00b6 Name Summary toString fun toString(): String Companion Object Properties \u00b6 Name Summary TLS_AES_128_CCM_8_SHA256 val TLS_AES_128_CCM_8_SHA256: CipherSuite TLS_AES_128_CCM_SHA256 val TLS_AES_128_CCM_SHA256: CipherSuite TLS_AES_128_GCM_SHA256 val TLS_AES_128_GCM_SHA256: CipherSuite TLS_AES_256_GCM_SHA384 val TLS_AES_256_GCM_SHA384: CipherSuite TLS_CHACHA20_POLY1305_SHA256 val TLS_CHACHA20_POLY1305_SHA256: CipherSuite TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA val TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA: CipherSuite TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 val TLS_DH_anon_EXPORT_WITH_RC4_40_MD5: CipherSuite TLS_DH_anon_WITH_3DES_EDE_CBC_SHA val TLS_DH_anon_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA val TLS_DH_anon_WITH_AES_128_CBC_SHA: CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA256 val TLS_DH_anon_WITH_AES_128_CBC_SHA256: CipherSuite TLS_DH_anon_WITH_AES_128_GCM_SHA256 val TLS_DH_anon_WITH_AES_128_GCM_SHA256: CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA val TLS_DH_anon_WITH_AES_256_CBC_SHA: CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA256 val TLS_DH_anon_WITH_AES_256_CBC_SHA256: CipherSuite TLS_DH_anon_WITH_AES_256_GCM_SHA384 val TLS_DH_anon_WITH_AES_256_GCM_SHA384: CipherSuite TLS_DH_anon_WITH_DES_CBC_SHA val TLS_DH_anon_WITH_DES_CBC_SHA: CipherSuite TLS_DH_anon_WITH_RC4_128_MD5 val TLS_DH_anon_WITH_RC4_128_MD5: CipherSuite TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA val TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA: CipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA val TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA val TLS_DHE_DSS_WITH_AES_128_CBC_SHA: CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 val TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: CipherSuite TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 val TLS_DHE_DSS_WITH_AES_128_GCM_SHA256: CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA val TLS_DHE_DSS_WITH_AES_256_CBC_SHA: CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 val TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: CipherSuite TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 val TLS_DHE_DSS_WITH_AES_256_GCM_SHA384: CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA val TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA: CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA val TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA: CipherSuite TLS_DHE_DSS_WITH_DES_CBC_SHA val TLS_DHE_DSS_WITH_DES_CBC_SHA: CipherSuite TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA val TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA: CipherSuite TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA val TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA val TLS_DHE_RSA_WITH_AES_128_CBC_SHA: CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 val TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: CipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 val TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA val TLS_DHE_RSA_WITH_AES_256_CBC_SHA: CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 val TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: CipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 val TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA val TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA: CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA val TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA: CipherSuite TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 val TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256: CipherSuite TLS_DHE_RSA_WITH_DES_CBC_SHA val TLS_DHE_RSA_WITH_DES_CBC_SHA: CipherSuite TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA val TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_ECDH_anon_WITH_AES_128_CBC_SHA val TLS_ECDH_anon_WITH_AES_128_CBC_SHA: CipherSuite TLS_ECDH_anon_WITH_AES_256_CBC_SHA val TLS_ECDH_anon_WITH_AES_256_CBC_SHA: CipherSuite TLS_ECDH_anon_WITH_NULL_SHA val TLS_ECDH_anon_WITH_NULL_SHA: CipherSuite TLS_ECDH_anon_WITH_RC4_128_SHA val TLS_ECDH_anon_WITH_RC4_128_SHA: CipherSuite TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA val TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA val TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA: CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 val TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256: CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 val TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA val TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA: CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 val TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384: CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 val TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: CipherSuite TLS_ECDH_ECDSA_WITH_NULL_SHA val TLS_ECDH_ECDSA_WITH_NULL_SHA: CipherSuite TLS_ECDH_ECDSA_WITH_RC4_128_SHA val TLS_ECDH_ECDSA_WITH_RC4_128_SHA: CipherSuite TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA val TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA val TLS_ECDH_RSA_WITH_AES_128_CBC_SHA: CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 val TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256: CipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 val TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256: CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA val TLS_ECDH_RSA_WITH_AES_256_CBC_SHA: CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 val TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384: CipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 val TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384: CipherSuite TLS_ECDH_RSA_WITH_NULL_SHA val TLS_ECDH_RSA_WITH_NULL_SHA: CipherSuite TLS_ECDH_RSA_WITH_RC4_128_SHA val TLS_ECDH_RSA_WITH_RC4_128_SHA: CipherSuite TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA val TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA val TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 val TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 val TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA val TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 val TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 val TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: CipherSuite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 val TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: CipherSuite TLS_ECDHE_ECDSA_WITH_NULL_SHA val TLS_ECDHE_ECDSA_WITH_NULL_SHA: CipherSuite TLS_ECDHE_ECDSA_WITH_RC4_128_SHA val TLS_ECDHE_ECDSA_WITH_RC4_128_SHA: CipherSuite TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA val TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA: CipherSuite TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA val TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA: CipherSuite TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 val TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256: CipherSuite TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA val TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA val TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 val TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 val TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA val TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 val TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 val TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: CipherSuite TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 val TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: CipherSuite TLS_ECDHE_RSA_WITH_NULL_SHA val TLS_ECDHE_RSA_WITH_NULL_SHA: CipherSuite TLS_ECDHE_RSA_WITH_RC4_128_SHA val TLS_ECDHE_RSA_WITH_RC4_128_SHA: CipherSuite TLS_EMPTY_RENEGOTIATION_INFO_SCSV val TLS_EMPTY_RENEGOTIATION_INFO_SCSV: CipherSuite TLS_FALLBACK_SCSV val TLS_FALLBACK_SCSV: CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 val TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5: CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA val TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA: CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_MD5 val TLS_KRB5_EXPORT_WITH_RC4_40_MD5: CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_SHA val TLS_KRB5_EXPORT_WITH_RC4_40_SHA: CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_MD5 val TLS_KRB5_WITH_3DES_EDE_CBC_MD5: CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_SHA val TLS_KRB5_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_KRB5_WITH_DES_CBC_MD5 val TLS_KRB5_WITH_DES_CBC_MD5: CipherSuite TLS_KRB5_WITH_DES_CBC_SHA val TLS_KRB5_WITH_DES_CBC_SHA: CipherSuite TLS_KRB5_WITH_RC4_128_MD5 val TLS_KRB5_WITH_RC4_128_MD5: CipherSuite TLS_KRB5_WITH_RC4_128_SHA val TLS_KRB5_WITH_RC4_128_SHA: CipherSuite TLS_PSK_WITH_3DES_EDE_CBC_SHA val TLS_PSK_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_PSK_WITH_AES_128_CBC_SHA val TLS_PSK_WITH_AES_128_CBC_SHA: CipherSuite TLS_PSK_WITH_AES_256_CBC_SHA val TLS_PSK_WITH_AES_256_CBC_SHA: CipherSuite TLS_PSK_WITH_RC4_128_SHA val TLS_PSK_WITH_RC4_128_SHA: CipherSuite TLS_RSA_EXPORT_WITH_DES40_CBC_SHA val TLS_RSA_EXPORT_WITH_DES40_CBC_SHA: CipherSuite TLS_RSA_EXPORT_WITH_RC4_40_MD5 val TLS_RSA_EXPORT_WITH_RC4_40_MD5: CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA val TLS_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA val TLS_RSA_WITH_AES_128_CBC_SHA: CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256 val TLS_RSA_WITH_AES_128_CBC_SHA256: CipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256 val TLS_RSA_WITH_AES_128_GCM_SHA256: CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA val TLS_RSA_WITH_AES_256_CBC_SHA: CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256 val TLS_RSA_WITH_AES_256_CBC_SHA256: CipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384 val TLS_RSA_WITH_AES_256_GCM_SHA384: CipherSuite TLS_RSA_WITH_CAMELLIA_128_CBC_SHA val TLS_RSA_WITH_CAMELLIA_128_CBC_SHA: CipherSuite TLS_RSA_WITH_CAMELLIA_256_CBC_SHA val TLS_RSA_WITH_CAMELLIA_256_CBC_SHA: CipherSuite TLS_RSA_WITH_DES_CBC_SHA val TLS_RSA_WITH_DES_CBC_SHA: CipherSuite TLS_RSA_WITH_NULL_MD5 val TLS_RSA_WITH_NULL_MD5: CipherSuite TLS_RSA_WITH_NULL_SHA val TLS_RSA_WITH_NULL_SHA: CipherSuite TLS_RSA_WITH_NULL_SHA256 val TLS_RSA_WITH_NULL_SHA256: CipherSuite TLS_RSA_WITH_RC4_128_MD5 val TLS_RSA_WITH_RC4_128_MD5: CipherSuite TLS_RSA_WITH_RC4_128_SHA val TLS_RSA_WITH_RC4_128_SHA: CipherSuite TLS_RSA_WITH_SEED_CBC_SHA val TLS_RSA_WITH_SEED_CBC_SHA: CipherSuite Companion Object Functions \u00b6 Name Summary forJavaName fun forJavaName(javaName: String ): CipherSuite","title":"CipherSuite - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/#ciphersuite","text":"class CipherSuite TLS cipher suites . Not all cipher suites are supported on all platforms. As newer cipher suites are created (for stronger privacy, better performance, etc.) they will be adopted by the platform and then exposed here. Cipher suites that are not available on either Android (through API level 24) or Java (through JDK 9) are omitted for brevity. See Android SSLEngine which lists the cipher suites supported by Android. See JDK Providers which lists the cipher suites supported by Oracle. See NativeCrypto.java which lists the cipher suites supported by Conscrypt.","title":"CipherSuite"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/#properties","text":"Name Summary javaName Returns the Java name of this cipher suite. For some older cipher suites the Java name has the prefix SSL_ , causing the Java name to be different from the instance name which is always prefixed TLS_ . For example, TLS_RSA_EXPORT_WITH_RC4_40_MD5.javaName() is \"SSL_RSA_EXPORT_WITH_RC4_40_MD5\" . val javaName: String","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/#companion-object-properties","text":"Name Summary TLS_AES_128_CCM_8_SHA256 val TLS_AES_128_CCM_8_SHA256: CipherSuite TLS_AES_128_CCM_SHA256 val TLS_AES_128_CCM_SHA256: CipherSuite TLS_AES_128_GCM_SHA256 val TLS_AES_128_GCM_SHA256: CipherSuite TLS_AES_256_GCM_SHA384 val TLS_AES_256_GCM_SHA384: CipherSuite TLS_CHACHA20_POLY1305_SHA256 val TLS_CHACHA20_POLY1305_SHA256: CipherSuite TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA val TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA: CipherSuite TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 val TLS_DH_anon_EXPORT_WITH_RC4_40_MD5: CipherSuite TLS_DH_anon_WITH_3DES_EDE_CBC_SHA val TLS_DH_anon_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA val TLS_DH_anon_WITH_AES_128_CBC_SHA: CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA256 val TLS_DH_anon_WITH_AES_128_CBC_SHA256: CipherSuite TLS_DH_anon_WITH_AES_128_GCM_SHA256 val TLS_DH_anon_WITH_AES_128_GCM_SHA256: CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA val TLS_DH_anon_WITH_AES_256_CBC_SHA: CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA256 val TLS_DH_anon_WITH_AES_256_CBC_SHA256: CipherSuite TLS_DH_anon_WITH_AES_256_GCM_SHA384 val TLS_DH_anon_WITH_AES_256_GCM_SHA384: CipherSuite TLS_DH_anon_WITH_DES_CBC_SHA val TLS_DH_anon_WITH_DES_CBC_SHA: CipherSuite TLS_DH_anon_WITH_RC4_128_MD5 val TLS_DH_anon_WITH_RC4_128_MD5: CipherSuite TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA val TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA: CipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA val TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA val TLS_DHE_DSS_WITH_AES_128_CBC_SHA: CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 val TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: CipherSuite TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 val TLS_DHE_DSS_WITH_AES_128_GCM_SHA256: CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA val TLS_DHE_DSS_WITH_AES_256_CBC_SHA: CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 val TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: CipherSuite TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 val TLS_DHE_DSS_WITH_AES_256_GCM_SHA384: CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA val TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA: CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA val TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA: CipherSuite TLS_DHE_DSS_WITH_DES_CBC_SHA val TLS_DHE_DSS_WITH_DES_CBC_SHA: CipherSuite TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA val TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA: CipherSuite TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA val TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA val TLS_DHE_RSA_WITH_AES_128_CBC_SHA: CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 val TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: CipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 val TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA val TLS_DHE_RSA_WITH_AES_256_CBC_SHA: CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 val TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: CipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 val TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA val TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA: CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA val TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA: CipherSuite TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 val TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256: CipherSuite TLS_DHE_RSA_WITH_DES_CBC_SHA val TLS_DHE_RSA_WITH_DES_CBC_SHA: CipherSuite TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA val TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_ECDH_anon_WITH_AES_128_CBC_SHA val TLS_ECDH_anon_WITH_AES_128_CBC_SHA: CipherSuite TLS_ECDH_anon_WITH_AES_256_CBC_SHA val TLS_ECDH_anon_WITH_AES_256_CBC_SHA: CipherSuite TLS_ECDH_anon_WITH_NULL_SHA val TLS_ECDH_anon_WITH_NULL_SHA: CipherSuite TLS_ECDH_anon_WITH_RC4_128_SHA val TLS_ECDH_anon_WITH_RC4_128_SHA: CipherSuite TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA val TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA val TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA: CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 val TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256: CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 val TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA val TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA: CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 val TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384: CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 val TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: CipherSuite TLS_ECDH_ECDSA_WITH_NULL_SHA val TLS_ECDH_ECDSA_WITH_NULL_SHA: CipherSuite TLS_ECDH_ECDSA_WITH_RC4_128_SHA val TLS_ECDH_ECDSA_WITH_RC4_128_SHA: CipherSuite TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA val TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA val TLS_ECDH_RSA_WITH_AES_128_CBC_SHA: CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 val TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256: CipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 val TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256: CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA val TLS_ECDH_RSA_WITH_AES_256_CBC_SHA: CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 val TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384: CipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 val TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384: CipherSuite TLS_ECDH_RSA_WITH_NULL_SHA val TLS_ECDH_RSA_WITH_NULL_SHA: CipherSuite TLS_ECDH_RSA_WITH_RC4_128_SHA val TLS_ECDH_RSA_WITH_RC4_128_SHA: CipherSuite TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA val TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA val TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 val TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 val TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA val TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 val TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 val TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: CipherSuite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 val TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: CipherSuite TLS_ECDHE_ECDSA_WITH_NULL_SHA val TLS_ECDHE_ECDSA_WITH_NULL_SHA: CipherSuite TLS_ECDHE_ECDSA_WITH_RC4_128_SHA val TLS_ECDHE_ECDSA_WITH_RC4_128_SHA: CipherSuite TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA val TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA: CipherSuite TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA val TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA: CipherSuite TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 val TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256: CipherSuite TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA val TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA val TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 val TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 val TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA val TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 val TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 val TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: CipherSuite TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 val TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: CipherSuite TLS_ECDHE_RSA_WITH_NULL_SHA val TLS_ECDHE_RSA_WITH_NULL_SHA: CipherSuite TLS_ECDHE_RSA_WITH_RC4_128_SHA val TLS_ECDHE_RSA_WITH_RC4_128_SHA: CipherSuite TLS_EMPTY_RENEGOTIATION_INFO_SCSV val TLS_EMPTY_RENEGOTIATION_INFO_SCSV: CipherSuite TLS_FALLBACK_SCSV val TLS_FALLBACK_SCSV: CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 val TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5: CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA val TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA: CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_MD5 val TLS_KRB5_EXPORT_WITH_RC4_40_MD5: CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_SHA val TLS_KRB5_EXPORT_WITH_RC4_40_SHA: CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_MD5 val TLS_KRB5_WITH_3DES_EDE_CBC_MD5: CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_SHA val TLS_KRB5_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_KRB5_WITH_DES_CBC_MD5 val TLS_KRB5_WITH_DES_CBC_MD5: CipherSuite TLS_KRB5_WITH_DES_CBC_SHA val TLS_KRB5_WITH_DES_CBC_SHA: CipherSuite TLS_KRB5_WITH_RC4_128_MD5 val TLS_KRB5_WITH_RC4_128_MD5: CipherSuite TLS_KRB5_WITH_RC4_128_SHA val TLS_KRB5_WITH_RC4_128_SHA: CipherSuite TLS_PSK_WITH_3DES_EDE_CBC_SHA val TLS_PSK_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_PSK_WITH_AES_128_CBC_SHA val TLS_PSK_WITH_AES_128_CBC_SHA: CipherSuite TLS_PSK_WITH_AES_256_CBC_SHA val TLS_PSK_WITH_AES_256_CBC_SHA: CipherSuite TLS_PSK_WITH_RC4_128_SHA val TLS_PSK_WITH_RC4_128_SHA: CipherSuite TLS_RSA_EXPORT_WITH_DES40_CBC_SHA val TLS_RSA_EXPORT_WITH_DES40_CBC_SHA: CipherSuite TLS_RSA_EXPORT_WITH_RC4_40_MD5 val TLS_RSA_EXPORT_WITH_RC4_40_MD5: CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA val TLS_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA val TLS_RSA_WITH_AES_128_CBC_SHA: CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256 val TLS_RSA_WITH_AES_128_CBC_SHA256: CipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256 val TLS_RSA_WITH_AES_128_GCM_SHA256: CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA val TLS_RSA_WITH_AES_256_CBC_SHA: CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256 val TLS_RSA_WITH_AES_256_CBC_SHA256: CipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384 val TLS_RSA_WITH_AES_256_GCM_SHA384: CipherSuite TLS_RSA_WITH_CAMELLIA_128_CBC_SHA val TLS_RSA_WITH_CAMELLIA_128_CBC_SHA: CipherSuite TLS_RSA_WITH_CAMELLIA_256_CBC_SHA val TLS_RSA_WITH_CAMELLIA_256_CBC_SHA: CipherSuite TLS_RSA_WITH_DES_CBC_SHA val TLS_RSA_WITH_DES_CBC_SHA: CipherSuite TLS_RSA_WITH_NULL_MD5 val TLS_RSA_WITH_NULL_MD5: CipherSuite TLS_RSA_WITH_NULL_SHA val TLS_RSA_WITH_NULL_SHA: CipherSuite TLS_RSA_WITH_NULL_SHA256 val TLS_RSA_WITH_NULL_SHA256: CipherSuite TLS_RSA_WITH_RC4_128_MD5 val TLS_RSA_WITH_RC4_128_MD5: CipherSuite TLS_RSA_WITH_RC4_128_SHA val TLS_RSA_WITH_RC4_128_SHA: CipherSuite TLS_RSA_WITH_SEED_CBC_SHA val TLS_RSA_WITH_SEED_CBC_SHA: CipherSuite","title":"Companion Object Properties"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/#companion-object-functions","text":"Name Summary forJavaName fun forJavaName(javaName: String ): CipherSuite","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-a-e-s_128_-c-c-m_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_AES_128_CCM_SHA256 TLS_AES_128_CCM_SHA256 \u00b6 val TLS_AES_128_CCM_SHA256: CipherSuite","title":"TLS_AES_128_CCM_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-a-e-s_128_-c-c-m_-s-h-a256/#tls_aes_128_ccm_sha256","text":"val TLS_AES_128_CCM_SHA256: CipherSuite","title":"TLS_AES_128_CCM_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-a-e-s_128_-c-c-m_8_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_AES_128_CCM_8_SHA256 TLS_AES_128_CCM_8_SHA256 \u00b6 val TLS_AES_128_CCM_8_SHA256: CipherSuite","title":"TLS_AES_128_CCM_8_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-a-e-s_128_-c-c-m_8_-s-h-a256/#tls_aes_128_ccm_8_sha256","text":"val TLS_AES_128_CCM_8_SHA256: CipherSuite","title":"TLS_AES_128_CCM_8_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-a-e-s_128_-g-c-m_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_AES_128_GCM_SHA256 TLS_AES_128_GCM_SHA256 \u00b6 val TLS_AES_128_GCM_SHA256: CipherSuite","title":"TLS_AES_128_GCM_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-a-e-s_128_-g-c-m_-s-h-a256/#tls_aes_128_gcm_sha256","text":"val TLS_AES_128_GCM_SHA256: CipherSuite","title":"TLS_AES_128_GCM_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-a-e-s_256_-g-c-m_-s-h-a384/","text":"okhttp / okhttp3 / CipherSuite / TLS_AES_256_GCM_SHA384 TLS_AES_256_GCM_SHA384 \u00b6 val TLS_AES_256_GCM_SHA384: CipherSuite","title":"TLS_AES_256_GCM_SHA384 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-a-e-s_256_-g-c-m_-s-h-a384/#tls_aes_256_gcm_sha384","text":"val TLS_AES_256_GCM_SHA384: CipherSuite","title":"TLS_AES_256_GCM_SHA384"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-c-h-a-c-h-a20_-p-o-l-y1305_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_CHACHA20_POLY1305_SHA256 TLS_CHACHA20_POLY1305_SHA256 \u00b6 val TLS_CHACHA20_POLY1305_SHA256: CipherSuite","title":"TLS_CHACHA20_POLY1305_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-c-h-a-c-h-a20_-p-o-l-y1305_-s-h-a256/#tls_chacha20_poly1305_sha256","text":"val TLS_CHACHA20_POLY1305_SHA256: CipherSuite","title":"TLS_CHACHA20_POLY1305_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-e-x-p-o-r-t_-w-i-t-h_-d-e-s40_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA \u00b6 val TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA: CipherSuite","title":"TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-e-x-p-o-r-t_-w-i-t-h_-d-e-s40_-c-b-c_-s-h-a/#tls_dhe_dss_export_with_des40_cbc_sha","text":"val TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA: CipherSuite","title":"TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_DSS_WITH_AES_128_CBC_SHA TLS_DHE_DSS_WITH_AES_128_CBC_SHA \u00b6 val TLS_DHE_DSS_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_DHE_DSS_WITH_AES_128_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/#tls_dhe_dss_with_aes_128_cbc_sha","text":"val TLS_DHE_DSS_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_DHE_DSS_WITH_AES_128_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 \u00b6 val TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/#tls_dhe_dss_with_aes_128_cbc_sha256","text":"val TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 \u00b6 val TLS_DHE_DSS_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/#tls_dhe_dss_with_aes_128_gcm_sha256","text":"val TLS_DHE_DSS_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_DHE_DSS_WITH_AES_128_GCM_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_DSS_WITH_AES_256_CBC_SHA TLS_DHE_DSS_WITH_AES_256_CBC_SHA \u00b6 val TLS_DHE_DSS_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_DHE_DSS_WITH_AES_256_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/#tls_dhe_dss_with_aes_256_cbc_sha","text":"val TLS_DHE_DSS_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_DHE_DSS_WITH_AES_256_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 \u00b6 val TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: CipherSuite","title":"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a256/#tls_dhe_dss_with_aes_256_cbc_sha256","text":"val TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: CipherSuite","title":"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 \u00b6 val TLS_DHE_DSS_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/#tls_dhe_dss_with_aes_256_gcm_sha384","text":"val TLS_DHE_DSS_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_DHE_DSS_WITH_AES_256_GCM_SHA384"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-c-a-m-e-l-l-i-a_128_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA \u00b6 val TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA: CipherSuite","title":"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-c-a-m-e-l-l-i-a_128_-c-b-c_-s-h-a/#tls_dhe_dss_with_camellia_128_cbc_sha","text":"val TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA: CipherSuite","title":"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-c-a-m-e-l-l-i-a_256_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA \u00b6 val TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA: CipherSuite","title":"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-c-a-m-e-l-l-i-a_256_-c-b-c_-s-h-a/#tls_dhe_dss_with_camellia_256_cbc_sha","text":"val TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA: CipherSuite","title":"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-d-e-s_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_DSS_WITH_DES_CBC_SHA TLS_DHE_DSS_WITH_DES_CBC_SHA \u00b6 val TLS_DHE_DSS_WITH_DES_CBC_SHA: CipherSuite","title":"TLS_DHE_DSS_WITH_DES_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_-d-e-s_-c-b-c_-s-h-a/#tls_dhe_dss_with_des_cbc_sha","text":"val TLS_DHE_DSS_WITH_DES_CBC_SHA: CipherSuite","title":"TLS_DHE_DSS_WITH_DES_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA \u00b6 val TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-d-s-s_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/#tls_dhe_dss_with_3des_ede_cbc_sha","text":"val TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-e-x-p-o-r-t_-w-i-t-h_-d-e-s40_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA \u00b6 val TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA: CipherSuite","title":"TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-e-x-p-o-r-t_-w-i-t-h_-d-e-s40_-c-b-c_-s-h-a/#tls_dhe_rsa_export_with_des40_cbc_sha","text":"val TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA: CipherSuite","title":"TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_RSA_WITH_AES_128_CBC_SHA TLS_DHE_RSA_WITH_AES_128_CBC_SHA \u00b6 val TLS_DHE_RSA_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_DHE_RSA_WITH_AES_128_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/#tls_dhe_rsa_with_aes_128_cbc_sha","text":"val TLS_DHE_RSA_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_DHE_RSA_WITH_AES_128_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 \u00b6 val TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/#tls_dhe_rsa_with_aes_128_cbc_sha256","text":"val TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 \u00b6 val TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/#tls_dhe_rsa_with_aes_128_gcm_sha256","text":"val TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_RSA_WITH_AES_256_CBC_SHA TLS_DHE_RSA_WITH_AES_256_CBC_SHA \u00b6 val TLS_DHE_RSA_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_DHE_RSA_WITH_AES_256_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/#tls_dhe_rsa_with_aes_256_cbc_sha","text":"val TLS_DHE_RSA_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_DHE_RSA_WITH_AES_256_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 \u00b6 val TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: CipherSuite","title":"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a256/#tls_dhe_rsa_with_aes_256_cbc_sha256","text":"val TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: CipherSuite","title":"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 \u00b6 val TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/#tls_dhe_rsa_with_aes_256_gcm_sha384","text":"val TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-c-a-m-e-l-l-i-a_128_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA \u00b6 val TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA: CipherSuite","title":"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-c-a-m-e-l-l-i-a_128_-c-b-c_-s-h-a/#tls_dhe_rsa_with_camellia_128_cbc_sha","text":"val TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA: CipherSuite","title":"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-c-a-m-e-l-l-i-a_256_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA \u00b6 val TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA: CipherSuite","title":"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-c-a-m-e-l-l-i-a_256_-c-b-c_-s-h-a/#tls_dhe_rsa_with_camellia_256_cbc_sha","text":"val TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA: CipherSuite","title":"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-c-h-a-c-h-a20_-p-o-l-y1305_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 \u00b6 val TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256: CipherSuite","title":"TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-c-h-a-c-h-a20_-p-o-l-y1305_-s-h-a256/#tls_dhe_rsa_with_chacha20_poly1305_sha256","text":"val TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256: CipherSuite","title":"TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-d-e-s_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_RSA_WITH_DES_CBC_SHA TLS_DHE_RSA_WITH_DES_CBC_SHA \u00b6 val TLS_DHE_RSA_WITH_DES_CBC_SHA: CipherSuite","title":"TLS_DHE_RSA_WITH_DES_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_-d-e-s_-c-b-c_-s-h-a/#tls_dhe_rsa_with_des_cbc_sha","text":"val TLS_DHE_RSA_WITH_DES_CBC_SHA: CipherSuite","title":"TLS_DHE_RSA_WITH_DES_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA \u00b6 val TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h-e_-r-s-a_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/#tls_dhe_rsa_with_3des_ede_cbc_sha","text":"val TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-e-x-p-o-r-t_-w-i-t-h_-d-e-s40_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA \u00b6 val TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA: CipherSuite","title":"TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-e-x-p-o-r-t_-w-i-t-h_-d-e-s40_-c-b-c_-s-h-a/#tls_dh_anon_export_with_des40_cbc_sha","text":"val TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA: CipherSuite","title":"TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-e-x-p-o-r-t_-w-i-t-h_-r-c4_40_-m-d5/","text":"okhttp / okhttp3 / CipherSuite / TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 \u00b6 val TLS_DH_anon_EXPORT_WITH_RC4_40_MD5: CipherSuite","title":"TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-e-x-p-o-r-t_-w-i-t-h_-r-c4_40_-m-d5/#tls_dh_anon_export_with_rc4_40_md5","text":"val TLS_DH_anon_EXPORT_WITH_RC4_40_MD5: CipherSuite","title":"TLS_DH_anon_EXPORT_WITH_RC4_40_MD5"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DH_anon_WITH_AES_128_CBC_SHA TLS_DH_anon_WITH_AES_128_CBC_SHA \u00b6 val TLS_DH_anon_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_DH_anon_WITH_AES_128_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/#tls_dh_anon_with_aes_128_cbc_sha","text":"val TLS_DH_anon_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_DH_anon_WITH_AES_128_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_DH_anon_WITH_AES_128_CBC_SHA256 TLS_DH_anon_WITH_AES_128_CBC_SHA256 \u00b6 val TLS_DH_anon_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_DH_anon_WITH_AES_128_CBC_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/#tls_dh_anon_with_aes_128_cbc_sha256","text":"val TLS_DH_anon_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_DH_anon_WITH_AES_128_CBC_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_DH_anon_WITH_AES_128_GCM_SHA256 TLS_DH_anon_WITH_AES_128_GCM_SHA256 \u00b6 val TLS_DH_anon_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_DH_anon_WITH_AES_128_GCM_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/#tls_dh_anon_with_aes_128_gcm_sha256","text":"val TLS_DH_anon_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_DH_anon_WITH_AES_128_GCM_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DH_anon_WITH_AES_256_CBC_SHA TLS_DH_anon_WITH_AES_256_CBC_SHA \u00b6 val TLS_DH_anon_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_DH_anon_WITH_AES_256_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/#tls_dh_anon_with_aes_256_cbc_sha","text":"val TLS_DH_anon_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_DH_anon_WITH_AES_256_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_DH_anon_WITH_AES_256_CBC_SHA256 TLS_DH_anon_WITH_AES_256_CBC_SHA256 \u00b6 val TLS_DH_anon_WITH_AES_256_CBC_SHA256: CipherSuite","title":"TLS_DH_anon_WITH_AES_256_CBC_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a256/#tls_dh_anon_with_aes_256_cbc_sha256","text":"val TLS_DH_anon_WITH_AES_256_CBC_SHA256: CipherSuite","title":"TLS_DH_anon_WITH_AES_256_CBC_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/","text":"okhttp / okhttp3 / CipherSuite / TLS_DH_anon_WITH_AES_256_GCM_SHA384 TLS_DH_anon_WITH_AES_256_GCM_SHA384 \u00b6 val TLS_DH_anon_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_DH_anon_WITH_AES_256_GCM_SHA384 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/#tls_dh_anon_with_aes_256_gcm_sha384","text":"val TLS_DH_anon_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_DH_anon_WITH_AES_256_GCM_SHA384"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-d-e-s_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DH_anon_WITH_DES_CBC_SHA TLS_DH_anon_WITH_DES_CBC_SHA \u00b6 val TLS_DH_anon_WITH_DES_CBC_SHA: CipherSuite","title":"TLS_DH_anon_WITH_DES_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-d-e-s_-c-b-c_-s-h-a/#tls_dh_anon_with_des_cbc_sha","text":"val TLS_DH_anon_WITH_DES_CBC_SHA: CipherSuite","title":"TLS_DH_anon_WITH_DES_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-r-c4_128_-m-d5/","text":"okhttp / okhttp3 / CipherSuite / TLS_DH_anon_WITH_RC4_128_MD5 TLS_DH_anon_WITH_RC4_128_MD5 \u00b6 val TLS_DH_anon_WITH_RC4_128_MD5: CipherSuite","title":"TLS_DH_anon_WITH_RC4_128_MD5 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_-r-c4_128_-m-d5/#tls_dh_anon_with_rc4_128_md5","text":"val TLS_DH_anon_WITH_RC4_128_MD5: CipherSuite","title":"TLS_DH_anon_WITH_RC4_128_MD5"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_DH_anon_WITH_3DES_EDE_CBC_SHA TLS_DH_anon_WITH_3DES_EDE_CBC_SHA \u00b6 val TLS_DH_anon_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-d-h_anon_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/#tls_dh_anon_with_3des_ede_cbc_sha","text":"val TLS_DH_anon_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA \u00b6 val TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/#tls_ecdhe_ecdsa_with_aes_128_cbc_sha","text":"val TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 \u00b6 val TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/#tls_ecdhe_ecdsa_with_aes_128_cbc_sha256","text":"val TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 \u00b6 val TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/#tls_ecdhe_ecdsa_with_aes_128_gcm_sha256","text":"val TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA \u00b6 val TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/#tls_ecdhe_ecdsa_with_aes_256_cbc_sha","text":"val TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a384/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 \u00b6 val TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a384/#tls_ecdhe_ecdsa_with_aes_256_cbc_sha384","text":"val TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 \u00b6 val TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/#tls_ecdhe_ecdsa_with_aes_256_gcm_sha384","text":"val TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-c-h-a-c-h-a20_-p-o-l-y1305_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 \u00b6 val TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-c-h-a-c-h-a20_-p-o-l-y1305_-s-h-a256/#tls_ecdhe_ecdsa_with_chacha20_poly1305_sha256","text":"val TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-n-u-l-l_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_ECDSA_WITH_NULL_SHA TLS_ECDHE_ECDSA_WITH_NULL_SHA \u00b6 val TLS_ECDHE_ECDSA_WITH_NULL_SHA: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_NULL_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-n-u-l-l_-s-h-a/#tls_ecdhe_ecdsa_with_null_sha","text":"val TLS_ECDHE_ECDSA_WITH_NULL_SHA: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_NULL_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-r-c4_128_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_ECDSA_WITH_RC4_128_SHA TLS_ECDHE_ECDSA_WITH_RC4_128_SHA \u00b6 val TLS_ECDHE_ECDSA_WITH_RC4_128_SHA: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_-r-c4_128_-s-h-a/#tls_ecdhe_ecdsa_with_rc4_128_sha","text":"val TLS_ECDHE_ECDSA_WITH_RC4_128_SHA: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA \u00b6 val TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-e-c-d-s-a_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/#tls_ecdhe_ecdsa_with_3des_ede_cbc_sha","text":"val TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-p-s-k_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA \u00b6 val TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-p-s-k_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/#tls_ecdhe_psk_with_aes_128_cbc_sha","text":"val TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-p-s-k_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA \u00b6 val TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-p-s-k_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/#tls_ecdhe_psk_with_aes_256_cbc_sha","text":"val TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-p-s-k_-w-i-t-h_-c-h-a-c-h-a20_-p-o-l-y1305_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 \u00b6 val TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256: CipherSuite","title":"TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-p-s-k_-w-i-t-h_-c-h-a-c-h-a20_-p-o-l-y1305_-s-h-a256/#tls_ecdhe_psk_with_chacha20_poly1305_sha256","text":"val TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256: CipherSuite","title":"TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA \u00b6 val TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/#tls_ecdhe_rsa_with_aes_128_cbc_sha","text":"val TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \u00b6 val TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/#tls_ecdhe_rsa_with_aes_128_cbc_sha256","text":"val TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 \u00b6 val TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/#tls_ecdhe_rsa_with_aes_128_gcm_sha256","text":"val TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA \u00b6 val TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/#tls_ecdhe_rsa_with_aes_256_cbc_sha","text":"val TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a384/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 \u00b6 val TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: CipherSuite","title":"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a384/#tls_ecdhe_rsa_with_aes_256_cbc_sha384","text":"val TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: CipherSuite","title":"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 \u00b6 val TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/#tls_ecdhe_rsa_with_aes_256_gcm_sha384","text":"val TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-c-h-a-c-h-a20_-p-o-l-y1305_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 \u00b6 val TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: CipherSuite","title":"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-c-h-a-c-h-a20_-p-o-l-y1305_-s-h-a256/#tls_ecdhe_rsa_with_chacha20_poly1305_sha256","text":"val TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: CipherSuite","title":"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-n-u-l-l_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_RSA_WITH_NULL_SHA TLS_ECDHE_RSA_WITH_NULL_SHA \u00b6 val TLS_ECDHE_RSA_WITH_NULL_SHA: CipherSuite","title":"TLS_ECDHE_RSA_WITH_NULL_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-n-u-l-l_-s-h-a/#tls_ecdhe_rsa_with_null_sha","text":"val TLS_ECDHE_RSA_WITH_NULL_SHA: CipherSuite","title":"TLS_ECDHE_RSA_WITH_NULL_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-r-c4_128_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_RSA_WITH_RC4_128_SHA TLS_ECDHE_RSA_WITH_RC4_128_SHA \u00b6 val TLS_ECDHE_RSA_WITH_RC4_128_SHA: CipherSuite","title":"TLS_ECDHE_RSA_WITH_RC4_128_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_-r-c4_128_-s-h-a/#tls_ecdhe_rsa_with_rc4_128_sha","text":"val TLS_ECDHE_RSA_WITH_RC4_128_SHA: CipherSuite","title":"TLS_ECDHE_RSA_WITH_RC4_128_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA \u00b6 val TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h-e_-r-s-a_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/#tls_ecdhe_rsa_with_3des_ede_cbc_sha","text":"val TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA \u00b6 val TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/#tls_ecdh_ecdsa_with_aes_128_cbc_sha","text":"val TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 \u00b6 val TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/#tls_ecdh_ecdsa_with_aes_128_cbc_sha256","text":"val TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 \u00b6 val TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/#tls_ecdh_ecdsa_with_aes_128_gcm_sha256","text":"val TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA \u00b6 val TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/#tls_ecdh_ecdsa_with_aes_256_cbc_sha","text":"val TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a384/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 \u00b6 val TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a384/#tls_ecdh_ecdsa_with_aes_256_cbc_sha384","text":"val TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 \u00b6 val TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/#tls_ecdh_ecdsa_with_aes_256_gcm_sha384","text":"val TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-n-u-l-l_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_ECDSA_WITH_NULL_SHA TLS_ECDH_ECDSA_WITH_NULL_SHA \u00b6 val TLS_ECDH_ECDSA_WITH_NULL_SHA: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_NULL_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-n-u-l-l_-s-h-a/#tls_ecdh_ecdsa_with_null_sha","text":"val TLS_ECDH_ECDSA_WITH_NULL_SHA: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_NULL_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-r-c4_128_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_ECDSA_WITH_RC4_128_SHA TLS_ECDH_ECDSA_WITH_RC4_128_SHA \u00b6 val TLS_ECDH_ECDSA_WITH_RC4_128_SHA: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_RC4_128_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_-r-c4_128_-s-h-a/#tls_ecdh_ecdsa_with_rc4_128_sha","text":"val TLS_ECDH_ECDSA_WITH_RC4_128_SHA: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_RC4_128_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA \u00b6 val TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-e-c-d-s-a_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/#tls_ecdh_ecdsa_with_3des_ede_cbc_sha","text":"val TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_RSA_WITH_AES_128_CBC_SHA TLS_ECDH_RSA_WITH_AES_128_CBC_SHA \u00b6 val TLS_ECDH_RSA_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/#tls_ecdh_rsa_with_aes_128_cbc_sha","text":"val TLS_ECDH_RSA_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 \u00b6 val TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/#tls_ecdh_rsa_with_aes_128_cbc_sha256","text":"val TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 \u00b6 val TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/#tls_ecdh_rsa_with_aes_128_gcm_sha256","text":"val TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_RSA_WITH_AES_256_CBC_SHA TLS_ECDH_RSA_WITH_AES_256_CBC_SHA \u00b6 val TLS_ECDH_RSA_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/#tls_ecdh_rsa_with_aes_256_cbc_sha","text":"val TLS_ECDH_RSA_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a384/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 \u00b6 val TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384: CipherSuite","title":"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a384/#tls_ecdh_rsa_with_aes_256_cbc_sha384","text":"val TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384: CipherSuite","title":"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 \u00b6 val TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/#tls_ecdh_rsa_with_aes_256_gcm_sha384","text":"val TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-n-u-l-l_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_RSA_WITH_NULL_SHA TLS_ECDH_RSA_WITH_NULL_SHA \u00b6 val TLS_ECDH_RSA_WITH_NULL_SHA: CipherSuite","title":"TLS_ECDH_RSA_WITH_NULL_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-n-u-l-l_-s-h-a/#tls_ecdh_rsa_with_null_sha","text":"val TLS_ECDH_RSA_WITH_NULL_SHA: CipherSuite","title":"TLS_ECDH_RSA_WITH_NULL_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-r-c4_128_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_RSA_WITH_RC4_128_SHA TLS_ECDH_RSA_WITH_RC4_128_SHA \u00b6 val TLS_ECDH_RSA_WITH_RC4_128_SHA: CipherSuite","title":"TLS_ECDH_RSA_WITH_RC4_128_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_-r-c4_128_-s-h-a/#tls_ecdh_rsa_with_rc4_128_sha","text":"val TLS_ECDH_RSA_WITH_RC4_128_SHA: CipherSuite","title":"TLS_ECDH_RSA_WITH_RC4_128_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA \u00b6 val TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_-r-s-a_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/#tls_ecdh_rsa_with_3des_ede_cbc_sha","text":"val TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_anon_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_anon_WITH_AES_128_CBC_SHA TLS_ECDH_anon_WITH_AES_128_CBC_SHA \u00b6 val TLS_ECDH_anon_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_ECDH_anon_WITH_AES_128_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_anon_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/#tls_ecdh_anon_with_aes_128_cbc_sha","text":"val TLS_ECDH_anon_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_ECDH_anon_WITH_AES_128_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_anon_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_anon_WITH_AES_256_CBC_SHA TLS_ECDH_anon_WITH_AES_256_CBC_SHA \u00b6 val TLS_ECDH_anon_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_ECDH_anon_WITH_AES_256_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_anon_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/#tls_ecdh_anon_with_aes_256_cbc_sha","text":"val TLS_ECDH_anon_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_ECDH_anon_WITH_AES_256_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_anon_-w-i-t-h_-n-u-l-l_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_anon_WITH_NULL_SHA TLS_ECDH_anon_WITH_NULL_SHA \u00b6 val TLS_ECDH_anon_WITH_NULL_SHA: CipherSuite","title":"TLS_ECDH_anon_WITH_NULL_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_anon_-w-i-t-h_-n-u-l-l_-s-h-a/#tls_ecdh_anon_with_null_sha","text":"val TLS_ECDH_anon_WITH_NULL_SHA: CipherSuite","title":"TLS_ECDH_anon_WITH_NULL_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_anon_-w-i-t-h_-r-c4_128_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_anon_WITH_RC4_128_SHA TLS_ECDH_anon_WITH_RC4_128_SHA \u00b6 val TLS_ECDH_anon_WITH_RC4_128_SHA: CipherSuite","title":"TLS_ECDH_anon_WITH_RC4_128_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_anon_-w-i-t-h_-r-c4_128_-s-h-a/#tls_ecdh_anon_with_rc4_128_sha","text":"val TLS_ECDH_anon_WITH_RC4_128_SHA: CipherSuite","title":"TLS_ECDH_anon_WITH_RC4_128_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_anon_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA \u00b6 val TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-c-d-h_anon_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/#tls_ecdh_anon_with_3des_ede_cbc_sha","text":"val TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-m-p-t-y_-r-e-n-e-g-o-t-i-a-t-i-o-n_-i-n-f-o_-s-c-s-v/","text":"okhttp / okhttp3 / CipherSuite / TLS_EMPTY_RENEGOTIATION_INFO_SCSV TLS_EMPTY_RENEGOTIATION_INFO_SCSV \u00b6 val TLS_EMPTY_RENEGOTIATION_INFO_SCSV: CipherSuite","title":"TLS_EMPTY_RENEGOTIATION_INFO_SCSV - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-e-m-p-t-y_-r-e-n-e-g-o-t-i-a-t-i-o-n_-i-n-f-o_-s-c-s-v/#tls_empty_renegotiation_info_scsv","text":"val TLS_EMPTY_RENEGOTIATION_INFO_SCSV: CipherSuite","title":"TLS_EMPTY_RENEGOTIATION_INFO_SCSV"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-f-a-l-l-b-a-c-k_-s-c-s-v/","text":"okhttp / okhttp3 / CipherSuite / TLS_FALLBACK_SCSV TLS_FALLBACK_SCSV \u00b6 val TLS_FALLBACK_SCSV: CipherSuite","title":"TLS_FALLBACK_SCSV - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-f-a-l-l-b-a-c-k_-s-c-s-v/#tls_fallback_scsv","text":"val TLS_FALLBACK_SCSV: CipherSuite","title":"TLS_FALLBACK_SCSV"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-e-x-p-o-r-t_-w-i-t-h_-d-e-s_-c-b-c_40_-m-d5/","text":"okhttp / okhttp3 / CipherSuite / TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 \u00b6 val TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5: CipherSuite","title":"TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-e-x-p-o-r-t_-w-i-t-h_-d-e-s_-c-b-c_40_-m-d5/#tls_krb5_export_with_des_cbc_40_md5","text":"val TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5: CipherSuite","title":"TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-e-x-p-o-r-t_-w-i-t-h_-d-e-s_-c-b-c_40_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA \u00b6 val TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA: CipherSuite","title":"TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-e-x-p-o-r-t_-w-i-t-h_-d-e-s_-c-b-c_40_-s-h-a/#tls_krb5_export_with_des_cbc_40_sha","text":"val TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA: CipherSuite","title":"TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-e-x-p-o-r-t_-w-i-t-h_-r-c4_40_-m-d5/","text":"okhttp / okhttp3 / CipherSuite / TLS_KRB5_EXPORT_WITH_RC4_40_MD5 TLS_KRB5_EXPORT_WITH_RC4_40_MD5 \u00b6 val TLS_KRB5_EXPORT_WITH_RC4_40_MD5: CipherSuite","title":"TLS_KRB5_EXPORT_WITH_RC4_40_MD5 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-e-x-p-o-r-t_-w-i-t-h_-r-c4_40_-m-d5/#tls_krb5_export_with_rc4_40_md5","text":"val TLS_KRB5_EXPORT_WITH_RC4_40_MD5: CipherSuite","title":"TLS_KRB5_EXPORT_WITH_RC4_40_MD5"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-e-x-p-o-r-t_-w-i-t-h_-r-c4_40_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_KRB5_EXPORT_WITH_RC4_40_SHA TLS_KRB5_EXPORT_WITH_RC4_40_SHA \u00b6 val TLS_KRB5_EXPORT_WITH_RC4_40_SHA: CipherSuite","title":"TLS_KRB5_EXPORT_WITH_RC4_40_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-e-x-p-o-r-t_-w-i-t-h_-r-c4_40_-s-h-a/#tls_krb5_export_with_rc4_40_sha","text":"val TLS_KRB5_EXPORT_WITH_RC4_40_SHA: CipherSuite","title":"TLS_KRB5_EXPORT_WITH_RC4_40_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-w-i-t-h_-d-e-s_-c-b-c_-m-d5/","text":"okhttp / okhttp3 / CipherSuite / TLS_KRB5_WITH_DES_CBC_MD5 TLS_KRB5_WITH_DES_CBC_MD5 \u00b6 val TLS_KRB5_WITH_DES_CBC_MD5: CipherSuite","title":"TLS_KRB5_WITH_DES_CBC_MD5 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-w-i-t-h_-d-e-s_-c-b-c_-m-d5/#tls_krb5_with_des_cbc_md5","text":"val TLS_KRB5_WITH_DES_CBC_MD5: CipherSuite","title":"TLS_KRB5_WITH_DES_CBC_MD5"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-w-i-t-h_-d-e-s_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_KRB5_WITH_DES_CBC_SHA TLS_KRB5_WITH_DES_CBC_SHA \u00b6 val TLS_KRB5_WITH_DES_CBC_SHA: CipherSuite","title":"TLS_KRB5_WITH_DES_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-w-i-t-h_-d-e-s_-c-b-c_-s-h-a/#tls_krb5_with_des_cbc_sha","text":"val TLS_KRB5_WITH_DES_CBC_SHA: CipherSuite","title":"TLS_KRB5_WITH_DES_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-w-i-t-h_-r-c4_128_-m-d5/","text":"okhttp / okhttp3 / CipherSuite / TLS_KRB5_WITH_RC4_128_MD5 TLS_KRB5_WITH_RC4_128_MD5 \u00b6 val TLS_KRB5_WITH_RC4_128_MD5: CipherSuite","title":"TLS_KRB5_WITH_RC4_128_MD5 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-w-i-t-h_-r-c4_128_-m-d5/#tls_krb5_with_rc4_128_md5","text":"val TLS_KRB5_WITH_RC4_128_MD5: CipherSuite","title":"TLS_KRB5_WITH_RC4_128_MD5"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-w-i-t-h_-r-c4_128_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_KRB5_WITH_RC4_128_SHA TLS_KRB5_WITH_RC4_128_SHA \u00b6 val TLS_KRB5_WITH_RC4_128_SHA: CipherSuite","title":"TLS_KRB5_WITH_RC4_128_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-w-i-t-h_-r-c4_128_-s-h-a/#tls_krb5_with_rc4_128_sha","text":"val TLS_KRB5_WITH_RC4_128_SHA: CipherSuite","title":"TLS_KRB5_WITH_RC4_128_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-m-d5/","text":"okhttp / okhttp3 / CipherSuite / TLS_KRB5_WITH_3DES_EDE_CBC_MD5 TLS_KRB5_WITH_3DES_EDE_CBC_MD5 \u00b6 val TLS_KRB5_WITH_3DES_EDE_CBC_MD5: CipherSuite","title":"TLS_KRB5_WITH_3DES_EDE_CBC_MD5 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-m-d5/#tls_krb5_with_3des_ede_cbc_md5","text":"val TLS_KRB5_WITH_3DES_EDE_CBC_MD5: CipherSuite","title":"TLS_KRB5_WITH_3DES_EDE_CBC_MD5"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_KRB5_WITH_3DES_EDE_CBC_SHA TLS_KRB5_WITH_3DES_EDE_CBC_SHA \u00b6 val TLS_KRB5_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_KRB5_WITH_3DES_EDE_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-k-r-b5_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/#tls_krb5_with_3des_ede_cbc_sha","text":"val TLS_KRB5_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_KRB5_WITH_3DES_EDE_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-p-s-k_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_PSK_WITH_AES_128_CBC_SHA TLS_PSK_WITH_AES_128_CBC_SHA \u00b6 val TLS_PSK_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_PSK_WITH_AES_128_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-p-s-k_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/#tls_psk_with_aes_128_cbc_sha","text":"val TLS_PSK_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_PSK_WITH_AES_128_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-p-s-k_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_PSK_WITH_AES_256_CBC_SHA TLS_PSK_WITH_AES_256_CBC_SHA \u00b6 val TLS_PSK_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_PSK_WITH_AES_256_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-p-s-k_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/#tls_psk_with_aes_256_cbc_sha","text":"val TLS_PSK_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_PSK_WITH_AES_256_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-p-s-k_-w-i-t-h_-r-c4_128_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_PSK_WITH_RC4_128_SHA TLS_PSK_WITH_RC4_128_SHA \u00b6 val TLS_PSK_WITH_RC4_128_SHA: CipherSuite","title":"TLS_PSK_WITH_RC4_128_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-p-s-k_-w-i-t-h_-r-c4_128_-s-h-a/#tls_psk_with_rc4_128_sha","text":"val TLS_PSK_WITH_RC4_128_SHA: CipherSuite","title":"TLS_PSK_WITH_RC4_128_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-p-s-k_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_PSK_WITH_3DES_EDE_CBC_SHA TLS_PSK_WITH_3DES_EDE_CBC_SHA \u00b6 val TLS_PSK_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_PSK_WITH_3DES_EDE_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-p-s-k_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/#tls_psk_with_3des_ede_cbc_sha","text":"val TLS_PSK_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_PSK_WITH_3DES_EDE_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-e-x-p-o-r-t_-w-i-t-h_-d-e-s40_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_EXPORT_WITH_DES40_CBC_SHA TLS_RSA_EXPORT_WITH_DES40_CBC_SHA \u00b6 val TLS_RSA_EXPORT_WITH_DES40_CBC_SHA: CipherSuite","title":"TLS_RSA_EXPORT_WITH_DES40_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-e-x-p-o-r-t_-w-i-t-h_-d-e-s40_-c-b-c_-s-h-a/#tls_rsa_export_with_des40_cbc_sha","text":"val TLS_RSA_EXPORT_WITH_DES40_CBC_SHA: CipherSuite","title":"TLS_RSA_EXPORT_WITH_DES40_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-e-x-p-o-r-t_-w-i-t-h_-r-c4_40_-m-d5/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_EXPORT_WITH_RC4_40_MD5 TLS_RSA_EXPORT_WITH_RC4_40_MD5 \u00b6 val TLS_RSA_EXPORT_WITH_RC4_40_MD5: CipherSuite","title":"TLS_RSA_EXPORT_WITH_RC4_40_MD5 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-e-x-p-o-r-t_-w-i-t-h_-r-c4_40_-m-d5/#tls_rsa_export_with_rc4_40_md5","text":"val TLS_RSA_EXPORT_WITH_RC4_40_MD5: CipherSuite","title":"TLS_RSA_EXPORT_WITH_RC4_40_MD5"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_128_CBC_SHA \u00b6 val TLS_RSA_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_RSA_WITH_AES_128_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a/#tls_rsa_with_aes_128_cbc_sha","text":"val TLS_RSA_WITH_AES_128_CBC_SHA: CipherSuite","title":"TLS_RSA_WITH_AES_128_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_AES_128_CBC_SHA256 TLS_RSA_WITH_AES_128_CBC_SHA256 \u00b6 val TLS_RSA_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_RSA_WITH_AES_128_CBC_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-a-e-s_128_-c-b-c_-s-h-a256/#tls_rsa_with_aes_128_cbc_sha256","text":"val TLS_RSA_WITH_AES_128_CBC_SHA256: CipherSuite","title":"TLS_RSA_WITH_AES_128_CBC_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_AES_128_GCM_SHA256 TLS_RSA_WITH_AES_128_GCM_SHA256 \u00b6 val TLS_RSA_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_RSA_WITH_AES_128_GCM_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-a-e-s_128_-g-c-m_-s-h-a256/#tls_rsa_with_aes_128_gcm_sha256","text":"val TLS_RSA_WITH_AES_128_GCM_SHA256: CipherSuite","title":"TLS_RSA_WITH_AES_128_GCM_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_AES_256_CBC_SHA \u00b6 val TLS_RSA_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_RSA_WITH_AES_256_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a/#tls_rsa_with_aes_256_cbc_sha","text":"val TLS_RSA_WITH_AES_256_CBC_SHA: CipherSuite","title":"TLS_RSA_WITH_AES_256_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_AES_256_CBC_SHA256 TLS_RSA_WITH_AES_256_CBC_SHA256 \u00b6 val TLS_RSA_WITH_AES_256_CBC_SHA256: CipherSuite","title":"TLS_RSA_WITH_AES_256_CBC_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-a-e-s_256_-c-b-c_-s-h-a256/#tls_rsa_with_aes_256_cbc_sha256","text":"val TLS_RSA_WITH_AES_256_CBC_SHA256: CipherSuite","title":"TLS_RSA_WITH_AES_256_CBC_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_AES_256_GCM_SHA384 TLS_RSA_WITH_AES_256_GCM_SHA384 \u00b6 val TLS_RSA_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_RSA_WITH_AES_256_GCM_SHA384 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-a-e-s_256_-g-c-m_-s-h-a384/#tls_rsa_with_aes_256_gcm_sha384","text":"val TLS_RSA_WITH_AES_256_GCM_SHA384: CipherSuite","title":"TLS_RSA_WITH_AES_256_GCM_SHA384"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-c-a-m-e-l-l-i-a_128_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_CAMELLIA_128_CBC_SHA TLS_RSA_WITH_CAMELLIA_128_CBC_SHA \u00b6 val TLS_RSA_WITH_CAMELLIA_128_CBC_SHA: CipherSuite","title":"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-c-a-m-e-l-l-i-a_128_-c-b-c_-s-h-a/#tls_rsa_with_camellia_128_cbc_sha","text":"val TLS_RSA_WITH_CAMELLIA_128_CBC_SHA: CipherSuite","title":"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-c-a-m-e-l-l-i-a_256_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_CAMELLIA_256_CBC_SHA TLS_RSA_WITH_CAMELLIA_256_CBC_SHA \u00b6 val TLS_RSA_WITH_CAMELLIA_256_CBC_SHA: CipherSuite","title":"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-c-a-m-e-l-l-i-a_256_-c-b-c_-s-h-a/#tls_rsa_with_camellia_256_cbc_sha","text":"val TLS_RSA_WITH_CAMELLIA_256_CBC_SHA: CipherSuite","title":"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-d-e-s_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_DES_CBC_SHA TLS_RSA_WITH_DES_CBC_SHA \u00b6 val TLS_RSA_WITH_DES_CBC_SHA: CipherSuite","title":"TLS_RSA_WITH_DES_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-d-e-s_-c-b-c_-s-h-a/#tls_rsa_with_des_cbc_sha","text":"val TLS_RSA_WITH_DES_CBC_SHA: CipherSuite","title":"TLS_RSA_WITH_DES_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-n-u-l-l_-m-d5/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_NULL_MD5 TLS_RSA_WITH_NULL_MD5 \u00b6 val TLS_RSA_WITH_NULL_MD5: CipherSuite","title":"TLS_RSA_WITH_NULL_MD5 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-n-u-l-l_-m-d5/#tls_rsa_with_null_md5","text":"val TLS_RSA_WITH_NULL_MD5: CipherSuite","title":"TLS_RSA_WITH_NULL_MD5"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-n-u-l-l_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_NULL_SHA TLS_RSA_WITH_NULL_SHA \u00b6 val TLS_RSA_WITH_NULL_SHA: CipherSuite","title":"TLS_RSA_WITH_NULL_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-n-u-l-l_-s-h-a/#tls_rsa_with_null_sha","text":"val TLS_RSA_WITH_NULL_SHA: CipherSuite","title":"TLS_RSA_WITH_NULL_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-n-u-l-l_-s-h-a256/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_NULL_SHA256 TLS_RSA_WITH_NULL_SHA256 \u00b6 val TLS_RSA_WITH_NULL_SHA256: CipherSuite","title":"TLS_RSA_WITH_NULL_SHA256 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-n-u-l-l_-s-h-a256/#tls_rsa_with_null_sha256","text":"val TLS_RSA_WITH_NULL_SHA256: CipherSuite","title":"TLS_RSA_WITH_NULL_SHA256"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-r-c4_128_-m-d5/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_RC4_128_MD5 TLS_RSA_WITH_RC4_128_MD5 \u00b6 val TLS_RSA_WITH_RC4_128_MD5: CipherSuite","title":"TLS_RSA_WITH_RC4_128_MD5 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-r-c4_128_-m-d5/#tls_rsa_with_rc4_128_md5","text":"val TLS_RSA_WITH_RC4_128_MD5: CipherSuite","title":"TLS_RSA_WITH_RC4_128_MD5"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-r-c4_128_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_RC4_128_SHA TLS_RSA_WITH_RC4_128_SHA \u00b6 val TLS_RSA_WITH_RC4_128_SHA: CipherSuite","title":"TLS_RSA_WITH_RC4_128_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-r-c4_128_-s-h-a/#tls_rsa_with_rc4_128_sha","text":"val TLS_RSA_WITH_RC4_128_SHA: CipherSuite","title":"TLS_RSA_WITH_RC4_128_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-s-e-e-d_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_SEED_CBC_SHA TLS_RSA_WITH_SEED_CBC_SHA \u00b6 val TLS_RSA_WITH_SEED_CBC_SHA: CipherSuite","title":"TLS_RSA_WITH_SEED_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_-s-e-e-d_-c-b-c_-s-h-a/#tls_rsa_with_seed_cbc_sha","text":"val TLS_RSA_WITH_SEED_CBC_SHA: CipherSuite","title":"TLS_RSA_WITH_SEED_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/","text":"okhttp / okhttp3 / CipherSuite / TLS_RSA_WITH_3DES_EDE_CBC_SHA TLS_RSA_WITH_3DES_EDE_CBC_SHA \u00b6 val TLS_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_RSA_WITH_3DES_EDE_CBC_SHA - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/-t-l-s_-r-s-a_-w-i-t-h_3-d-e-s_-e-d-e_-c-b-c_-s-h-a/#tls_rsa_with_3des_ede_cbc_sha","text":"val TLS_RSA_WITH_3DES_EDE_CBC_SHA: CipherSuite","title":"TLS_RSA_WITH_3DES_EDE_CBC_SHA"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/for-java-name/","text":"okhttp / okhttp3 / CipherSuite / forJavaName forJavaName \u00b6 @JvmStatic @Synchronized fun forJavaName(javaName: String ): CipherSuite Parameters \u00b6 javaName - the name used by Java APIs for this cipher suite. Different than the IANA name for older cipher suites because the prefix is SSL_ instead of TLS_ .","title":"forJavaName - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/for-java-name/#forjavaname","text":"@JvmStatic @Synchronized fun forJavaName(javaName: String ): CipherSuite","title":"forJavaName"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/for-java-name/#parameters","text":"javaName - the name used by Java APIs for this cipher suite. Different than the IANA name for older cipher suites because the prefix is SSL_ instead of TLS_ .","title":"Parameters"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/java-name/","text":"okhttp / okhttp3 / CipherSuite / javaName javaName \u00b6 val javaName: String Returns the Java name of this cipher suite. For some older cipher suites the Java name has the prefix SSL_ , causing the Java name to be different from the instance name which is always prefixed TLS_ . For example, TLS_RSA_EXPORT_WITH_RC4_40_MD5.javaName() is \"SSL_RSA_EXPORT_WITH_RC4_40_MD5\" .","title":"javaName - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/java-name/#javaname","text":"val javaName: String Returns the Java name of this cipher suite. For some older cipher suites the Java name has the prefix SSL_ , causing the Java name to be different from the instance name which is always prefixed TLS_ . For example, TLS_RSA_EXPORT_WITH_RC4_40_MD5.javaName() is \"SSL_RSA_EXPORT_WITH_RC4_40_MD5\" .","title":"javaName"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/to-string/","text":"okhttp / okhttp3 / CipherSuite / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cipher-suite/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/okhttp/okhttp3/-connection/","text":"okhttp / okhttp3 / Connection Connection \u00b6 interface Connection The sockets and streams of an HTTP, HTTPS, or HTTPS+HTTP/2 connection. May be used for multiple HTTP request/response exchanges. Connections may be direct to the origin server or via a proxy. Typically instances of this class are created, connected and exercised automatically by the HTTP client. Applications may use this class to monitor HTTP connections as members of a connection pool . Do not confuse this class with the misnamed HttpURLConnection , which isn\u2019t so much a connection as a single request/response exchange. Modern TLS \u00b6 There are trade-offs when selecting which options to include when negotiating a secure connection to a remote host. Newer TLS options are quite useful: Server Name Indication (SNI) enables one IP address to negotiate secure connections for multiple domain names. Application Layer Protocol Negotiation (ALPN) enables the HTTPS port (443) to be used to negotiate HTTP/2. Unfortunately, older HTTPS servers refuse to connect when such options are presented. Rather than avoiding these options entirely, this class allows a connection to be attempted with modern options and then retried without them should the attempt fail. Connection Reuse \u00b6 Each connection can carry a varying number of streams, depending on the underlying protocol being used. HTTP/1.x connections can carry either zero or one streams. HTTP/2 connections can carry any number of streams, dynamically configured with SETTINGS_MAX_CONCURRENT_STREAMS . A connection currently carrying zero streams is an idle stream. We keep it alive because reusing an existing connection is typically faster than establishing a new one. When a single logical call requires multiple streams due to redirects or authorization challenges, we prefer to use the same physical connection for all streams in the sequence. There are potential performance and behavior consequences to this preference. To support this feature, this class separates allocations from streams . An allocation is created by a call, used for one or more streams, and then released. An allocated connection won\u2019t be stolen by other calls while a redirect or authorization challenge is being handled. When the maximum concurrent streams limit is reduced, some allocations will be rescinded. Attempting to create new streams on these allocations will fail. Note that an allocation may be released before its stream is completed. This is intended to make bookkeeping easier for the caller: releasing the allocation as soon as the terminal stream has been found. But only complete the stream once its data stream has been exhausted. Functions \u00b6 Name Summary handshake Returns the TLS handshake used to establish this connection, or null if the connection is not HTTPS. abstract fun handshake(): Handshake ? protocol Returns the protocol negotiated by this connection, or Protocol.HTTP_1_1 if no protocol has been negotiated. This method returns Protocol.HTTP_1_1 even if the remote peer is using Protocol.HTTP_1_0 . abstract fun protocol(): Protocol route Returns the route used by this connection. abstract fun route(): Route socket Returns the socket that this connection is using. Returns an SSL socket if this connection is HTTPS. If this is an HTTP/2 connection the socket may be shared by multiple concurrent calls. abstract fun socket(): Socket","title":"Connection - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection/#connection","text":"interface Connection The sockets and streams of an HTTP, HTTPS, or HTTPS+HTTP/2 connection. May be used for multiple HTTP request/response exchanges. Connections may be direct to the origin server or via a proxy. Typically instances of this class are created, connected and exercised automatically by the HTTP client. Applications may use this class to monitor HTTP connections as members of a connection pool . Do not confuse this class with the misnamed HttpURLConnection , which isn\u2019t so much a connection as a single request/response exchange.","title":"Connection"},{"location":"4.x/okhttp/okhttp3/-connection/#modern-tls","text":"There are trade-offs when selecting which options to include when negotiating a secure connection to a remote host. Newer TLS options are quite useful: Server Name Indication (SNI) enables one IP address to negotiate secure connections for multiple domain names. Application Layer Protocol Negotiation (ALPN) enables the HTTPS port (443) to be used to negotiate HTTP/2. Unfortunately, older HTTPS servers refuse to connect when such options are presented. Rather than avoiding these options entirely, this class allows a connection to be attempted with modern options and then retried without them should the attempt fail.","title":"Modern TLS"},{"location":"4.x/okhttp/okhttp3/-connection/#connection-reuse","text":"Each connection can carry a varying number of streams, depending on the underlying protocol being used. HTTP/1.x connections can carry either zero or one streams. HTTP/2 connections can carry any number of streams, dynamically configured with SETTINGS_MAX_CONCURRENT_STREAMS . A connection currently carrying zero streams is an idle stream. We keep it alive because reusing an existing connection is typically faster than establishing a new one. When a single logical call requires multiple streams due to redirects or authorization challenges, we prefer to use the same physical connection for all streams in the sequence. There are potential performance and behavior consequences to this preference. To support this feature, this class separates allocations from streams . An allocation is created by a call, used for one or more streams, and then released. An allocated connection won\u2019t be stolen by other calls while a redirect or authorization challenge is being handled. When the maximum concurrent streams limit is reduced, some allocations will be rescinded. Attempting to create new streams on these allocations will fail. Note that an allocation may be released before its stream is completed. This is intended to make bookkeeping easier for the caller: releasing the allocation as soon as the terminal stream has been found. But only complete the stream once its data stream has been exhausted.","title":"Connection Reuse"},{"location":"4.x/okhttp/okhttp3/-connection/#functions","text":"Name Summary handshake Returns the TLS handshake used to establish this connection, or null if the connection is not HTTPS. abstract fun handshake(): Handshake ? protocol Returns the protocol negotiated by this connection, or Protocol.HTTP_1_1 if no protocol has been negotiated. This method returns Protocol.HTTP_1_1 even if the remote peer is using Protocol.HTTP_1_0 . abstract fun protocol(): Protocol route Returns the route used by this connection. abstract fun route(): Route socket Returns the socket that this connection is using. Returns an SSL socket if this connection is HTTPS. If this is an HTTP/2 connection the socket may be shared by multiple concurrent calls. abstract fun socket(): Socket","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-connection/handshake/","text":"okhttp / okhttp3 / Connection / handshake handshake \u00b6 abstract fun handshake(): Handshake ? Returns the TLS handshake used to establish this connection, or null if the connection is not HTTPS.","title":"handshake - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection/handshake/#handshake","text":"abstract fun handshake(): Handshake ? Returns the TLS handshake used to establish this connection, or null if the connection is not HTTPS.","title":"handshake"},{"location":"4.x/okhttp/okhttp3/-connection/protocol/","text":"okhttp / okhttp3 / Connection / protocol protocol \u00b6 abstract fun protocol(): Protocol Returns the protocol negotiated by this connection, or Protocol.HTTP_1_1 if no protocol has been negotiated. This method returns Protocol.HTTP_1_1 even if the remote peer is using Protocol.HTTP_1_0 .","title":"protocol - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection/protocol/#protocol","text":"abstract fun protocol(): Protocol Returns the protocol negotiated by this connection, or Protocol.HTTP_1_1 if no protocol has been negotiated. This method returns Protocol.HTTP_1_1 even if the remote peer is using Protocol.HTTP_1_0 .","title":"protocol"},{"location":"4.x/okhttp/okhttp3/-connection/route/","text":"okhttp / okhttp3 / Connection / route route \u00b6 abstract fun route(): Route Returns the route used by this connection.","title":"route - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection/route/#route","text":"abstract fun route(): Route Returns the route used by this connection.","title":"route"},{"location":"4.x/okhttp/okhttp3/-connection/socket/","text":"okhttp / okhttp3 / Connection / socket socket \u00b6 abstract fun socket(): Socket Returns the socket that this connection is using. Returns an SSL socket if this connection is HTTPS. If this is an HTTP/2 connection the socket may be shared by multiple concurrent calls.","title":"socket - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection/socket/#socket","text":"abstract fun socket(): Socket Returns the socket that this connection is using. Returns an SSL socket if this connection is HTTPS. If this is an HTTP/2 connection the socket may be shared by multiple concurrent calls.","title":"socket"},{"location":"4.x/okhttp/okhttp3/-connection-pool/","text":"okhttp / okhttp3 / ConnectionPool ConnectionPool \u00b6 class ConnectionPool Manages reuse of HTTP and HTTP/2 connections for reduced network latency. HTTP requests that share the same Address may share a Connection . This class implements the policy of which connections to keep open for future use. Constructors \u00b6 Name Summary <init> ConnectionPool(maxIdleConnections: Int , keepAliveDuration: Long , timeUnit: TimeUnit ) ConnectionPool() Functions \u00b6 Name Summary connectionCount Returns total number of connections in the pool. fun connectionCount(): Int evictAll Close and remove all idle connections in the pool. fun evictAll(): Unit idleConnectionCount Returns the number of idle connections in the pool. fun idleConnectionCount(): Int","title":"ConnectionPool - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-pool/#connectionpool","text":"class ConnectionPool Manages reuse of HTTP and HTTP/2 connections for reduced network latency. HTTP requests that share the same Address may share a Connection . This class implements the policy of which connections to keep open for future use.","title":"ConnectionPool"},{"location":"4.x/okhttp/okhttp3/-connection-pool/#constructors","text":"Name Summary <init> ConnectionPool(maxIdleConnections: Int , keepAliveDuration: Long , timeUnit: TimeUnit ) ConnectionPool()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-connection-pool/#functions","text":"Name Summary connectionCount Returns total number of connections in the pool. fun connectionCount(): Int evictAll Close and remove all idle connections in the pool. fun evictAll(): Unit idleConnectionCount Returns the number of idle connections in the pool. fun idleConnectionCount(): Int","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-connection-pool/-init-/","text":"okhttp / okhttp3 / ConnectionPool / <init> <init> \u00b6 ConnectionPool(maxIdleConnections: Int , keepAliveDuration: Long , timeUnit: TimeUnit ) ConnectionPool()","title":" init "},{"location":"4.x/okhttp/okhttp3/-connection-pool/-init-/#init","text":"ConnectionPool(maxIdleConnections: Int , keepAliveDuration: Long , timeUnit: TimeUnit ) ConnectionPool()","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-connection-pool/connection-count/","text":"okhttp / okhttp3 / ConnectionPool / connectionCount connectionCount \u00b6 fun connectionCount(): Int Returns total number of connections in the pool.","title":"connectionCount - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-pool/connection-count/#connectioncount","text":"fun connectionCount(): Int Returns total number of connections in the pool.","title":"connectionCount"},{"location":"4.x/okhttp/okhttp3/-connection-pool/evict-all/","text":"okhttp / okhttp3 / ConnectionPool / evictAll evictAll \u00b6 fun evictAll(): Unit Close and remove all idle connections in the pool.","title":"evictAll - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-pool/evict-all/#evictall","text":"fun evictAll(): Unit Close and remove all idle connections in the pool.","title":"evictAll"},{"location":"4.x/okhttp/okhttp3/-connection-pool/idle-connection-count/","text":"okhttp / okhttp3 / ConnectionPool / idleConnectionCount idleConnectionCount \u00b6 fun idleConnectionCount(): Int Returns the number of idle connections in the pool.","title":"idleConnectionCount - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-pool/idle-connection-count/#idleconnectioncount","text":"fun idleConnectionCount(): Int Returns the number of idle connections in the pool.","title":"idleConnectionCount"},{"location":"4.x/okhttp/okhttp3/-connection-spec/","text":"okhttp / okhttp3 / ConnectionSpec ConnectionSpec \u00b6 class ConnectionSpec Specifies configuration for the socket connection that HTTP traffic travels through. For https: URLs, this includes the TLS version and cipher suites to use when negotiating a secure connection. The TLS versions configured in a connection spec are only be used if they are also enabled in the SSL socket. For example, if an SSL socket does not have TLS 1.3 enabled, it will not be used even if it is present on the connection spec. The same policy also applies to cipher suites. Use Builder.allEnabledTlsVersions and Builder.allEnabledCipherSuites to defer all feature selection to the underlying SSL socket. The configuration of each spec changes with each OkHttp release. This is annoying: upgrading your OkHttp library can break connectivity to certain web servers! But it\u2019s a necessary annoyance because the TLS ecosystem is dynamic and staying up to date is necessary to stay secure. See OkHttp\u2019s TLS Configuration History to track these changes. Types \u00b6 Name Summary Builder class Builder Properties \u00b6 Name Summary cipherSuites Returns the cipher suites to use for a connection. Returns null if all of the SSL socket\u2019s enabled cipher suites should be used. val cipherSuites: List < CipherSuite >? isTls val isTls: Boolean supportsTlsExtensions val supportsTlsExtensions: Boolean tlsVersions Returns the TLS versions to use when negotiating a connection. Returns null if all of the SSL socket\u2019s enabled TLS versions should be used. val tlsVersions: List < TlsVersion >? Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int isCompatible Returns true if the socket, as currently configured, supports this connection spec. In order for a socket to be compatible the enabled cipher suites and protocols must intersect. fun isCompatible(socket: SSLSocket ): Boolean toString fun toString(): String Companion Object Properties \u00b6 Name Summary CLEARTEXT Unencrypted, unauthenticated connections for http: URLs. val CLEARTEXT: ConnectionSpec COMPATIBLE_TLS A backwards-compatible fallback configuration that works on obsolete client platforms and can connect to obsolete servers. When possible, prefer to upgrade your client platform or server rather than using this configuration. val COMPATIBLE_TLS: ConnectionSpec MODERN_TLS A modern TLS configuration that works on most client platforms and can connect to most servers. This is OkHttp\u2019s default configuration. val MODERN_TLS: ConnectionSpec RESTRICTED_TLS A secure TLS connection that requires a recent client platform and a recent server. val RESTRICTED_TLS: ConnectionSpec","title":"ConnectionSpec - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/#connectionspec","text":"class ConnectionSpec Specifies configuration for the socket connection that HTTP traffic travels through. For https: URLs, this includes the TLS version and cipher suites to use when negotiating a secure connection. The TLS versions configured in a connection spec are only be used if they are also enabled in the SSL socket. For example, if an SSL socket does not have TLS 1.3 enabled, it will not be used even if it is present on the connection spec. The same policy also applies to cipher suites. Use Builder.allEnabledTlsVersions and Builder.allEnabledCipherSuites to defer all feature selection to the underlying SSL socket. The configuration of each spec changes with each OkHttp release. This is annoying: upgrading your OkHttp library can break connectivity to certain web servers! But it\u2019s a necessary annoyance because the TLS ecosystem is dynamic and staying up to date is necessary to stay secure. See OkHttp\u2019s TLS Configuration History to track these changes.","title":"ConnectionSpec"},{"location":"4.x/okhttp/okhttp3/-connection-spec/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"4.x/okhttp/okhttp3/-connection-spec/#properties","text":"Name Summary cipherSuites Returns the cipher suites to use for a connection. Returns null if all of the SSL socket\u2019s enabled cipher suites should be used. val cipherSuites: List < CipherSuite >? isTls val isTls: Boolean supportsTlsExtensions val supportsTlsExtensions: Boolean tlsVersions Returns the TLS versions to use when negotiating a connection. Returns null if all of the SSL socket\u2019s enabled TLS versions should be used. val tlsVersions: List < TlsVersion >?","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-connection-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int isCompatible Returns true if the socket, as currently configured, supports this connection spec. In order for a socket to be compatible the enabled cipher suites and protocols must intersect. fun isCompatible(socket: SSLSocket ): Boolean toString fun toString(): String","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-connection-spec/#companion-object-properties","text":"Name Summary CLEARTEXT Unencrypted, unauthenticated connections for http: URLs. val CLEARTEXT: ConnectionSpec COMPATIBLE_TLS A backwards-compatible fallback configuration that works on obsolete client platforms and can connect to obsolete servers. When possible, prefer to upgrade your client platform or server rather than using this configuration. val COMPATIBLE_TLS: ConnectionSpec MODERN_TLS A modern TLS configuration that works on most client platforms and can connect to most servers. This is OkHttp\u2019s default configuration. val MODERN_TLS: ConnectionSpec RESTRICTED_TLS A secure TLS connection that requires a recent client platform and a recent server. val RESTRICTED_TLS: ConnectionSpec","title":"Companion Object Properties"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-c-l-e-a-r-t-e-x-t/","text":"okhttp / okhttp3 / ConnectionSpec / CLEARTEXT CLEARTEXT \u00b6 val CLEARTEXT: ConnectionSpec Unencrypted, unauthenticated connections for http: URLs.","title":"CLEARTEXT - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-c-l-e-a-r-t-e-x-t/#cleartext","text":"val CLEARTEXT: ConnectionSpec Unencrypted, unauthenticated connections for http: URLs.","title":"CLEARTEXT"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-c-o-m-p-a-t-i-b-l-e_-t-l-s/","text":"okhttp / okhttp3 / ConnectionSpec / COMPATIBLE_TLS COMPATIBLE_TLS \u00b6 val COMPATIBLE_TLS: ConnectionSpec A backwards-compatible fallback configuration that works on obsolete client platforms and can connect to obsolete servers. When possible, prefer to upgrade your client platform or server rather than using this configuration.","title":"COMPATIBLE_TLS - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-c-o-m-p-a-t-i-b-l-e_-t-l-s/#compatible_tls","text":"val COMPATIBLE_TLS: ConnectionSpec A backwards-compatible fallback configuration that works on obsolete client platforms and can connect to obsolete servers. When possible, prefer to upgrade your client platform or server rather than using this configuration.","title":"COMPATIBLE_TLS"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-m-o-d-e-r-n_-t-l-s/","text":"okhttp / okhttp3 / ConnectionSpec / MODERN_TLS MODERN_TLS \u00b6 val MODERN_TLS: ConnectionSpec A modern TLS configuration that works on most client platforms and can connect to most servers. This is OkHttp\u2019s default configuration.","title":"MODERN_TLS - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-m-o-d-e-r-n_-t-l-s/#modern_tls","text":"val MODERN_TLS: ConnectionSpec A modern TLS configuration that works on most client platforms and can connect to most servers. This is OkHttp\u2019s default configuration.","title":"MODERN_TLS"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-r-e-s-t-r-i-c-t-e-d_-t-l-s/","text":"okhttp / okhttp3 / ConnectionSpec / RESTRICTED_TLS RESTRICTED_TLS \u00b6 val RESTRICTED_TLS: ConnectionSpec A secure TLS connection that requires a recent client platform and a recent server.","title":"RESTRICTED_TLS - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-r-e-s-t-r-i-c-t-e-d_-t-l-s/#restricted_tls","text":"val RESTRICTED_TLS: ConnectionSpec A secure TLS connection that requires a recent client platform and a recent server.","title":"RESTRICTED_TLS"},{"location":"4.x/okhttp/okhttp3/-connection-spec/cipher-suites/","text":"okhttp / okhttp3 / ConnectionSpec / cipherSuites cipherSuites \u00b6 val cipherSuites: List < CipherSuite >? Returns the cipher suites to use for a connection. Returns null if all of the SSL socket\u2019s enabled cipher suites should be used.","title":"cipherSuites - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/cipher-suites/#ciphersuites","text":"val cipherSuites: List < CipherSuite >? Returns the cipher suites to use for a connection. Returns null if all of the SSL socket\u2019s enabled cipher suites should be used.","title":"cipherSuites"},{"location":"4.x/okhttp/okhttp3/-connection-spec/equals/","text":"okhttp / okhttp3 / ConnectionSpec / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"4.x/okhttp/okhttp3/-connection-spec/hash-code/","text":"okhttp / okhttp3 / ConnectionSpec / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"4.x/okhttp/okhttp3/-connection-spec/is-compatible/","text":"okhttp / okhttp3 / ConnectionSpec / isCompatible isCompatible \u00b6 fun isCompatible(socket: SSLSocket ): Boolean Returns true if the socket, as currently configured, supports this connection spec. In order for a socket to be compatible the enabled cipher suites and protocols must intersect. For cipher suites, at least one of the required cipher suites must match the socket\u2019s enabled cipher suites. If there are no required cipher suites the socket must have at least one cipher suite enabled. For protocols, at least one of the required protocols must match the socket\u2019s enabled protocols.","title":"isCompatible - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/is-compatible/#iscompatible","text":"fun isCompatible(socket: SSLSocket ): Boolean Returns true if the socket, as currently configured, supports this connection spec. In order for a socket to be compatible the enabled cipher suites and protocols must intersect. For cipher suites, at least one of the required cipher suites must match the socket\u2019s enabled cipher suites. If there are no required cipher suites the socket must have at least one cipher suite enabled. For protocols, at least one of the required protocols must match the socket\u2019s enabled protocols.","title":"isCompatible"},{"location":"4.x/okhttp/okhttp3/-connection-spec/is-tls/","text":"okhttp / okhttp3 / ConnectionSpec / isTls isTls \u00b6 val isTls: Boolean","title":"isTls - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/is-tls/#istls","text":"val isTls: Boolean","title":"isTls"},{"location":"4.x/okhttp/okhttp3/-connection-spec/supports-tls-extensions/","text":"okhttp / okhttp3 / ConnectionSpec / supportsTlsExtensions supportsTlsExtensions \u00b6 val supportsTlsExtensions: Boolean","title":"supportsTlsExtensions - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/supports-tls-extensions/#supportstlsextensions","text":"val supportsTlsExtensions: Boolean","title":"supportsTlsExtensions"},{"location":"4.x/okhttp/okhttp3/-connection-spec/tls-versions/","text":"okhttp / okhttp3 / ConnectionSpec / tlsVersions tlsVersions \u00b6 val tlsVersions: List < TlsVersion >? Returns the TLS versions to use when negotiating a connection. Returns null if all of the SSL socket\u2019s enabled TLS versions should be used.","title":"tlsVersions - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/tls-versions/#tlsversions","text":"val tlsVersions: List < TlsVersion >? Returns the TLS versions to use when negotiating a connection. Returns null if all of the SSL socket\u2019s enabled TLS versions should be used.","title":"tlsVersions"},{"location":"4.x/okhttp/okhttp3/-connection-spec/to-string/","text":"okhttp / okhttp3 / ConnectionSpec / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/","text":"okhttp / okhttp3 / ConnectionSpec / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder(connectionSpec: ConnectionSpec ) Functions \u00b6 Name Summary allEnabledCipherSuites fun allEnabledCipherSuites(): Builder allEnabledTlsVersions fun allEnabledTlsVersions(): Builder build fun build(): ConnectionSpec cipherSuites fun cipherSuites(vararg cipherSuites: CipherSuite ): Builder fun cipherSuites(vararg cipherSuites: String ): Builder tlsVersions fun tlsVersions(vararg tlsVersions: TlsVersion ): Builder fun tlsVersions(vararg tlsVersions: String ): Builder","title":"Builder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/#constructors","text":"Name Summary <init> Builder(connectionSpec: ConnectionSpec )","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/#functions","text":"Name Summary allEnabledCipherSuites fun allEnabledCipherSuites(): Builder allEnabledTlsVersions fun allEnabledTlsVersions(): Builder build fun build(): ConnectionSpec cipherSuites fun cipherSuites(vararg cipherSuites: CipherSuite ): Builder fun cipherSuites(vararg cipherSuites: String ): Builder tlsVersions fun tlsVersions(vararg tlsVersions: TlsVersion ): Builder fun tlsVersions(vararg tlsVersions: String ): Builder","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/-init-/","text":"okhttp / okhttp3 / ConnectionSpec / Builder / <init> <init> \u00b6 Builder(connectionSpec: ConnectionSpec )","title":" init "},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/-init-/#init","text":"Builder(connectionSpec: ConnectionSpec )","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/all-enabled-cipher-suites/","text":"okhttp / okhttp3 / ConnectionSpec / Builder / allEnabledCipherSuites allEnabledCipherSuites \u00b6 fun allEnabledCipherSuites(): Builder","title":"allEnabledCipherSuites - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/all-enabled-cipher-suites/#allenabledciphersuites","text":"fun allEnabledCipherSuites(): Builder","title":"allEnabledCipherSuites"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/all-enabled-tls-versions/","text":"okhttp / okhttp3 / ConnectionSpec / Builder / allEnabledTlsVersions allEnabledTlsVersions \u00b6 fun allEnabledTlsVersions(): Builder","title":"allEnabledTlsVersions - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/all-enabled-tls-versions/#allenabledtlsversions","text":"fun allEnabledTlsVersions(): Builder","title":"allEnabledTlsVersions"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/build/","text":"okhttp / okhttp3 / ConnectionSpec / Builder / build build \u00b6 fun build(): ConnectionSpec","title":"build - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/build/#build","text":"fun build(): ConnectionSpec","title":"build"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/cipher-suites/","text":"okhttp / okhttp3 / ConnectionSpec / Builder / cipherSuites cipherSuites \u00b6 fun cipherSuites(vararg cipherSuites: CipherSuite ): Builder fun cipherSuites(vararg cipherSuites: String ): Builder","title":"cipherSuites - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/cipher-suites/#ciphersuites","text":"fun cipherSuites(vararg cipherSuites: CipherSuite ): Builder fun cipherSuites(vararg cipherSuites: String ): Builder","title":"cipherSuites"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/tls-versions/","text":"okhttp / okhttp3 / ConnectionSpec / Builder / tlsVersions tlsVersions \u00b6 fun tlsVersions(vararg tlsVersions: TlsVersion ): Builder fun tlsVersions(vararg tlsVersions: String ): Builder","title":"tlsVersions - OkHttp"},{"location":"4.x/okhttp/okhttp3/-connection-spec/-builder/tls-versions/#tlsversions","text":"fun tlsVersions(vararg tlsVersions: TlsVersion ): Builder fun tlsVersions(vararg tlsVersions: String ): Builder","title":"tlsVersions"},{"location":"4.x/okhttp/okhttp3/-cookie/","text":"okhttp / okhttp3 / Cookie Cookie \u00b6 class Cookie An RFC 6265 Cookie. This class doesn\u2019t support additional attributes on cookies, like Chromium\u2019s Priority=HIGH extension . Types \u00b6 Name Summary Builder Builds a cookie. The name , value , and domain values must all be set before calling build . class Builder Properties \u00b6 Name Summary domain Returns the cookie\u2019s domain. If hostOnly returns true this is the only domain that matches this cookie; otherwise it matches this domain and all subdomains. val domain: String expiresAt Returns the time that this cookie expires, in the same format as System.currentTimeMillis . This is December 31, 9999 if the cookie is persistent , in which case it will expire at the end of the current session. val expiresAt: Long hostOnly Returns true if this cookie\u2019s domain should be interpreted as a single host name, or false if it should be interpreted as a pattern. This flag will be false if its Set-Cookie header included a domain attribute. val hostOnly: Boolean httpOnly Returns true if this cookie should be limited to only HTTP APIs. In web browsers this prevents the cookie from being accessible to scripts. val httpOnly: Boolean name Returns a non-empty string with this cookie\u2019s name. val name: String path Returns this cookie\u2019s path. This cookie matches URLs prefixed with path segments that match this path\u2019s segments. For example, if this path is /foo this cookie matches requests to /foo and /foo/bar , but not / or /football . val path: String persistent Returns true if this cookie does not expire at the end of the current session. val persistent: Boolean secure Returns true if this cookie should be limited to only HTTPS requests. val secure: Boolean value Returns a possibly-empty string with this cookie\u2019s value. val value: String Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int matches Returns true if this cookie should be included on a request to url . In addition to this check callers should also confirm that this cookie has not expired. fun matches(url: HttpUrl ): Boolean toString fun toString(): String Companion Object Functions \u00b6 Name Summary parse Attempt to parse a Set-Cookie HTTP header value setCookie as a cookie. Returns null if setCookie is not a well-formed cookie. fun parse(url: HttpUrl , setCookie: String ): Cookie ? parseAll Returns all of the cookies from a set of HTTP response headers. fun parseAll(url: HttpUrl , headers: Headers ): List < Cookie >","title":"Cookie - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/#cookie","text":"class Cookie An RFC 6265 Cookie. This class doesn\u2019t support additional attributes on cookies, like Chromium\u2019s Priority=HIGH extension .","title":"Cookie"},{"location":"4.x/okhttp/okhttp3/-cookie/#types","text":"Name Summary Builder Builds a cookie. The name , value , and domain values must all be set before calling build . class Builder","title":"Types"},{"location":"4.x/okhttp/okhttp3/-cookie/#properties","text":"Name Summary domain Returns the cookie\u2019s domain. If hostOnly returns true this is the only domain that matches this cookie; otherwise it matches this domain and all subdomains. val domain: String expiresAt Returns the time that this cookie expires, in the same format as System.currentTimeMillis . This is December 31, 9999 if the cookie is persistent , in which case it will expire at the end of the current session. val expiresAt: Long hostOnly Returns true if this cookie\u2019s domain should be interpreted as a single host name, or false if it should be interpreted as a pattern. This flag will be false if its Set-Cookie header included a domain attribute. val hostOnly: Boolean httpOnly Returns true if this cookie should be limited to only HTTP APIs. In web browsers this prevents the cookie from being accessible to scripts. val httpOnly: Boolean name Returns a non-empty string with this cookie\u2019s name. val name: String path Returns this cookie\u2019s path. This cookie matches URLs prefixed with path segments that match this path\u2019s segments. For example, if this path is /foo this cookie matches requests to /foo and /foo/bar , but not / or /football . val path: String persistent Returns true if this cookie does not expire at the end of the current session. val persistent: Boolean secure Returns true if this cookie should be limited to only HTTPS requests. val secure: Boolean value Returns a possibly-empty string with this cookie\u2019s value. val value: String","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-cookie/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int matches Returns true if this cookie should be included on a request to url . In addition to this check callers should also confirm that this cookie has not expired. fun matches(url: HttpUrl ): Boolean toString fun toString(): String","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-cookie/#companion-object-functions","text":"Name Summary parse Attempt to parse a Set-Cookie HTTP header value setCookie as a cookie. Returns null if setCookie is not a well-formed cookie. fun parse(url: HttpUrl , setCookie: String ): Cookie ? parseAll Returns all of the cookies from a set of HTTP response headers. fun parseAll(url: HttpUrl , headers: Headers ): List < Cookie >","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-cookie/domain/","text":"okhttp / okhttp3 / Cookie / domain domain \u00b6 val domain: String Returns the cookie\u2019s domain. If hostOnly returns true this is the only domain that matches this cookie; otherwise it matches this domain and all subdomains.","title":"domain - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/domain/#domain","text":"val domain: String Returns the cookie\u2019s domain. If hostOnly returns true this is the only domain that matches this cookie; otherwise it matches this domain and all subdomains.","title":"domain"},{"location":"4.x/okhttp/okhttp3/-cookie/equals/","text":"okhttp / okhttp3 / Cookie / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"4.x/okhttp/okhttp3/-cookie/expires-at/","text":"okhttp / okhttp3 / Cookie / expiresAt expiresAt \u00b6 val expiresAt: Long Returns the time that this cookie expires, in the same format as System.currentTimeMillis . This is December 31, 9999 if the cookie is persistent , in which case it will expire at the end of the current session. This may return a value less than the current time, in which case the cookie is already expired. Webservers may return expired cookies as a mechanism to delete previously set cookies that may or may not themselves be expired.","title":"expiresAt - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/expires-at/#expiresat","text":"val expiresAt: Long Returns the time that this cookie expires, in the same format as System.currentTimeMillis . This is December 31, 9999 if the cookie is persistent , in which case it will expire at the end of the current session. This may return a value less than the current time, in which case the cookie is already expired. Webservers may return expired cookies as a mechanism to delete previously set cookies that may or may not themselves be expired.","title":"expiresAt"},{"location":"4.x/okhttp/okhttp3/-cookie/hash-code/","text":"okhttp / okhttp3 / Cookie / hashCode hashCode \u00b6 @IgnoreJRERequirement fun hashCode(): Int","title":"hashCode - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/hash-code/#hashcode","text":"@IgnoreJRERequirement fun hashCode(): Int","title":"hashCode"},{"location":"4.x/okhttp/okhttp3/-cookie/host-only/","text":"okhttp / okhttp3 / Cookie / hostOnly hostOnly \u00b6 val hostOnly: Boolean Returns true if this cookie\u2019s domain should be interpreted as a single host name, or false if it should be interpreted as a pattern. This flag will be false if its Set-Cookie header included a domain attribute. For example, suppose the cookie\u2019s domain is example.com . If this flag is true it matches only example.com . If this flag is false it matches example.com and all subdomains including api.example.com , www.example.com , and beta.api.example.com .","title":"hostOnly - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/host-only/#hostonly","text":"val hostOnly: Boolean Returns true if this cookie\u2019s domain should be interpreted as a single host name, or false if it should be interpreted as a pattern. This flag will be false if its Set-Cookie header included a domain attribute. For example, suppose the cookie\u2019s domain is example.com . If this flag is true it matches only example.com . If this flag is false it matches example.com and all subdomains including api.example.com , www.example.com , and beta.api.example.com .","title":"hostOnly"},{"location":"4.x/okhttp/okhttp3/-cookie/http-only/","text":"okhttp / okhttp3 / Cookie / httpOnly httpOnly \u00b6 val httpOnly: Boolean Returns true if this cookie should be limited to only HTTP APIs. In web browsers this prevents the cookie from being accessible to scripts.","title":"httpOnly - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/http-only/#httponly","text":"val httpOnly: Boolean Returns true if this cookie should be limited to only HTTP APIs. In web browsers this prevents the cookie from being accessible to scripts.","title":"httpOnly"},{"location":"4.x/okhttp/okhttp3/-cookie/matches/","text":"okhttp / okhttp3 / Cookie / matches matches \u00b6 fun matches(url: HttpUrl ): Boolean Returns true if this cookie should be included on a request to url . In addition to this check callers should also confirm that this cookie has not expired.","title":"matches - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/matches/#matches","text":"fun matches(url: HttpUrl ): Boolean Returns true if this cookie should be included on a request to url . In addition to this check callers should also confirm that this cookie has not expired.","title":"matches"},{"location":"4.x/okhttp/okhttp3/-cookie/name/","text":"okhttp / okhttp3 / Cookie / name name \u00b6 val name: String Returns a non-empty string with this cookie\u2019s name.","title":"name - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/name/#name","text":"val name: String Returns a non-empty string with this cookie\u2019s name.","title":"name"},{"location":"4.x/okhttp/okhttp3/-cookie/parse-all/","text":"okhttp / okhttp3 / Cookie / parseAll parseAll \u00b6 @JvmStatic fun parseAll(url: HttpUrl , headers: Headers ): List < Cookie > Returns all of the cookies from a set of HTTP response headers.","title":"parseAll - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/parse-all/#parseall","text":"@JvmStatic fun parseAll(url: HttpUrl , headers: Headers ): List < Cookie > Returns all of the cookies from a set of HTTP response headers.","title":"parseAll"},{"location":"4.x/okhttp/okhttp3/-cookie/parse/","text":"okhttp / okhttp3 / Cookie / parse parse \u00b6 @JvmStatic fun parse(url: HttpUrl , setCookie: String ): Cookie ? Attempt to parse a Set-Cookie HTTP header value setCookie as a cookie. Returns null if setCookie is not a well-formed cookie.","title":"parse - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/parse/#parse","text":"@JvmStatic fun parse(url: HttpUrl , setCookie: String ): Cookie ? Attempt to parse a Set-Cookie HTTP header value setCookie as a cookie. Returns null if setCookie is not a well-formed cookie.","title":"parse"},{"location":"4.x/okhttp/okhttp3/-cookie/path/","text":"okhttp / okhttp3 / Cookie / path path \u00b6 val path: String Returns this cookie\u2019s path. This cookie matches URLs prefixed with path segments that match this path\u2019s segments. For example, if this path is /foo this cookie matches requests to /foo and /foo/bar , but not / or /football .","title":"path - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/path/#path","text":"val path: String Returns this cookie\u2019s path. This cookie matches URLs prefixed with path segments that match this path\u2019s segments. For example, if this path is /foo this cookie matches requests to /foo and /foo/bar , but not / or /football .","title":"path"},{"location":"4.x/okhttp/okhttp3/-cookie/persistent/","text":"okhttp / okhttp3 / Cookie / persistent persistent \u00b6 val persistent: Boolean Returns true if this cookie does not expire at the end of the current session.","title":"persistent - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/persistent/#persistent","text":"val persistent: Boolean Returns true if this cookie does not expire at the end of the current session.","title":"persistent"},{"location":"4.x/okhttp/okhttp3/-cookie/secure/","text":"okhttp / okhttp3 / Cookie / secure secure \u00b6 val secure: Boolean Returns true if this cookie should be limited to only HTTPS requests.","title":"secure - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/secure/#secure","text":"val secure: Boolean Returns true if this cookie should be limited to only HTTPS requests.","title":"secure"},{"location":"4.x/okhttp/okhttp3/-cookie/to-string/","text":"okhttp / okhttp3 / Cookie / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/okhttp/okhttp3/-cookie/value/","text":"okhttp / okhttp3 / Cookie / value value \u00b6 val value: String Returns a possibly-empty string with this cookie\u2019s value.","title":"value - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/value/#value","text":"val value: String Returns a possibly-empty string with this cookie\u2019s value.","title":"value"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/","text":"okhttp / okhttp3 / Cookie / Builder Builder \u00b6 class Builder Builds a cookie. The name , value , and domain values must all be set before calling build . Constructors \u00b6 Name Summary <init> Builds a cookie. The name , value , and domain values must all be set before calling build . Builder() Functions \u00b6 Name Summary build fun build(): Cookie domain Set the domain pattern for this cookie. The cookie will match domain and all of its subdomains. fun domain(domain: String ): Builder expiresAt fun expiresAt(expiresAt: Long ): Builder hostOnlyDomain Set the host-only domain for this cookie. The cookie will match domain but none of its subdomains. fun hostOnlyDomain(domain: String ): Builder httpOnly fun httpOnly(): Builder name fun name(name: String ): Builder path fun path(path: String ): Builder secure fun secure(): Builder value fun value(value: String ): Builder","title":"Builder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/#builder","text":"class Builder Builds a cookie. The name , value , and domain values must all be set before calling build .","title":"Builder"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/#constructors","text":"Name Summary <init> Builds a cookie. The name , value , and domain values must all be set before calling build . Builder()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/#functions","text":"Name Summary build fun build(): Cookie domain Set the domain pattern for this cookie. The cookie will match domain and all of its subdomains. fun domain(domain: String ): Builder expiresAt fun expiresAt(expiresAt: Long ): Builder hostOnlyDomain Set the host-only domain for this cookie. The cookie will match domain but none of its subdomains. fun hostOnlyDomain(domain: String ): Builder httpOnly fun httpOnly(): Builder name fun name(name: String ): Builder path fun path(path: String ): Builder secure fun secure(): Builder value fun value(value: String ): Builder","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/-init-/","text":"okhttp / okhttp3 / Cookie / Builder / <init> <init> \u00b6 Builder() Builds a cookie. The name , value , and domain values must all be set before calling build .","title":" init "},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/-init-/#init","text":"Builder() Builds a cookie. The name , value , and domain values must all be set before calling build .","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/build/","text":"okhttp / okhttp3 / Cookie / Builder / build build \u00b6 fun build(): Cookie","title":"build - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/build/#build","text":"fun build(): Cookie","title":"build"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/domain/","text":"okhttp / okhttp3 / Cookie / Builder / domain domain \u00b6 fun domain(domain: String ): Builder Set the domain pattern for this cookie. The cookie will match domain and all of its subdomains.","title":"domain - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/domain/#domain","text":"fun domain(domain: String ): Builder Set the domain pattern for this cookie. The cookie will match domain and all of its subdomains.","title":"domain"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/expires-at/","text":"okhttp / okhttp3 / Cookie / Builder / expiresAt expiresAt \u00b6 fun expiresAt(expiresAt: Long ): Builder","title":"expiresAt - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/expires-at/#expiresat","text":"fun expiresAt(expiresAt: Long ): Builder","title":"expiresAt"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/host-only-domain/","text":"okhttp / okhttp3 / Cookie / Builder / hostOnlyDomain hostOnlyDomain \u00b6 fun hostOnlyDomain(domain: String ): Builder Set the host-only domain for this cookie. The cookie will match domain but none of its subdomains.","title":"hostOnlyDomain - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/host-only-domain/#hostonlydomain","text":"fun hostOnlyDomain(domain: String ): Builder Set the host-only domain for this cookie. The cookie will match domain but none of its subdomains.","title":"hostOnlyDomain"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/http-only/","text":"okhttp / okhttp3 / Cookie / Builder / httpOnly httpOnly \u00b6 fun httpOnly(): Builder","title":"httpOnly - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/http-only/#httponly","text":"fun httpOnly(): Builder","title":"httpOnly"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/name/","text":"okhttp / okhttp3 / Cookie / Builder / name name \u00b6 fun name(name: String ): Builder","title":"name - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/name/#name","text":"fun name(name: String ): Builder","title":"name"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/path/","text":"okhttp / okhttp3 / Cookie / Builder / path path \u00b6 fun path(path: String ): Builder","title":"path - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/path/#path","text":"fun path(path: String ): Builder","title":"path"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/secure/","text":"okhttp / okhttp3 / Cookie / Builder / secure secure \u00b6 fun secure(): Builder","title":"secure - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/secure/#secure","text":"fun secure(): Builder","title":"secure"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/value/","text":"okhttp / okhttp3 / Cookie / Builder / value value \u00b6 fun value(value: String ): Builder","title":"value - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie/-builder/value/#value","text":"fun value(value: String ): Builder","title":"value"},{"location":"4.x/okhttp/okhttp3/-cookie-jar/","text":"okhttp / okhttp3 / CookieJar CookieJar \u00b6 interface CookieJar Provides policy and persistence for HTTP cookies. As policy, implementations of this interface are responsible for selecting which cookies to accept and which to reject. A reasonable policy is to reject all cookies, though that may interfere with session-based authentication schemes that require cookies. As persistence, implementations of this interface must also provide storage of cookies. Simple implementations may store cookies in memory; sophisticated ones may use the file system or database to hold accepted cookies. The cookie storage model specifies policies for updating and expiring cookies. Functions \u00b6 Name Summary loadForRequest Load cookies from the jar for an HTTP request to url . This method returns a possibly empty list of cookies for the network request. abstract fun loadForRequest(url: HttpUrl ): List < Cookie > saveFromResponse Saves cookies from an HTTP response to this store according to this jar\u2019s policy. abstract fun saveFromResponse(url: HttpUrl , cookies: List < Cookie >): Unit Companion Object Properties \u00b6 Name Summary NO_COOKIES A cookie jar that never accepts any cookies. val NO_COOKIES: CookieJar","title":"CookieJar - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie-jar/#cookiejar","text":"interface CookieJar Provides policy and persistence for HTTP cookies. As policy, implementations of this interface are responsible for selecting which cookies to accept and which to reject. A reasonable policy is to reject all cookies, though that may interfere with session-based authentication schemes that require cookies. As persistence, implementations of this interface must also provide storage of cookies. Simple implementations may store cookies in memory; sophisticated ones may use the file system or database to hold accepted cookies. The cookie storage model specifies policies for updating and expiring cookies.","title":"CookieJar"},{"location":"4.x/okhttp/okhttp3/-cookie-jar/#functions","text":"Name Summary loadForRequest Load cookies from the jar for an HTTP request to url . This method returns a possibly empty list of cookies for the network request. abstract fun loadForRequest(url: HttpUrl ): List < Cookie > saveFromResponse Saves cookies from an HTTP response to this store according to this jar\u2019s policy. abstract fun saveFromResponse(url: HttpUrl , cookies: List < Cookie >): Unit","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-cookie-jar/#companion-object-properties","text":"Name Summary NO_COOKIES A cookie jar that never accepts any cookies. val NO_COOKIES: CookieJar","title":"Companion Object Properties"},{"location":"4.x/okhttp/okhttp3/-cookie-jar/-n-o_-c-o-o-k-i-e-s/","text":"okhttp / okhttp3 / CookieJar / NO_COOKIES NO_COOKIES \u00b6 val NO_COOKIES: CookieJar A cookie jar that never accepts any cookies.","title":"NO_COOKIES - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie-jar/-n-o_-c-o-o-k-i-e-s/#no_cookies","text":"val NO_COOKIES: CookieJar A cookie jar that never accepts any cookies.","title":"NO_COOKIES"},{"location":"4.x/okhttp/okhttp3/-cookie-jar/load-for-request/","text":"okhttp / okhttp3 / CookieJar / loadForRequest loadForRequest \u00b6 abstract fun loadForRequest(url: HttpUrl ): List < Cookie > Load cookies from the jar for an HTTP request to url . This method returns a possibly empty list of cookies for the network request. Simple implementations will return the accepted cookies that have not yet expired and that match url .","title":"loadForRequest - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie-jar/load-for-request/#loadforrequest","text":"abstract fun loadForRequest(url: HttpUrl ): List < Cookie > Load cookies from the jar for an HTTP request to url . This method returns a possibly empty list of cookies for the network request. Simple implementations will return the accepted cookies that have not yet expired and that match url .","title":"loadForRequest"},{"location":"4.x/okhttp/okhttp3/-cookie-jar/save-from-response/","text":"okhttp / okhttp3 / CookieJar / saveFromResponse saveFromResponse \u00b6 abstract fun saveFromResponse(url: HttpUrl , cookies: List < Cookie >): Unit Saves cookies from an HTTP response to this store according to this jar\u2019s policy. Note that this method may be called a second time for a single HTTP response if the response includes a trailer. For this obscure HTTP feature, cookies contains only the trailer\u2019s cookies.","title":"saveFromResponse - OkHttp"},{"location":"4.x/okhttp/okhttp3/-cookie-jar/save-from-response/#savefromresponse","text":"abstract fun saveFromResponse(url: HttpUrl , cookies: List < Cookie >): Unit Saves cookies from an HTTP response to this store according to this jar\u2019s policy. Note that this method may be called a second time for a single HTTP response if the response includes a trailer. For this obscure HTTP feature, cookies contains only the trailer\u2019s cookies.","title":"saveFromResponse"},{"location":"4.x/okhttp/okhttp3/-credentials/","text":"okhttp / okhttp3 / Credentials Credentials \u00b6 object Credentials Factory for HTTP authorization credentials. Functions \u00b6 Name Summary basic Returns an auth credential for the Basic scheme. fun basic(username: String , password: String , charset: Charset = ISO_8859_1): String","title":"Credentials - OkHttp"},{"location":"4.x/okhttp/okhttp3/-credentials/#credentials","text":"object Credentials Factory for HTTP authorization credentials.","title":"Credentials"},{"location":"4.x/okhttp/okhttp3/-credentials/#functions","text":"Name Summary basic Returns an auth credential for the Basic scheme. fun basic(username: String , password: String , charset: Charset = ISO_8859_1): String","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-credentials/basic/","text":"okhttp / okhttp3 / Credentials / basic basic \u00b6 @JvmStatic @JvmOverloads fun basic(username: String , password: String , charset: Charset = ISO_8859_1): String Returns an auth credential for the Basic scheme.","title":"basic - OkHttp"},{"location":"4.x/okhttp/okhttp3/-credentials/basic/#basic","text":"@JvmStatic @JvmOverloads fun basic(username: String , password: String , charset: Charset = ISO_8859_1): String Returns an auth credential for the Basic scheme.","title":"basic"},{"location":"4.x/okhttp/okhttp3/-dispatcher/","text":"okhttp / okhttp3 / Dispatcher Dispatcher \u00b6 class Dispatcher Policy on when async requests are executed. Each dispatcher uses an ExecutorService to run calls internally. If you supply your own executor, it should be able to run the configured maximum number of calls concurrently. Constructors \u00b6 Name Summary <init> Dispatcher(executorService: ExecutorService ) Policy on when async requests are executed. Dispatcher() Properties \u00b6 Name Summary executorService val executorService: ExecutorService idleCallback A callback to be invoked each time the dispatcher becomes idle (when the number of running calls returns to zero). var idleCallback: Runnable ? maxRequests The maximum number of requests to execute concurrently. Above this requests queue in memory, waiting for the running calls to complete. var maxRequests: Int maxRequestsPerHost The maximum number of requests for each host to execute concurrently. This limits requests by the URL\u2019s host name. Note that concurrent requests to a single IP address may still exceed this limit: multiple hostnames may share an IP address or be routed through the same HTTP proxy. var maxRequestsPerHost: Int Functions \u00b6 Name Summary cancelAll Cancel all calls currently enqueued or executing. Includes calls executed both synchronously and asynchronously . fun cancelAll(): Unit queuedCalls Returns a snapshot of the calls currently awaiting execution. fun queuedCalls(): List < Call > queuedCallsCount fun queuedCallsCount(): Int runningCalls Returns a snapshot of the calls currently being executed. fun runningCalls(): List < Call > runningCallsCount fun runningCallsCount(): Int","title":"Dispatcher - OkHttp"},{"location":"4.x/okhttp/okhttp3/-dispatcher/#dispatcher","text":"class Dispatcher Policy on when async requests are executed. Each dispatcher uses an ExecutorService to run calls internally. If you supply your own executor, it should be able to run the configured maximum number of calls concurrently.","title":"Dispatcher"},{"location":"4.x/okhttp/okhttp3/-dispatcher/#constructors","text":"Name Summary <init> Dispatcher(executorService: ExecutorService ) Policy on when async requests are executed. Dispatcher()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-dispatcher/#properties","text":"Name Summary executorService val executorService: ExecutorService idleCallback A callback to be invoked each time the dispatcher becomes idle (when the number of running calls returns to zero). var idleCallback: Runnable ? maxRequests The maximum number of requests to execute concurrently. Above this requests queue in memory, waiting for the running calls to complete. var maxRequests: Int maxRequestsPerHost The maximum number of requests for each host to execute concurrently. This limits requests by the URL\u2019s host name. Note that concurrent requests to a single IP address may still exceed this limit: multiple hostnames may share an IP address or be routed through the same HTTP proxy. var maxRequestsPerHost: Int","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-dispatcher/#functions","text":"Name Summary cancelAll Cancel all calls currently enqueued or executing. Includes calls executed both synchronously and asynchronously . fun cancelAll(): Unit queuedCalls Returns a snapshot of the calls currently awaiting execution. fun queuedCalls(): List < Call > queuedCallsCount fun queuedCallsCount(): Int runningCalls Returns a snapshot of the calls currently being executed. fun runningCalls(): List < Call > runningCallsCount fun runningCallsCount(): Int","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-dispatcher/-init-/","text":"okhttp / okhttp3 / Dispatcher / <init> <init> \u00b6 Dispatcher(executorService: ExecutorService )``Dispatcher() Policy on when async requests are executed. Each dispatcher uses an ExecutorService to run calls internally. If you supply your own executor, it should be able to run the configured maximum number of calls concurrently.","title":" init "},{"location":"4.x/okhttp/okhttp3/-dispatcher/-init-/#init","text":"Dispatcher(executorService: ExecutorService )``Dispatcher() Policy on when async requests are executed. Each dispatcher uses an ExecutorService to run calls internally. If you supply your own executor, it should be able to run the configured maximum number of calls concurrently.","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-dispatcher/cancel-all/","text":"okhttp / okhttp3 / Dispatcher / cancelAll cancelAll \u00b6 @Synchronized fun cancelAll(): Unit Cancel all calls currently enqueued or executing. Includes calls executed both synchronously and asynchronously .","title":"cancelAll - OkHttp"},{"location":"4.x/okhttp/okhttp3/-dispatcher/cancel-all/#cancelall","text":"@Synchronized fun cancelAll(): Unit Cancel all calls currently enqueued or executing. Includes calls executed both synchronously and asynchronously .","title":"cancelAll"},{"location":"4.x/okhttp/okhttp3/-dispatcher/executor-service/","text":"okhttp / okhttp3 / Dispatcher / executorService executorService \u00b6 val executorService: ExecutorService","title":"executorService - OkHttp"},{"location":"4.x/okhttp/okhttp3/-dispatcher/executor-service/#executorservice","text":"val executorService: ExecutorService","title":"executorService"},{"location":"4.x/okhttp/okhttp3/-dispatcher/idle-callback/","text":"okhttp / okhttp3 / Dispatcher / idleCallback idleCallback \u00b6 var idleCallback: Runnable ? A callback to be invoked each time the dispatcher becomes idle (when the number of running calls returns to zero). Note: The time at which a call is considered idle is different depending on whether it was run asynchronously or synchronously . Asynchronous calls become idle after the onResponse or onFailure callback has returned. Synchronous calls become idle once execute() returns. This means that if you are doing synchronous calls the network layer will not truly be idle until every returned Response has been closed. Getter A callback to be invoked each time the dispatcher becomes idle (when the number of running calls returns to zero). Note: The time at which a call is considered idle is different depending on whether it was run asynchronously or synchronously . Asynchronous calls become idle after the onResponse or onFailure callback has returned. Synchronous calls become idle once execute() returns. This means that if you are doing synchronous calls the network layer will not truly be idle until every returned Response has been closed. Setter A callback to be invoked each time the dispatcher becomes idle (when the number of running calls returns to zero). Note: The time at which a call is considered idle is different depending on whether it was run asynchronously or synchronously . Asynchronous calls become idle after the onResponse or onFailure callback has returned. Synchronous calls become idle once execute() returns. This means that if you are doing synchronous calls the network layer will not truly be idle until every returned Response has been closed.","title":"idleCallback - OkHttp"},{"location":"4.x/okhttp/okhttp3/-dispatcher/idle-callback/#idlecallback","text":"var idleCallback: Runnable ? A callback to be invoked each time the dispatcher becomes idle (when the number of running calls returns to zero). Note: The time at which a call is considered idle is different depending on whether it was run asynchronously or synchronously . Asynchronous calls become idle after the onResponse or onFailure callback has returned. Synchronous calls become idle once execute() returns. This means that if you are doing synchronous calls the network layer will not truly be idle until every returned Response has been closed. Getter A callback to be invoked each time the dispatcher becomes idle (when the number of running calls returns to zero). Note: The time at which a call is considered idle is different depending on whether it was run asynchronously or synchronously . Asynchronous calls become idle after the onResponse or onFailure callback has returned. Synchronous calls become idle once execute() returns. This means that if you are doing synchronous calls the network layer will not truly be idle until every returned Response has been closed. Setter A callback to be invoked each time the dispatcher becomes idle (when the number of running calls returns to zero). Note: The time at which a call is considered idle is different depending on whether it was run asynchronously or synchronously . Asynchronous calls become idle after the onResponse or onFailure callback has returned. Synchronous calls become idle once execute() returns. This means that if you are doing synchronous calls the network layer will not truly be idle until every returned Response has been closed.","title":"idleCallback"},{"location":"4.x/okhttp/okhttp3/-dispatcher/max-requests-per-host/","text":"okhttp / okhttp3 / Dispatcher / maxRequestsPerHost maxRequestsPerHost \u00b6 var maxRequestsPerHost: Int The maximum number of requests for each host to execute concurrently. This limits requests by the URL\u2019s host name. Note that concurrent requests to a single IP address may still exceed this limit: multiple hostnames may share an IP address or be routed through the same HTTP proxy. If more than maxRequestsPerHost requests are in flight when this is invoked, those requests will remain in flight. WebSocket connections to hosts do not count against this limit. Getter The maximum number of requests for each host to execute concurrently. This limits requests by the URL\u2019s host name. Note that concurrent requests to a single IP address may still exceed this limit: multiple hostnames may share an IP address or be routed through the same HTTP proxy. If more than maxRequestsPerHost requests are in flight when this is invoked, those requests will remain in flight. WebSocket connections to hosts do not count against this limit.","title":"maxRequestsPerHost - OkHttp"},{"location":"4.x/okhttp/okhttp3/-dispatcher/max-requests-per-host/#maxrequestsperhost","text":"var maxRequestsPerHost: Int The maximum number of requests for each host to execute concurrently. This limits requests by the URL\u2019s host name. Note that concurrent requests to a single IP address may still exceed this limit: multiple hostnames may share an IP address or be routed through the same HTTP proxy. If more than maxRequestsPerHost requests are in flight when this is invoked, those requests will remain in flight. WebSocket connections to hosts do not count against this limit. Getter The maximum number of requests for each host to execute concurrently. This limits requests by the URL\u2019s host name. Note that concurrent requests to a single IP address may still exceed this limit: multiple hostnames may share an IP address or be routed through the same HTTP proxy. If more than maxRequestsPerHost requests are in flight when this is invoked, those requests will remain in flight. WebSocket connections to hosts do not count against this limit.","title":"maxRequestsPerHost"},{"location":"4.x/okhttp/okhttp3/-dispatcher/max-requests/","text":"okhttp / okhttp3 / Dispatcher / maxRequests maxRequests \u00b6 var maxRequests: Int The maximum number of requests to execute concurrently. Above this requests queue in memory, waiting for the running calls to complete. If more than maxRequests requests are in flight when this is invoked, those requests will remain in flight. Getter The maximum number of requests to execute concurrently. Above this requests queue in memory, waiting for the running calls to complete. If more than maxRequests requests are in flight when this is invoked, those requests will remain in flight.","title":"maxRequests - OkHttp"},{"location":"4.x/okhttp/okhttp3/-dispatcher/max-requests/#maxrequests","text":"var maxRequests: Int The maximum number of requests to execute concurrently. Above this requests queue in memory, waiting for the running calls to complete. If more than maxRequests requests are in flight when this is invoked, those requests will remain in flight. Getter The maximum number of requests to execute concurrently. Above this requests queue in memory, waiting for the running calls to complete. If more than maxRequests requests are in flight when this is invoked, those requests will remain in flight.","title":"maxRequests"},{"location":"4.x/okhttp/okhttp3/-dispatcher/queued-calls-count/","text":"okhttp / okhttp3 / Dispatcher / queuedCallsCount queuedCallsCount \u00b6 @Synchronized fun queuedCallsCount(): Int","title":"queuedCallsCount - OkHttp"},{"location":"4.x/okhttp/okhttp3/-dispatcher/queued-calls-count/#queuedcallscount","text":"@Synchronized fun queuedCallsCount(): Int","title":"queuedCallsCount"},{"location":"4.x/okhttp/okhttp3/-dispatcher/queued-calls/","text":"okhttp / okhttp3 / Dispatcher / queuedCalls queuedCalls \u00b6 @Synchronized fun queuedCalls(): List < Call > Returns a snapshot of the calls currently awaiting execution.","title":"queuedCalls - OkHttp"},{"location":"4.x/okhttp/okhttp3/-dispatcher/queued-calls/#queuedcalls","text":"@Synchronized fun queuedCalls(): List < Call > Returns a snapshot of the calls currently awaiting execution.","title":"queuedCalls"},{"location":"4.x/okhttp/okhttp3/-dispatcher/running-calls-count/","text":"okhttp / okhttp3 / Dispatcher / runningCallsCount runningCallsCount \u00b6 @Synchronized fun runningCallsCount(): Int","title":"runningCallsCount - OkHttp"},{"location":"4.x/okhttp/okhttp3/-dispatcher/running-calls-count/#runningcallscount","text":"@Synchronized fun runningCallsCount(): Int","title":"runningCallsCount"},{"location":"4.x/okhttp/okhttp3/-dispatcher/running-calls/","text":"okhttp / okhttp3 / Dispatcher / runningCalls runningCalls \u00b6 @Synchronized fun runningCalls(): List < Call > Returns a snapshot of the calls currently being executed.","title":"runningCalls - OkHttp"},{"location":"4.x/okhttp/okhttp3/-dispatcher/running-calls/#runningcalls","text":"@Synchronized fun runningCalls(): List < Call > Returns a snapshot of the calls currently being executed.","title":"runningCalls"},{"location":"4.x/okhttp/okhttp3/-dns/","text":"okhttp / okhttp3 / Dns Dns \u00b6 interface Dns A domain name service that resolves IP addresses for host names. Most applications will use the system DNS service , which is the default. Some applications may provide their own implementation to use a different DNS server, to prefer IPv6 addresses, to prefer IPv4 addresses, or to force a specific known IP address. Implementations of this interface must be safe for concurrent use. Functions \u00b6 Name Summary lookup Returns the IP addresses of hostname , in the order they will be attempted by OkHttp. If a connection to an address fails, OkHttp will retry the connection with the next address until either a connection is made, the set of IP addresses is exhausted, or a limit is exceeded. abstract fun lookup(hostname: String ): List < InetAddress > Companion Object Properties \u00b6 Name Summary SYSTEM A DNS that uses InetAddress.getAllByName to ask the underlying operating system to lookup IP addresses. Most custom Dns implementations should delegate to this instance. val SYSTEM: Dns","title":"Dns - OkHttp"},{"location":"4.x/okhttp/okhttp3/-dns/#dns","text":"interface Dns A domain name service that resolves IP addresses for host names. Most applications will use the system DNS service , which is the default. Some applications may provide their own implementation to use a different DNS server, to prefer IPv6 addresses, to prefer IPv4 addresses, or to force a specific known IP address. Implementations of this interface must be safe for concurrent use.","title":"Dns"},{"location":"4.x/okhttp/okhttp3/-dns/#functions","text":"Name Summary lookup Returns the IP addresses of hostname , in the order they will be attempted by OkHttp. If a connection to an address fails, OkHttp will retry the connection with the next address until either a connection is made, the set of IP addresses is exhausted, or a limit is exceeded. abstract fun lookup(hostname: String ): List < InetAddress >","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-dns/#companion-object-properties","text":"Name Summary SYSTEM A DNS that uses InetAddress.getAllByName to ask the underlying operating system to lookup IP addresses. Most custom Dns implementations should delegate to this instance. val SYSTEM: Dns","title":"Companion Object Properties"},{"location":"4.x/okhttp/okhttp3/-dns/-s-y-s-t-e-m/","text":"okhttp / okhttp3 / Dns / SYSTEM SYSTEM \u00b6 val SYSTEM: Dns A DNS that uses InetAddress.getAllByName to ask the underlying operating system to lookup IP addresses. Most custom Dns implementations should delegate to this instance.","title":"SYSTEM - OkHttp"},{"location":"4.x/okhttp/okhttp3/-dns/-s-y-s-t-e-m/#system","text":"val SYSTEM: Dns A DNS that uses InetAddress.getAllByName to ask the underlying operating system to lookup IP addresses. Most custom Dns implementations should delegate to this instance.","title":"SYSTEM"},{"location":"4.x/okhttp/okhttp3/-dns/lookup/","text":"okhttp / okhttp3 / Dns / lookup lookup \u00b6 abstract fun lookup(hostname: String ): List < InetAddress > Returns the IP addresses of hostname , in the order they will be attempted by OkHttp. If a connection to an address fails, OkHttp will retry the connection with the next address until either a connection is made, the set of IP addresses is exhausted, or a limit is exceeded.","title":"lookup - OkHttp"},{"location":"4.x/okhttp/okhttp3/-dns/lookup/#lookup","text":"abstract fun lookup(hostname: String ): List < InetAddress > Returns the IP addresses of hostname , in the order they will be attempted by OkHttp. If a connection to an address fails, OkHttp will retry the connection with the next address until either a connection is made, the set of IP addresses is exhausted, or a limit is exceeded.","title":"lookup"},{"location":"4.x/okhttp/okhttp3/-event-listener/","text":"okhttp / okhttp3 / EventListener EventListener \u00b6 abstract class EventListener Listener for metrics events. Extend this class to monitor the quantity, size, and duration of your application\u2019s HTTP calls. All start/connect/acquire events will eventually receive a matching end/release event, either successful (non-null parameters), or failed (non-null throwable). The first common parameters of each event pair are used to link the event in case of concurrent or repeated events e.g. dnsStart(call, domainName) \u2192 dnsEnd(call, domainName, inetAddressList) . Events are typically nested with this structure: call ( callStart , callEnd , callFailed ) proxy selection ( proxySelectStart , proxySelectEnd ) dns ( dnsStart , dnsEnd ) connect ( connectStart , connectEnd , connectFailed ) secure connect ( secureConnectStart , secureConnectEnd ) connection held ( connectionAcquired , connectionReleased ) request ( requestFailed ) headers ( requestHeadersStart , requestHeadersEnd ) body ( requestBodyStart , requestBodyEnd ) response ( responseFailed ) headers ( responseHeadersStart , responseHeadersEnd ) body ( responseBodyStart , responseBodyEnd ) This nesting is typical but not strict. For example, when calls use \u201cExpect: continue\u201d the request body start and end events occur within the response header events. Similarly, duplex calls interleave the request and response bodies. Since connections may be reused, the proxy selection, DNS, and connect events may not be present for a call. In future releases of OkHttp these events may also occur concurrently to permit multiple routes to be attempted simultaneously. Events and sequences of events may be repeated for retries and follow-ups. All event methods must execute fast, without external locking, cannot throw exceptions, attempt to mutate the event parameters, or be re-entrant back into the client. Any IO - writing to files or network should be done asynchronously. Types \u00b6 Name Summary Factory interface Factory Constructors \u00b6 Name Summary <init> Listener for metrics events. Extend this class to monitor the quantity, size, and duration of your application\u2019s HTTP calls. EventListener() Functions \u00b6 Name Summary <no name provided> fun <no name provided>(): Unit cacheConditionalHit Invoked when a response will be served from the cache or network based on validating the cached Response freshness. Will be followed by cacheHit or cacheMiss after the network Response is available. open fun cacheConditionalHit(call: Call , cachedResponse: Response ): Unit cacheHit Invoked when a result is served from the cache. The Response provided is the top level Response and normal event sequences will not be received. open fun cacheHit(call: Call , response: Response ): Unit cacheMiss Invoked when a response will be served from the network. The Response will be available from normal event sequences. open fun cacheMiss(call: Call ): Unit callEnd Invoked immediately after a call has completely ended. This includes delayed consumption of response body by the caller. open fun callEnd(call: Call ): Unit callFailed Invoked when a call fails permanently. open fun callFailed(call: Call , ioe: IOException ): Unit callStart Invoked as soon as a call is enqueued or executed by a client. In case of thread or stream limits, this call may be executed well before processing the request is able to begin. open fun callStart(call: Call ): Unit canceled Invoked when a call is canceled. open fun canceled(call: Call ): Unit connectEnd Invoked immediately after a socket connection was attempted. open fun connectEnd(call: Call , inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol ?): Unit connectFailed Invoked when a connection attempt fails. This failure is not terminal if further routes are available and failure recovery is enabled. open fun connectFailed(call: Call , inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol ?, ioe: IOException ): Unit connectionAcquired Invoked after a connection has been acquired for the call . open fun connectionAcquired(call: Call , connection: Connection ): Unit connectionReleased Invoked after a connection has been released for the call . open fun connectionReleased(call: Call , connection: Connection ): Unit connectStart Invoked just prior to initiating a socket connection. open fun connectStart(call: Call , inetSocketAddress: InetSocketAddress , proxy: Proxy ): Unit dnsEnd Invoked immediately after a DNS lookup. open fun dnsEnd(call: Call , domainName: String , inetAddressList: List < InetAddress >): Unit dnsStart Invoked just prior to a DNS lookup. See Dns.lookup . open fun dnsStart(call: Call , domainName: String ): Unit proxySelectEnd Invoked after proxy selection. open fun proxySelectEnd(call: Call , url: HttpUrl , proxies: List < Proxy >): Unit proxySelectStart Invoked prior to a proxy selection. open fun proxySelectStart(call: Call , url: HttpUrl ): Unit requestBodyEnd Invoked immediately after sending a request body. open fun requestBodyEnd(call: Call , byteCount: Long ): Unit requestBodyStart Invoked just prior to sending a request body. Will only be invoked for request allowing and having a request body to send. open fun requestBodyStart(call: Call ): Unit requestFailed Invoked when a request fails to be written. open fun requestFailed(call: Call , ioe: IOException ): Unit requestHeadersEnd Invoked immediately after sending request headers. open fun requestHeadersEnd(call: Call , request: Request ): Unit requestHeadersStart Invoked just prior to sending request headers. open fun requestHeadersStart(call: Call ): Unit responseBodyEnd Invoked immediately after receiving a response body and completing reading it. open fun responseBodyEnd(call: Call , byteCount: Long ): Unit responseBodyStart Invoked when data from the response body is first available to the application. open fun responseBodyStart(call: Call ): Unit responseFailed Invoked when a response fails to be read. open fun responseFailed(call: Call , ioe: IOException ): Unit responseHeadersEnd Invoked immediately after receiving response headers. open fun responseHeadersEnd(call: Call , response: Response ): Unit responseHeadersStart Invoked when response headers are first returned from the server. open fun responseHeadersStart(call: Call ): Unit satisfactionFailure Invoked when a call fails due to cache rules. For example, we\u2019re forbidden from using the network and the cache is insufficient open fun satisfactionFailure(call: Call , response: Response ): Unit secureConnectEnd Invoked immediately after a TLS connection was attempted. open fun secureConnectEnd(call: Call , handshake: Handshake ?): Unit secureConnectStart Invoked just prior to initiating a TLS connection. open fun secureConnectStart(call: Call ): Unit Companion Object Properties \u00b6 Name Summary NONE val NONE: EventListener","title":"EventListener - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/#eventlistener","text":"abstract class EventListener Listener for metrics events. Extend this class to monitor the quantity, size, and duration of your application\u2019s HTTP calls. All start/connect/acquire events will eventually receive a matching end/release event, either successful (non-null parameters), or failed (non-null throwable). The first common parameters of each event pair are used to link the event in case of concurrent or repeated events e.g. dnsStart(call, domainName) \u2192 dnsEnd(call, domainName, inetAddressList) . Events are typically nested with this structure: call ( callStart , callEnd , callFailed ) proxy selection ( proxySelectStart , proxySelectEnd ) dns ( dnsStart , dnsEnd ) connect ( connectStart , connectEnd , connectFailed ) secure connect ( secureConnectStart , secureConnectEnd ) connection held ( connectionAcquired , connectionReleased ) request ( requestFailed ) headers ( requestHeadersStart , requestHeadersEnd ) body ( requestBodyStart , requestBodyEnd ) response ( responseFailed ) headers ( responseHeadersStart , responseHeadersEnd ) body ( responseBodyStart , responseBodyEnd ) This nesting is typical but not strict. For example, when calls use \u201cExpect: continue\u201d the request body start and end events occur within the response header events. Similarly, duplex calls interleave the request and response bodies. Since connections may be reused, the proxy selection, DNS, and connect events may not be present for a call. In future releases of OkHttp these events may also occur concurrently to permit multiple routes to be attempted simultaneously. Events and sequences of events may be repeated for retries and follow-ups. All event methods must execute fast, without external locking, cannot throw exceptions, attempt to mutate the event parameters, or be re-entrant back into the client. Any IO - writing to files or network should be done asynchronously.","title":"EventListener"},{"location":"4.x/okhttp/okhttp3/-event-listener/#types","text":"Name Summary Factory interface Factory","title":"Types"},{"location":"4.x/okhttp/okhttp3/-event-listener/#constructors","text":"Name Summary <init> Listener for metrics events. Extend this class to monitor the quantity, size, and duration of your application\u2019s HTTP calls. EventListener()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-event-listener/#functions","text":"Name Summary <no name provided> fun <no name provided>(): Unit cacheConditionalHit Invoked when a response will be served from the cache or network based on validating the cached Response freshness. Will be followed by cacheHit or cacheMiss after the network Response is available. open fun cacheConditionalHit(call: Call , cachedResponse: Response ): Unit cacheHit Invoked when a result is served from the cache. The Response provided is the top level Response and normal event sequences will not be received. open fun cacheHit(call: Call , response: Response ): Unit cacheMiss Invoked when a response will be served from the network. The Response will be available from normal event sequences. open fun cacheMiss(call: Call ): Unit callEnd Invoked immediately after a call has completely ended. This includes delayed consumption of response body by the caller. open fun callEnd(call: Call ): Unit callFailed Invoked when a call fails permanently. open fun callFailed(call: Call , ioe: IOException ): Unit callStart Invoked as soon as a call is enqueued or executed by a client. In case of thread or stream limits, this call may be executed well before processing the request is able to begin. open fun callStart(call: Call ): Unit canceled Invoked when a call is canceled. open fun canceled(call: Call ): Unit connectEnd Invoked immediately after a socket connection was attempted. open fun connectEnd(call: Call , inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol ?): Unit connectFailed Invoked when a connection attempt fails. This failure is not terminal if further routes are available and failure recovery is enabled. open fun connectFailed(call: Call , inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol ?, ioe: IOException ): Unit connectionAcquired Invoked after a connection has been acquired for the call . open fun connectionAcquired(call: Call , connection: Connection ): Unit connectionReleased Invoked after a connection has been released for the call . open fun connectionReleased(call: Call , connection: Connection ): Unit connectStart Invoked just prior to initiating a socket connection. open fun connectStart(call: Call , inetSocketAddress: InetSocketAddress , proxy: Proxy ): Unit dnsEnd Invoked immediately after a DNS lookup. open fun dnsEnd(call: Call , domainName: String , inetAddressList: List < InetAddress >): Unit dnsStart Invoked just prior to a DNS lookup. See Dns.lookup . open fun dnsStart(call: Call , domainName: String ): Unit proxySelectEnd Invoked after proxy selection. open fun proxySelectEnd(call: Call , url: HttpUrl , proxies: List < Proxy >): Unit proxySelectStart Invoked prior to a proxy selection. open fun proxySelectStart(call: Call , url: HttpUrl ): Unit requestBodyEnd Invoked immediately after sending a request body. open fun requestBodyEnd(call: Call , byteCount: Long ): Unit requestBodyStart Invoked just prior to sending a request body. Will only be invoked for request allowing and having a request body to send. open fun requestBodyStart(call: Call ): Unit requestFailed Invoked when a request fails to be written. open fun requestFailed(call: Call , ioe: IOException ): Unit requestHeadersEnd Invoked immediately after sending request headers. open fun requestHeadersEnd(call: Call , request: Request ): Unit requestHeadersStart Invoked just prior to sending request headers. open fun requestHeadersStart(call: Call ): Unit responseBodyEnd Invoked immediately after receiving a response body and completing reading it. open fun responseBodyEnd(call: Call , byteCount: Long ): Unit responseBodyStart Invoked when data from the response body is first available to the application. open fun responseBodyStart(call: Call ): Unit responseFailed Invoked when a response fails to be read. open fun responseFailed(call: Call , ioe: IOException ): Unit responseHeadersEnd Invoked immediately after receiving response headers. open fun responseHeadersEnd(call: Call , response: Response ): Unit responseHeadersStart Invoked when response headers are first returned from the server. open fun responseHeadersStart(call: Call ): Unit satisfactionFailure Invoked when a call fails due to cache rules. For example, we\u2019re forbidden from using the network and the cache is insufficient open fun satisfactionFailure(call: Call , response: Response ): Unit secureConnectEnd Invoked immediately after a TLS connection was attempted. open fun secureConnectEnd(call: Call , handshake: Handshake ?): Unit secureConnectStart Invoked just prior to initiating a TLS connection. open fun secureConnectStart(call: Call ): Unit","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-event-listener/#companion-object-properties","text":"Name Summary NONE val NONE: EventListener","title":"Companion Object Properties"},{"location":"4.x/okhttp/okhttp3/-event-listener/-init-/","text":"okhttp / okhttp3 / EventListener / <init> <init> \u00b6 EventListener() Listener for metrics events. Extend this class to monitor the quantity, size, and duration of your application\u2019s HTTP calls. All start/connect/acquire events will eventually receive a matching end/release event, either successful (non-null parameters), or failed (non-null throwable). The first common parameters of each event pair are used to link the event in case of concurrent or repeated events e.g. dnsStart(call, domainName) \u2192 dnsEnd(call, domainName, inetAddressList) . Events are typically nested with this structure: call ( callStart , callEnd , callFailed ) proxy selection ( proxySelectStart , proxySelectEnd ) dns ( dnsStart , dnsEnd ) connect ( connectStart , connectEnd , connectFailed ) secure connect ( secureConnectStart , secureConnectEnd ) connection held ( connectionAcquired , connectionReleased ) request ( requestFailed ) headers ( requestHeadersStart , requestHeadersEnd ) body ( requestBodyStart , requestBodyEnd ) response ( responseFailed ) headers ( responseHeadersStart , responseHeadersEnd ) body ( responseBodyStart , responseBodyEnd ) This nesting is typical but not strict. For example, when calls use \u201cExpect: continue\u201d the request body start and end events occur within the response header events. Similarly, duplex calls interleave the request and response bodies. Since connections may be reused, the proxy selection, DNS, and connect events may not be present for a call. In future releases of OkHttp these events may also occur concurrently to permit multiple routes to be attempted simultaneously. Events and sequences of events may be repeated for retries and follow-ups. All event methods must execute fast, without external locking, cannot throw exceptions, attempt to mutate the event parameters, or be re-entrant back into the client. Any IO - writing to files or network should be done asynchronously.","title":" init "},{"location":"4.x/okhttp/okhttp3/-event-listener/-init-/#init","text":"EventListener() Listener for metrics events. Extend this class to monitor the quantity, size, and duration of your application\u2019s HTTP calls. All start/connect/acquire events will eventually receive a matching end/release event, either successful (non-null parameters), or failed (non-null throwable). The first common parameters of each event pair are used to link the event in case of concurrent or repeated events e.g. dnsStart(call, domainName) \u2192 dnsEnd(call, domainName, inetAddressList) . Events are typically nested with this structure: call ( callStart , callEnd , callFailed ) proxy selection ( proxySelectStart , proxySelectEnd ) dns ( dnsStart , dnsEnd ) connect ( connectStart , connectEnd , connectFailed ) secure connect ( secureConnectStart , secureConnectEnd ) connection held ( connectionAcquired , connectionReleased ) request ( requestFailed ) headers ( requestHeadersStart , requestHeadersEnd ) body ( requestBodyStart , requestBodyEnd ) response ( responseFailed ) headers ( responseHeadersStart , responseHeadersEnd ) body ( responseBodyStart , responseBodyEnd ) This nesting is typical but not strict. For example, when calls use \u201cExpect: continue\u201d the request body start and end events occur within the response header events. Similarly, duplex calls interleave the request and response bodies. Since connections may be reused, the proxy selection, DNS, and connect events may not be present for a call. In future releases of OkHttp these events may also occur concurrently to permit multiple routes to be attempted simultaneously. Events and sequences of events may be repeated for retries and follow-ups. All event methods must execute fast, without external locking, cannot throw exceptions, attempt to mutate the event parameters, or be re-entrant back into the client. Any IO - writing to files or network should be done asynchronously.","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-event-listener/-n-o-n-e/","text":"okhttp / okhttp3 / EventListener / NONE NONE \u00b6 val NONE: EventListener","title":"NONE - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/-n-o-n-e/#none","text":"val NONE: EventListener","title":"NONE"},{"location":"4.x/okhttp/okhttp3/-event-listener/-no%20name%20provided-/","text":"okhttp / okhttp3 / EventListener / <no name provided> <no name provided> \u00b6 fun <no name provided>(): Unit","title":" no name provided "},{"location":"4.x/okhttp/okhttp3/-event-listener/-no%20name%20provided-/#no-name-provided","text":"fun <no name provided>(): Unit","title":"&lt;no name provided&gt;"},{"location":"4.x/okhttp/okhttp3/-event-listener/cache-conditional-hit/","text":"okhttp / okhttp3 / EventListener / cacheConditionalHit cacheConditionalHit \u00b6 open fun cacheConditionalHit(call: Call , cachedResponse: Response ): Unit Invoked when a response will be served from the cache or network based on validating the cached Response freshness. Will be followed by cacheHit or cacheMiss after the network Response is available. This event will only be received when a Cache is configured for the client.","title":"cacheConditionalHit - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/cache-conditional-hit/#cacheconditionalhit","text":"open fun cacheConditionalHit(call: Call , cachedResponse: Response ): Unit Invoked when a response will be served from the cache or network based on validating the cached Response freshness. Will be followed by cacheHit or cacheMiss after the network Response is available. This event will only be received when a Cache is configured for the client.","title":"cacheConditionalHit"},{"location":"4.x/okhttp/okhttp3/-event-listener/cache-hit/","text":"okhttp / okhttp3 / EventListener / cacheHit cacheHit \u00b6 open fun cacheHit(call: Call , response: Response ): Unit Invoked when a result is served from the cache. The Response provided is the top level Response and normal event sequences will not be received. This event will only be received when a Cache is configured for the client.","title":"cacheHit - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/cache-hit/#cachehit","text":"open fun cacheHit(call: Call , response: Response ): Unit Invoked when a result is served from the cache. The Response provided is the top level Response and normal event sequences will not be received. This event will only be received when a Cache is configured for the client.","title":"cacheHit"},{"location":"4.x/okhttp/okhttp3/-event-listener/cache-miss/","text":"okhttp / okhttp3 / EventListener / cacheMiss cacheMiss \u00b6 open fun cacheMiss(call: Call ): Unit Invoked when a response will be served from the network. The Response will be available from normal event sequences. This event will only be received when a Cache is configured for the client.","title":"cacheMiss - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/cache-miss/#cachemiss","text":"open fun cacheMiss(call: Call ): Unit Invoked when a response will be served from the network. The Response will be available from normal event sequences. This event will only be received when a Cache is configured for the client.","title":"cacheMiss"},{"location":"4.x/okhttp/okhttp3/-event-listener/call-end/","text":"okhttp / okhttp3 / EventListener / callEnd callEnd \u00b6 open fun callEnd(call: Call ): Unit Invoked immediately after a call has completely ended. This includes delayed consumption of response body by the caller. This method is always invoked after callStart .","title":"callEnd - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/call-end/#callend","text":"open fun callEnd(call: Call ): Unit Invoked immediately after a call has completely ended. This includes delayed consumption of response body by the caller. This method is always invoked after callStart .","title":"callEnd"},{"location":"4.x/okhttp/okhttp3/-event-listener/call-failed/","text":"okhttp / okhttp3 / EventListener / callFailed callFailed \u00b6 open fun callFailed(call: Call , ioe: IOException ): Unit Invoked when a call fails permanently. This method is always invoked after callStart .","title":"callFailed - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/call-failed/#callfailed","text":"open fun callFailed(call: Call , ioe: IOException ): Unit Invoked when a call fails permanently. This method is always invoked after callStart .","title":"callFailed"},{"location":"4.x/okhttp/okhttp3/-event-listener/call-start/","text":"okhttp / okhttp3 / EventListener / callStart callStart \u00b6 open fun callStart(call: Call ): Unit Invoked as soon as a call is enqueued or executed by a client. In case of thread or stream limits, this call may be executed well before processing the request is able to begin. This will be invoked only once for a single Call . Retries of different routes or redirects will be handled within the boundaries of a single callStart and callEnd / callFailed pair.","title":"callStart - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/call-start/#callstart","text":"open fun callStart(call: Call ): Unit Invoked as soon as a call is enqueued or executed by a client. In case of thread or stream limits, this call may be executed well before processing the request is able to begin. This will be invoked only once for a single Call . Retries of different routes or redirects will be handled within the boundaries of a single callStart and callEnd / callFailed pair.","title":"callStart"},{"location":"4.x/okhttp/okhttp3/-event-listener/canceled/","text":"okhttp / okhttp3 / EventListener / canceled canceled \u00b6 open fun canceled(call: Call ): Unit Invoked when a call is canceled. Like all methods in this interface, this is invoked on the thread that triggered the event. But while other events occur sequentially; cancels may occur concurrently with other events. For example, thread A may be executing responseBodyStart while thread B executes canceled . Implementations must support such concurrent calls. Note that cancellation is best-effort and that a call may proceed normally after it has been canceled. For example, happy-path events like requestHeadersStart and requestHeadersEnd may occur after a call is canceled. Typically cancellation takes effect when an expensive I/O operation is required. This is invoked at most once, even if Call.cancel is invoked multiple times. It may be invoked at any point in a call\u2019s life, including before callStart and after callEnd .","title":"canceled - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/canceled/#canceled","text":"open fun canceled(call: Call ): Unit Invoked when a call is canceled. Like all methods in this interface, this is invoked on the thread that triggered the event. But while other events occur sequentially; cancels may occur concurrently with other events. For example, thread A may be executing responseBodyStart while thread B executes canceled . Implementations must support such concurrent calls. Note that cancellation is best-effort and that a call may proceed normally after it has been canceled. For example, happy-path events like requestHeadersStart and requestHeadersEnd may occur after a call is canceled. Typically cancellation takes effect when an expensive I/O operation is required. This is invoked at most once, even if Call.cancel is invoked multiple times. It may be invoked at any point in a call\u2019s life, including before callStart and after callEnd .","title":"canceled"},{"location":"4.x/okhttp/okhttp3/-event-listener/connect-end/","text":"okhttp / okhttp3 / EventListener / connectEnd connectEnd \u00b6 open fun connectEnd(call: Call , inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol ?): Unit Invoked immediately after a socket connection was attempted. If the call uses HTTPS, this will be invoked after secureConnectEnd , otherwise it will invoked after connectStart .","title":"connectEnd - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/connect-end/#connectend","text":"open fun connectEnd(call: Call , inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol ?): Unit Invoked immediately after a socket connection was attempted. If the call uses HTTPS, this will be invoked after secureConnectEnd , otherwise it will invoked after connectStart .","title":"connectEnd"},{"location":"4.x/okhttp/okhttp3/-event-listener/connect-failed/","text":"okhttp / okhttp3 / EventListener / connectFailed connectFailed \u00b6 open fun connectFailed(call: Call , inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol ?, ioe: IOException ): Unit Invoked when a connection attempt fails. This failure is not terminal if further routes are available and failure recovery is enabled. If the call uses HTTPS, this will be invoked after secureConnectEnd , otherwise it will invoked after connectStart .","title":"connectFailed - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/connect-failed/#connectfailed","text":"open fun connectFailed(call: Call , inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol ?, ioe: IOException ): Unit Invoked when a connection attempt fails. This failure is not terminal if further routes are available and failure recovery is enabled. If the call uses HTTPS, this will be invoked after secureConnectEnd , otherwise it will invoked after connectStart .","title":"connectFailed"},{"location":"4.x/okhttp/okhttp3/-event-listener/connect-start/","text":"okhttp / okhttp3 / EventListener / connectStart connectStart \u00b6 open fun connectStart(call: Call , inetSocketAddress: InetSocketAddress , proxy: Proxy ): Unit Invoked just prior to initiating a socket connection. This method will be invoked if no existing connection in the ConnectionPool can be reused. This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different address, or a connection is retried.","title":"connectStart - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/connect-start/#connectstart","text":"open fun connectStart(call: Call , inetSocketAddress: InetSocketAddress , proxy: Proxy ): Unit Invoked just prior to initiating a socket connection. This method will be invoked if no existing connection in the ConnectionPool can be reused. This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different address, or a connection is retried.","title":"connectStart"},{"location":"4.x/okhttp/okhttp3/-event-listener/connection-acquired/","text":"okhttp / okhttp3 / EventListener / connectionAcquired connectionAcquired \u00b6 open fun connectionAcquired(call: Call , connection: Connection ): Unit Invoked after a connection has been acquired for the call . This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different address.","title":"connectionAcquired - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/connection-acquired/#connectionacquired","text":"open fun connectionAcquired(call: Call , connection: Connection ): Unit Invoked after a connection has been acquired for the call . This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different address.","title":"connectionAcquired"},{"location":"4.x/okhttp/okhttp3/-event-listener/connection-released/","text":"okhttp / okhttp3 / EventListener / connectionReleased connectionReleased \u00b6 open fun connectionReleased(call: Call , connection: Connection ): Unit Invoked after a connection has been released for the call . This method is always invoked after connectionAcquired . This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different address.","title":"connectionReleased - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/connection-released/#connectionreleased","text":"open fun connectionReleased(call: Call , connection: Connection ): Unit Invoked after a connection has been released for the call . This method is always invoked after connectionAcquired . This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different address.","title":"connectionReleased"},{"location":"4.x/okhttp/okhttp3/-event-listener/dns-end/","text":"okhttp / okhttp3 / EventListener / dnsEnd dnsEnd \u00b6 open fun dnsEnd(call: Call , domainName: String , inetAddressList: List <@JvmSuppressWildcards InetAddress >): Unit Invoked immediately after a DNS lookup. This method is invoked after dnsStart .","title":"dnsEnd - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/dns-end/#dnsend","text":"open fun dnsEnd(call: Call , domainName: String , inetAddressList: List <@JvmSuppressWildcards InetAddress >): Unit Invoked immediately after a DNS lookup. This method is invoked after dnsStart .","title":"dnsEnd"},{"location":"4.x/okhttp/okhttp3/-event-listener/dns-start/","text":"okhttp / okhttp3 / EventListener / dnsStart dnsStart \u00b6 open fun dnsStart(call: Call , domainName: String ): Unit Invoked just prior to a DNS lookup. See Dns.lookup . This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different host. If the Call is able to reuse an existing pooled connection, this method will not be invoked. See ConnectionPool .","title":"dnsStart - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/dns-start/#dnsstart","text":"open fun dnsStart(call: Call , domainName: String ): Unit Invoked just prior to a DNS lookup. See Dns.lookup . This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different host. If the Call is able to reuse an existing pooled connection, this method will not be invoked. See ConnectionPool .","title":"dnsStart"},{"location":"4.x/okhttp/okhttp3/-event-listener/proxy-select-end/","text":"okhttp / okhttp3 / EventListener / proxySelectEnd proxySelectEnd \u00b6 open fun proxySelectEnd(call: Call , url: HttpUrl , proxies: List <@JvmSuppressWildcards Proxy >): Unit Invoked after proxy selection. Note that the list of proxies is never null, but it may be a list containing only Proxy.NO_PROXY . This comes up in several situations: If neither a proxy nor proxy selector is configured. If the proxy is configured explicitly as Proxy.NO_PROXY . If the proxy selector returns only Proxy.NO_PROXY . If the proxy selector returns an empty list or null. Otherwise it lists the proxies in the order they will be attempted. Parameters \u00b6 url - a URL with only the scheme, hostname, and port specified.","title":"proxySelectEnd - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/proxy-select-end/#proxyselectend","text":"open fun proxySelectEnd(call: Call , url: HttpUrl , proxies: List <@JvmSuppressWildcards Proxy >): Unit Invoked after proxy selection. Note that the list of proxies is never null, but it may be a list containing only Proxy.NO_PROXY . This comes up in several situations: If neither a proxy nor proxy selector is configured. If the proxy is configured explicitly as Proxy.NO_PROXY . If the proxy selector returns only Proxy.NO_PROXY . If the proxy selector returns an empty list or null. Otherwise it lists the proxies in the order they will be attempted.","title":"proxySelectEnd"},{"location":"4.x/okhttp/okhttp3/-event-listener/proxy-select-end/#parameters","text":"url - a URL with only the scheme, hostname, and port specified.","title":"Parameters"},{"location":"4.x/okhttp/okhttp3/-event-listener/proxy-select-start/","text":"okhttp / okhttp3 / EventListener / proxySelectStart proxySelectStart \u00b6 open fun proxySelectStart(call: Call , url: HttpUrl ): Unit Invoked prior to a proxy selection. This will be invoked for route selection regardless of whether the client is configured with a single proxy, a proxy selector, or neither. Parameters \u00b6 url - a URL with only the scheme, hostname, and port specified.","title":"proxySelectStart - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/proxy-select-start/#proxyselectstart","text":"open fun proxySelectStart(call: Call , url: HttpUrl ): Unit Invoked prior to a proxy selection. This will be invoked for route selection regardless of whether the client is configured with a single proxy, a proxy selector, or neither.","title":"proxySelectStart"},{"location":"4.x/okhttp/okhttp3/-event-listener/proxy-select-start/#parameters","text":"url - a URL with only the scheme, hostname, and port specified.","title":"Parameters"},{"location":"4.x/okhttp/okhttp3/-event-listener/request-body-end/","text":"okhttp / okhttp3 / EventListener / requestBodyEnd requestBodyEnd \u00b6 open fun requestBodyEnd(call: Call , byteCount: Long ): Unit Invoked immediately after sending a request body. This method is always invoked after requestBodyStart .","title":"requestBodyEnd - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/request-body-end/#requestbodyend","text":"open fun requestBodyEnd(call: Call , byteCount: Long ): Unit Invoked immediately after sending a request body. This method is always invoked after requestBodyStart .","title":"requestBodyEnd"},{"location":"4.x/okhttp/okhttp3/-event-listener/request-body-start/","text":"okhttp / okhttp3 / EventListener / requestBodyStart requestBodyStart \u00b6 open fun requestBodyStart(call: Call ): Unit Invoked just prior to sending a request body. Will only be invoked for request allowing and having a request body to send. The connection is implicit, and will generally relate to the last connectionAcquired event. This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different address.","title":"requestBodyStart - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/request-body-start/#requestbodystart","text":"open fun requestBodyStart(call: Call ): Unit Invoked just prior to sending a request body. Will only be invoked for request allowing and having a request body to send. The connection is implicit, and will generally relate to the last connectionAcquired event. This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different address.","title":"requestBodyStart"},{"location":"4.x/okhttp/okhttp3/-event-listener/request-failed/","text":"okhttp / okhttp3 / EventListener / requestFailed requestFailed \u00b6 open fun requestFailed(call: Call , ioe: IOException ): Unit Invoked when a request fails to be written. This method is invoked after requestHeadersStart or requestBodyStart . Note that request failures do not necessarily fail the entire call.","title":"requestFailed - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/request-failed/#requestfailed","text":"open fun requestFailed(call: Call , ioe: IOException ): Unit Invoked when a request fails to be written. This method is invoked after requestHeadersStart or requestBodyStart . Note that request failures do not necessarily fail the entire call.","title":"requestFailed"},{"location":"4.x/okhttp/okhttp3/-event-listener/request-headers-end/","text":"okhttp / okhttp3 / EventListener / requestHeadersEnd requestHeadersEnd \u00b6 open fun requestHeadersEnd(call: Call , request: Request ): Unit Invoked immediately after sending request headers. This method is always invoked after requestHeadersStart . Parameters \u00b6 request - the request sent over the network. It is an error to access the body of this request.","title":"requestHeadersEnd - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/request-headers-end/#requestheadersend","text":"open fun requestHeadersEnd(call: Call , request: Request ): Unit Invoked immediately after sending request headers. This method is always invoked after requestHeadersStart .","title":"requestHeadersEnd"},{"location":"4.x/okhttp/okhttp3/-event-listener/request-headers-end/#parameters","text":"request - the request sent over the network. It is an error to access the body of this request.","title":"Parameters"},{"location":"4.x/okhttp/okhttp3/-event-listener/request-headers-start/","text":"okhttp / okhttp3 / EventListener / requestHeadersStart requestHeadersStart \u00b6 open fun requestHeadersStart(call: Call ): Unit Invoked just prior to sending request headers. The connection is implicit, and will generally relate to the last connectionAcquired event. This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different address.","title":"requestHeadersStart - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/request-headers-start/#requestheadersstart","text":"open fun requestHeadersStart(call: Call ): Unit Invoked just prior to sending request headers. The connection is implicit, and will generally relate to the last connectionAcquired event. This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different address.","title":"requestHeadersStart"},{"location":"4.x/okhttp/okhttp3/-event-listener/response-body-end/","text":"okhttp / okhttp3 / EventListener / responseBodyEnd responseBodyEnd \u00b6 open fun responseBodyEnd(call: Call , byteCount: Long ): Unit Invoked immediately after receiving a response body and completing reading it. Will only be invoked for requests having a response body e.g. won\u2019t be invoked for a web socket upgrade. If the response body is closed before the response body is exhausted, this is invoked at the time it is closed. In such calls byteCount is the number of bytes returned to the application. This may be smaller than the resource\u2019s byte count if were read to completion. This method is always invoked after responseBodyStart .","title":"responseBodyEnd - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/response-body-end/#responsebodyend","text":"open fun responseBodyEnd(call: Call , byteCount: Long ): Unit Invoked immediately after receiving a response body and completing reading it. Will only be invoked for requests having a response body e.g. won\u2019t be invoked for a web socket upgrade. If the response body is closed before the response body is exhausted, this is invoked at the time it is closed. In such calls byteCount is the number of bytes returned to the application. This may be smaller than the resource\u2019s byte count if were read to completion. This method is always invoked after responseBodyStart .","title":"responseBodyEnd"},{"location":"4.x/okhttp/okhttp3/-event-listener/response-body-start/","text":"okhttp / okhttp3 / EventListener / responseBodyStart responseBodyStart \u00b6 open fun responseBodyStart(call: Call ): Unit Invoked when data from the response body is first available to the application. This is typically invoked immediately before bytes are returned to the application. If the response body is empty this is invoked immediately before returning that to the application. If the application closes the response body before attempting a read, this is invoked at the time it is closed. The connection is implicit, and will generally relate to the last connectionAcquired event. This will usually be invoked only 1 time for a single Call , exceptions are a limited set of cases including failure recovery. Prior to OkHttp 4.3 this was incorrectly invoked when the client was ready to read the response body. This was misleading for tracing because it was too early.","title":"responseBodyStart - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/response-body-start/#responsebodystart","text":"open fun responseBodyStart(call: Call ): Unit Invoked when data from the response body is first available to the application. This is typically invoked immediately before bytes are returned to the application. If the response body is empty this is invoked immediately before returning that to the application. If the application closes the response body before attempting a read, this is invoked at the time it is closed. The connection is implicit, and will generally relate to the last connectionAcquired event. This will usually be invoked only 1 time for a single Call , exceptions are a limited set of cases including failure recovery. Prior to OkHttp 4.3 this was incorrectly invoked when the client was ready to read the response body. This was misleading for tracing because it was too early.","title":"responseBodyStart"},{"location":"4.x/okhttp/okhttp3/-event-listener/response-failed/","text":"okhttp / okhttp3 / EventListener / responseFailed responseFailed \u00b6 open fun responseFailed(call: Call , ioe: IOException ): Unit Invoked when a response fails to be read. Note that response failures do not necessarily fail the entire call. Starting with OkHttp 4.3 this may be invoked without a prior call to responseHeadersStart or responseBodyStart . In earlier releases this method was documented to only be invoked after one of those methods.","title":"responseFailed - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/response-failed/#responsefailed","text":"open fun responseFailed(call: Call , ioe: IOException ): Unit Invoked when a response fails to be read. Note that response failures do not necessarily fail the entire call. Starting with OkHttp 4.3 this may be invoked without a prior call to responseHeadersStart or responseBodyStart . In earlier releases this method was documented to only be invoked after one of those methods.","title":"responseFailed"},{"location":"4.x/okhttp/okhttp3/-event-listener/response-headers-end/","text":"okhttp / okhttp3 / EventListener / responseHeadersEnd responseHeadersEnd \u00b6 open fun responseHeadersEnd(call: Call , response: Response ): Unit Invoked immediately after receiving response headers. This method is always invoked after responseHeadersStart . Parameters \u00b6 response - the response received over the network. It is an error to access the body of this response.","title":"responseHeadersEnd - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/response-headers-end/#responseheadersend","text":"open fun responseHeadersEnd(call: Call , response: Response ): Unit Invoked immediately after receiving response headers. This method is always invoked after responseHeadersStart .","title":"responseHeadersEnd"},{"location":"4.x/okhttp/okhttp3/-event-listener/response-headers-end/#parameters","text":"response - the response received over the network. It is an error to access the body of this response.","title":"Parameters"},{"location":"4.x/okhttp/okhttp3/-event-listener/response-headers-start/","text":"okhttp / okhttp3 / EventListener / responseHeadersStart responseHeadersStart \u00b6 open fun responseHeadersStart(call: Call ): Unit Invoked when response headers are first returned from the server. The connection is implicit, and will generally relate to the last connectionAcquired event. This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different address. Prior to OkHttp 4.3 this was incorrectly invoked when the client was ready to read headers. This was misleading for tracing because it was too early.","title":"responseHeadersStart - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/response-headers-start/#responseheadersstart","text":"open fun responseHeadersStart(call: Call ): Unit Invoked when response headers are first returned from the server. The connection is implicit, and will generally relate to the last connectionAcquired event. This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different address. Prior to OkHttp 4.3 this was incorrectly invoked when the client was ready to read headers. This was misleading for tracing because it was too early.","title":"responseHeadersStart"},{"location":"4.x/okhttp/okhttp3/-event-listener/satisfaction-failure/","text":"okhttp / okhttp3 / EventListener / satisfactionFailure satisfactionFailure \u00b6 open fun satisfactionFailure(call: Call , response: Response ): Unit Invoked when a call fails due to cache rules. For example, we\u2019re forbidden from using the network and the cache is insufficient","title":"satisfactionFailure - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/satisfaction-failure/#satisfactionfailure","text":"open fun satisfactionFailure(call: Call , response: Response ): Unit Invoked when a call fails due to cache rules. For example, we\u2019re forbidden from using the network and the cache is insufficient","title":"satisfactionFailure"},{"location":"4.x/okhttp/okhttp3/-event-listener/secure-connect-end/","text":"okhttp / okhttp3 / EventListener / secureConnectEnd secureConnectEnd \u00b6 open fun secureConnectEnd(call: Call , handshake: Handshake ?): Unit Invoked immediately after a TLS connection was attempted. This method is invoked after secureConnectStart .","title":"secureConnectEnd - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/secure-connect-end/#secureconnectend","text":"open fun secureConnectEnd(call: Call , handshake: Handshake ?): Unit Invoked immediately after a TLS connection was attempted. This method is invoked after secureConnectStart .","title":"secureConnectEnd"},{"location":"4.x/okhttp/okhttp3/-event-listener/secure-connect-start/","text":"okhttp / okhttp3 / EventListener / secureConnectStart secureConnectStart \u00b6 open fun secureConnectStart(call: Call ): Unit Invoked just prior to initiating a TLS connection. This method is invoked if the following conditions are met: The Call.request requires TLS. No existing connection from the ConnectionPool can be reused. This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different address, or a connection is retried.","title":"secureConnectStart - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/secure-connect-start/#secureconnectstart","text":"open fun secureConnectStart(call: Call ): Unit Invoked just prior to initiating a TLS connection. This method is invoked if the following conditions are met: The Call.request requires TLS. No existing connection from the ConnectionPool can be reused. This can be invoked more than 1 time for a single Call . For example, if the response to the Call.request is a redirect to a different address, or a connection is retried.","title":"secureConnectStart"},{"location":"4.x/okhttp/okhttp3/-event-listener/-factory/","text":"okhttp / okhttp3 / EventListener / Factory Factory \u00b6 interface Factory Functions \u00b6 Name Summary create Creates an instance of the EventListener for a particular Call . The returned EventListener instance will be used during the lifecycle of call . abstract fun create(call: Call ): EventListener","title":"Factory - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/-factory/#factory","text":"interface Factory","title":"Factory"},{"location":"4.x/okhttp/okhttp3/-event-listener/-factory/#functions","text":"Name Summary create Creates an instance of the EventListener for a particular Call . The returned EventListener instance will be used during the lifecycle of call . abstract fun create(call: Call ): EventListener","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-event-listener/-factory/create/","text":"okhttp / okhttp3 / EventListener / Factory / create create \u00b6 abstract fun create(call: Call ): EventListener Creates an instance of the EventListener for a particular Call . The returned EventListener instance will be used during the lifecycle of call . This method is invoked after call is created. See OkHttpClient.newCall . It is an error for implementations to issue any mutating operations on the call instancefrom this method.","title":"create - OkHttp"},{"location":"4.x/okhttp/okhttp3/-event-listener/-factory/create/#create","text":"abstract fun create(call: Call ): EventListener Creates an instance of the EventListener for a particular Call . The returned EventListener instance will be used during the lifecycle of call . This method is invoked after call is created. See OkHttpClient.newCall . It is an error for implementations to issue any mutating operations on the call instancefrom this method.","title":"create"},{"location":"4.x/okhttp/okhttp3/-form-body/","text":"okhttp / okhttp3 / FormBody FormBody \u00b6 class FormBody : RequestBody Types \u00b6 Name Summary Builder class Builder Properties \u00b6 Name Summary size The number of key-value pairs in this form-encoded body. val size: Int Functions \u00b6 Name Summary contentLength Returns the number of bytes that will be written to sink in a call to writeTo , or -1 if that count is unknown. fun contentLength(): Long contentType Returns the Content-Type header for this body. fun contentType(): MediaType encodedName fun encodedName(index: Int ): String encodedValue fun encodedValue(index: Int ): String name fun name(index: Int ): String value fun value(index: Int ): String writeTo Writes the content of this request to sink . fun writeTo(sink: BufferedSink ): Unit","title":"FormBody - OkHttp"},{"location":"4.x/okhttp/okhttp3/-form-body/#formbody","text":"class FormBody : RequestBody","title":"FormBody"},{"location":"4.x/okhttp/okhttp3/-form-body/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"4.x/okhttp/okhttp3/-form-body/#properties","text":"Name Summary size The number of key-value pairs in this form-encoded body. val size: Int","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-form-body/#functions","text":"Name Summary contentLength Returns the number of bytes that will be written to sink in a call to writeTo , or -1 if that count is unknown. fun contentLength(): Long contentType Returns the Content-Type header for this body. fun contentType(): MediaType encodedName fun encodedName(index: Int ): String encodedValue fun encodedValue(index: Int ): String name fun name(index: Int ): String value fun value(index: Int ): String writeTo Writes the content of this request to sink . fun writeTo(sink: BufferedSink ): Unit","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-form-body/content-length/","text":"okhttp / okhttp3 / FormBody / contentLength contentLength \u00b6 fun contentLength(): Long Returns the number of bytes that will be written to sink in a call to writeTo , or -1 if that count is unknown.","title":"contentLength - OkHttp"},{"location":"4.x/okhttp/okhttp3/-form-body/content-length/#contentlength","text":"fun contentLength(): Long Returns the number of bytes that will be written to sink in a call to writeTo , or -1 if that count is unknown.","title":"contentLength"},{"location":"4.x/okhttp/okhttp3/-form-body/content-type/","text":"okhttp / okhttp3 / FormBody / contentType contentType \u00b6 fun contentType(): MediaType Returns the Content-Type header for this body.","title":"contentType - OkHttp"},{"location":"4.x/okhttp/okhttp3/-form-body/content-type/#contenttype","text":"fun contentType(): MediaType Returns the Content-Type header for this body.","title":"contentType"},{"location":"4.x/okhttp/okhttp3/-form-body/encoded-name/","text":"okhttp / okhttp3 / FormBody / encodedName encodedName \u00b6 fun encodedName(index: Int ): String","title":"encodedName - OkHttp"},{"location":"4.x/okhttp/okhttp3/-form-body/encoded-name/#encodedname","text":"fun encodedName(index: Int ): String","title":"encodedName"},{"location":"4.x/okhttp/okhttp3/-form-body/encoded-value/","text":"okhttp / okhttp3 / FormBody / encodedValue encodedValue \u00b6 fun encodedValue(index: Int ): String","title":"encodedValue - OkHttp"},{"location":"4.x/okhttp/okhttp3/-form-body/encoded-value/#encodedvalue","text":"fun encodedValue(index: Int ): String","title":"encodedValue"},{"location":"4.x/okhttp/okhttp3/-form-body/name/","text":"okhttp / okhttp3 / FormBody / name name \u00b6 fun name(index: Int ): String","title":"name - OkHttp"},{"location":"4.x/okhttp/okhttp3/-form-body/name/#name","text":"fun name(index: Int ): String","title":"name"},{"location":"4.x/okhttp/okhttp3/-form-body/size/","text":"okhttp / okhttp3 / FormBody / size size \u00b6 val size: Int The number of key-value pairs in this form-encoded body.","title":"size - OkHttp"},{"location":"4.x/okhttp/okhttp3/-form-body/size/#size","text":"val size: Int The number of key-value pairs in this form-encoded body.","title":"size"},{"location":"4.x/okhttp/okhttp3/-form-body/value/","text":"okhttp / okhttp3 / FormBody / value value \u00b6 fun value(index: Int ): String","title":"value - OkHttp"},{"location":"4.x/okhttp/okhttp3/-form-body/value/#value","text":"fun value(index: Int ): String","title":"value"},{"location":"4.x/okhttp/okhttp3/-form-body/write-to/","text":"okhttp / okhttp3 / FormBody / writeTo writeTo \u00b6 fun writeTo(sink: BufferedSink ): Unit Writes the content of this request to sink .","title":"writeTo - OkHttp"},{"location":"4.x/okhttp/okhttp3/-form-body/write-to/#writeto","text":"fun writeTo(sink: BufferedSink ): Unit Writes the content of this request to sink .","title":"writeTo"},{"location":"4.x/okhttp/okhttp3/-form-body/-builder/","text":"okhttp / okhttp3 / FormBody / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder(charset: Charset ? = null) Functions \u00b6 Name Summary add fun add(name: String , value: String ): Builder addEncoded fun addEncoded(name: String , value: String ): Builder build fun build(): FormBody","title":"Builder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-form-body/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"4.x/okhttp/okhttp3/-form-body/-builder/#constructors","text":"Name Summary <init> Builder(charset: Charset ? = null)","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-form-body/-builder/#functions","text":"Name Summary add fun add(name: String , value: String ): Builder addEncoded fun addEncoded(name: String , value: String ): Builder build fun build(): FormBody","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-form-body/-builder/-init-/","text":"okhttp / okhttp3 / FormBody / Builder / <init> <init> \u00b6 Builder(charset: Charset ? = null)","title":" init "},{"location":"4.x/okhttp/okhttp3/-form-body/-builder/-init-/#init","text":"Builder(charset: Charset ? = null)","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-form-body/-builder/add-encoded/","text":"okhttp / okhttp3 / FormBody / Builder / addEncoded addEncoded \u00b6 fun addEncoded(name: String , value: String ): Builder","title":"addEncoded - OkHttp"},{"location":"4.x/okhttp/okhttp3/-form-body/-builder/add-encoded/#addencoded","text":"fun addEncoded(name: String , value: String ): Builder","title":"addEncoded"},{"location":"4.x/okhttp/okhttp3/-form-body/-builder/add/","text":"okhttp / okhttp3 / FormBody / Builder / add add \u00b6 fun add(name: String , value: String ): Builder","title":"add - OkHttp"},{"location":"4.x/okhttp/okhttp3/-form-body/-builder/add/#add","text":"fun add(name: String , value: String ): Builder","title":"add"},{"location":"4.x/okhttp/okhttp3/-form-body/-builder/build/","text":"okhttp / okhttp3 / FormBody / Builder / build build \u00b6 fun build(): FormBody","title":"build - OkHttp"},{"location":"4.x/okhttp/okhttp3/-form-body/-builder/build/#build","text":"fun build(): FormBody","title":"build"},{"location":"4.x/okhttp/okhttp3/-handshake/","text":"okhttp / okhttp3 / Handshake Handshake \u00b6 class Handshake A record of a TLS handshake. For HTTPS clients, the client is local and the remote server is its peer . This value object describes a completed handshake. Use ConnectionSpec to set policy for new handshakes. Properties \u00b6 Name Summary cipherSuite Returns the cipher suite used for the connection. val cipherSuite: CipherSuite localCertificates Returns a possibly-empty list of certificates that identify this peer. val localCertificates: List < Certificate > localPrincipal Returns the local principle, or null if this peer is anonymous. val localPrincipal: Principal ? peerCertificates Returns a possibly-empty list of certificates that identify the remote peer. val peerCertificates: List < Certificate > peerPrincipal Returns the remote peer\u2019s principle, or null if that peer is anonymous. val peerPrincipal: Principal ? tlsVersion Returns the TLS version used for this connection. This value wasn\u2019t tracked prior to OkHttp 3.0. For responses cached by preceding versions this returns TlsVersion.SSL_3_0 . val tlsVersion: TlsVersion Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String Companion Object Functions \u00b6 Name Summary get fun get(tlsVersion: TlsVersion , cipherSuite: CipherSuite , peerCertificates: List < Certificate >, localCertificates: List < Certificate >): Handshake handshake fun SSLSession .handshake(): Handshake","title":"Handshake - OkHttp"},{"location":"4.x/okhttp/okhttp3/-handshake/#handshake","text":"class Handshake A record of a TLS handshake. For HTTPS clients, the client is local and the remote server is its peer . This value object describes a completed handshake. Use ConnectionSpec to set policy for new handshakes.","title":"Handshake"},{"location":"4.x/okhttp/okhttp3/-handshake/#properties","text":"Name Summary cipherSuite Returns the cipher suite used for the connection. val cipherSuite: CipherSuite localCertificates Returns a possibly-empty list of certificates that identify this peer. val localCertificates: List < Certificate > localPrincipal Returns the local principle, or null if this peer is anonymous. val localPrincipal: Principal ? peerCertificates Returns a possibly-empty list of certificates that identify the remote peer. val peerCertificates: List < Certificate > peerPrincipal Returns the remote peer\u2019s principle, or null if that peer is anonymous. val peerPrincipal: Principal ? tlsVersion Returns the TLS version used for this connection. This value wasn\u2019t tracked prior to OkHttp 3.0. For responses cached by preceding versions this returns TlsVersion.SSL_3_0 . val tlsVersion: TlsVersion","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-handshake/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-handshake/#companion-object-functions","text":"Name Summary get fun get(tlsVersion: TlsVersion , cipherSuite: CipherSuite , peerCertificates: List < Certificate >, localCertificates: List < Certificate >): Handshake handshake fun SSLSession .handshake(): Handshake","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-handshake/cipher-suite/","text":"okhttp / okhttp3 / Handshake / cipherSuite cipherSuite \u00b6 val cipherSuite: CipherSuite Returns the cipher suite used for the connection.","title":"cipherSuite - OkHttp"},{"location":"4.x/okhttp/okhttp3/-handshake/cipher-suite/#ciphersuite","text":"val cipherSuite: CipherSuite Returns the cipher suite used for the connection.","title":"cipherSuite"},{"location":"4.x/okhttp/okhttp3/-handshake/equals/","text":"okhttp / okhttp3 / Handshake / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - OkHttp"},{"location":"4.x/okhttp/okhttp3/-handshake/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"4.x/okhttp/okhttp3/-handshake/get/","text":"okhttp / okhttp3 / Handshake / get get \u00b6 @JvmStatic fun get(tlsVersion: TlsVersion , cipherSuite: CipherSuite , peerCertificates: List < Certificate >, localCertificates: List < Certificate >): Handshake","title":"get - OkHttp"},{"location":"4.x/okhttp/okhttp3/-handshake/get/#get","text":"@JvmStatic fun get(tlsVersion: TlsVersion , cipherSuite: CipherSuite , peerCertificates: List < Certificate >, localCertificates: List < Certificate >): Handshake","title":"get"},{"location":"4.x/okhttp/okhttp3/-handshake/handshake/","text":"okhttp / okhttp3 / Handshake / handshake handshake \u00b6 @JvmStatic @JvmName(\"get\") fun SSLSession .handshake(): Handshake","title":"handshake - OkHttp"},{"location":"4.x/okhttp/okhttp3/-handshake/handshake/#handshake","text":"@JvmStatic @JvmName(\"get\") fun SSLSession .handshake(): Handshake","title":"handshake"},{"location":"4.x/okhttp/okhttp3/-handshake/hash-code/","text":"okhttp / okhttp3 / Handshake / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - OkHttp"},{"location":"4.x/okhttp/okhttp3/-handshake/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"4.x/okhttp/okhttp3/-handshake/local-certificates/","text":"okhttp / okhttp3 / Handshake / localCertificates localCertificates \u00b6 val localCertificates: List < Certificate > Returns a possibly-empty list of certificates that identify this peer.","title":"localCertificates - OkHttp"},{"location":"4.x/okhttp/okhttp3/-handshake/local-certificates/#localcertificates","text":"val localCertificates: List < Certificate > Returns a possibly-empty list of certificates that identify this peer.","title":"localCertificates"},{"location":"4.x/okhttp/okhttp3/-handshake/local-principal/","text":"okhttp / okhttp3 / Handshake / localPrincipal localPrincipal \u00b6 val localPrincipal: Principal ? Returns the local principle, or null if this peer is anonymous.","title":"localPrincipal - OkHttp"},{"location":"4.x/okhttp/okhttp3/-handshake/local-principal/#localprincipal","text":"val localPrincipal: Principal ? Returns the local principle, or null if this peer is anonymous.","title":"localPrincipal"},{"location":"4.x/okhttp/okhttp3/-handshake/peer-certificates/","text":"okhttp / okhttp3 / Handshake / peerCertificates peerCertificates \u00b6 val peerCertificates: List < Certificate > Returns a possibly-empty list of certificates that identify the remote peer. Getter Returns a possibly-empty list of certificates that identify the remote peer.","title":"peerCertificates - OkHttp"},{"location":"4.x/okhttp/okhttp3/-handshake/peer-certificates/#peercertificates","text":"val peerCertificates: List < Certificate > Returns a possibly-empty list of certificates that identify the remote peer. Getter Returns a possibly-empty list of certificates that identify the remote peer.","title":"peerCertificates"},{"location":"4.x/okhttp/okhttp3/-handshake/peer-principal/","text":"okhttp / okhttp3 / Handshake / peerPrincipal peerPrincipal \u00b6 val peerPrincipal: Principal ? Returns the remote peer\u2019s principle, or null if that peer is anonymous.","title":"peerPrincipal - OkHttp"},{"location":"4.x/okhttp/okhttp3/-handshake/peer-principal/#peerprincipal","text":"val peerPrincipal: Principal ? Returns the remote peer\u2019s principle, or null if that peer is anonymous.","title":"peerPrincipal"},{"location":"4.x/okhttp/okhttp3/-handshake/tls-version/","text":"okhttp / okhttp3 / Handshake / tlsVersion tlsVersion \u00b6 val tlsVersion: TlsVersion Returns the TLS version used for this connection. This value wasn\u2019t tracked prior to OkHttp 3.0. For responses cached by preceding versions this returns TlsVersion.SSL_3_0 .","title":"tlsVersion - OkHttp"},{"location":"4.x/okhttp/okhttp3/-handshake/tls-version/#tlsversion","text":"val tlsVersion: TlsVersion Returns the TLS version used for this connection. This value wasn\u2019t tracked prior to OkHttp 3.0. For responses cached by preceding versions this returns TlsVersion.SSL_3_0 .","title":"tlsVersion"},{"location":"4.x/okhttp/okhttp3/-handshake/to-string/","text":"okhttp / okhttp3 / Handshake / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-handshake/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/okhttp/okhttp3/-headers/","text":"okhttp / okhttp3 / Headers Headers \u00b6 class Headers : Iterable < Pair < String , String >> The header fields of a single HTTP message. Values are uninterpreted strings; use Request and Response for interpreted headers. This class maintains the order of the header fields within the HTTP message. This class tracks header values line-by-line. A field with multiple comma- separated values on the same line will be treated as a field with a single value by this class. It is the caller\u2019s responsibility to detect and split on commas if their field permits multiple values. This simplifies use of single-valued fields whose values routinely contain commas, such as cookies or dates. This class trims whitespace from values. It never returns values with leading or trailing whitespace. Instances of this class are immutable. Use Builder to create instances. Types \u00b6 Name Summary Builder class Builder Properties \u00b6 Name Summary size Returns the number of field values. val size: Int Functions \u00b6 Name Summary byteCount Returns the number of bytes required to encode these headers using HTTP/1.1. This is also the approximate size of HTTP/2 headers before they are compressed with HPACK. This value is intended to be used as a metric: smaller headers are more efficient to encode and transmit. fun byteCount(): Long equals Returns true if other is a Headers object with the same headers, with the same casing, in the same order. Note that two headers instances may be semantically equal but not equal according to this method. In particular, none of the following sets of headers are equal according to this method: fun equals(other: Any ?): Boolean get Returns the last value corresponding to the specified field, or null. operator fun get(name: String ): String ? getDate Returns the last value corresponding to the specified field parsed as an HTTP date, or null if either the field is absent or cannot be parsed as a date. fun getDate(name: String ): Date ? getInstant Returns the last value corresponding to the specified field parsed as an HTTP date, or null if either the field is absent or cannot be parsed as a date. fun getInstant(name: String ): Instant ? hashCode fun hashCode(): Int iterator operator fun iterator(): Iterator < Pair < String , String >> name Returns the field at position . fun name(index: Int ): String names Returns an immutable case-insensitive set of header names. fun names(): Set < String > newBuilder fun newBuilder(): Builder toMultimap fun toMultimap(): Map < String , List < String >> toString fun toString(): String value Returns the value at index . fun value(index: Int ): String values Returns an immutable list of the header values for name . fun values(name: String ): List < String > Companion Object Functions \u00b6 Name Summary headersOf Returns headers for the alternating header names and values. There must be an even number of arguments, and they must alternate between header names and values. fun headersOf(vararg namesAndValues: String ): Headers toHeaders Returns headers for the header names and values in the Map . fun Map < String , String >.toHeaders(): Headers","title":"Headers - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/#headers","text":"class Headers : Iterable < Pair < String , String >> The header fields of a single HTTP message. Values are uninterpreted strings; use Request and Response for interpreted headers. This class maintains the order of the header fields within the HTTP message. This class tracks header values line-by-line. A field with multiple comma- separated values on the same line will be treated as a field with a single value by this class. It is the caller\u2019s responsibility to detect and split on commas if their field permits multiple values. This simplifies use of single-valued fields whose values routinely contain commas, such as cookies or dates. This class trims whitespace from values. It never returns values with leading or trailing whitespace. Instances of this class are immutable. Use Builder to create instances.","title":"Headers"},{"location":"4.x/okhttp/okhttp3/-headers/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"4.x/okhttp/okhttp3/-headers/#properties","text":"Name Summary size Returns the number of field values. val size: Int","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-headers/#functions","text":"Name Summary byteCount Returns the number of bytes required to encode these headers using HTTP/1.1. This is also the approximate size of HTTP/2 headers before they are compressed with HPACK. This value is intended to be used as a metric: smaller headers are more efficient to encode and transmit. fun byteCount(): Long equals Returns true if other is a Headers object with the same headers, with the same casing, in the same order. Note that two headers instances may be semantically equal but not equal according to this method. In particular, none of the following sets of headers are equal according to this method: fun equals(other: Any ?): Boolean get Returns the last value corresponding to the specified field, or null. operator fun get(name: String ): String ? getDate Returns the last value corresponding to the specified field parsed as an HTTP date, or null if either the field is absent or cannot be parsed as a date. fun getDate(name: String ): Date ? getInstant Returns the last value corresponding to the specified field parsed as an HTTP date, or null if either the field is absent or cannot be parsed as a date. fun getInstant(name: String ): Instant ? hashCode fun hashCode(): Int iterator operator fun iterator(): Iterator < Pair < String , String >> name Returns the field at position . fun name(index: Int ): String names Returns an immutable case-insensitive set of header names. fun names(): Set < String > newBuilder fun newBuilder(): Builder toMultimap fun toMultimap(): Map < String , List < String >> toString fun toString(): String value Returns the value at index . fun value(index: Int ): String values Returns an immutable list of the header values for name . fun values(name: String ): List < String >","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-headers/#companion-object-functions","text":"Name Summary headersOf Returns headers for the alternating header names and values. There must be an even number of arguments, and they must alternate between header names and values. fun headersOf(vararg namesAndValues: String ): Headers toHeaders Returns headers for the header names and values in the Map . fun Map < String , String >.toHeaders(): Headers","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-headers/byte-count/","text":"okhttp / okhttp3 / Headers / byteCount byteCount \u00b6 fun byteCount(): Long Returns the number of bytes required to encode these headers using HTTP/1.1. This is also the approximate size of HTTP/2 headers before they are compressed with HPACK. This value is intended to be used as a metric: smaller headers are more efficient to encode and transmit.","title":"byteCount - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/byte-count/#bytecount","text":"fun byteCount(): Long Returns the number of bytes required to encode these headers using HTTP/1.1. This is also the approximate size of HTTP/2 headers before they are compressed with HPACK. This value is intended to be used as a metric: smaller headers are more efficient to encode and transmit.","title":"byteCount"},{"location":"4.x/okhttp/okhttp3/-headers/equals/","text":"okhttp / okhttp3 / Headers / equals equals \u00b6 fun equals(other: Any ?): Boolean Returns true if other is a Headers object with the same headers, with the same casing, in the same order. Note that two headers instances may be semantically equal but not equal according to this method. In particular, none of the following sets of headers are equal according to this method: Original Content-Type: text/html Content-Length: 50 Different order Content-Length: 50 Content-Type: text/html Different case content-type: text/html content-length: 50 Different values Content-Type: text/html Content-Length: 050 Applications that require semantically equal headers should convert them into a canonical form before comparing them for equality.","title":"equals - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/equals/#equals","text":"fun equals(other: Any ?): Boolean Returns true if other is a Headers object with the same headers, with the same casing, in the same order. Note that two headers instances may be semantically equal but not equal according to this method. In particular, none of the following sets of headers are equal according to this method: Original Content-Type: text/html Content-Length: 50 Different order Content-Length: 50 Content-Type: text/html Different case content-type: text/html content-length: 50 Different values Content-Type: text/html Content-Length: 050 Applications that require semantically equal headers should convert them into a canonical form before comparing them for equality.","title":"equals"},{"location":"4.x/okhttp/okhttp3/-headers/get-date/","text":"okhttp / okhttp3 / Headers / getDate getDate \u00b6 fun getDate(name: String ): Date ? Returns the last value corresponding to the specified field parsed as an HTTP date, or null if either the field is absent or cannot be parsed as a date.","title":"getDate - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/get-date/#getdate","text":"fun getDate(name: String ): Date ? Returns the last value corresponding to the specified field parsed as an HTTP date, or null if either the field is absent or cannot be parsed as a date.","title":"getDate"},{"location":"4.x/okhttp/okhttp3/-headers/get-instant/","text":"okhttp / okhttp3 / Headers / getInstant getInstant \u00b6 @IgnoreJRERequirement fun getInstant(name: String ): Instant ? Returns the last value corresponding to the specified field parsed as an HTTP date, or null if either the field is absent or cannot be parsed as a date.","title":"getInstant - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/get-instant/#getinstant","text":"@IgnoreJRERequirement fun getInstant(name: String ): Instant ? Returns the last value corresponding to the specified field parsed as an HTTP date, or null if either the field is absent or cannot be parsed as a date.","title":"getInstant"},{"location":"4.x/okhttp/okhttp3/-headers/get/","text":"okhttp / okhttp3 / Headers / get get \u00b6 operator fun get(name: String ): String ? Returns the last value corresponding to the specified field, or null.","title":"get - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/get/#get","text":"operator fun get(name: String ): String ? Returns the last value corresponding to the specified field, or null.","title":"get"},{"location":"4.x/okhttp/okhttp3/-headers/hash-code/","text":"okhttp / okhttp3 / Headers / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"4.x/okhttp/okhttp3/-headers/headers-of/","text":"okhttp / okhttp3 / Headers / headersOf headersOf \u00b6 @JvmStatic @JvmName(\"of\") fun headersOf(vararg namesAndValues: String ): Headers Returns headers for the alternating header names and values. There must be an even number of arguments, and they must alternate between header names and values.","title":"headersOf - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/headers-of/#headersof","text":"@JvmStatic @JvmName(\"of\") fun headersOf(vararg namesAndValues: String ): Headers Returns headers for the alternating header names and values. There must be an even number of arguments, and they must alternate between header names and values.","title":"headersOf"},{"location":"4.x/okhttp/okhttp3/-headers/iterator/","text":"okhttp / okhttp3 / Headers / iterator iterator \u00b6 operator fun iterator(): Iterator < Pair < String , String >>","title":"iterator - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/iterator/#iterator","text":"operator fun iterator(): Iterator < Pair < String , String >>","title":"iterator"},{"location":"4.x/okhttp/okhttp3/-headers/name/","text":"okhttp / okhttp3 / Headers / name name \u00b6 fun name(index: Int ): String Returns the field at position .","title":"name - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/name/#name","text":"fun name(index: Int ): String Returns the field at position .","title":"name"},{"location":"4.x/okhttp/okhttp3/-headers/names/","text":"okhttp / okhttp3 / Headers / names names \u00b6 fun names(): Set < String > Returns an immutable case-insensitive set of header names.","title":"names - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/names/#names","text":"fun names(): Set < String > Returns an immutable case-insensitive set of header names.","title":"names"},{"location":"4.x/okhttp/okhttp3/-headers/new-builder/","text":"okhttp / okhttp3 / Headers / newBuilder newBuilder \u00b6 fun newBuilder(): Builder","title":"newBuilder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/new-builder/#newbuilder","text":"fun newBuilder(): Builder","title":"newBuilder"},{"location":"4.x/okhttp/okhttp3/-headers/size/","text":"okhttp / okhttp3 / Headers / size size \u00b6 val size: Int Returns the number of field values.","title":"size - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/size/#size","text":"val size: Int Returns the number of field values.","title":"size"},{"location":"4.x/okhttp/okhttp3/-headers/to-headers/","text":"okhttp / okhttp3 / Headers / toHeaders toHeaders \u00b6 @JvmStatic @JvmName(\"of\") fun Map < String , String >.toHeaders(): Headers Returns headers for the header names and values in the Map .","title":"toHeaders - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/to-headers/#toheaders","text":"@JvmStatic @JvmName(\"of\") fun Map < String , String >.toHeaders(): Headers Returns headers for the header names and values in the Map .","title":"toHeaders"},{"location":"4.x/okhttp/okhttp3/-headers/to-multimap/","text":"okhttp / okhttp3 / Headers / toMultimap toMultimap \u00b6 fun toMultimap(): Map < String , List < String >>","title":"toMultimap - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/to-multimap/#tomultimap","text":"fun toMultimap(): Map < String , List < String >>","title":"toMultimap"},{"location":"4.x/okhttp/okhttp3/-headers/to-string/","text":"okhttp / okhttp3 / Headers / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/okhttp/okhttp3/-headers/value/","text":"okhttp / okhttp3 / Headers / value value \u00b6 fun value(index: Int ): String Returns the value at index .","title":"value - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/value/#value","text":"fun value(index: Int ): String Returns the value at index .","title":"value"},{"location":"4.x/okhttp/okhttp3/-headers/values/","text":"okhttp / okhttp3 / Headers / values values \u00b6 fun values(name: String ): List < String > Returns an immutable list of the header values for name .","title":"values - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/values/#values","text":"fun values(name: String ): List < String > Returns an immutable list of the header values for name .","title":"values"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/","text":"okhttp / okhttp3 / Headers / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder() Functions \u00b6 Name Summary add Add an header line containing a field name, a literal colon, and a value. fun add(line: String ): Builder Add a header with the specified name and value. Does validation of header names and values. fun add(name: String , value: String ): Builder Add a header with the specified name and formatted date. Does validation of header names and value. fun add(name: String , value: Date ): Builder Add a header with the specified name and formatted instant. Does validation of header names and value. fun add(name: String , value: Instant ): Builder addAll Adds all headers from an existing collection. fun addAll(headers: Headers ): Builder addUnsafeNonAscii Add a header with the specified name and value. Does validation of header names, allowing non-ASCII values. fun addUnsafeNonAscii(name: String , value: String ): Builder build fun build(): Headers get Equivalent to build().get(name) , but potentially faster. operator fun get(name: String ): String ? removeAll fun removeAll(name: String ): Builder set Set a field with the specified date. If the field is not found, it is added. If the field is found, the existing values are replaced. operator fun set(name: String , value: Date ): Builder Set a field with the specified instant. If the field is not found, it is added. If the field is found, the existing values are replaced. operator fun set(name: String , value: Instant ): Builder Set a field with the specified value. If the field is not found, it is added. If the field is found, the existing values are replaced. operator fun set(name: String , value: String ): Builder","title":"Builder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/#functions","text":"Name Summary add Add an header line containing a field name, a literal colon, and a value. fun add(line: String ): Builder Add a header with the specified name and value. Does validation of header names and values. fun add(name: String , value: String ): Builder Add a header with the specified name and formatted date. Does validation of header names and value. fun add(name: String , value: Date ): Builder Add a header with the specified name and formatted instant. Does validation of header names and value. fun add(name: String , value: Instant ): Builder addAll Adds all headers from an existing collection. fun addAll(headers: Headers ): Builder addUnsafeNonAscii Add a header with the specified name and value. Does validation of header names, allowing non-ASCII values. fun addUnsafeNonAscii(name: String , value: String ): Builder build fun build(): Headers get Equivalent to build().get(name) , but potentially faster. operator fun get(name: String ): String ? removeAll fun removeAll(name: String ): Builder set Set a field with the specified date. If the field is not found, it is added. If the field is found, the existing values are replaced. operator fun set(name: String , value: Date ): Builder Set a field with the specified instant. If the field is not found, it is added. If the field is found, the existing values are replaced. operator fun set(name: String , value: Instant ): Builder Set a field with the specified value. If the field is not found, it is added. If the field is found, the existing values are replaced. operator fun set(name: String , value: String ): Builder","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/-init-/","text":"okhttp / okhttp3 / Headers / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"4.x/okhttp/okhttp3/-headers/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/add-all/","text":"okhttp / okhttp3 / Headers / Builder / addAll addAll \u00b6 fun addAll(headers: Headers ): Builder Adds all headers from an existing collection.","title":"addAll - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/add-all/#addall","text":"fun addAll(headers: Headers ): Builder Adds all headers from an existing collection.","title":"addAll"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/add-unsafe-non-ascii/","text":"okhttp / okhttp3 / Headers / Builder / addUnsafeNonAscii addUnsafeNonAscii \u00b6 fun addUnsafeNonAscii(name: String , value: String ): Builder Add a header with the specified name and value. Does validation of header names, allowing non-ASCII values.","title":"addUnsafeNonAscii - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/add-unsafe-non-ascii/#addunsafenonascii","text":"fun addUnsafeNonAscii(name: String , value: String ): Builder Add a header with the specified name and value. Does validation of header names, allowing non-ASCII values.","title":"addUnsafeNonAscii"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/add/","text":"okhttp / okhttp3 / Headers / Builder / add add \u00b6 fun add(line: String ): Builder Add an header line containing a field name, a literal colon, and a value. fun add(name: String , value: String ): Builder Add a header with the specified name and value. Does validation of header names and values. fun add(name: String , value: Date ): Builder Add a header with the specified name and formatted date. Does validation of header names and value. @IgnoreJRERequirement fun add(name: String , value: Instant ): Builder Add a header with the specified name and formatted instant. Does validation of header names and value.","title":"add - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/add/#add","text":"fun add(line: String ): Builder Add an header line containing a field name, a literal colon, and a value. fun add(name: String , value: String ): Builder Add a header with the specified name and value. Does validation of header names and values. fun add(name: String , value: Date ): Builder Add a header with the specified name and formatted date. Does validation of header names and value. @IgnoreJRERequirement fun add(name: String , value: Instant ): Builder Add a header with the specified name and formatted instant. Does validation of header names and value.","title":"add"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/build/","text":"okhttp / okhttp3 / Headers / Builder / build build \u00b6 fun build(): Headers","title":"build - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/build/#build","text":"fun build(): Headers","title":"build"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/get/","text":"okhttp / okhttp3 / Headers / Builder / get get \u00b6 operator fun get(name: String ): String ? Equivalent to build().get(name) , but potentially faster.","title":"get - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/get/#get","text":"operator fun get(name: String ): String ? Equivalent to build().get(name) , but potentially faster.","title":"get"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/remove-all/","text":"okhttp / okhttp3 / Headers / Builder / removeAll removeAll \u00b6 fun removeAll(name: String ): Builder","title":"removeAll - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/remove-all/#removeall","text":"fun removeAll(name: String ): Builder","title":"removeAll"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/set/","text":"okhttp / okhttp3 / Headers / Builder / set set \u00b6 operator fun set(name: String , value: Date ): Builder Set a field with the specified date. If the field is not found, it is added. If the field is found, the existing values are replaced. @IgnoreJRERequirement operator fun set(name: String , value: Instant ): Builder Set a field with the specified instant. If the field is not found, it is added. If the field is found, the existing values are replaced. operator fun set(name: String , value: String ): Builder Set a field with the specified value. If the field is not found, it is added. If the field is found, the existing values are replaced.","title":"set - OkHttp"},{"location":"4.x/okhttp/okhttp3/-headers/-builder/set/#set","text":"operator fun set(name: String , value: Date ): Builder Set a field with the specified date. If the field is not found, it is added. If the field is found, the existing values are replaced. @IgnoreJRERequirement operator fun set(name: String , value: Instant ): Builder Set a field with the specified instant. If the field is not found, it is added. If the field is found, the existing values are replaced. operator fun set(name: String , value: String ): Builder Set a field with the specified value. If the field is not found, it is added. If the field is found, the existing values are replaced.","title":"set"},{"location":"4.x/okhttp/okhttp3/-http-url/","text":"okhttp / okhttp3 / HttpUrl HttpUrl \u00b6 class HttpUrl A uniform resource locator (URL) with a scheme of either http or https . Use this class to compose and decompose Internet addresses. For example, this code will compose and print a URL for Google search: HttpUrl url = new HttpUrl.Builder() .scheme(\"https\") .host(\"www.google.com\") .addPathSegment(\"search\") .addQueryParameter(\"q\", \"polar bears\") .build(); System.out.println(url); which prints: https://www.google.com/search?q=polar%20bears As another example, this code prints the human-readable query parameters of a Twitter search: HttpUrl url = HttpUrl.parse(\"https://twitter.com/search?q=cute%20%23puppies&f=images\"); for (int i = 0, size = url.querySize(); i < size; i++) { System.out.println(url.queryParameterName(i) + \": \" + url.queryParameterValue(i)); } which prints: q: cute #puppies f: images In addition to composing URLs from their component parts and decomposing URLs into their component parts, this class implements relative URL resolution: what address you\u2019d reach by clicking a relative link on a specified page. For example: HttpUrl base = HttpUrl.parse(\"https://www.youtube.com/user/WatchTheDaily/videos\"); HttpUrl link = base.resolve(\"../../watch?v=cbP2N1BQdYc\"); System.out.println(link); which prints: https://www.youtube.com/watch?v=cbP2N1BQdYc What\u2019s in a URL? \u00b6 A URL has several components. Scheme \u00b6 Sometimes referred to as protocol , A URL\u2019s scheme describes what mechanism should be used to retrieve the resource. Although URLs have many schemes ( mailto , file , ftp ), this class only supports http and https . Use java.net.URI for URLs with arbitrary schemes. Username and Password \u00b6 Username and password are either present, or the empty string \"\" if absent. This class offers no mechanism to differentiate empty from absent. Neither of these components are popular in practice. Typically HTTP applications use other mechanisms for user identification and authentication. Host \u00b6 The host identifies the webserver that serves the URL\u2019s resource. It is either a hostname like square.com or localhost , an IPv4 address like 192.168.0.1 , or an IPv6 address like ::1 . Usually a webserver is reachable with multiple identifiers: its IP addresses, registered domain names, and even localhost when connecting from the server itself. Each of a web server\u2019s names is a distinct URL and they are not interchangeable. For example, even if http://square.github.io/dagger and http://google.github.io/dagger are served by the same IP address, the two URLs identify different resources. Port \u00b6 The port used to connect to the web server. By default this is 80 for HTTP and 443 for HTTPS. This class never returns -1 for the port: if no port is explicitly specified in the URL then the scheme\u2019s default is used. Path \u00b6 The path identifies a specific resource on the host. Paths have a hierarchical structure like \u201c/square/okhttp/issues/1486\u201d and decompose into a list of segments like [\"square\", \"okhttp\", \"issues\", \"1486\"] . This class offers methods to compose and decompose paths by segment. It composes each path from a list of segments by alternating between \u201c/\u201d and the encoded segment. For example the segments [\"a\", \"b\"] build \u201c/a/b\u201d and the segments [\"a\", \"b\", \"\"] build \u201c/a/b/\u201d. If a path\u2019s last segment is the empty string then the path ends with \u201c/\u201d. This class always builds non-empty paths: if the path is omitted it defaults to \u201c/\u201d. The default path\u2019s segment list is a single empty string: [\"\"] . Query \u00b6 The query is optional: it can be null, empty, or non-empty. For many HTTP URLs the query string is subdivided into a collection of name-value parameters. This class offers methods to set the query as the single string, or as individual name-value parameters. With name-value parameters the values are optional and names may be repeated. Fragment \u00b6 The fragment is optional: it can be null, empty, or non-empty. Unlike host, port, path, and query the fragment is not sent to the webserver: it\u2019s private to the client. Encoding \u00b6 Each component must be encoded before it is embedded in the complete URL. As we saw above, the string cute #puppies is encoded as cute%20%23puppies when used as a query parameter value. Percent encoding \u00b6 Percent encoding replaces a character (like \\ud83c\\udf69 ) with its UTF-8 hex bytes (like %F0%9F%8D%A9 ). This approach works for whitespace characters, control characters, non-ASCII characters, and characters that already have another meaning in a particular context. Percent encoding is used in every URL component except for the hostname. But the set of characters that need to be encoded is different for each component. For example, the path component must escape all of its ? characters, otherwise it could be interpreted as the start of the URL\u2019s query. But within the query and fragment components, the ? character doesn\u2019t delimit anything and doesn\u2019t need to be escaped. HttpUrl url = HttpUrl.parse(\"http://who-let-the-dogs.out\").newBuilder() .addPathSegment(\"_Who?_\") .query(\"_Who?_\") .fragment(\"_Who?_\") .build(); System.out.println(url); This prints: http://who-let-the-dogs.out/_Who%3F_?_Who?_#_Who?_ When parsing URLs that lack percent encoding where it is required, this class will percent encode the offending characters. IDNA Mapping and Punycode encoding \u00b6 Hostnames have different requirements and use a different encoding scheme. It consists of IDNA mapping and Punycode encoding. In order to avoid confusion and discourage phishing attacks, IDNA Mapping transforms names to avoid confusing characters. This includes basic case folding: transforming shouting SQUARE.COM into cool and casual square.com . It also handles more exotic characters. For example, the Unicode trademark sign (\u2122) could be confused for the letters \u201cTM\u201d in http://ho\u2122mail.com . To mitigate this, the single character (\u2122) maps to the string \u2122. There is similar policy for all of the 1.1 million Unicode code points. Note that some code points such as \u201c\\ud83c\\udf69\u201d are not mapped and cannot be used in a hostname. Punycode converts a Unicode string to an ASCII string to make international domain names work everywhere. For example, \u201c\u03c3\u201d encodes as \u201cxn\u20134xa\u201d. The encoded string is not human readable, but can be used with classes like InetAddress to establish connections. Why another URL model? \u00b6 Java includes both java.net.URL and java.net.URI . We offer a new URL model to address problems that the others don\u2019t. Different URLs should be different \u00b6 Although they have different content, java.net.URL considers the following two URLs equal, and the equals() method between them returns true: https://example.net/ https://example.com/ This is because those two hosts share the same IP address. This is an old, bad design decision that makes java.net.URL unusable for many things. It shouldn\u2019t be used as a Map key or in a Set . Doing so is both inefficient because equality may require a DNS lookup, and incorrect because unequal URLs may be equal because of how they are hosted. Equal URLs should be equal \u00b6 These two URLs are semantically identical, but java.net.URI disagrees: http://host:80/ http://host Both the unnecessary port specification ( :80 ) and the absent trailing slash ( / ) cause URI to bucket the two URLs separately. This harms URI\u2019s usefulness in collections. Any application that stores information-per-URL will need to either canonicalize manually, or suffer unnecessary redundancy for such URLs. Because they don\u2019t attempt canonical form, these classes are surprisingly difficult to use securely. Suppose you\u2019re building a webservice that checks that incoming paths are prefixed \u201c/static/images/\u201d before serving the corresponding assets from the filesystem. String attack = \"http://example.com/static/images/../../../../../etc/passwd\"; System.out.println(new URL(attack).getPath()); System.out.println(new URI(attack).getPath()); System.out.println(HttpUrl.parse(attack).encodedPath()); By canonicalizing the input paths, they are complicit in directory traversal attacks. Code that checks only the path prefix may suffer! /static/images/../../../../../etc/passwd /static/images/../../../../../etc/passwd /etc/passwd If it works on the web, it should work in your application \u00b6 The java.net.URI class is strict around what URLs it accepts. It rejects URLs like http://example.com/abc|def because the | character is unsupported. This class is more forgiving: it will automatically percent-encode the |' yielding http://example.com/abc%7Cdef . This kind behavior is consistent with web browsers. HttpUrl prefers consistency with major web browsers over consistency with obsolete specifications. Paths and Queries should decompose \u00b6 Neither of the built-in URL models offer direct access to path segments or query parameters. Manually using StringBuilder to assemble these components is cumbersome: do \u2018+\u2019 characters get silently replaced with spaces? If a query parameter contains a \u2018&\u2018, does that get escaped? By offering methods to read and write individual query parameters directly, application developers are saved from the hassles of encoding and decoding. Plus a modern API \u00b6 The URL (JDK1.0) and URI (Java 1.4) classes predate builders and instead use telescoping constructors. For example, there\u2019s no API to compose a URI with a custom port without also providing a query and fragment. Instances of HttpUrl are well-formed and always have a scheme, host, and path. With java.net.URL it\u2019s possible to create an awkward URL like http:/ with scheme and path but no hostname. Building APIs that consume such malformed values is difficult! This class has a modern API. It avoids punitive checked exceptions: toHttpUrl throws IllegalArgumentException on invalid input or toHttpUrlOrNull returns null if the input is an invalid URL. You can even be explicit about whether each component has been encoded already. Types \u00b6 Name Summary Builder class Builder Properties \u00b6 Name Summary encodedFragment This URL\u2019s encoded fragment, like \"abc\" for http://host/#abc . This is null if the URL has no fragment. val encodedFragment: String ? encodedPassword The password, or an empty string if none is set. val encodedPassword: String encodedPath The entire path of this URL encoded for use in HTTP resource resolution. The returned path will start with \"/\" . val encodedPath: String encodedPathSegments A list of encoded path segments like [\"a\", \"b\", \"c\"] for the URL http://host/a/b/c . This list is never empty though it may contain a single empty string. val encodedPathSegments: List < String > encodedQuery The query of this URL, encoded for use in HTTP resource resolution. This string may be null (for URLs with no query), empty (for URLs with an empty query) or non-empty (all other URLs). val encodedQuery: String ? encodedUsername The username, or an empty string if none is set. val encodedUsername: String fragment This URL\u2019s fragment, like \"abc\" for http://host/#abc . This is null if the URL has no fragment. val fragment: String ? host The host address suitable for use with InetAddress.getAllByName . May be: val host: String isHttps val isHttps: Boolean password Returns the decoded password, or an empty string if none is present. val password: String pathSegments A list of path segments like [\"a\", \"b\", \"c\"] for the URL http://host/a/b/c . This list is never empty though it may contain a single empty string. val pathSegments: List < String > pathSize The number of segments in this URL\u2019s path. This is also the number of slashes in this URL\u2019s path, like 3 in http://host/a/b/c . This is always at least 1. val pathSize: Int port The explicitly-specified port if one was provided, or the default port for this URL\u2019s scheme. For example, this returns 8443 for https://square.com:8443/ and 443 for https://square.com/ . The result is in [1..65535] . val port: Int query This URL\u2019s query, like \"abc\" for http://host/?abc . Most callers should prefer queryParameterName and queryParameterValue because these methods offer direct access to individual query parameters. val query: String ? queryParameterNames The distinct query parameter names in this URL, like [\"a\", \"b\"] for http://host/?a=apple&b=banana . If this URL has no query this is the empty set. val queryParameterNames: Set < String > querySize The number of query parameters in this URL, like 2 for http://host/?a=apple&b=banana . If this URL has no query this is 0. Otherwise it is one more than the number of \"&\" separators in the query. val querySize: Int scheme Either \u201chttp\u201d or \u201chttps\u201d. val scheme: String username The decoded username, or an empty string if none is present. val username: String Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder Returns a builder based on this URL. fun newBuilder(): Builder Returns a builder for the URL that would be retrieved by following link from this URL, or null if the resulting URL is not well-formed. fun newBuilder(link: String ): Builder? queryParameter The first query parameter named name decoded using UTF-8, or null if there is no such query parameter. fun queryParameter(name: String ): String ? queryParameterName Returns the name of the query parameter at index . For example this returns \"a\" for queryParameterName(0) on http://host/?a=apple&b=banana . This throws if index is not less than the query size . fun queryParameterName(index: Int ): String queryParameterValue Returns the value of the query parameter at index . For example this returns \"apple\" for queryParameterName(0) on http://host/?a=apple&b=banana . This throws if index is not less than the query size . fun queryParameterValue(index: Int ): String ? queryParameterValues Returns all values for the query parameter name ordered by their appearance in this URL. For example this returns [\"banana\"] for queryParameterValue(\"b\") on http://host/?a=apple&b=banana . fun queryParameterValues(name: String ): List < String ?> redact Returns a string with containing this URL with its username, password, query, and fragment stripped, and its path replaced with /... . For example, redacting http://username:password@example.com/path returns http://example.com/... . fun redact(): String resolve Returns the URL that would be retrieved by following link from this URL, or null if the resulting URL is not well-formed. fun resolve(link: String ): HttpUrl ? topPrivateDomain Returns the domain name of this URL\u2019s host that is one level beneath the public suffix by consulting the public suffix list . Returns null if this URL\u2019s host is an IP address or is considered a public suffix by the public suffix list. fun topPrivateDomain(): String ? toString fun toString(): String toUri Returns this URL as a java.net.URI . Because URI is more strict than this class, the returned URI may be semantically different from this URL: fun toUri(): URI toUrl Returns this URL as a java.net.URL . fun toUrl(): URL Companion Object Functions \u00b6 Name Summary defaultPort Returns 80 if scheme.equals(\"http\") , 443 if scheme.equals(\"https\") and -1 otherwise. fun defaultPort(scheme: String ): Int toHttpUrl Returns a new HttpUrl representing this. fun String .toHttpUrl(): HttpUrl toHttpUrlOrNull Returns a new HttpUrl representing url if it is a well-formed HTTP or HTTPS URL, or null if it isn\u2019t. fun String .toHttpUrlOrNull(): HttpUrl ? Returns an HttpUrl for this if its protocol is http or https , or null if it has any other protocol. fun URL .toHttpUrlOrNull(): HttpUrl ?``fun URI .toHttpUrlOrNull(): HttpUrl ?","title":"HttpUrl - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/#httpurl","text":"class HttpUrl A uniform resource locator (URL) with a scheme of either http or https . Use this class to compose and decompose Internet addresses. For example, this code will compose and print a URL for Google search: HttpUrl url = new HttpUrl.Builder() .scheme(\"https\") .host(\"www.google.com\") .addPathSegment(\"search\") .addQueryParameter(\"q\", \"polar bears\") .build(); System.out.println(url); which prints: https://www.google.com/search?q=polar%20bears As another example, this code prints the human-readable query parameters of a Twitter search: HttpUrl url = HttpUrl.parse(\"https://twitter.com/search?q=cute%20%23puppies&f=images\"); for (int i = 0, size = url.querySize(); i < size; i++) { System.out.println(url.queryParameterName(i) + \": \" + url.queryParameterValue(i)); } which prints: q: cute #puppies f: images In addition to composing URLs from their component parts and decomposing URLs into their component parts, this class implements relative URL resolution: what address you\u2019d reach by clicking a relative link on a specified page. For example: HttpUrl base = HttpUrl.parse(\"https://www.youtube.com/user/WatchTheDaily/videos\"); HttpUrl link = base.resolve(\"../../watch?v=cbP2N1BQdYc\"); System.out.println(link); which prints: https://www.youtube.com/watch?v=cbP2N1BQdYc","title":"HttpUrl"},{"location":"4.x/okhttp/okhttp3/-http-url/#whats-in-a-url","text":"A URL has several components.","title":"What's in a URL?"},{"location":"4.x/okhttp/okhttp3/-http-url/#scheme","text":"Sometimes referred to as protocol , A URL\u2019s scheme describes what mechanism should be used to retrieve the resource. Although URLs have many schemes ( mailto , file , ftp ), this class only supports http and https . Use java.net.URI for URLs with arbitrary schemes.","title":"Scheme"},{"location":"4.x/okhttp/okhttp3/-http-url/#username-and-password","text":"Username and password are either present, or the empty string \"\" if absent. This class offers no mechanism to differentiate empty from absent. Neither of these components are popular in practice. Typically HTTP applications use other mechanisms for user identification and authentication.","title":"Username and Password"},{"location":"4.x/okhttp/okhttp3/-http-url/#host","text":"The host identifies the webserver that serves the URL\u2019s resource. It is either a hostname like square.com or localhost , an IPv4 address like 192.168.0.1 , or an IPv6 address like ::1 . Usually a webserver is reachable with multiple identifiers: its IP addresses, registered domain names, and even localhost when connecting from the server itself. Each of a web server\u2019s names is a distinct URL and they are not interchangeable. For example, even if http://square.github.io/dagger and http://google.github.io/dagger are served by the same IP address, the two URLs identify different resources.","title":"Host"},{"location":"4.x/okhttp/okhttp3/-http-url/#port","text":"The port used to connect to the web server. By default this is 80 for HTTP and 443 for HTTPS. This class never returns -1 for the port: if no port is explicitly specified in the URL then the scheme\u2019s default is used.","title":"Port"},{"location":"4.x/okhttp/okhttp3/-http-url/#path","text":"The path identifies a specific resource on the host. Paths have a hierarchical structure like \u201c/square/okhttp/issues/1486\u201d and decompose into a list of segments like [\"square\", \"okhttp\", \"issues\", \"1486\"] . This class offers methods to compose and decompose paths by segment. It composes each path from a list of segments by alternating between \u201c/\u201d and the encoded segment. For example the segments [\"a\", \"b\"] build \u201c/a/b\u201d and the segments [\"a\", \"b\", \"\"] build \u201c/a/b/\u201d. If a path\u2019s last segment is the empty string then the path ends with \u201c/\u201d. This class always builds non-empty paths: if the path is omitted it defaults to \u201c/\u201d. The default path\u2019s segment list is a single empty string: [\"\"] .","title":"Path"},{"location":"4.x/okhttp/okhttp3/-http-url/#query","text":"The query is optional: it can be null, empty, or non-empty. For many HTTP URLs the query string is subdivided into a collection of name-value parameters. This class offers methods to set the query as the single string, or as individual name-value parameters. With name-value parameters the values are optional and names may be repeated.","title":"Query"},{"location":"4.x/okhttp/okhttp3/-http-url/#fragment","text":"The fragment is optional: it can be null, empty, or non-empty. Unlike host, port, path, and query the fragment is not sent to the webserver: it\u2019s private to the client.","title":"Fragment"},{"location":"4.x/okhttp/okhttp3/-http-url/#encoding","text":"Each component must be encoded before it is embedded in the complete URL. As we saw above, the string cute #puppies is encoded as cute%20%23puppies when used as a query parameter value.","title":"Encoding"},{"location":"4.x/okhttp/okhttp3/-http-url/#percent-encoding","text":"Percent encoding replaces a character (like \\ud83c\\udf69 ) with its UTF-8 hex bytes (like %F0%9F%8D%A9 ). This approach works for whitespace characters, control characters, non-ASCII characters, and characters that already have another meaning in a particular context. Percent encoding is used in every URL component except for the hostname. But the set of characters that need to be encoded is different for each component. For example, the path component must escape all of its ? characters, otherwise it could be interpreted as the start of the URL\u2019s query. But within the query and fragment components, the ? character doesn\u2019t delimit anything and doesn\u2019t need to be escaped. HttpUrl url = HttpUrl.parse(\"http://who-let-the-dogs.out\").newBuilder() .addPathSegment(\"_Who?_\") .query(\"_Who?_\") .fragment(\"_Who?_\") .build(); System.out.println(url); This prints: http://who-let-the-dogs.out/_Who%3F_?_Who?_#_Who?_ When parsing URLs that lack percent encoding where it is required, this class will percent encode the offending characters.","title":"Percent encoding"},{"location":"4.x/okhttp/okhttp3/-http-url/#idna-mapping-and-punycode-encoding","text":"Hostnames have different requirements and use a different encoding scheme. It consists of IDNA mapping and Punycode encoding. In order to avoid confusion and discourage phishing attacks, IDNA Mapping transforms names to avoid confusing characters. This includes basic case folding: transforming shouting SQUARE.COM into cool and casual square.com . It also handles more exotic characters. For example, the Unicode trademark sign (\u2122) could be confused for the letters \u201cTM\u201d in http://ho\u2122mail.com . To mitigate this, the single character (\u2122) maps to the string \u2122. There is similar policy for all of the 1.1 million Unicode code points. Note that some code points such as \u201c\\ud83c\\udf69\u201d are not mapped and cannot be used in a hostname. Punycode converts a Unicode string to an ASCII string to make international domain names work everywhere. For example, \u201c\u03c3\u201d encodes as \u201cxn\u20134xa\u201d. The encoded string is not human readable, but can be used with classes like InetAddress to establish connections.","title":"IDNA Mapping and Punycode encoding"},{"location":"4.x/okhttp/okhttp3/-http-url/#why-another-url-model","text":"Java includes both java.net.URL and java.net.URI . We offer a new URL model to address problems that the others don\u2019t.","title":"Why another URL model?"},{"location":"4.x/okhttp/okhttp3/-http-url/#different-urls-should-be-different","text":"Although they have different content, java.net.URL considers the following two URLs equal, and the equals() method between them returns true: https://example.net/ https://example.com/ This is because those two hosts share the same IP address. This is an old, bad design decision that makes java.net.URL unusable for many things. It shouldn\u2019t be used as a Map key or in a Set . Doing so is both inefficient because equality may require a DNS lookup, and incorrect because unequal URLs may be equal because of how they are hosted.","title":"Different URLs should be different"},{"location":"4.x/okhttp/okhttp3/-http-url/#equal-urls-should-be-equal","text":"These two URLs are semantically identical, but java.net.URI disagrees: http://host:80/ http://host Both the unnecessary port specification ( :80 ) and the absent trailing slash ( / ) cause URI to bucket the two URLs separately. This harms URI\u2019s usefulness in collections. Any application that stores information-per-URL will need to either canonicalize manually, or suffer unnecessary redundancy for such URLs. Because they don\u2019t attempt canonical form, these classes are surprisingly difficult to use securely. Suppose you\u2019re building a webservice that checks that incoming paths are prefixed \u201c/static/images/\u201d before serving the corresponding assets from the filesystem. String attack = \"http://example.com/static/images/../../../../../etc/passwd\"; System.out.println(new URL(attack).getPath()); System.out.println(new URI(attack).getPath()); System.out.println(HttpUrl.parse(attack).encodedPath()); By canonicalizing the input paths, they are complicit in directory traversal attacks. Code that checks only the path prefix may suffer! /static/images/../../../../../etc/passwd /static/images/../../../../../etc/passwd /etc/passwd","title":"Equal URLs should be equal"},{"location":"4.x/okhttp/okhttp3/-http-url/#if-it-works-on-the-web-it-should-work-in-your-application","text":"The java.net.URI class is strict around what URLs it accepts. It rejects URLs like http://example.com/abc|def because the | character is unsupported. This class is more forgiving: it will automatically percent-encode the |' yielding http://example.com/abc%7Cdef . This kind behavior is consistent with web browsers. HttpUrl prefers consistency with major web browsers over consistency with obsolete specifications.","title":"If it works on the web, it should work in your application"},{"location":"4.x/okhttp/okhttp3/-http-url/#paths-and-queries-should-decompose","text":"Neither of the built-in URL models offer direct access to path segments or query parameters. Manually using StringBuilder to assemble these components is cumbersome: do \u2018+\u2019 characters get silently replaced with spaces? If a query parameter contains a \u2018&\u2018, does that get escaped? By offering methods to read and write individual query parameters directly, application developers are saved from the hassles of encoding and decoding.","title":"Paths and Queries should decompose"},{"location":"4.x/okhttp/okhttp3/-http-url/#plus-a-modern-api","text":"The URL (JDK1.0) and URI (Java 1.4) classes predate builders and instead use telescoping constructors. For example, there\u2019s no API to compose a URI with a custom port without also providing a query and fragment. Instances of HttpUrl are well-formed and always have a scheme, host, and path. With java.net.URL it\u2019s possible to create an awkward URL like http:/ with scheme and path but no hostname. Building APIs that consume such malformed values is difficult! This class has a modern API. It avoids punitive checked exceptions: toHttpUrl throws IllegalArgumentException on invalid input or toHttpUrlOrNull returns null if the input is an invalid URL. You can even be explicit about whether each component has been encoded already.","title":"Plus a modern API"},{"location":"4.x/okhttp/okhttp3/-http-url/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"4.x/okhttp/okhttp3/-http-url/#properties","text":"Name Summary encodedFragment This URL\u2019s encoded fragment, like \"abc\" for http://host/#abc . This is null if the URL has no fragment. val encodedFragment: String ? encodedPassword The password, or an empty string if none is set. val encodedPassword: String encodedPath The entire path of this URL encoded for use in HTTP resource resolution. The returned path will start with \"/\" . val encodedPath: String encodedPathSegments A list of encoded path segments like [\"a\", \"b\", \"c\"] for the URL http://host/a/b/c . This list is never empty though it may contain a single empty string. val encodedPathSegments: List < String > encodedQuery The query of this URL, encoded for use in HTTP resource resolution. This string may be null (for URLs with no query), empty (for URLs with an empty query) or non-empty (all other URLs). val encodedQuery: String ? encodedUsername The username, or an empty string if none is set. val encodedUsername: String fragment This URL\u2019s fragment, like \"abc\" for http://host/#abc . This is null if the URL has no fragment. val fragment: String ? host The host address suitable for use with InetAddress.getAllByName . May be: val host: String isHttps val isHttps: Boolean password Returns the decoded password, or an empty string if none is present. val password: String pathSegments A list of path segments like [\"a\", \"b\", \"c\"] for the URL http://host/a/b/c . This list is never empty though it may contain a single empty string. val pathSegments: List < String > pathSize The number of segments in this URL\u2019s path. This is also the number of slashes in this URL\u2019s path, like 3 in http://host/a/b/c . This is always at least 1. val pathSize: Int port The explicitly-specified port if one was provided, or the default port for this URL\u2019s scheme. For example, this returns 8443 for https://square.com:8443/ and 443 for https://square.com/ . The result is in [1..65535] . val port: Int query This URL\u2019s query, like \"abc\" for http://host/?abc . Most callers should prefer queryParameterName and queryParameterValue because these methods offer direct access to individual query parameters. val query: String ? queryParameterNames The distinct query parameter names in this URL, like [\"a\", \"b\"] for http://host/?a=apple&b=banana . If this URL has no query this is the empty set. val queryParameterNames: Set < String > querySize The number of query parameters in this URL, like 2 for http://host/?a=apple&b=banana . If this URL has no query this is 0. Otherwise it is one more than the number of \"&\" separators in the query. val querySize: Int scheme Either \u201chttp\u201d or \u201chttps\u201d. val scheme: String username The decoded username, or an empty string if none is present. val username: String","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-http-url/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder Returns a builder based on this URL. fun newBuilder(): Builder Returns a builder for the URL that would be retrieved by following link from this URL, or null if the resulting URL is not well-formed. fun newBuilder(link: String ): Builder? queryParameter The first query parameter named name decoded using UTF-8, or null if there is no such query parameter. fun queryParameter(name: String ): String ? queryParameterName Returns the name of the query parameter at index . For example this returns \"a\" for queryParameterName(0) on http://host/?a=apple&b=banana . This throws if index is not less than the query size . fun queryParameterName(index: Int ): String queryParameterValue Returns the value of the query parameter at index . For example this returns \"apple\" for queryParameterName(0) on http://host/?a=apple&b=banana . This throws if index is not less than the query size . fun queryParameterValue(index: Int ): String ? queryParameterValues Returns all values for the query parameter name ordered by their appearance in this URL. For example this returns [\"banana\"] for queryParameterValue(\"b\") on http://host/?a=apple&b=banana . fun queryParameterValues(name: String ): List < String ?> redact Returns a string with containing this URL with its username, password, query, and fragment stripped, and its path replaced with /... . For example, redacting http://username:password@example.com/path returns http://example.com/... . fun redact(): String resolve Returns the URL that would be retrieved by following link from this URL, or null if the resulting URL is not well-formed. fun resolve(link: String ): HttpUrl ? topPrivateDomain Returns the domain name of this URL\u2019s host that is one level beneath the public suffix by consulting the public suffix list . Returns null if this URL\u2019s host is an IP address or is considered a public suffix by the public suffix list. fun topPrivateDomain(): String ? toString fun toString(): String toUri Returns this URL as a java.net.URI . Because URI is more strict than this class, the returned URI may be semantically different from this URL: fun toUri(): URI toUrl Returns this URL as a java.net.URL . fun toUrl(): URL","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-http-url/#companion-object-functions","text":"Name Summary defaultPort Returns 80 if scheme.equals(\"http\") , 443 if scheme.equals(\"https\") and -1 otherwise. fun defaultPort(scheme: String ): Int toHttpUrl Returns a new HttpUrl representing this. fun String .toHttpUrl(): HttpUrl toHttpUrlOrNull Returns a new HttpUrl representing url if it is a well-formed HTTP or HTTPS URL, or null if it isn\u2019t. fun String .toHttpUrlOrNull(): HttpUrl ? Returns an HttpUrl for this if its protocol is http or https , or null if it has any other protocol. fun URL .toHttpUrlOrNull(): HttpUrl ?``fun URI .toHttpUrlOrNull(): HttpUrl ?","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-http-url/default-port/","text":"okhttp / okhttp3 / HttpUrl / defaultPort defaultPort \u00b6 @JvmStatic fun defaultPort(scheme: String ): Int Returns 80 if scheme.equals(\"http\") , 443 if scheme.equals(\"https\") and -1 otherwise.","title":"defaultPort - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/default-port/#defaultport","text":"@JvmStatic fun defaultPort(scheme: String ): Int Returns 80 if scheme.equals(\"http\") , 443 if scheme.equals(\"https\") and -1 otherwise.","title":"defaultPort"},{"location":"4.x/okhttp/okhttp3/-http-url/encoded-fragment/","text":"okhttp / okhttp3 / HttpUrl / encodedFragment encodedFragment \u00b6 val encodedFragment: String ? This URL\u2019s encoded fragment, like \"abc\" for http://host/#abc . This is null if the URL has no fragment. URL encodedFragment() http://host/ null http://host/# \"\" http://host/#abc \"abc\" http://host/#abc|def \"abc|def\"","title":"encodedFragment - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/encoded-fragment/#encodedfragment","text":"val encodedFragment: String ? This URL\u2019s encoded fragment, like \"abc\" for http://host/#abc . This is null if the URL has no fragment. URL encodedFragment() http://host/ null http://host/# \"\" http://host/#abc \"abc\" http://host/#abc|def \"abc|def\"","title":"encodedFragment"},{"location":"4.x/okhttp/okhttp3/-http-url/encoded-password/","text":"okhttp / okhttp3 / HttpUrl / encodedPassword encodedPassword \u00b6 val encodedPassword: String The password, or an empty string if none is set. URL encodedPassword() http://host/ \"\" http://username@host/ \"\" http://username:password@host/ \"password\" http://a%20b:c%20d@host/ \"c%20d\"","title":"encodedPassword - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/encoded-password/#encodedpassword","text":"val encodedPassword: String The password, or an empty string if none is set. URL encodedPassword() http://host/ \"\" http://username@host/ \"\" http://username:password@host/ \"password\" http://a%20b:c%20d@host/ \"c%20d\"","title":"encodedPassword"},{"location":"4.x/okhttp/okhttp3/-http-url/encoded-path-segments/","text":"okhttp / okhttp3 / HttpUrl / encodedPathSegments encodedPathSegments \u00b6 val encodedPathSegments: List < String > A list of encoded path segments like [\"a\", \"b\", \"c\"] for the URL http://host/a/b/c . This list is never empty though it may contain a single empty string. URL encodedPathSegments() http://host/ [\"\"] http://host/a/b/c [\"a\", \"b\", \"c\"] http://host/a/b%20c/d [\"a\", \"b%20c\", \"d\"]","title":"encodedPathSegments - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/encoded-path-segments/#encodedpathsegments","text":"val encodedPathSegments: List < String > A list of encoded path segments like [\"a\", \"b\", \"c\"] for the URL http://host/a/b/c . This list is never empty though it may contain a single empty string. URL encodedPathSegments() http://host/ [\"\"] http://host/a/b/c [\"a\", \"b\", \"c\"] http://host/a/b%20c/d [\"a\", \"b%20c\", \"d\"]","title":"encodedPathSegments"},{"location":"4.x/okhttp/okhttp3/-http-url/encoded-path/","text":"okhttp / okhttp3 / HttpUrl / encodedPath encodedPath \u00b6 val encodedPath: String The entire path of this URL encoded for use in HTTP resource resolution. The returned path will start with \"/\" . URL encodedPath() http://host/ \"/\" http://host/a/b/c \"/a/b/c\" http://host/a/b%20c/d \"/a/b%20c/d\"","title":"encodedPath - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/encoded-path/#encodedpath","text":"val encodedPath: String The entire path of this URL encoded for use in HTTP resource resolution. The returned path will start with \"/\" . URL encodedPath() http://host/ \"/\" http://host/a/b/c \"/a/b/c\" http://host/a/b%20c/d \"/a/b%20c/d\"","title":"encodedPath"},{"location":"4.x/okhttp/okhttp3/-http-url/encoded-query/","text":"okhttp / okhttp3 / HttpUrl / encodedQuery encodedQuery \u00b6 val encodedQuery: String ? The query of this URL, encoded for use in HTTP resource resolution. This string may be null (for URLs with no query), empty (for URLs with an empty query) or non-empty (all other URLs). URL encodedQuery() http://host/ null http://host/? \"\" http://host/?a=apple&k=key+lime \"a=apple&k=key+lime\" http://host/?a=apple&a=apricot \"a=apple&a=apricot\" http://host/?a=apple&b \"a=apple&b\"","title":"encodedQuery - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/encoded-query/#encodedquery","text":"val encodedQuery: String ? The query of this URL, encoded for use in HTTP resource resolution. This string may be null (for URLs with no query), empty (for URLs with an empty query) or non-empty (all other URLs). URL encodedQuery() http://host/ null http://host/? \"\" http://host/?a=apple&k=key+lime \"a=apple&k=key+lime\" http://host/?a=apple&a=apricot \"a=apple&a=apricot\" http://host/?a=apple&b \"a=apple&b\"","title":"encodedQuery"},{"location":"4.x/okhttp/okhttp3/-http-url/encoded-username/","text":"okhttp / okhttp3 / HttpUrl / encodedUsername encodedUsername \u00b6 val encodedUsername: String The username, or an empty string if none is set. URL encodedUsername() http://host/ \"\" http://username@host/ \"username\" http://username:password@host/ \"username\" http://a%20b:c%20d@host/ \"a%20b\"","title":"encodedUsername - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/encoded-username/#encodedusername","text":"val encodedUsername: String The username, or an empty string if none is set. URL encodedUsername() http://host/ \"\" http://username@host/ \"username\" http://username:password@host/ \"username\" http://a%20b:c%20d@host/ \"a%20b\"","title":"encodedUsername"},{"location":"4.x/okhttp/okhttp3/-http-url/equals/","text":"okhttp / okhttp3 / HttpUrl / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"4.x/okhttp/okhttp3/-http-url/fragment/","text":"okhttp / okhttp3 / HttpUrl / fragment fragment \u00b6 val fragment: String ? This URL\u2019s fragment, like \"abc\" for http://host/#abc . This is null if the URL has no fragment. URL fragment() http://host/ null http://host/# \"\" http://host/#abc \"abc\" http://host/#abc|def \"abc|def\"","title":"fragment - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/fragment/#fragment","text":"val fragment: String ? This URL\u2019s fragment, like \"abc\" for http://host/#abc . This is null if the URL has no fragment. URL fragment() http://host/ null http://host/# \"\" http://host/#abc \"abc\" http://host/#abc|def \"abc|def\"","title":"fragment"},{"location":"4.x/okhttp/okhttp3/-http-url/hash-code/","text":"okhttp / okhttp3 / HttpUrl / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"4.x/okhttp/okhttp3/-http-url/host/","text":"okhttp / okhttp3 / HttpUrl / host host \u00b6 val host: String The host address suitable for use with InetAddress.getAllByName . May be: A regular host name, like android.com . An IPv4 address, like 127.0.0.1 . An IPv6 address, like ::1 . Note that there are no square braces. An encoded IDN, like xn--n3h.net . URL host() http://android.com/ \"android.com\" http://127.0.0.1/ \"127.0.0.1\" http://[::1]/ \"::1\" http://xn--n3h.net/ \"xn--n3h.net\"","title":"host - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/host/#host","text":"val host: String The host address suitable for use with InetAddress.getAllByName . May be: A regular host name, like android.com . An IPv4 address, like 127.0.0.1 . An IPv6 address, like ::1 . Note that there are no square braces. An encoded IDN, like xn--n3h.net . URL host() http://android.com/ \"android.com\" http://127.0.0.1/ \"127.0.0.1\" http://[::1]/ \"::1\" http://xn--n3h.net/ \"xn--n3h.net\"","title":"host"},{"location":"4.x/okhttp/okhttp3/-http-url/is-https/","text":"okhttp / okhttp3 / HttpUrl / isHttps isHttps \u00b6 val isHttps: Boolean","title":"isHttps - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/is-https/#ishttps","text":"val isHttps: Boolean","title":"isHttps"},{"location":"4.x/okhttp/okhttp3/-http-url/new-builder/","text":"okhttp / okhttp3 / HttpUrl / newBuilder newBuilder \u00b6 fun newBuilder(): Builder Returns a builder based on this URL. fun newBuilder(link: String ): Builder? Returns a builder for the URL that would be retrieved by following link from this URL, or null if the resulting URL is not well-formed.","title":"newBuilder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/new-builder/#newbuilder","text":"fun newBuilder(): Builder Returns a builder based on this URL. fun newBuilder(link: String ): Builder? Returns a builder for the URL that would be retrieved by following link from this URL, or null if the resulting URL is not well-formed.","title":"newBuilder"},{"location":"4.x/okhttp/okhttp3/-http-url/password/","text":"okhttp / okhttp3 / HttpUrl / password password \u00b6 val password: String Returns the decoded password, or an empty string if none is present. URL password() http://host/ \"\" http://username@host/ \"\" http://username:password@host/ \"password\" http://a%20b:c%20d@host/ \"c d\"","title":"password - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/password/#password","text":"val password: String Returns the decoded password, or an empty string if none is present. URL password() http://host/ \"\" http://username@host/ \"\" http://username:password@host/ \"password\" http://a%20b:c%20d@host/ \"c d\"","title":"password"},{"location":"4.x/okhttp/okhttp3/-http-url/path-segments/","text":"okhttp / okhttp3 / HttpUrl / pathSegments pathSegments \u00b6 val pathSegments: List < String > A list of path segments like [\"a\", \"b\", \"c\"] for the URL http://host/a/b/c . This list is never empty though it may contain a single empty string. URL pathSegments() http://host/ [\"\"] http://host/a/b/c\" [\"a\", \"b\", \"c\"] http://host/a/b%20c/d\" [\"a\", \"b c\", \"d\"]","title":"pathSegments - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/path-segments/#pathsegments","text":"val pathSegments: List < String > A list of path segments like [\"a\", \"b\", \"c\"] for the URL http://host/a/b/c . This list is never empty though it may contain a single empty string. URL pathSegments() http://host/ [\"\"] http://host/a/b/c\" [\"a\", \"b\", \"c\"] http://host/a/b%20c/d\" [\"a\", \"b c\", \"d\"]","title":"pathSegments"},{"location":"4.x/okhttp/okhttp3/-http-url/path-size/","text":"okhttp / okhttp3 / HttpUrl / pathSize pathSize \u00b6 val pathSize: Int The number of segments in this URL\u2019s path. This is also the number of slashes in this URL\u2019s path, like 3 in http://host/a/b/c . This is always at least 1. URL pathSize() http://host/ 1 http://host/a/b/c 3 http://host/a/b/c/ 4","title":"pathSize - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/path-size/#pathsize","text":"val pathSize: Int The number of segments in this URL\u2019s path. This is also the number of slashes in this URL\u2019s path, like 3 in http://host/a/b/c . This is always at least 1. URL pathSize() http://host/ 1 http://host/a/b/c 3 http://host/a/b/c/ 4","title":"pathSize"},{"location":"4.x/okhttp/okhttp3/-http-url/port/","text":"okhttp / okhttp3 / HttpUrl / port port \u00b6 val port: Int The explicitly-specified port if one was provided, or the default port for this URL\u2019s scheme. For example, this returns 8443 for https://square.com:8443/ and 443 for https://square.com/ . The result is in [1..65535] . URL port() http://host/ 80 http://host:8000/ 8000 https://host/ 443","title":"port - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/port/#port","text":"val port: Int The explicitly-specified port if one was provided, or the default port for this URL\u2019s scheme. For example, this returns 8443 for https://square.com:8443/ and 443 for https://square.com/ . The result is in [1..65535] . URL port() http://host/ 80 http://host:8000/ 8000 https://host/ 443","title":"port"},{"location":"4.x/okhttp/okhttp3/-http-url/query-parameter-name/","text":"okhttp / okhttp3 / HttpUrl / queryParameterName queryParameterName \u00b6 fun queryParameterName(index: Int ): String Returns the name of the query parameter at index . For example this returns \"a\" for queryParameterName(0) on http://host/?a=apple&b=banana . This throws if index is not less than the query size . URL queryParameterName(0) queryParameterName(1) http://host/ exception exception http://host/? \"\" exception http://host/?a=apple&k=key+lime \"a\" \"k\" http://host/?a=apple&a=apricot \"a\" \"a\" http://host/?a=apple&b \"a\" \"b\"","title":"queryParameterName - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/query-parameter-name/#queryparametername","text":"fun queryParameterName(index: Int ): String Returns the name of the query parameter at index . For example this returns \"a\" for queryParameterName(0) on http://host/?a=apple&b=banana . This throws if index is not less than the query size . URL queryParameterName(0) queryParameterName(1) http://host/ exception exception http://host/? \"\" exception http://host/?a=apple&k=key+lime \"a\" \"k\" http://host/?a=apple&a=apricot \"a\" \"a\" http://host/?a=apple&b \"a\" \"b\"","title":"queryParameterName"},{"location":"4.x/okhttp/okhttp3/-http-url/query-parameter-names/","text":"okhttp / okhttp3 / HttpUrl / queryParameterNames queryParameterNames \u00b6 val queryParameterNames: Set < String > The distinct query parameter names in this URL, like [\"a\", \"b\"] for http://host/?a=apple&b=banana . If this URL has no query this is the empty set. URL queryParameterNames() http://host/ [] http://host/? [\"\"] http://host/?a=apple&k=key+lime [\"a\", \"k\"] http://host/?a=apple&a=apricot [\"a\"] http://host/?a=apple&b [\"a\", \"b\"]","title":"queryParameterNames - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/query-parameter-names/#queryparameternames","text":"val queryParameterNames: Set < String > The distinct query parameter names in this URL, like [\"a\", \"b\"] for http://host/?a=apple&b=banana . If this URL has no query this is the empty set. URL queryParameterNames() http://host/ [] http://host/? [\"\"] http://host/?a=apple&k=key+lime [\"a\", \"k\"] http://host/?a=apple&a=apricot [\"a\"] http://host/?a=apple&b [\"a\", \"b\"]","title":"queryParameterNames"},{"location":"4.x/okhttp/okhttp3/-http-url/query-parameter-value/","text":"okhttp / okhttp3 / HttpUrl / queryParameterValue queryParameterValue \u00b6 fun queryParameterValue(index: Int ): String ? Returns the value of the query parameter at index . For example this returns \"apple\" for queryParameterName(0) on http://host/?a=apple&b=banana . This throws if index is not less than the query size . URL queryParameterValue(0) queryParameterValue(1) http://host/ exception exception http://host/? null exception http://host/?a=apple&k=key+lime \"apple\" \"key lime\" http://host/?a=apple&a=apricot \"apple\" \"apricot\" http://host/?a=apple&b \"apple\" null","title":"queryParameterValue - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/query-parameter-value/#queryparametervalue","text":"fun queryParameterValue(index: Int ): String ? Returns the value of the query parameter at index . For example this returns \"apple\" for queryParameterName(0) on http://host/?a=apple&b=banana . This throws if index is not less than the query size . URL queryParameterValue(0) queryParameterValue(1) http://host/ exception exception http://host/? null exception http://host/?a=apple&k=key+lime \"apple\" \"key lime\" http://host/?a=apple&a=apricot \"apple\" \"apricot\" http://host/?a=apple&b \"apple\" null","title":"queryParameterValue"},{"location":"4.x/okhttp/okhttp3/-http-url/query-parameter-values/","text":"okhttp / okhttp3 / HttpUrl / queryParameterValues queryParameterValues \u00b6 fun queryParameterValues(name: String ): List < String ?> Returns all values for the query parameter name ordered by their appearance in this URL. For example this returns [\"banana\"] for queryParameterValue(\"b\") on http://host/?a=apple&b=banana . URL queryParameterValues(\"a\") queryParameterValues(\"b\") http://host/ [] [] http://host/? [] [] http://host/?a=apple&k=key+lime [\"apple\"] [] http://host/?a=apple&a=apricot [\"apple\", \"apricot\"] [] http://host/?a=apple&b [\"apple\"] [null]","title":"queryParameterValues - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/query-parameter-values/#queryparametervalues","text":"fun queryParameterValues(name: String ): List < String ?> Returns all values for the query parameter name ordered by their appearance in this URL. For example this returns [\"banana\"] for queryParameterValue(\"b\") on http://host/?a=apple&b=banana . URL queryParameterValues(\"a\") queryParameterValues(\"b\") http://host/ [] [] http://host/? [] [] http://host/?a=apple&k=key+lime [\"apple\"] [] http://host/?a=apple&a=apricot [\"apple\", \"apricot\"] [] http://host/?a=apple&b [\"apple\"] [null]","title":"queryParameterValues"},{"location":"4.x/okhttp/okhttp3/-http-url/query-parameter/","text":"okhttp / okhttp3 / HttpUrl / queryParameter queryParameter \u00b6 fun queryParameter(name: String ): String ? The first query parameter named name decoded using UTF-8, or null if there is no such query parameter. URL queryParameter(\"a\") http://host/ null http://host/? null http://host/?a=apple&k=key+lime \"apple\" http://host/?a=apple&a=apricot \"apple\" http://host/?a=apple&b \"apple\"","title":"queryParameter - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/query-parameter/#queryparameter","text":"fun queryParameter(name: String ): String ? The first query parameter named name decoded using UTF-8, or null if there is no such query parameter. URL queryParameter(\"a\") http://host/ null http://host/? null http://host/?a=apple&k=key+lime \"apple\" http://host/?a=apple&a=apricot \"apple\" http://host/?a=apple&b \"apple\"","title":"queryParameter"},{"location":"4.x/okhttp/okhttp3/-http-url/query-size/","text":"okhttp / okhttp3 / HttpUrl / querySize querySize \u00b6 val querySize: Int The number of query parameters in this URL, like 2 for http://host/?a=apple&b=banana . If this URL has no query this is 0. Otherwise it is one more than the number of \"&\" separators in the query. URL querySize() http://host/ 0 http://host/? 1 http://host/?a=apple&k=key+lime 2 http://host/?a=apple&a=apricot 2 http://host/?a=apple&b 2","title":"querySize - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/query-size/#querysize","text":"val querySize: Int The number of query parameters in this URL, like 2 for http://host/?a=apple&b=banana . If this URL has no query this is 0. Otherwise it is one more than the number of \"&\" separators in the query. URL querySize() http://host/ 0 http://host/? 1 http://host/?a=apple&k=key+lime 2 http://host/?a=apple&a=apricot 2 http://host/?a=apple&b 2","title":"querySize"},{"location":"4.x/okhttp/okhttp3/-http-url/query/","text":"okhttp / okhttp3 / HttpUrl / query query \u00b6 val query: String ? This URL\u2019s query, like \"abc\" for http://host/?abc . Most callers should prefer queryParameterName and queryParameterValue because these methods offer direct access to individual query parameters. URL query() http://host/ null http://host/? \"\" http://host/?a=apple&k=key+lime \"a=apple&k=key lime\" http://host/?a=apple&a=apricot \"a=apple&a=apricot\" http://host/?a=apple&b \"a=apple&b\"","title":"query - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/query/#query","text":"val query: String ? This URL\u2019s query, like \"abc\" for http://host/?abc . Most callers should prefer queryParameterName and queryParameterValue because these methods offer direct access to individual query parameters. URL query() http://host/ null http://host/? \"\" http://host/?a=apple&k=key+lime \"a=apple&k=key lime\" http://host/?a=apple&a=apricot \"a=apple&a=apricot\" http://host/?a=apple&b \"a=apple&b\"","title":"query"},{"location":"4.x/okhttp/okhttp3/-http-url/redact/","text":"okhttp / okhttp3 / HttpUrl / redact redact \u00b6 fun redact(): String Returns a string with containing this URL with its username, password, query, and fragment stripped, and its path replaced with /... . For example, redacting http://username:password@example.com/path returns http://example.com/... .","title":"redact - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/redact/#redact","text":"fun redact(): String Returns a string with containing this URL with its username, password, query, and fragment stripped, and its path replaced with /... . For example, redacting http://username:password@example.com/path returns http://example.com/... .","title":"redact"},{"location":"4.x/okhttp/okhttp3/-http-url/resolve/","text":"okhttp / okhttp3 / HttpUrl / resolve resolve \u00b6 fun resolve(link: String ): HttpUrl ? Returns the URL that would be retrieved by following link from this URL, or null if the resulting URL is not well-formed.","title":"resolve - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/resolve/#resolve","text":"fun resolve(link: String ): HttpUrl ? Returns the URL that would be retrieved by following link from this URL, or null if the resulting URL is not well-formed.","title":"resolve"},{"location":"4.x/okhttp/okhttp3/-http-url/scheme/","text":"okhttp / okhttp3 / HttpUrl / scheme scheme \u00b6 val scheme: String Either \u201chttp\u201d or \u201chttps\u201d.","title":"scheme - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/scheme/#scheme","text":"val scheme: String Either \u201chttp\u201d or \u201chttps\u201d.","title":"scheme"},{"location":"4.x/okhttp/okhttp3/-http-url/to-http-url-or-null/","text":"okhttp / okhttp3 / HttpUrl / toHttpUrlOrNull toHttpUrlOrNull \u00b6 @JvmStatic @JvmName(\"parse\") fun String .toHttpUrlOrNull(): HttpUrl ? Returns a new HttpUrl representing url if it is a well-formed HTTP or HTTPS URL, or null if it isn\u2019t. @JvmStatic @JvmName(\"get\") fun URL .toHttpUrlOrNull(): HttpUrl ? Returns an HttpUrl for this if its protocol is http or https , or null if it has any other protocol. @JvmStatic @JvmName(\"get\") fun URI .toHttpUrlOrNull(): HttpUrl ?","title":"toHttpUrlOrNull - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/to-http-url-or-null/#tohttpurlornull","text":"@JvmStatic @JvmName(\"parse\") fun String .toHttpUrlOrNull(): HttpUrl ? Returns a new HttpUrl representing url if it is a well-formed HTTP or HTTPS URL, or null if it isn\u2019t. @JvmStatic @JvmName(\"get\") fun URL .toHttpUrlOrNull(): HttpUrl ? Returns an HttpUrl for this if its protocol is http or https , or null if it has any other protocol. @JvmStatic @JvmName(\"get\") fun URI .toHttpUrlOrNull(): HttpUrl ?","title":"toHttpUrlOrNull"},{"location":"4.x/okhttp/okhttp3/-http-url/to-http-url/","text":"okhttp / okhttp3 / HttpUrl / toHttpUrl toHttpUrl \u00b6 @JvmStatic @JvmName(\"get\") fun String .toHttpUrl(): HttpUrl Returns a new HttpUrl representing this. Exceptions \u00b6 IllegalArgumentException - If this is not a well-formed HTTP or HTTPS URL.","title":"toHttpUrl - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/to-http-url/#tohttpurl","text":"@JvmStatic @JvmName(\"get\") fun String .toHttpUrl(): HttpUrl Returns a new HttpUrl representing this.","title":"toHttpUrl"},{"location":"4.x/okhttp/okhttp3/-http-url/to-http-url/#exceptions","text":"IllegalArgumentException - If this is not a well-formed HTTP or HTTPS URL.","title":"Exceptions"},{"location":"4.x/okhttp/okhttp3/-http-url/to-string/","text":"okhttp / okhttp3 / HttpUrl / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/okhttp/okhttp3/-http-url/to-uri/","text":"okhttp / okhttp3 / HttpUrl / toUri toUri \u00b6 @JvmName(\"uri\") fun toUri(): URI Returns this URL as a java.net.URI . Because URI is more strict than this class, the returned URI may be semantically different from this URL: Characters forbidden by URI like [ and | will be escaped. Invalid percent-encoded sequences like %xx will be encoded like %25xx . Whitespace and control characters in the fragment will be stripped. These differences may have a significant consequence when the URI is interpreted by a web server. For this reason the URI class and this method should be avoided.","title":"toUri - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/to-uri/#touri","text":"@JvmName(\"uri\") fun toUri(): URI Returns this URL as a java.net.URI . Because URI is more strict than this class, the returned URI may be semantically different from this URL: Characters forbidden by URI like [ and | will be escaped. Invalid percent-encoded sequences like %xx will be encoded like %25xx . Whitespace and control characters in the fragment will be stripped. These differences may have a significant consequence when the URI is interpreted by a web server. For this reason the URI class and this method should be avoided.","title":"toUri"},{"location":"4.x/okhttp/okhttp3/-http-url/to-url/","text":"okhttp / okhttp3 / HttpUrl / toUrl toUrl \u00b6 @JvmName(\"url\") fun toUrl(): URL Returns this URL as a java.net.URL .","title":"toUrl - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/to-url/#tourl","text":"@JvmName(\"url\") fun toUrl(): URL Returns this URL as a java.net.URL .","title":"toUrl"},{"location":"4.x/okhttp/okhttp3/-http-url/top-private-domain/","text":"okhttp / okhttp3 / HttpUrl / topPrivateDomain topPrivateDomain \u00b6 fun topPrivateDomain(): String ? Returns the domain name of this URL\u2019s host that is one level beneath the public suffix by consulting the public suffix list . Returns null if this URL\u2019s host is an IP address or is considered a public suffix by the public suffix list. In general this method should not be used to test whether a domain is valid or routable. Instead, DNS is the recommended source for that information. URL topPrivateDomain() http://google.com \"google.com\" http://adwords.google.co.uk \"google.co.uk\" http://square null http://co.uk null http://localhost null http://127.0.0.1 null","title":"topPrivateDomain - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/top-private-domain/#topprivatedomain","text":"fun topPrivateDomain(): String ? Returns the domain name of this URL\u2019s host that is one level beneath the public suffix by consulting the public suffix list . Returns null if this URL\u2019s host is an IP address or is considered a public suffix by the public suffix list. In general this method should not be used to test whether a domain is valid or routable. Instead, DNS is the recommended source for that information. URL topPrivateDomain() http://google.com \"google.com\" http://adwords.google.co.uk \"google.co.uk\" http://square null http://co.uk null http://localhost null http://127.0.0.1 null","title":"topPrivateDomain"},{"location":"4.x/okhttp/okhttp3/-http-url/username/","text":"okhttp / okhttp3 / HttpUrl / username username \u00b6 val username: String The decoded username, or an empty string if none is present. URL username() http://host/ \"\" http://username@host/ \"username\" http://username:password@host/ \"username\" http://a%20b:c%20d@host/ \"a b\"","title":"username - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/username/#username","text":"val username: String The decoded username, or an empty string if none is present. URL username() http://host/ \"\" http://username@host/ \"username\" http://username:password@host/ \"username\" http://a%20b:c%20d@host/ \"a b\"","title":"username"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/","text":"okhttp / okhttp3 / HttpUrl / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder() Functions \u00b6 Name Summary addEncodedPathSegment fun addEncodedPathSegment(encodedPathSegment: String ): Builder addEncodedPathSegments Adds a set of encoded path segments separated by a slash (either \\ or / ). If encodedPathSegments starts with a slash, the resulting URL will have empty path segment. fun addEncodedPathSegments(encodedPathSegments: String ): Builder addEncodedQueryParameter Adds the pre-encoded query parameter to this URL\u2019s query string. fun addEncodedQueryParameter(encodedName: String , encodedValue: String ?): Builder addPathSegment fun addPathSegment(pathSegment: String ): Builder addPathSegments Adds a set of path segments separated by a slash (either \\ or / ). If pathSegments starts with a slash, the resulting URL will have empty path segment. fun addPathSegments(pathSegments: String ): Builder addQueryParameter Encodes the query parameter using UTF-8 and adds it to this URL\u2019s query string. fun addQueryParameter(name: String , value: String ?): Builder build fun build(): HttpUrl encodedFragment fun encodedFragment(encodedFragment: String ?): Builder encodedPassword fun encodedPassword(encodedPassword: String ): Builder encodedPath fun encodedPath(encodedPath: String ): Builder encodedQuery fun encodedQuery(encodedQuery: String ?): Builder encodedUsername fun encodedUsername(encodedUsername: String ): Builder fragment fun fragment(fragment: String ?): Builder host fun host(host: String ): Builder password fun password(password: String ): Builder port fun port(port: Int ): Builder query fun query(query: String ?): Builder removeAllEncodedQueryParameters fun removeAllEncodedQueryParameters(encodedName: String ): Builder removeAllQueryParameters fun removeAllQueryParameters(name: String ): Builder removePathSegment fun removePathSegment(index: Int ): Builder scheme fun scheme(scheme: String ): Builder setEncodedPathSegment fun setEncodedPathSegment(index: Int , encodedPathSegment: String ): Builder setEncodedQueryParameter fun setEncodedQueryParameter(encodedName: String , encodedValue: String ?): Builder setPathSegment fun setPathSegment(index: Int , pathSegment: String ): Builder setQueryParameter fun setQueryParameter(name: String , value: String ?): Builder toString fun toString(): String username fun username(username: String ): Builder","title":"Builder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/#functions","text":"Name Summary addEncodedPathSegment fun addEncodedPathSegment(encodedPathSegment: String ): Builder addEncodedPathSegments Adds a set of encoded path segments separated by a slash (either \\ or / ). If encodedPathSegments starts with a slash, the resulting URL will have empty path segment. fun addEncodedPathSegments(encodedPathSegments: String ): Builder addEncodedQueryParameter Adds the pre-encoded query parameter to this URL\u2019s query string. fun addEncodedQueryParameter(encodedName: String , encodedValue: String ?): Builder addPathSegment fun addPathSegment(pathSegment: String ): Builder addPathSegments Adds a set of path segments separated by a slash (either \\ or / ). If pathSegments starts with a slash, the resulting URL will have empty path segment. fun addPathSegments(pathSegments: String ): Builder addQueryParameter Encodes the query parameter using UTF-8 and adds it to this URL\u2019s query string. fun addQueryParameter(name: String , value: String ?): Builder build fun build(): HttpUrl encodedFragment fun encodedFragment(encodedFragment: String ?): Builder encodedPassword fun encodedPassword(encodedPassword: String ): Builder encodedPath fun encodedPath(encodedPath: String ): Builder encodedQuery fun encodedQuery(encodedQuery: String ?): Builder encodedUsername fun encodedUsername(encodedUsername: String ): Builder fragment fun fragment(fragment: String ?): Builder host fun host(host: String ): Builder password fun password(password: String ): Builder port fun port(port: Int ): Builder query fun query(query: String ?): Builder removeAllEncodedQueryParameters fun removeAllEncodedQueryParameters(encodedName: String ): Builder removeAllQueryParameters fun removeAllQueryParameters(name: String ): Builder removePathSegment fun removePathSegment(index: Int ): Builder scheme fun scheme(scheme: String ): Builder setEncodedPathSegment fun setEncodedPathSegment(index: Int , encodedPathSegment: String ): Builder setEncodedQueryParameter fun setEncodedQueryParameter(encodedName: String , encodedValue: String ?): Builder setPathSegment fun setPathSegment(index: Int , pathSegment: String ): Builder setQueryParameter fun setQueryParameter(name: String , value: String ?): Builder toString fun toString(): String username fun username(username: String ): Builder","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/-init-/","text":"okhttp / okhttp3 / HttpUrl / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/add-encoded-path-segment/","text":"okhttp / okhttp3 / HttpUrl / Builder / addEncodedPathSegment addEncodedPathSegment \u00b6 fun addEncodedPathSegment(encodedPathSegment: String ): Builder","title":"addEncodedPathSegment - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/add-encoded-path-segment/#addencodedpathsegment","text":"fun addEncodedPathSegment(encodedPathSegment: String ): Builder","title":"addEncodedPathSegment"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/add-encoded-path-segments/","text":"okhttp / okhttp3 / HttpUrl / Builder / addEncodedPathSegments addEncodedPathSegments \u00b6 fun addEncodedPathSegments(encodedPathSegments: String ): Builder Adds a set of encoded path segments separated by a slash (either \\ or / ). If encodedPathSegments starts with a slash, the resulting URL will have empty path segment.","title":"addEncodedPathSegments - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/add-encoded-path-segments/#addencodedpathsegments","text":"fun addEncodedPathSegments(encodedPathSegments: String ): Builder Adds a set of encoded path segments separated by a slash (either \\ or / ). If encodedPathSegments starts with a slash, the resulting URL will have empty path segment.","title":"addEncodedPathSegments"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/add-encoded-query-parameter/","text":"okhttp / okhttp3 / HttpUrl / Builder / addEncodedQueryParameter addEncodedQueryParameter \u00b6 fun addEncodedQueryParameter(encodedName: String , encodedValue: String ?): Builder Adds the pre-encoded query parameter to this URL\u2019s query string.","title":"addEncodedQueryParameter - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/add-encoded-query-parameter/#addencodedqueryparameter","text":"fun addEncodedQueryParameter(encodedName: String , encodedValue: String ?): Builder Adds the pre-encoded query parameter to this URL\u2019s query string.","title":"addEncodedQueryParameter"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/add-path-segment/","text":"okhttp / okhttp3 / HttpUrl / Builder / addPathSegment addPathSegment \u00b6 fun addPathSegment(pathSegment: String ): Builder","title":"addPathSegment - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/add-path-segment/#addpathsegment","text":"fun addPathSegment(pathSegment: String ): Builder","title":"addPathSegment"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/add-path-segments/","text":"okhttp / okhttp3 / HttpUrl / Builder / addPathSegments addPathSegments \u00b6 fun addPathSegments(pathSegments: String ): Builder Adds a set of path segments separated by a slash (either \\ or / ). If pathSegments starts with a slash, the resulting URL will have empty path segment.","title":"addPathSegments - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/add-path-segments/#addpathsegments","text":"fun addPathSegments(pathSegments: String ): Builder Adds a set of path segments separated by a slash (either \\ or / ). If pathSegments starts with a slash, the resulting URL will have empty path segment.","title":"addPathSegments"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/add-query-parameter/","text":"okhttp / okhttp3 / HttpUrl / Builder / addQueryParameter addQueryParameter \u00b6 fun addQueryParameter(name: String , value: String ?): Builder Encodes the query parameter using UTF-8 and adds it to this URL\u2019s query string.","title":"addQueryParameter - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/add-query-parameter/#addqueryparameter","text":"fun addQueryParameter(name: String , value: String ?): Builder Encodes the query parameter using UTF-8 and adds it to this URL\u2019s query string.","title":"addQueryParameter"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/build/","text":"okhttp / okhttp3 / HttpUrl / Builder / build build \u00b6 fun build(): HttpUrl","title":"build - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/build/#build","text":"fun build(): HttpUrl","title":"build"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/encoded-fragment/","text":"okhttp / okhttp3 / HttpUrl / Builder / encodedFragment encodedFragment \u00b6 fun encodedFragment(encodedFragment: String ?): Builder","title":"encodedFragment - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/encoded-fragment/#encodedfragment","text":"fun encodedFragment(encodedFragment: String ?): Builder","title":"encodedFragment"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/encoded-password/","text":"okhttp / okhttp3 / HttpUrl / Builder / encodedPassword encodedPassword \u00b6 fun encodedPassword(encodedPassword: String ): Builder","title":"encodedPassword - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/encoded-password/#encodedpassword","text":"fun encodedPassword(encodedPassword: String ): Builder","title":"encodedPassword"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/encoded-path/","text":"okhttp / okhttp3 / HttpUrl / Builder / encodedPath encodedPath \u00b6 fun encodedPath(encodedPath: String ): Builder","title":"encodedPath - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/encoded-path/#encodedpath","text":"fun encodedPath(encodedPath: String ): Builder","title":"encodedPath"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/encoded-query/","text":"okhttp / okhttp3 / HttpUrl / Builder / encodedQuery encodedQuery \u00b6 fun encodedQuery(encodedQuery: String ?): Builder","title":"encodedQuery - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/encoded-query/#encodedquery","text":"fun encodedQuery(encodedQuery: String ?): Builder","title":"encodedQuery"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/encoded-username/","text":"okhttp / okhttp3 / HttpUrl / Builder / encodedUsername encodedUsername \u00b6 fun encodedUsername(encodedUsername: String ): Builder","title":"encodedUsername - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/encoded-username/#encodedusername","text":"fun encodedUsername(encodedUsername: String ): Builder","title":"encodedUsername"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/fragment/","text":"okhttp / okhttp3 / HttpUrl / Builder / fragment fragment \u00b6 fun fragment(fragment: String ?): Builder","title":"fragment - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/fragment/#fragment","text":"fun fragment(fragment: String ?): Builder","title":"fragment"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/host/","text":"okhttp / okhttp3 / HttpUrl / Builder / host host \u00b6 fun host(host: String ): Builder Parameters \u00b6 host - either a regular hostname, International Domain Name, IPv4 address, or IPv6 address.","title":"host - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/host/#host","text":"fun host(host: String ): Builder","title":"host"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/host/#parameters","text":"host - either a regular hostname, International Domain Name, IPv4 address, or IPv6 address.","title":"Parameters"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/password/","text":"okhttp / okhttp3 / HttpUrl / Builder / password password \u00b6 fun password(password: String ): Builder","title":"password - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/password/#password","text":"fun password(password: String ): Builder","title":"password"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/port/","text":"okhttp / okhttp3 / HttpUrl / Builder / port port \u00b6 fun port(port: Int ): Builder","title":"port - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/port/#port","text":"fun port(port: Int ): Builder","title":"port"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/query/","text":"okhttp / okhttp3 / HttpUrl / Builder / query query \u00b6 fun query(query: String ?): Builder","title":"query - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/query/#query","text":"fun query(query: String ?): Builder","title":"query"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/remove-all-encoded-query-parameters/","text":"okhttp / okhttp3 / HttpUrl / Builder / removeAllEncodedQueryParameters removeAllEncodedQueryParameters \u00b6 fun removeAllEncodedQueryParameters(encodedName: String ): Builder","title":"removeAllEncodedQueryParameters - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/remove-all-encoded-query-parameters/#removeallencodedqueryparameters","text":"fun removeAllEncodedQueryParameters(encodedName: String ): Builder","title":"removeAllEncodedQueryParameters"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/remove-all-query-parameters/","text":"okhttp / okhttp3 / HttpUrl / Builder / removeAllQueryParameters removeAllQueryParameters \u00b6 fun removeAllQueryParameters(name: String ): Builder","title":"removeAllQueryParameters - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/remove-all-query-parameters/#removeallqueryparameters","text":"fun removeAllQueryParameters(name: String ): Builder","title":"removeAllQueryParameters"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/remove-path-segment/","text":"okhttp / okhttp3 / HttpUrl / Builder / removePathSegment removePathSegment \u00b6 fun removePathSegment(index: Int ): Builder","title":"removePathSegment - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/remove-path-segment/#removepathsegment","text":"fun removePathSegment(index: Int ): Builder","title":"removePathSegment"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/scheme/","text":"okhttp / okhttp3 / HttpUrl / Builder / scheme scheme \u00b6 fun scheme(scheme: String ): Builder Parameters \u00b6 scheme - either \u201chttp\u201d or \u201chttps\u201d.","title":"scheme - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/scheme/#scheme","text":"fun scheme(scheme: String ): Builder","title":"scheme"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/scheme/#parameters","text":"scheme - either \u201chttp\u201d or \u201chttps\u201d.","title":"Parameters"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/set-encoded-path-segment/","text":"okhttp / okhttp3 / HttpUrl / Builder / setEncodedPathSegment setEncodedPathSegment \u00b6 fun setEncodedPathSegment(index: Int , encodedPathSegment: String ): Builder","title":"setEncodedPathSegment - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/set-encoded-path-segment/#setencodedpathsegment","text":"fun setEncodedPathSegment(index: Int , encodedPathSegment: String ): Builder","title":"setEncodedPathSegment"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/set-encoded-query-parameter/","text":"okhttp / okhttp3 / HttpUrl / Builder / setEncodedQueryParameter setEncodedQueryParameter \u00b6 fun setEncodedQueryParameter(encodedName: String , encodedValue: String ?): Builder","title":"setEncodedQueryParameter - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/set-encoded-query-parameter/#setencodedqueryparameter","text":"fun setEncodedQueryParameter(encodedName: String , encodedValue: String ?): Builder","title":"setEncodedQueryParameter"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/set-path-segment/","text":"okhttp / okhttp3 / HttpUrl / Builder / setPathSegment setPathSegment \u00b6 fun setPathSegment(index: Int , pathSegment: String ): Builder","title":"setPathSegment - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/set-path-segment/#setpathsegment","text":"fun setPathSegment(index: Int , pathSegment: String ): Builder","title":"setPathSegment"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/set-query-parameter/","text":"okhttp / okhttp3 / HttpUrl / Builder / setQueryParameter setQueryParameter \u00b6 fun setQueryParameter(name: String , value: String ?): Builder","title":"setQueryParameter - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/set-query-parameter/#setqueryparameter","text":"fun setQueryParameter(name: String , value: String ?): Builder","title":"setQueryParameter"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/to-string/","text":"okhttp / okhttp3 / HttpUrl / Builder / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/username/","text":"okhttp / okhttp3 / HttpUrl / Builder / username username \u00b6 fun username(username: String ): Builder","title":"username - OkHttp"},{"location":"4.x/okhttp/okhttp3/-http-url/-builder/username/#username","text":"fun username(username: String ): Builder","title":"username"},{"location":"4.x/okhttp/okhttp3/-interceptor/","text":"okhttp / okhttp3 / Interceptor Interceptor \u00b6 interface Interceptor Types \u00b6 Name Summary Chain interface Chain Functions \u00b6 Name Summary intercept abstract fun intercept(chain: Chain): Response Companion Object Functions \u00b6 Name Summary invoke Constructs an interceptor for a lambda. This compact syntax is most useful for inline interceptors. operator fun invoke(block: (chain: Chain) -> Response ): Interceptor","title":"Interceptor - OkHttp"},{"location":"4.x/okhttp/okhttp3/-interceptor/#interceptor","text":"interface Interceptor","title":"Interceptor"},{"location":"4.x/okhttp/okhttp3/-interceptor/#types","text":"Name Summary Chain interface Chain","title":"Types"},{"location":"4.x/okhttp/okhttp3/-interceptor/#functions","text":"Name Summary intercept abstract fun intercept(chain: Chain): Response","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-interceptor/#companion-object-functions","text":"Name Summary invoke Constructs an interceptor for a lambda. This compact syntax is most useful for inline interceptors. operator fun invoke(block: (chain: Chain) -> Response ): Interceptor","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-interceptor/intercept/","text":"okhttp / okhttp3 / Interceptor / intercept intercept \u00b6 abstract fun intercept(chain: Chain): Response","title":"intercept - OkHttp"},{"location":"4.x/okhttp/okhttp3/-interceptor/intercept/#intercept","text":"abstract fun intercept(chain: Chain): Response","title":"intercept"},{"location":"4.x/okhttp/okhttp3/-interceptor/invoke/","text":"okhttp / okhttp3 / Interceptor / invoke invoke \u00b6 operator inline fun invoke(crossinline block: (chain: Chain) -> Response ): Interceptor Constructs an interceptor for a lambda. This compact syntax is most useful for inline interceptors. val interceptor = Interceptor { chain: Interceptor.Chain -> chain.proceed(chain.request()) }","title":"invoke - OkHttp"},{"location":"4.x/okhttp/okhttp3/-interceptor/invoke/#invoke","text":"operator inline fun invoke(crossinline block: (chain: Chain) -> Response ): Interceptor Constructs an interceptor for a lambda. This compact syntax is most useful for inline interceptors. val interceptor = Interceptor { chain: Interceptor.Chain -> chain.proceed(chain.request()) }","title":"invoke"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/","text":"okhttp / okhttp3 / Interceptor / Chain Chain \u00b6 interface Chain Functions \u00b6 Name Summary call abstract fun call(): Call connection Returns the connection the request will be executed on. This is only available in the chains of network interceptors; for application interceptors this is always null. abstract fun connection(): Connection ? connectTimeoutMillis abstract fun connectTimeoutMillis(): Int proceed abstract fun proceed(request: Request ): Response readTimeoutMillis abstract fun readTimeoutMillis(): Int request abstract fun request(): Request withConnectTimeout abstract fun withConnectTimeout(timeout: Int , unit: TimeUnit ): Chain withReadTimeout abstract fun withReadTimeout(timeout: Int , unit: TimeUnit ): Chain withWriteTimeout abstract fun withWriteTimeout(timeout: Int , unit: TimeUnit ): Chain writeTimeoutMillis abstract fun writeTimeoutMillis(): Int","title":"Chain - OkHttp"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/#chain","text":"interface Chain","title":"Chain"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/#functions","text":"Name Summary call abstract fun call(): Call connection Returns the connection the request will be executed on. This is only available in the chains of network interceptors; for application interceptors this is always null. abstract fun connection(): Connection ? connectTimeoutMillis abstract fun connectTimeoutMillis(): Int proceed abstract fun proceed(request: Request ): Response readTimeoutMillis abstract fun readTimeoutMillis(): Int request abstract fun request(): Request withConnectTimeout abstract fun withConnectTimeout(timeout: Int , unit: TimeUnit ): Chain withReadTimeout abstract fun withReadTimeout(timeout: Int , unit: TimeUnit ): Chain withWriteTimeout abstract fun withWriteTimeout(timeout: Int , unit: TimeUnit ): Chain writeTimeoutMillis abstract fun writeTimeoutMillis(): Int","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/call/","text":"okhttp / okhttp3 / Interceptor / Chain / call call \u00b6 abstract fun call(): Call","title":"call - OkHttp"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/call/#call","text":"abstract fun call(): Call","title":"call"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/connect-timeout-millis/","text":"okhttp / okhttp3 / Interceptor / Chain / connectTimeoutMillis connectTimeoutMillis \u00b6 abstract fun connectTimeoutMillis(): Int","title":"connectTimeoutMillis - OkHttp"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/connect-timeout-millis/#connecttimeoutmillis","text":"abstract fun connectTimeoutMillis(): Int","title":"connectTimeoutMillis"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/connection/","text":"okhttp / okhttp3 / Interceptor / Chain / connection connection \u00b6 abstract fun connection(): Connection ? Returns the connection the request will be executed on. This is only available in the chains of network interceptors; for application interceptors this is always null.","title":"connection - OkHttp"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/connection/#connection","text":"abstract fun connection(): Connection ? Returns the connection the request will be executed on. This is only available in the chains of network interceptors; for application interceptors this is always null.","title":"connection"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/proceed/","text":"okhttp / okhttp3 / Interceptor / Chain / proceed proceed \u00b6 abstract fun proceed(request: Request ): Response","title":"proceed - OkHttp"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/proceed/#proceed","text":"abstract fun proceed(request: Request ): Response","title":"proceed"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/read-timeout-millis/","text":"okhttp / okhttp3 / Interceptor / Chain / readTimeoutMillis readTimeoutMillis \u00b6 abstract fun readTimeoutMillis(): Int","title":"readTimeoutMillis - OkHttp"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/read-timeout-millis/#readtimeoutmillis","text":"abstract fun readTimeoutMillis(): Int","title":"readTimeoutMillis"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/request/","text":"okhttp / okhttp3 / Interceptor / Chain / request request \u00b6 abstract fun request(): Request","title":"request - OkHttp"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/request/#request","text":"abstract fun request(): Request","title":"request"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/with-connect-timeout/","text":"okhttp / okhttp3 / Interceptor / Chain / withConnectTimeout withConnectTimeout \u00b6 abstract fun withConnectTimeout(timeout: Int , unit: TimeUnit ): Chain","title":"withConnectTimeout - OkHttp"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/with-connect-timeout/#withconnecttimeout","text":"abstract fun withConnectTimeout(timeout: Int , unit: TimeUnit ): Chain","title":"withConnectTimeout"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/with-read-timeout/","text":"okhttp / okhttp3 / Interceptor / Chain / withReadTimeout withReadTimeout \u00b6 abstract fun withReadTimeout(timeout: Int , unit: TimeUnit ): Chain","title":"withReadTimeout - OkHttp"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/with-read-timeout/#withreadtimeout","text":"abstract fun withReadTimeout(timeout: Int , unit: TimeUnit ): Chain","title":"withReadTimeout"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/with-write-timeout/","text":"okhttp / okhttp3 / Interceptor / Chain / withWriteTimeout withWriteTimeout \u00b6 abstract fun withWriteTimeout(timeout: Int , unit: TimeUnit ): Chain","title":"withWriteTimeout - OkHttp"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/with-write-timeout/#withwritetimeout","text":"abstract fun withWriteTimeout(timeout: Int , unit: TimeUnit ): Chain","title":"withWriteTimeout"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/write-timeout-millis/","text":"okhttp / okhttp3 / Interceptor / Chain / writeTimeoutMillis writeTimeoutMillis \u00b6 abstract fun writeTimeoutMillis(): Int","title":"writeTimeoutMillis - OkHttp"},{"location":"4.x/okhttp/okhttp3/-interceptor/-chain/write-timeout-millis/#writetimeoutmillis","text":"abstract fun writeTimeoutMillis(): Int","title":"writeTimeoutMillis"},{"location":"4.x/okhttp/okhttp3/-media-type/","text":"okhttp / okhttp3 / MediaType MediaType \u00b6 class MediaType An RFC 2045 Media Type, appropriate to describe the content type of an HTTP request or response body. Properties \u00b6 Name Summary subtype Returns a specific media subtype, such as \u201cplain\u201d or \u201cpng\u201d, \u201cmpeg\u201d, \u201cmp4\u201d or \u201cxml\u201d. val subtype: String type Returns the high-level media type, such as \u201ctext\u201d, \u201cimage\u201d, \u201caudio\u201d, \u201cvideo\u201d, or \u201capplication\u201d. val type: String Functions \u00b6 Name Summary charset Returns the charset of this media type, or defaultValue if either this media type doesn\u2019t specify a charset, of it its charset is unsupported by the current runtime. fun charset(defaultValue: Charset ? = null): Charset ? equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int parameter Returns the parameter name of this media type, or null if this media type does not define such a parameter. fun parameter(name: String ): String ? toString Returns the encoded media type, like \u201ctext/plain; charset=utf-8\u201d, appropriate for use in a Content-Type header. fun toString(): String Companion Object Functions \u00b6 Name Summary toMediaType Returns a media type for this string. fun String .toMediaType(): MediaType toMediaTypeOrNull Returns a media type for this, or null if this is not a well-formed media type. fun String .toMediaTypeOrNull(): MediaType ?","title":"MediaType - OkHttp"},{"location":"4.x/okhttp/okhttp3/-media-type/#mediatype","text":"class MediaType An RFC 2045 Media Type, appropriate to describe the content type of an HTTP request or response body.","title":"MediaType"},{"location":"4.x/okhttp/okhttp3/-media-type/#properties","text":"Name Summary subtype Returns a specific media subtype, such as \u201cplain\u201d or \u201cpng\u201d, \u201cmpeg\u201d, \u201cmp4\u201d or \u201cxml\u201d. val subtype: String type Returns the high-level media type, such as \u201ctext\u201d, \u201cimage\u201d, \u201caudio\u201d, \u201cvideo\u201d, or \u201capplication\u201d. val type: String","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-media-type/#functions","text":"Name Summary charset Returns the charset of this media type, or defaultValue if either this media type doesn\u2019t specify a charset, of it its charset is unsupported by the current runtime. fun charset(defaultValue: Charset ? = null): Charset ? equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int parameter Returns the parameter name of this media type, or null if this media type does not define such a parameter. fun parameter(name: String ): String ? toString Returns the encoded media type, like \u201ctext/plain; charset=utf-8\u201d, appropriate for use in a Content-Type header. fun toString(): String","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-media-type/#companion-object-functions","text":"Name Summary toMediaType Returns a media type for this string. fun String .toMediaType(): MediaType toMediaTypeOrNull Returns a media type for this, or null if this is not a well-formed media type. fun String .toMediaTypeOrNull(): MediaType ?","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-media-type/charset/","text":"okhttp / okhttp3 / MediaType / charset charset \u00b6 @JvmOverloads fun charset(defaultValue: Charset ? = null): Charset ? Returns the charset of this media type, or defaultValue if either this media type doesn\u2019t specify a charset, of it its charset is unsupported by the current runtime.","title":"charset - OkHttp"},{"location":"4.x/okhttp/okhttp3/-media-type/charset/#charset","text":"@JvmOverloads fun charset(defaultValue: Charset ? = null): Charset ? Returns the charset of this media type, or defaultValue if either this media type doesn\u2019t specify a charset, of it its charset is unsupported by the current runtime.","title":"charset"},{"location":"4.x/okhttp/okhttp3/-media-type/equals/","text":"okhttp / okhttp3 / MediaType / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - OkHttp"},{"location":"4.x/okhttp/okhttp3/-media-type/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"4.x/okhttp/okhttp3/-media-type/hash-code/","text":"okhttp / okhttp3 / MediaType / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - OkHttp"},{"location":"4.x/okhttp/okhttp3/-media-type/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"4.x/okhttp/okhttp3/-media-type/parameter/","text":"okhttp / okhttp3 / MediaType / parameter parameter \u00b6 fun parameter(name: String ): String ? Returns the parameter name of this media type, or null if this media type does not define such a parameter.","title":"parameter - OkHttp"},{"location":"4.x/okhttp/okhttp3/-media-type/parameter/#parameter","text":"fun parameter(name: String ): String ? Returns the parameter name of this media type, or null if this media type does not define such a parameter.","title":"parameter"},{"location":"4.x/okhttp/okhttp3/-media-type/subtype/","text":"okhttp / okhttp3 / MediaType / subtype subtype \u00b6 val subtype: String Returns a specific media subtype, such as \u201cplain\u201d or \u201cpng\u201d, \u201cmpeg\u201d, \u201cmp4\u201d or \u201cxml\u201d.","title":"subtype - OkHttp"},{"location":"4.x/okhttp/okhttp3/-media-type/subtype/#subtype","text":"val subtype: String Returns a specific media subtype, such as \u201cplain\u201d or \u201cpng\u201d, \u201cmpeg\u201d, \u201cmp4\u201d or \u201cxml\u201d.","title":"subtype"},{"location":"4.x/okhttp/okhttp3/-media-type/to-media-type-or-null/","text":"okhttp / okhttp3 / MediaType / toMediaTypeOrNull toMediaTypeOrNull \u00b6 @JvmStatic @JvmName(\"parse\") fun String .toMediaTypeOrNull(): MediaType ? Returns a media type for this, or null if this is not a well-formed media type.","title":"toMediaTypeOrNull - OkHttp"},{"location":"4.x/okhttp/okhttp3/-media-type/to-media-type-or-null/#tomediatypeornull","text":"@JvmStatic @JvmName(\"parse\") fun String .toMediaTypeOrNull(): MediaType ? Returns a media type for this, or null if this is not a well-formed media type.","title":"toMediaTypeOrNull"},{"location":"4.x/okhttp/okhttp3/-media-type/to-media-type/","text":"okhttp / okhttp3 / MediaType / toMediaType toMediaType \u00b6 @JvmStatic @JvmName(\"get\") fun String .toMediaType(): MediaType Returns a media type for this string. Exceptions \u00b6 IllegalArgumentException - if this is not a well-formed media type.","title":"toMediaType - OkHttp"},{"location":"4.x/okhttp/okhttp3/-media-type/to-media-type/#tomediatype","text":"@JvmStatic @JvmName(\"get\") fun String .toMediaType(): MediaType Returns a media type for this string.","title":"toMediaType"},{"location":"4.x/okhttp/okhttp3/-media-type/to-media-type/#exceptions","text":"IllegalArgumentException - if this is not a well-formed media type.","title":"Exceptions"},{"location":"4.x/okhttp/okhttp3/-media-type/to-string/","text":"okhttp / okhttp3 / MediaType / toString toString \u00b6 fun toString(): String Returns the encoded media type, like \u201ctext/plain; charset=utf-8\u201d, appropriate for use in a Content-Type header.","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-media-type/to-string/#tostring","text":"fun toString(): String Returns the encoded media type, like \u201ctext/plain; charset=utf-8\u201d, appropriate for use in a Content-Type header.","title":"toString"},{"location":"4.x/okhttp/okhttp3/-media-type/type/","text":"okhttp / okhttp3 / MediaType / type type \u00b6 val type: String Returns the high-level media type, such as \u201ctext\u201d, \u201cimage\u201d, \u201caudio\u201d, \u201cvideo\u201d, or \u201capplication\u201d.","title":"type - OkHttp"},{"location":"4.x/okhttp/okhttp3/-media-type/type/#type","text":"val type: String Returns the high-level media type, such as \u201ctext\u201d, \u201cimage\u201d, \u201caudio\u201d, \u201cvideo\u201d, or \u201capplication\u201d.","title":"type"},{"location":"4.x/okhttp/okhttp3/-multipart-body/","text":"okhttp / okhttp3 / MultipartBody MultipartBody \u00b6 class MultipartBody : RequestBody An RFC 2387 -compliant request body. Types \u00b6 Name Summary Builder class Builder Part class Part Properties \u00b6 Name Summary boundary val boundary: String parts val parts: List <Part> size The number of parts in this multipart body. val size: Int type val type: MediaType Functions \u00b6 Name Summary contentLength Returns the number of bytes that will be written to sink in a call to writeTo , or -1 if that count is unknown. fun contentLength(): Long contentType A combination of type and boundaryByteString . fun contentType(): MediaType part fun part(index: Int ): Part writeTo Writes the content of this request to sink . fun writeTo(sink: BufferedSink ): Unit Companion Object Properties \u00b6 Name Summary ALTERNATIVE The \u201cmultipart/alternative\u201d type is syntactically identical to \u201cmultipart/mixed\u201d, but the semantics are different. In particular, each of the body parts is an \u201calternative\u201d version of the same information. val ALTERNATIVE: MediaType DIGEST This type is syntactically identical to \u201cmultipart/mixed\u201d, but the semantics are different. In particular, in a digest, the default Content-Type value for a body part is changed from \u201ctext/plain\u201d to \u201cmessage/rfc822\u201d. val DIGEST: MediaType FORM The media-type multipart/form-data follows the rules of all multipart MIME data streams as outlined in RFC 2046. In forms, there are a series of fields to be supplied by the user who fills out the form. Each field has a name. Within a given form, the names are unique. val FORM: MediaType MIXED The \u201cmixed\u201d subtype of \u201cmultipart\u201d is intended for use when the body parts are independent and need to be bundled in a particular order. Any \u201cmultipart\u201d subtypes that an implementation does not recognize must be treated as being of subtype \u201cmixed\u201d. val MIXED: MediaType PARALLEL This type is syntactically identical to \u201cmultipart/mixed\u201d, but the semantics are different. In particular, in a parallel entity, the order of body parts is not significant. val PARALLEL: MediaType","title":"MultipartBody - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/#multipartbody","text":"class MultipartBody : RequestBody An RFC 2387 -compliant request body.","title":"MultipartBody"},{"location":"4.x/okhttp/okhttp3/-multipart-body/#types","text":"Name Summary Builder class Builder Part class Part","title":"Types"},{"location":"4.x/okhttp/okhttp3/-multipart-body/#properties","text":"Name Summary boundary val boundary: String parts val parts: List <Part> size The number of parts in this multipart body. val size: Int type val type: MediaType","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-multipart-body/#functions","text":"Name Summary contentLength Returns the number of bytes that will be written to sink in a call to writeTo , or -1 if that count is unknown. fun contentLength(): Long contentType A combination of type and boundaryByteString . fun contentType(): MediaType part fun part(index: Int ): Part writeTo Writes the content of this request to sink . fun writeTo(sink: BufferedSink ): Unit","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-multipart-body/#companion-object-properties","text":"Name Summary ALTERNATIVE The \u201cmultipart/alternative\u201d type is syntactically identical to \u201cmultipart/mixed\u201d, but the semantics are different. In particular, each of the body parts is an \u201calternative\u201d version of the same information. val ALTERNATIVE: MediaType DIGEST This type is syntactically identical to \u201cmultipart/mixed\u201d, but the semantics are different. In particular, in a digest, the default Content-Type value for a body part is changed from \u201ctext/plain\u201d to \u201cmessage/rfc822\u201d. val DIGEST: MediaType FORM The media-type multipart/form-data follows the rules of all multipart MIME data streams as outlined in RFC 2046. In forms, there are a series of fields to be supplied by the user who fills out the form. Each field has a name. Within a given form, the names are unique. val FORM: MediaType MIXED The \u201cmixed\u201d subtype of \u201cmultipart\u201d is intended for use when the body parts are independent and need to be bundled in a particular order. Any \u201cmultipart\u201d subtypes that an implementation does not recognize must be treated as being of subtype \u201cmixed\u201d. val MIXED: MediaType PARALLEL This type is syntactically identical to \u201cmultipart/mixed\u201d, but the semantics are different. In particular, in a parallel entity, the order of body parts is not significant. val PARALLEL: MediaType","title":"Companion Object Properties"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-a-l-t-e-r-n-a-t-i-v-e/","text":"okhttp / okhttp3 / MultipartBody / ALTERNATIVE ALTERNATIVE \u00b6 val ALTERNATIVE: MediaType The \u201cmultipart/alternative\u201d type is syntactically identical to \u201cmultipart/mixed\u201d, but the semantics are different. In particular, each of the body parts is an \u201calternative\u201d version of the same information.","title":"ALTERNATIVE - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-a-l-t-e-r-n-a-t-i-v-e/#alternative","text":"val ALTERNATIVE: MediaType The \u201cmultipart/alternative\u201d type is syntactically identical to \u201cmultipart/mixed\u201d, but the semantics are different. In particular, each of the body parts is an \u201calternative\u201d version of the same information.","title":"ALTERNATIVE"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-d-i-g-e-s-t/","text":"okhttp / okhttp3 / MultipartBody / DIGEST DIGEST \u00b6 val DIGEST: MediaType This type is syntactically identical to \u201cmultipart/mixed\u201d, but the semantics are different. In particular, in a digest, the default Content-Type value for a body part is changed from \u201ctext/plain\u201d to \u201cmessage/rfc822\u201d.","title":"DIGEST - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-d-i-g-e-s-t/#digest","text":"val DIGEST: MediaType This type is syntactically identical to \u201cmultipart/mixed\u201d, but the semantics are different. In particular, in a digest, the default Content-Type value for a body part is changed from \u201ctext/plain\u201d to \u201cmessage/rfc822\u201d.","title":"DIGEST"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-f-o-r-m/","text":"okhttp / okhttp3 / MultipartBody / FORM FORM \u00b6 val FORM: MediaType The media-type multipart/form-data follows the rules of all multipart MIME data streams as outlined in RFC 2046. In forms, there are a series of fields to be supplied by the user who fills out the form. Each field has a name. Within a given form, the names are unique.","title":"FORM - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-f-o-r-m/#form","text":"val FORM: MediaType The media-type multipart/form-data follows the rules of all multipart MIME data streams as outlined in RFC 2046. In forms, there are a series of fields to be supplied by the user who fills out the form. Each field has a name. Within a given form, the names are unique.","title":"FORM"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-m-i-x-e-d/","text":"okhttp / okhttp3 / MultipartBody / MIXED MIXED \u00b6 val MIXED: MediaType The \u201cmixed\u201d subtype of \u201cmultipart\u201d is intended for use when the body parts are independent and need to be bundled in a particular order. Any \u201cmultipart\u201d subtypes that an implementation does not recognize must be treated as being of subtype \u201cmixed\u201d.","title":"MIXED - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-m-i-x-e-d/#mixed","text":"val MIXED: MediaType The \u201cmixed\u201d subtype of \u201cmultipart\u201d is intended for use when the body parts are independent and need to be bundled in a particular order. Any \u201cmultipart\u201d subtypes that an implementation does not recognize must be treated as being of subtype \u201cmixed\u201d.","title":"MIXED"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-p-a-r-a-l-l-e-l/","text":"okhttp / okhttp3 / MultipartBody / PARALLEL PARALLEL \u00b6 val PARALLEL: MediaType This type is syntactically identical to \u201cmultipart/mixed\u201d, but the semantics are different. In particular, in a parallel entity, the order of body parts is not significant.","title":"PARALLEL - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-p-a-r-a-l-l-e-l/#parallel","text":"val PARALLEL: MediaType This type is syntactically identical to \u201cmultipart/mixed\u201d, but the semantics are different. In particular, in a parallel entity, the order of body parts is not significant.","title":"PARALLEL"},{"location":"4.x/okhttp/okhttp3/-multipart-body/boundary/","text":"okhttp / okhttp3 / MultipartBody / boundary boundary \u00b6 val boundary: String","title":"boundary - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/boundary/#boundary","text":"val boundary: String","title":"boundary"},{"location":"4.x/okhttp/okhttp3/-multipart-body/content-length/","text":"okhttp / okhttp3 / MultipartBody / contentLength contentLength \u00b6 fun contentLength(): Long Returns the number of bytes that will be written to sink in a call to writeTo , or -1 if that count is unknown.","title":"contentLength - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/content-length/#contentlength","text":"fun contentLength(): Long Returns the number of bytes that will be written to sink in a call to writeTo , or -1 if that count is unknown.","title":"contentLength"},{"location":"4.x/okhttp/okhttp3/-multipart-body/content-type/","text":"okhttp / okhttp3 / MultipartBody / contentType contentType \u00b6 fun contentType(): MediaType A combination of type and boundaryByteString .","title":"contentType - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/content-type/#contenttype","text":"fun contentType(): MediaType A combination of type and boundaryByteString .","title":"contentType"},{"location":"4.x/okhttp/okhttp3/-multipart-body/part/","text":"okhttp / okhttp3 / MultipartBody / part part \u00b6 fun part(index: Int ): Part","title":"part - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/part/#part","text":"fun part(index: Int ): Part","title":"part"},{"location":"4.x/okhttp/okhttp3/-multipart-body/parts/","text":"okhttp / okhttp3 / MultipartBody / parts parts \u00b6 val parts: List <Part>","title":"parts - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/parts/#parts","text":"val parts: List <Part>","title":"parts"},{"location":"4.x/okhttp/okhttp3/-multipart-body/size/","text":"okhttp / okhttp3 / MultipartBody / size size \u00b6 val size: Int The number of parts in this multipart body.","title":"size - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/size/#size","text":"val size: Int The number of parts in this multipart body.","title":"size"},{"location":"4.x/okhttp/okhttp3/-multipart-body/type/","text":"okhttp / okhttp3 / MultipartBody / type type \u00b6 val type: MediaType","title":"type - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/type/#type","text":"val type: MediaType","title":"type"},{"location":"4.x/okhttp/okhttp3/-multipart-body/write-to/","text":"okhttp / okhttp3 / MultipartBody / writeTo writeTo \u00b6 fun writeTo(sink: BufferedSink ): Unit Writes the content of this request to sink .","title":"writeTo - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/write-to/#writeto","text":"fun writeTo(sink: BufferedSink ): Unit Writes the content of this request to sink .","title":"writeTo"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-builder/","text":"okhttp / okhttp3 / MultipartBody / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder(boundary: String = UUID.randomUUID().toString()) Functions \u00b6 Name Summary addFormDataPart Add a form data part to the body. fun addFormDataPart(name: String , value: String ): Builder fun addFormDataPart(name: String , filename: String ?, body: RequestBody ): Builder addPart Add a part to the body. fun addPart(body: RequestBody ): Builder fun addPart(headers: Headers ?, body: RequestBody ): Builder fun addPart(part: Part): Builder build Assemble the specified parts into a request body. fun build(): MultipartBody setType Set the MIME type. Expected values for type are MIXED (the default), ALTERNATIVE , DIGEST , PARALLEL and FORM . fun setType(type: MediaType ): Builder","title":"Builder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-builder/#constructors","text":"Name Summary <init> Builder(boundary: String = UUID.randomUUID().toString())","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-builder/#functions","text":"Name Summary addFormDataPart Add a form data part to the body. fun addFormDataPart(name: String , value: String ): Builder fun addFormDataPart(name: String , filename: String ?, body: RequestBody ): Builder addPart Add a part to the body. fun addPart(body: RequestBody ): Builder fun addPart(headers: Headers ?, body: RequestBody ): Builder fun addPart(part: Part): Builder build Assemble the specified parts into a request body. fun build(): MultipartBody setType Set the MIME type. Expected values for type are MIXED (the default), ALTERNATIVE , DIGEST , PARALLEL and FORM . fun setType(type: MediaType ): Builder","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-builder/-init-/","text":"okhttp / okhttp3 / MultipartBody / Builder / <init> <init> \u00b6 Builder(boundary: String = UUID.randomUUID().toString())","title":" init "},{"location":"4.x/okhttp/okhttp3/-multipart-body/-builder/-init-/#init","text":"Builder(boundary: String = UUID.randomUUID().toString())","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-builder/add-form-data-part/","text":"okhttp / okhttp3 / MultipartBody / Builder / addFormDataPart addFormDataPart \u00b6 fun addFormDataPart(name: String , value: String ): Builder fun addFormDataPart(name: String , filename: String ?, body: RequestBody ): Builder Add a form data part to the body.","title":"addFormDataPart - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-builder/add-form-data-part/#addformdatapart","text":"fun addFormDataPart(name: String , value: String ): Builder fun addFormDataPart(name: String , filename: String ?, body: RequestBody ): Builder Add a form data part to the body.","title":"addFormDataPart"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-builder/add-part/","text":"okhttp / okhttp3 / MultipartBody / Builder / addPart addPart \u00b6 fun addPart(body: RequestBody ): Builder fun addPart(headers: Headers ?, body: RequestBody ): Builder fun addPart(part: Part): Builder Add a part to the body.","title":"addPart - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-builder/add-part/#addpart","text":"fun addPart(body: RequestBody ): Builder fun addPart(headers: Headers ?, body: RequestBody ): Builder fun addPart(part: Part): Builder Add a part to the body.","title":"addPart"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-builder/build/","text":"okhttp / okhttp3 / MultipartBody / Builder / build build \u00b6 fun build(): MultipartBody Assemble the specified parts into a request body.","title":"build - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-builder/build/#build","text":"fun build(): MultipartBody Assemble the specified parts into a request body.","title":"build"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-builder/set-type/","text":"okhttp / okhttp3 / MultipartBody / Builder / setType setType \u00b6 fun setType(type: MediaType ): Builder Set the MIME type. Expected values for type are MIXED (the default), ALTERNATIVE , DIGEST , PARALLEL and FORM .","title":"setType - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-builder/set-type/#settype","text":"fun setType(type: MediaType ): Builder Set the MIME type. Expected values for type are MIXED (the default), ALTERNATIVE , DIGEST , PARALLEL and FORM .","title":"setType"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-part/","text":"okhttp / okhttp3 / MultipartBody / Part Part \u00b6 class Part Properties \u00b6 Name Summary body val body: RequestBody headers val headers: Headers ? Companion Object Functions \u00b6 Name Summary create fun create(body: RequestBody ): Part fun create(headers: Headers ?, body: RequestBody ): Part createFormData fun createFormData(name: String , value: String ): Part fun createFormData(name: String , filename: String ?, body: RequestBody ): Part","title":"Part - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-part/#part","text":"class Part","title":"Part"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-part/#properties","text":"Name Summary body val body: RequestBody headers val headers: Headers ?","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-part/#companion-object-functions","text":"Name Summary create fun create(body: RequestBody ): Part fun create(headers: Headers ?, body: RequestBody ): Part createFormData fun createFormData(name: String , value: String ): Part fun createFormData(name: String , filename: String ?, body: RequestBody ): Part","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-part/body/","text":"okhttp / okhttp3 / MultipartBody / Part / body body \u00b6 val body: RequestBody","title":"body - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-part/body/#body","text":"val body: RequestBody","title":"body"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-part/create-form-data/","text":"okhttp / okhttp3 / MultipartBody / Part / createFormData createFormData \u00b6 @JvmStatic fun createFormData(name: String , value: String ): Part @JvmStatic fun createFormData(name: String , filename: String ?, body: RequestBody ): Part","title":"createFormData - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-part/create-form-data/#createformdata","text":"@JvmStatic fun createFormData(name: String , value: String ): Part @JvmStatic fun createFormData(name: String , filename: String ?, body: RequestBody ): Part","title":"createFormData"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-part/create/","text":"okhttp / okhttp3 / MultipartBody / Part / create create \u00b6 @JvmStatic fun create(body: RequestBody ): Part @JvmStatic fun create(headers: Headers ?, body: RequestBody ): Part","title":"create - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-part/create/#create","text":"@JvmStatic fun create(body: RequestBody ): Part @JvmStatic fun create(headers: Headers ?, body: RequestBody ): Part","title":"create"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-part/headers/","text":"okhttp / okhttp3 / MultipartBody / Part / headers headers \u00b6 val headers: Headers ?","title":"headers - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-body/-part/headers/#headers","text":"val headers: Headers ?","title":"headers"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/","text":"okhttp / okhttp3 / MultipartReader MultipartReader \u00b6 class MultipartReader : Closeable Reads a stream of RFC 2046 multipart body parts. Callers read parts one-at-a-time until nextPart returns null. After calling nextPart any preceding parts should not be read. Typical use loops over the parts in sequence: val response: Response = call.execute() val multipartReader = MultipartReader(response.body!!) multipartReader.use { while (true) { val part = multipartReader.nextPart() ?: break process(part.headers, part.body) } } Note that nextPart will skip any unprocessed data from the preceding part. If the preceding part is particularly large or if the underlying source is particularly slow, the nextPart call may be slow! Closing a part does not close this multipart reader; callers must explicitly close this with close . Types \u00b6 Name Summary Part A single part in a multipart body. class Part : Closeable Constructors \u00b6 Name Summary <init> MultipartReader(response: ResponseBody ) Reads a stream of RFC 2046 multipart body parts. Callers read parts one-at-a-time until nextPart returns null. After calling nextPart any preceding parts should not be read. MultipartReader(source: BufferedSource , boundary: String ) Properties \u00b6 Name Summary boundary val boundary: String Functions \u00b6 Name Summary close fun close(): Unit nextPart fun nextPart(): Part?","title":"MultipartReader - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/#multipartreader","text":"class MultipartReader : Closeable Reads a stream of RFC 2046 multipart body parts. Callers read parts one-at-a-time until nextPart returns null. After calling nextPart any preceding parts should not be read. Typical use loops over the parts in sequence: val response: Response = call.execute() val multipartReader = MultipartReader(response.body!!) multipartReader.use { while (true) { val part = multipartReader.nextPart() ?: break process(part.headers, part.body) } } Note that nextPart will skip any unprocessed data from the preceding part. If the preceding part is particularly large or if the underlying source is particularly slow, the nextPart call may be slow! Closing a part does not close this multipart reader; callers must explicitly close this with close .","title":"MultipartReader"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/#types","text":"Name Summary Part A single part in a multipart body. class Part : Closeable","title":"Types"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/#constructors","text":"Name Summary <init> MultipartReader(response: ResponseBody ) Reads a stream of RFC 2046 multipart body parts. Callers read parts one-at-a-time until nextPart returns null. After calling nextPart any preceding parts should not be read. MultipartReader(source: BufferedSource , boundary: String )","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/#properties","text":"Name Summary boundary val boundary: String","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/#functions","text":"Name Summary close fun close(): Unit nextPart fun nextPart(): Part?","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/-init-/","text":"okhttp / okhttp3 / MultipartReader / <init> <init> \u00b6 MultipartReader(response: ResponseBody )``MultipartReader(source: BufferedSource , boundary: String ) Reads a stream of RFC 2046 multipart body parts. Callers read parts one-at-a-time until nextPart returns null. After calling nextPart any preceding parts should not be read. Typical use loops over the parts in sequence: val response: Response = call.execute() val multipartReader = MultipartReader(response.body!!) multipartReader.use { while (true) { val part = multipartReader.nextPart() ?: break process(part.headers, part.body) } } Note that nextPart will skip any unprocessed data from the preceding part. If the preceding part is particularly large or if the underlying source is particularly slow, the nextPart call may be slow! Closing a part does not close this multipart reader; callers must explicitly close this with close .","title":" init "},{"location":"4.x/okhttp/okhttp3/-multipart-reader/-init-/#init","text":"MultipartReader(response: ResponseBody )``MultipartReader(source: BufferedSource , boundary: String ) Reads a stream of RFC 2046 multipart body parts. Callers read parts one-at-a-time until nextPart returns null. After calling nextPart any preceding parts should not be read. Typical use loops over the parts in sequence: val response: Response = call.execute() val multipartReader = MultipartReader(response.body!!) multipartReader.use { while (true) { val part = multipartReader.nextPart() ?: break process(part.headers, part.body) } } Note that nextPart will skip any unprocessed data from the preceding part. If the preceding part is particularly large or if the underlying source is particularly slow, the nextPart call may be slow! Closing a part does not close this multipart reader; callers must explicitly close this with close .","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/boundary/","text":"okhttp / okhttp3 / MultipartReader / boundary boundary \u00b6 val boundary: String","title":"boundary - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/boundary/#boundary","text":"val boundary: String","title":"boundary"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/close/","text":"okhttp / okhttp3 / MultipartReader / close close \u00b6 fun close(): Unit","title":"close - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/close/#close","text":"fun close(): Unit","title":"close"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/next-part/","text":"okhttp / okhttp3 / MultipartReader / nextPart nextPart \u00b6 fun nextPart(): Part?","title":"nextPart - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/next-part/#nextpart","text":"fun nextPart(): Part?","title":"nextPart"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/-part/","text":"okhttp / okhttp3 / MultipartReader / Part Part \u00b6 class Part : Closeable A single part in a multipart body. Constructors \u00b6 Name Summary <init> A single part in a multipart body. Part(headers: Headers , body: BufferedSource ) Properties \u00b6 Name Summary body val body: BufferedSource headers val headers: Headers","title":"Part - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/-part/#part","text":"class Part : Closeable A single part in a multipart body.","title":"Part"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/-part/#constructors","text":"Name Summary <init> A single part in a multipart body. Part(headers: Headers , body: BufferedSource )","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/-part/#properties","text":"Name Summary body val body: BufferedSource headers val headers: Headers","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/-part/-init-/","text":"okhttp / okhttp3 / MultipartReader / Part / <init> <init> \u00b6 Part(headers: Headers , body: BufferedSource ) A single part in a multipart body.","title":" init "},{"location":"4.x/okhttp/okhttp3/-multipart-reader/-part/-init-/#init","text":"Part(headers: Headers , body: BufferedSource ) A single part in a multipart body.","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/-part/body/","text":"okhttp / okhttp3 / MultipartReader / Part / body body \u00b6 val body: BufferedSource","title":"body - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/-part/body/#body","text":"val body: BufferedSource","title":"body"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/-part/headers/","text":"okhttp / okhttp3 / MultipartReader / Part / headers headers \u00b6 val headers: Headers","title":"headers - OkHttp"},{"location":"4.x/okhttp/okhttp3/-multipart-reader/-part/headers/#headers","text":"val headers: Headers","title":"headers"},{"location":"4.x/okhttp/okhttp3/-ok-http/","text":"okhttp / okhttp3 / OkHttp OkHttp \u00b6 object OkHttp Properties \u00b6 Name Summary VERSION This is a string like \u201c4.5.0-RC1\u201d, \u201c4.5.0\u201d, or \u201c4.6.0-SNAPSHOT\u201d indicating the version of OkHttp in the current runtime. Use this to include the OkHttp version in custom User-Agent headers. const val VERSION: String","title":"OkHttp - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http/#okhttp","text":"object OkHttp","title":"OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http/#properties","text":"Name Summary VERSION This is a string like \u201c4.5.0-RC1\u201d, \u201c4.5.0\u201d, or \u201c4.6.0-SNAPSHOT\u201d indicating the version of OkHttp in the current runtime. Use this to include the OkHttp version in custom User-Agent headers. const val VERSION: String","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-ok-http/-v-e-r-s-i-o-n/","text":"okhttp / okhttp3 / OkHttp / VERSION VERSION \u00b6 const val VERSION: String This is a string like \u201c4.5.0-RC1\u201d, \u201c4.5.0\u201d, or \u201c4.6.0-SNAPSHOT\u201d indicating the version of OkHttp in the current runtime. Use this to include the OkHttp version in custom User-Agent headers. Official OkHttp releases follow semantic versioning . Versions with the -SNAPSHOT qualifier are not unique and should only be used in development environments. If you create custom builds of OkHttp please include a qualifier your version name, like \u201c4.7.0-mycompany.3\u201d. The version string is configured in the root project\u2019s build.gradle . Note that OkHttp\u2019s runtime version may be different from the version specified in your project\u2019s build file due to the dependency resolution features of your build tool.","title":"VERSION - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http/-v-e-r-s-i-o-n/#version","text":"const val VERSION: String This is a string like \u201c4.5.0-RC1\u201d, \u201c4.5.0\u201d, or \u201c4.6.0-SNAPSHOT\u201d indicating the version of OkHttp in the current runtime. Use this to include the OkHttp version in custom User-Agent headers. Official OkHttp releases follow semantic versioning . Versions with the -SNAPSHOT qualifier are not unique and should only be used in development environments. If you create custom builds of OkHttp please include a qualifier your version name, like \u201c4.7.0-mycompany.3\u201d. The version string is configured in the root project\u2019s build.gradle . Note that OkHttp\u2019s runtime version may be different from the version specified in your project\u2019s build file due to the dependency resolution features of your build tool.","title":"VERSION"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/","text":"okhttp / okhttp3 / OkHttpClient OkHttpClient \u00b6 open class OkHttpClient : Cloneable , Factory, Factory Factory for calls , which can be used to send HTTP requests and read their responses. OkHttpClients Should Be Shared \u00b6 OkHttp performs best when you create a single OkHttpClient instance and reuse it for all of your HTTP calls. This is because each client holds its own connection pool and thread pools. Reusing connections and threads reduces latency and saves memory. Conversely, creating a client for each request wastes resources on idle pools. Use new OkHttpClient() to create a shared instance with the default settings: // The singleton HTTP client. public final OkHttpClient client = new OkHttpClient(); Or use new OkHttpClient.Builder() to create a shared instance with custom settings: // The singleton HTTP client. public final OkHttpClient client = new OkHttpClient.Builder() .addInterceptor(new HttpLoggingInterceptor()) .cache(new Cache(cacheDir, cacheSize)) .build(); Customize Your Client With newBuilder() \u00b6 You can customize a shared OkHttpClient instance with newBuilder . This builds a client that shares the same connection pool, thread pools, and configuration. Use the builder methods to add configuration to the derived client for a specific purpose. This example shows the single instance with default configurations. public final OkHttpClient client = new OkHttpClient.Builder() .readTimeout(1000, TimeUnit.MILLISECONDS) .writeTimeout(1000, TimeUnit.MILLISECONDS) .build(); This example shows a call with a short 500 millisecond read timeout and a 1000 millisecond write timeout. Original configuration is kept, but can be overriden. OkHttpClient eagerClient = client.newBuilder() .readTimeout(500, TimeUnit.MILLISECONDS) .build(); Response response = eagerClient.newCall(request).execute(); Shutdown Isn\u2019t Necessary \u00b6 The threads and connections that are held will be released automatically if they remain idle. But if you are writing a application that needs to aggressively release unused resources you may do so. Shutdown the dispatcher\u2019s executor service with shutdown() . This will also cause future calls to the client to be rejected. client.dispatcher().executorService().shutdown(); Clear the connection pool with evictAll() . Note that the connection pool\u2019s daemon thread may not exit immediately. client.connectionPool().evictAll(); If your client has a cache, call close() . Note that it is an error to create calls against a cache that is closed, and doing so will cause the call to crash. client.cache().close(); OkHttp also uses daemon threads for HTTP/2 connections. These will exit automatically if they remain idle. Types \u00b6 Name Summary Builder class Builder Constructors \u00b6 Name Summary <init> OkHttpClient() Properties \u00b6 Name Summary authenticator val authenticator: Authenticator cache val cache: Cache ? callTimeoutMillis Default call timeout (in milliseconds). By default there is no timeout for complete calls, but there is for the connect, write, and read actions within a call. val callTimeoutMillis: Int certificateChainCleaner val certificateChainCleaner: CertificateChainCleaner? certificatePinner val certificatePinner: CertificatePinner connectionPool val connectionPool: ConnectionPool connectionSpecs val connectionSpecs: List < ConnectionSpec > connectTimeoutMillis Default connect timeout (in milliseconds). The default is 10 seconds. val connectTimeoutMillis: Int cookieJar val cookieJar: CookieJar dispatcher val dispatcher: Dispatcher dns val dns: Dns eventListenerFactory val eventListenerFactory: Factory followRedirects val followRedirects: Boolean followSslRedirects val followSslRedirects: Boolean hostnameVerifier val hostnameVerifier: HostnameVerifier interceptors Returns an immutable list of interceptors that observe the full span of each call: from before the connection is established (if any) until after the response source is selected (either the origin server, cache, or both). val interceptors: List < Interceptor > minWebSocketMessageToCompress Minimum outbound web socket message size (in bytes) that will be compressed. The default is 1024 bytes. val minWebSocketMessageToCompress: Long networkInterceptors Returns an immutable list of interceptors that observe a single network request and response. These interceptors must call Interceptor.Chain.proceed exactly once: it is an error for a network interceptor to short-circuit or repeat a network request. val networkInterceptors: List < Interceptor > pingIntervalMillis Web socket and HTTP/2 ping interval (in milliseconds). By default pings are not sent. val pingIntervalMillis: Int protocols val protocols: List < Protocol > proxy val proxy: Proxy ? proxyAuthenticator val proxyAuthenticator: Authenticator proxySelector val proxySelector: ProxySelector readTimeoutMillis Default read timeout (in milliseconds). The default is 10 seconds. val readTimeoutMillis: Int retryOnConnectionFailure val retryOnConnectionFailure: Boolean routeDatabase val routeDatabase: RouteDatabase socketFactory val socketFactory: SocketFactory sslSocketFactory val sslSocketFactory: SSLSocketFactory writeTimeoutMillis Default write timeout (in milliseconds). The default is 10 seconds. val writeTimeoutMillis: Int x509TrustManager val x509TrustManager: X509TrustManager ? Functions \u00b6 Name Summary newBuilder open fun newBuilder(): Builder newCall Prepares the request to be executed at some point in the future. open fun newCall(request: Request ): Call newWebSocket Uses request to connect a new web socket. open fun newWebSocket(request: Request , listener: WebSocketListener ): WebSocket","title":"OkHttpClient - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/#okhttpclient","text":"open class OkHttpClient : Cloneable , Factory, Factory Factory for calls , which can be used to send HTTP requests and read their responses.","title":"OkHttpClient"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/#okhttpclients-should-be-shared","text":"OkHttp performs best when you create a single OkHttpClient instance and reuse it for all of your HTTP calls. This is because each client holds its own connection pool and thread pools. Reusing connections and threads reduces latency and saves memory. Conversely, creating a client for each request wastes resources on idle pools. Use new OkHttpClient() to create a shared instance with the default settings: // The singleton HTTP client. public final OkHttpClient client = new OkHttpClient(); Or use new OkHttpClient.Builder() to create a shared instance with custom settings: // The singleton HTTP client. public final OkHttpClient client = new OkHttpClient.Builder() .addInterceptor(new HttpLoggingInterceptor()) .cache(new Cache(cacheDir, cacheSize)) .build();","title":"OkHttpClients Should Be Shared"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/#customize-your-client-with-newbuilder","text":"You can customize a shared OkHttpClient instance with newBuilder . This builds a client that shares the same connection pool, thread pools, and configuration. Use the builder methods to add configuration to the derived client for a specific purpose. This example shows the single instance with default configurations. public final OkHttpClient client = new OkHttpClient.Builder() .readTimeout(1000, TimeUnit.MILLISECONDS) .writeTimeout(1000, TimeUnit.MILLISECONDS) .build(); This example shows a call with a short 500 millisecond read timeout and a 1000 millisecond write timeout. Original configuration is kept, but can be overriden. OkHttpClient eagerClient = client.newBuilder() .readTimeout(500, TimeUnit.MILLISECONDS) .build(); Response response = eagerClient.newCall(request).execute();","title":"Customize Your Client With newBuilder()"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/#shutdown-isnt-necessary","text":"The threads and connections that are held will be released automatically if they remain idle. But if you are writing a application that needs to aggressively release unused resources you may do so. Shutdown the dispatcher\u2019s executor service with shutdown() . This will also cause future calls to the client to be rejected. client.dispatcher().executorService().shutdown(); Clear the connection pool with evictAll() . Note that the connection pool\u2019s daemon thread may not exit immediately. client.connectionPool().evictAll(); If your client has a cache, call close() . Note that it is an error to create calls against a cache that is closed, and doing so will cause the call to crash. client.cache().close(); OkHttp also uses daemon threads for HTTP/2 connections. These will exit automatically if they remain idle.","title":"Shutdown Isn't Necessary"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/#constructors","text":"Name Summary <init> OkHttpClient()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/#properties","text":"Name Summary authenticator val authenticator: Authenticator cache val cache: Cache ? callTimeoutMillis Default call timeout (in milliseconds). By default there is no timeout for complete calls, but there is for the connect, write, and read actions within a call. val callTimeoutMillis: Int certificateChainCleaner val certificateChainCleaner: CertificateChainCleaner? certificatePinner val certificatePinner: CertificatePinner connectionPool val connectionPool: ConnectionPool connectionSpecs val connectionSpecs: List < ConnectionSpec > connectTimeoutMillis Default connect timeout (in milliseconds). The default is 10 seconds. val connectTimeoutMillis: Int cookieJar val cookieJar: CookieJar dispatcher val dispatcher: Dispatcher dns val dns: Dns eventListenerFactory val eventListenerFactory: Factory followRedirects val followRedirects: Boolean followSslRedirects val followSslRedirects: Boolean hostnameVerifier val hostnameVerifier: HostnameVerifier interceptors Returns an immutable list of interceptors that observe the full span of each call: from before the connection is established (if any) until after the response source is selected (either the origin server, cache, or both). val interceptors: List < Interceptor > minWebSocketMessageToCompress Minimum outbound web socket message size (in bytes) that will be compressed. The default is 1024 bytes. val minWebSocketMessageToCompress: Long networkInterceptors Returns an immutable list of interceptors that observe a single network request and response. These interceptors must call Interceptor.Chain.proceed exactly once: it is an error for a network interceptor to short-circuit or repeat a network request. val networkInterceptors: List < Interceptor > pingIntervalMillis Web socket and HTTP/2 ping interval (in milliseconds). By default pings are not sent. val pingIntervalMillis: Int protocols val protocols: List < Protocol > proxy val proxy: Proxy ? proxyAuthenticator val proxyAuthenticator: Authenticator proxySelector val proxySelector: ProxySelector readTimeoutMillis Default read timeout (in milliseconds). The default is 10 seconds. val readTimeoutMillis: Int retryOnConnectionFailure val retryOnConnectionFailure: Boolean routeDatabase val routeDatabase: RouteDatabase socketFactory val socketFactory: SocketFactory sslSocketFactory val sslSocketFactory: SSLSocketFactory writeTimeoutMillis Default write timeout (in milliseconds). The default is 10 seconds. val writeTimeoutMillis: Int x509TrustManager val x509TrustManager: X509TrustManager ?","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/#functions","text":"Name Summary newBuilder open fun newBuilder(): Builder newCall Prepares the request to be executed at some point in the future. open fun newCall(request: Request ): Call newWebSocket Uses request to connect a new web socket. open fun newWebSocket(request: Request , listener: WebSocketListener ): WebSocket","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-init-/","text":"okhttp / okhttp3 / OkHttpClient / <init> <init> \u00b6 OkHttpClient()","title":" init "},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-init-/#init","text":"OkHttpClient()","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/authenticator/","text":"okhttp / okhttp3 / OkHttpClient / authenticator authenticator \u00b6 val authenticator: Authenticator","title":"authenticator - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/authenticator/#authenticator","text":"val authenticator: Authenticator","title":"authenticator"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/cache/","text":"okhttp / okhttp3 / OkHttpClient / cache cache \u00b6 val cache: Cache ?","title":"cache - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/cache/#cache","text":"val cache: Cache ?","title":"cache"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/call-timeout-millis/","text":"okhttp / okhttp3 / OkHttpClient / callTimeoutMillis callTimeoutMillis \u00b6 val callTimeoutMillis: Int Default call timeout (in milliseconds). By default there is no timeout for complete calls, but there is for the connect, write, and read actions within a call. Getter Default call timeout (in milliseconds). By default there is no timeout for complete calls, but there is for the connect, write, and read actions within a call.","title":"callTimeoutMillis - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/call-timeout-millis/#calltimeoutmillis","text":"val callTimeoutMillis: Int Default call timeout (in milliseconds). By default there is no timeout for complete calls, but there is for the connect, write, and read actions within a call. Getter Default call timeout (in milliseconds). By default there is no timeout for complete calls, but there is for the connect, write, and read actions within a call.","title":"callTimeoutMillis"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/certificate-chain-cleaner/","text":"okhttp / okhttp3 / OkHttpClient / certificateChainCleaner certificateChainCleaner \u00b6 val certificateChainCleaner: CertificateChainCleaner?","title":"certificateChainCleaner - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/certificate-chain-cleaner/#certificatechaincleaner","text":"val certificateChainCleaner: CertificateChainCleaner?","title":"certificateChainCleaner"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/certificate-pinner/","text":"okhttp / okhttp3 / OkHttpClient / certificatePinner certificatePinner \u00b6 val certificatePinner: CertificatePinner","title":"certificatePinner - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/certificate-pinner/#certificatepinner","text":"val certificatePinner: CertificatePinner","title":"certificatePinner"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/connect-timeout-millis/","text":"okhttp / okhttp3 / OkHttpClient / connectTimeoutMillis connectTimeoutMillis \u00b6 val connectTimeoutMillis: Int Default connect timeout (in milliseconds). The default is 10 seconds. Getter Default connect timeout (in milliseconds). The default is 10 seconds.","title":"connectTimeoutMillis - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/connect-timeout-millis/#connecttimeoutmillis","text":"val connectTimeoutMillis: Int Default connect timeout (in milliseconds). The default is 10 seconds. Getter Default connect timeout (in milliseconds). The default is 10 seconds.","title":"connectTimeoutMillis"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/connection-pool/","text":"okhttp / okhttp3 / OkHttpClient / connectionPool connectionPool \u00b6 val connectionPool: ConnectionPool","title":"connectionPool - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/connection-pool/#connectionpool","text":"val connectionPool: ConnectionPool","title":"connectionPool"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/connection-specs/","text":"okhttp / okhttp3 / OkHttpClient / connectionSpecs connectionSpecs \u00b6 val connectionSpecs: List < ConnectionSpec >","title":"connectionSpecs - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/connection-specs/#connectionspecs","text":"val connectionSpecs: List < ConnectionSpec >","title":"connectionSpecs"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/cookie-jar/","text":"okhttp / okhttp3 / OkHttpClient / cookieJar cookieJar \u00b6 val cookieJar: CookieJar","title":"cookieJar - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/cookie-jar/#cookiejar","text":"val cookieJar: CookieJar","title":"cookieJar"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/dispatcher/","text":"okhttp / okhttp3 / OkHttpClient / dispatcher dispatcher \u00b6 val dispatcher: Dispatcher","title":"dispatcher - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/dispatcher/#dispatcher","text":"val dispatcher: Dispatcher","title":"dispatcher"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/dns/","text":"okhttp / okhttp3 / OkHttpClient / dns dns \u00b6 val dns: Dns","title":"dns - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/dns/#dns","text":"val dns: Dns","title":"dns"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/event-listener-factory/","text":"okhttp / okhttp3 / OkHttpClient / eventListenerFactory eventListenerFactory \u00b6 val eventListenerFactory: Factory","title":"eventListenerFactory - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/event-listener-factory/#eventlistenerfactory","text":"val eventListenerFactory: Factory","title":"eventListenerFactory"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/follow-redirects/","text":"okhttp / okhttp3 / OkHttpClient / followRedirects followRedirects \u00b6 val followRedirects: Boolean","title":"followRedirects - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/follow-redirects/#followredirects","text":"val followRedirects: Boolean","title":"followRedirects"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/follow-ssl-redirects/","text":"okhttp / okhttp3 / OkHttpClient / followSslRedirects followSslRedirects \u00b6 val followSslRedirects: Boolean","title":"followSslRedirects - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/follow-ssl-redirects/#followsslredirects","text":"val followSslRedirects: Boolean","title":"followSslRedirects"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/hostname-verifier/","text":"okhttp / okhttp3 / OkHttpClient / hostnameVerifier hostnameVerifier \u00b6 val hostnameVerifier: HostnameVerifier","title":"hostnameVerifier - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/hostname-verifier/#hostnameverifier","text":"val hostnameVerifier: HostnameVerifier","title":"hostnameVerifier"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/interceptors/","text":"okhttp / okhttp3 / OkHttpClient / interceptors interceptors \u00b6 val interceptors: List < Interceptor > Returns an immutable list of interceptors that observe the full span of each call: from before the connection is established (if any) until after the response source is selected (either the origin server, cache, or both). Getter Returns an immutable list of interceptors that observe the full span of each call: from before the connection is established (if any) until after the response source is selected (either the origin server, cache, or both).","title":"interceptors - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/interceptors/#interceptors","text":"val interceptors: List < Interceptor > Returns an immutable list of interceptors that observe the full span of each call: from before the connection is established (if any) until after the response source is selected (either the origin server, cache, or both). Getter Returns an immutable list of interceptors that observe the full span of each call: from before the connection is established (if any) until after the response source is selected (either the origin server, cache, or both).","title":"interceptors"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/min-web-socket-message-to-compress/","text":"okhttp / okhttp3 / OkHttpClient / minWebSocketMessageToCompress minWebSocketMessageToCompress \u00b6 val minWebSocketMessageToCompress: Long Minimum outbound web socket message size (in bytes) that will be compressed. The default is 1024 bytes. Getter Minimum outbound web socket message size (in bytes) that will be compressed. The default is 1024 bytes.","title":"minWebSocketMessageToCompress - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/min-web-socket-message-to-compress/#minwebsocketmessagetocompress","text":"val minWebSocketMessageToCompress: Long Minimum outbound web socket message size (in bytes) that will be compressed. The default is 1024 bytes. Getter Minimum outbound web socket message size (in bytes) that will be compressed. The default is 1024 bytes.","title":"minWebSocketMessageToCompress"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/network-interceptors/","text":"okhttp / okhttp3 / OkHttpClient / networkInterceptors networkInterceptors \u00b6 val networkInterceptors: List < Interceptor > Returns an immutable list of interceptors that observe a single network request and response. These interceptors must call Interceptor.Chain.proceed exactly once: it is an error for a network interceptor to short-circuit or repeat a network request. Getter Returns an immutable list of interceptors that observe a single network request and response. These interceptors must call Interceptor.Chain.proceed exactly once: it is an error for a network interceptor to short-circuit or repeat a network request.","title":"networkInterceptors - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/network-interceptors/#networkinterceptors","text":"val networkInterceptors: List < Interceptor > Returns an immutable list of interceptors that observe a single network request and response. These interceptors must call Interceptor.Chain.proceed exactly once: it is an error for a network interceptor to short-circuit or repeat a network request. Getter Returns an immutable list of interceptors that observe a single network request and response. These interceptors must call Interceptor.Chain.proceed exactly once: it is an error for a network interceptor to short-circuit or repeat a network request.","title":"networkInterceptors"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/new-builder/","text":"okhttp / okhttp3 / OkHttpClient / newBuilder newBuilder \u00b6 open fun newBuilder(): Builder","title":"newBuilder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/new-builder/#newbuilder","text":"open fun newBuilder(): Builder","title":"newBuilder"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/new-call/","text":"okhttp / okhttp3 / OkHttpClient / newCall newCall \u00b6 open fun newCall(request: Request ): Call Prepares the request to be executed at some point in the future.","title":"newCall - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/new-call/#newcall","text":"open fun newCall(request: Request ): Call Prepares the request to be executed at some point in the future.","title":"newCall"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/new-web-socket/","text":"okhttp / okhttp3 / OkHttpClient / newWebSocket newWebSocket \u00b6 open fun newWebSocket(request: Request , listener: WebSocketListener ): WebSocket Uses request to connect a new web socket.","title":"newWebSocket - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/new-web-socket/#newwebsocket","text":"open fun newWebSocket(request: Request , listener: WebSocketListener ): WebSocket Uses request to connect a new web socket.","title":"newWebSocket"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/ping-interval-millis/","text":"okhttp / okhttp3 / OkHttpClient / pingIntervalMillis pingIntervalMillis \u00b6 val pingIntervalMillis: Int Web socket and HTTP/2 ping interval (in milliseconds). By default pings are not sent. Getter Web socket and HTTP/2 ping interval (in milliseconds). By default pings are not sent.","title":"pingIntervalMillis - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/ping-interval-millis/#pingintervalmillis","text":"val pingIntervalMillis: Int Web socket and HTTP/2 ping interval (in milliseconds). By default pings are not sent. Getter Web socket and HTTP/2 ping interval (in milliseconds). By default pings are not sent.","title":"pingIntervalMillis"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/protocols/","text":"okhttp / okhttp3 / OkHttpClient / protocols protocols \u00b6 val protocols: List < Protocol >","title":"protocols - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/protocols/#protocols","text":"val protocols: List < Protocol >","title":"protocols"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/proxy-authenticator/","text":"okhttp / okhttp3 / OkHttpClient / proxyAuthenticator proxyAuthenticator \u00b6 val proxyAuthenticator: Authenticator","title":"proxyAuthenticator - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/proxy-authenticator/#proxyauthenticator","text":"val proxyAuthenticator: Authenticator","title":"proxyAuthenticator"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/proxy-selector/","text":"okhttp / okhttp3 / OkHttpClient / proxySelector proxySelector \u00b6 val proxySelector: ProxySelector","title":"proxySelector - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/proxy-selector/#proxyselector","text":"val proxySelector: ProxySelector","title":"proxySelector"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/proxy/","text":"okhttp / okhttp3 / OkHttpClient / proxy proxy \u00b6 val proxy: Proxy ?","title":"proxy - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/proxy/#proxy","text":"val proxy: Proxy ?","title":"proxy"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/read-timeout-millis/","text":"okhttp / okhttp3 / OkHttpClient / readTimeoutMillis readTimeoutMillis \u00b6 val readTimeoutMillis: Int Default read timeout (in milliseconds). The default is 10 seconds. Getter Default read timeout (in milliseconds). The default is 10 seconds.","title":"readTimeoutMillis - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/read-timeout-millis/#readtimeoutmillis","text":"val readTimeoutMillis: Int Default read timeout (in milliseconds). The default is 10 seconds. Getter Default read timeout (in milliseconds). The default is 10 seconds.","title":"readTimeoutMillis"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/retry-on-connection-failure/","text":"okhttp / okhttp3 / OkHttpClient / retryOnConnectionFailure retryOnConnectionFailure \u00b6 val retryOnConnectionFailure: Boolean","title":"retryOnConnectionFailure - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/retry-on-connection-failure/#retryonconnectionfailure","text":"val retryOnConnectionFailure: Boolean","title":"retryOnConnectionFailure"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/route-database/","text":"okhttp / okhttp3 / OkHttpClient / routeDatabase routeDatabase \u00b6 val routeDatabase: RouteDatabase","title":"routeDatabase - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/route-database/#routedatabase","text":"val routeDatabase: RouteDatabase","title":"routeDatabase"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/socket-factory/","text":"okhttp / okhttp3 / OkHttpClient / socketFactory socketFactory \u00b6 val socketFactory: SocketFactory","title":"socketFactory - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/socket-factory/#socketfactory","text":"val socketFactory: SocketFactory","title":"socketFactory"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/ssl-socket-factory/","text":"okhttp / okhttp3 / OkHttpClient / sslSocketFactory sslSocketFactory \u00b6 val sslSocketFactory: SSLSocketFactory","title":"sslSocketFactory - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/ssl-socket-factory/#sslsocketfactory","text":"val sslSocketFactory: SSLSocketFactory","title":"sslSocketFactory"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/write-timeout-millis/","text":"okhttp / okhttp3 / OkHttpClient / writeTimeoutMillis writeTimeoutMillis \u00b6 val writeTimeoutMillis: Int Default write timeout (in milliseconds). The default is 10 seconds. Getter Default write timeout (in milliseconds). The default is 10 seconds.","title":"writeTimeoutMillis - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/write-timeout-millis/#writetimeoutmillis","text":"val writeTimeoutMillis: Int Default write timeout (in milliseconds). The default is 10 seconds. Getter Default write timeout (in milliseconds). The default is 10 seconds.","title":"writeTimeoutMillis"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/x509-trust-manager/","text":"okhttp / okhttp3 / OkHttpClient / x509TrustManager x509TrustManager \u00b6 val x509TrustManager: X509TrustManager ?","title":"x509TrustManager - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/x509-trust-manager/#x509trustmanager","text":"val x509TrustManager: X509TrustManager ?","title":"x509TrustManager"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/","text":"okhttp / okhttp3 / OkHttpClient / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder() Functions \u00b6 Name Summary addInterceptor fun addInterceptor(interceptor: Interceptor ): Builder fun addInterceptor(block: (chain: Chain) -> Response ): Builder addNetworkInterceptor fun addNetworkInterceptor(interceptor: Interceptor ): Builder fun addNetworkInterceptor(block: (chain: Chain) -> Response ): Builder authenticator Sets the authenticator used to respond to challenges from origin servers. Use proxyAuthenticator to set the authenticator for proxy servers. fun authenticator(authenticator: Authenticator ): Builder build fun build(): OkHttpClient cache Sets the response cache to be used to read and write cached responses. fun cache(cache: Cache ?): Builder callTimeout Sets the default timeout for complete calls. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. fun callTimeout(timeout: Long , unit: TimeUnit ): Builder fun callTimeout(duration: Duration ): Builder certificatePinner Sets the certificate pinner that constrains which certificates are trusted. By default HTTPS connections rely on only the SSL socket factory to establish trust. Pinning certificates avoids the need to trust certificate authorities. fun certificatePinner(certificatePinner: CertificatePinner ): Builder connectionPool Sets the connection pool used to recycle HTTP and HTTPS connections. fun connectionPool(connectionPool: ConnectionPool ): Builder connectionSpecs fun connectionSpecs(connectionSpecs: List < ConnectionSpec >): Builder connectTimeout Sets the default connect timeout for new connections. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. fun connectTimeout(timeout: Long , unit: TimeUnit ): Builder fun connectTimeout(duration: Duration ): Builder cookieJar Sets the handler that can accept cookies from incoming HTTP responses and provides cookies to outgoing HTTP requests. fun cookieJar(cookieJar: CookieJar ): Builder dispatcher Sets the dispatcher used to set policy and execute asynchronous requests. Must not be null. fun dispatcher(dispatcher: Dispatcher ): Builder dns Sets the DNS service used to lookup IP addresses for hostnames. fun dns(dns: Dns ): Builder eventListener Configure a single client scoped listener that will receive all analytic events for this client. fun eventListener(eventListener: EventListener ): Builder eventListenerFactory Configure a factory to provide per-call scoped listeners that will receive analytic events for this client. fun eventListenerFactory(eventListenerFactory: Factory): Builder followRedirects Configure this client to follow redirects. If unset, redirects will be followed. fun followRedirects(followRedirects: Boolean ): Builder followSslRedirects Configure this client to allow protocol redirects from HTTPS to HTTP and from HTTP to HTTPS. Redirects are still first restricted by followRedirects . Defaults to true. fun followSslRedirects(followProtocolRedirects: Boolean ): Builder hostnameVerifier Sets the verifier used to confirm that response certificates apply to requested hostnames for HTTPS connections. fun hostnameVerifier(hostnameVerifier: HostnameVerifier ): Builder interceptors Returns a modifiable list of interceptors that observe the full span of each call: from before the connection is established (if any) until after the response source is selected (either the origin server, cache, or both). fun interceptors(): MutableList < Interceptor > minWebSocketMessageToCompress Sets minimum outbound web socket message size (in bytes) that will be compressed. fun minWebSocketMessageToCompress(bytes: Long ): Builder networkInterceptors Returns a modifiable list of interceptors that observe a single network request and response. These interceptors must call Interceptor.Chain.proceed exactly once: it is an error for a network interceptor to short-circuit or repeat a network request. fun networkInterceptors(): MutableList < Interceptor > pingInterval Sets the interval between HTTP/2 and web socket pings initiated by this client. Use this to automatically send ping frames until either the connection fails or it is closed. This keeps the connection alive and may detect connectivity failures. fun pingInterval(interval: Long , unit: TimeUnit ): Builder fun pingInterval(duration: Duration ): Builder protocols Configure the protocols used by this client to communicate with remote servers. By default this client will prefer the most efficient transport available, falling back to more ubiquitous protocols. Applications should only call this method to avoid specific compatibility problems, such as web servers that behave incorrectly when HTTP/2 is enabled. fun protocols(protocols: List < Protocol >): Builder proxy Sets the HTTP proxy that will be used by connections created by this client. This takes precedence over proxySelector , which is only honored when this proxy is null (which it is by default). To disable proxy use completely, call proxy(Proxy.NO_PROXY) . fun proxy(proxy: Proxy ?): Builder proxyAuthenticator Sets the authenticator used to respond to challenges from proxy servers. Use authenticator to set the authenticator for origin servers. fun proxyAuthenticator(proxyAuthenticator: Authenticator ): Builder proxySelector Sets the proxy selection policy to be used if no proxy is specified explicitly. The proxy selector may return multiple proxies; in that case they will be tried in sequence until a successful connection is established. fun proxySelector(proxySelector: ProxySelector ): Builder readTimeout Sets the default read timeout for new connections. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. fun readTimeout(timeout: Long , unit: TimeUnit ): Builder fun readTimeout(duration: Duration ): Builder retryOnConnectionFailure Configure this client to retry or not when a connectivity problem is encountered. By default, this client silently recovers from the following problems: fun retryOnConnectionFailure(retryOnConnectionFailure: Boolean ): Builder socketFactory Sets the socket factory used to create connections. OkHttp only uses the parameterless SocketFactory.createSocket method to create unconnected sockets. Overriding this method, e. g., allows the socket to be bound to a specific local address. fun socketFactory(socketFactory: SocketFactory ): Builder sslSocketFactory Sets the socket factory and trust manager used to secure HTTPS connections. If unset, the system defaults will be used. fun sslSocketFactory(sslSocketFactory: SSLSocketFactory , trustManager: X509TrustManager ): Builder writeTimeout Sets the default write timeout for new connections. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. fun writeTimeout(timeout: Long , unit: TimeUnit ): Builder fun writeTimeout(duration: Duration ): Builder","title":"Builder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/#functions","text":"Name Summary addInterceptor fun addInterceptor(interceptor: Interceptor ): Builder fun addInterceptor(block: (chain: Chain) -> Response ): Builder addNetworkInterceptor fun addNetworkInterceptor(interceptor: Interceptor ): Builder fun addNetworkInterceptor(block: (chain: Chain) -> Response ): Builder authenticator Sets the authenticator used to respond to challenges from origin servers. Use proxyAuthenticator to set the authenticator for proxy servers. fun authenticator(authenticator: Authenticator ): Builder build fun build(): OkHttpClient cache Sets the response cache to be used to read and write cached responses. fun cache(cache: Cache ?): Builder callTimeout Sets the default timeout for complete calls. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. fun callTimeout(timeout: Long , unit: TimeUnit ): Builder fun callTimeout(duration: Duration ): Builder certificatePinner Sets the certificate pinner that constrains which certificates are trusted. By default HTTPS connections rely on only the SSL socket factory to establish trust. Pinning certificates avoids the need to trust certificate authorities. fun certificatePinner(certificatePinner: CertificatePinner ): Builder connectionPool Sets the connection pool used to recycle HTTP and HTTPS connections. fun connectionPool(connectionPool: ConnectionPool ): Builder connectionSpecs fun connectionSpecs(connectionSpecs: List < ConnectionSpec >): Builder connectTimeout Sets the default connect timeout for new connections. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. fun connectTimeout(timeout: Long , unit: TimeUnit ): Builder fun connectTimeout(duration: Duration ): Builder cookieJar Sets the handler that can accept cookies from incoming HTTP responses and provides cookies to outgoing HTTP requests. fun cookieJar(cookieJar: CookieJar ): Builder dispatcher Sets the dispatcher used to set policy and execute asynchronous requests. Must not be null. fun dispatcher(dispatcher: Dispatcher ): Builder dns Sets the DNS service used to lookup IP addresses for hostnames. fun dns(dns: Dns ): Builder eventListener Configure a single client scoped listener that will receive all analytic events for this client. fun eventListener(eventListener: EventListener ): Builder eventListenerFactory Configure a factory to provide per-call scoped listeners that will receive analytic events for this client. fun eventListenerFactory(eventListenerFactory: Factory): Builder followRedirects Configure this client to follow redirects. If unset, redirects will be followed. fun followRedirects(followRedirects: Boolean ): Builder followSslRedirects Configure this client to allow protocol redirects from HTTPS to HTTP and from HTTP to HTTPS. Redirects are still first restricted by followRedirects . Defaults to true. fun followSslRedirects(followProtocolRedirects: Boolean ): Builder hostnameVerifier Sets the verifier used to confirm that response certificates apply to requested hostnames for HTTPS connections. fun hostnameVerifier(hostnameVerifier: HostnameVerifier ): Builder interceptors Returns a modifiable list of interceptors that observe the full span of each call: from before the connection is established (if any) until after the response source is selected (either the origin server, cache, or both). fun interceptors(): MutableList < Interceptor > minWebSocketMessageToCompress Sets minimum outbound web socket message size (in bytes) that will be compressed. fun minWebSocketMessageToCompress(bytes: Long ): Builder networkInterceptors Returns a modifiable list of interceptors that observe a single network request and response. These interceptors must call Interceptor.Chain.proceed exactly once: it is an error for a network interceptor to short-circuit or repeat a network request. fun networkInterceptors(): MutableList < Interceptor > pingInterval Sets the interval between HTTP/2 and web socket pings initiated by this client. Use this to automatically send ping frames until either the connection fails or it is closed. This keeps the connection alive and may detect connectivity failures. fun pingInterval(interval: Long , unit: TimeUnit ): Builder fun pingInterval(duration: Duration ): Builder protocols Configure the protocols used by this client to communicate with remote servers. By default this client will prefer the most efficient transport available, falling back to more ubiquitous protocols. Applications should only call this method to avoid specific compatibility problems, such as web servers that behave incorrectly when HTTP/2 is enabled. fun protocols(protocols: List < Protocol >): Builder proxy Sets the HTTP proxy that will be used by connections created by this client. This takes precedence over proxySelector , which is only honored when this proxy is null (which it is by default). To disable proxy use completely, call proxy(Proxy.NO_PROXY) . fun proxy(proxy: Proxy ?): Builder proxyAuthenticator Sets the authenticator used to respond to challenges from proxy servers. Use authenticator to set the authenticator for origin servers. fun proxyAuthenticator(proxyAuthenticator: Authenticator ): Builder proxySelector Sets the proxy selection policy to be used if no proxy is specified explicitly. The proxy selector may return multiple proxies; in that case they will be tried in sequence until a successful connection is established. fun proxySelector(proxySelector: ProxySelector ): Builder readTimeout Sets the default read timeout for new connections. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. fun readTimeout(timeout: Long , unit: TimeUnit ): Builder fun readTimeout(duration: Duration ): Builder retryOnConnectionFailure Configure this client to retry or not when a connectivity problem is encountered. By default, this client silently recovers from the following problems: fun retryOnConnectionFailure(retryOnConnectionFailure: Boolean ): Builder socketFactory Sets the socket factory used to create connections. OkHttp only uses the parameterless SocketFactory.createSocket method to create unconnected sockets. Overriding this method, e. g., allows the socket to be bound to a specific local address. fun socketFactory(socketFactory: SocketFactory ): Builder sslSocketFactory Sets the socket factory and trust manager used to secure HTTPS connections. If unset, the system defaults will be used. fun sslSocketFactory(sslSocketFactory: SSLSocketFactory , trustManager: X509TrustManager ): Builder writeTimeout Sets the default write timeout for new connections. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. fun writeTimeout(timeout: Long , unit: TimeUnit ): Builder fun writeTimeout(duration: Duration ): Builder","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/-init-/","text":"okhttp / okhttp3 / OkHttpClient / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/add-interceptor/","text":"okhttp / okhttp3 / OkHttpClient / Builder / addInterceptor addInterceptor \u00b6 fun addInterceptor(interceptor: Interceptor ): Builder @JvmName(\"-addInterceptor\") inline fun addInterceptor(crossinline block: (chain: Chain) -> Response ): Builder","title":"addInterceptor - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/add-interceptor/#addinterceptor","text":"fun addInterceptor(interceptor: Interceptor ): Builder @JvmName(\"-addInterceptor\") inline fun addInterceptor(crossinline block: (chain: Chain) -> Response ): Builder","title":"addInterceptor"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/add-network-interceptor/","text":"okhttp / okhttp3 / OkHttpClient / Builder / addNetworkInterceptor addNetworkInterceptor \u00b6 fun addNetworkInterceptor(interceptor: Interceptor ): Builder @JvmName(\"-addNetworkInterceptor\") inline fun addNetworkInterceptor(crossinline block: (chain: Chain) -> Response ): Builder","title":"addNetworkInterceptor - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/add-network-interceptor/#addnetworkinterceptor","text":"fun addNetworkInterceptor(interceptor: Interceptor ): Builder @JvmName(\"-addNetworkInterceptor\") inline fun addNetworkInterceptor(crossinline block: (chain: Chain) -> Response ): Builder","title":"addNetworkInterceptor"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/authenticator/","text":"okhttp / okhttp3 / OkHttpClient / Builder / authenticator authenticator \u00b6 fun authenticator(authenticator: Authenticator ): Builder Sets the authenticator used to respond to challenges from origin servers. Use proxyAuthenticator to set the authenticator for proxy servers. If unset, the no authentication will be attempted .","title":"authenticator - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/authenticator/#authenticator","text":"fun authenticator(authenticator: Authenticator ): Builder Sets the authenticator used to respond to challenges from origin servers. Use proxyAuthenticator to set the authenticator for proxy servers. If unset, the no authentication will be attempted .","title":"authenticator"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/build/","text":"okhttp / okhttp3 / OkHttpClient / Builder / build build \u00b6 fun build(): OkHttpClient","title":"build - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/build/#build","text":"fun build(): OkHttpClient","title":"build"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/cache/","text":"okhttp / okhttp3 / OkHttpClient / Builder / cache cache \u00b6 fun cache(cache: Cache ?): Builder Sets the response cache to be used to read and write cached responses.","title":"cache - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/cache/#cache","text":"fun cache(cache: Cache ?): Builder Sets the response cache to be used to read and write cached responses.","title":"cache"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/call-timeout/","text":"okhttp / okhttp3 / OkHttpClient / Builder / callTimeout callTimeout \u00b6 fun callTimeout(timeout: Long , unit: TimeUnit ): Builder @IgnoreJRERequirement fun callTimeout(duration: Duration ): Builder Sets the default timeout for complete calls. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. The call timeout spans the entire call: resolving DNS, connecting, writing the request body, server processing, and reading the response body. If the call requires redirects or retries all must complete within one timeout period. The default value is 0 which imposes no timeout.","title":"callTimeout - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/call-timeout/#calltimeout","text":"fun callTimeout(timeout: Long , unit: TimeUnit ): Builder @IgnoreJRERequirement fun callTimeout(duration: Duration ): Builder Sets the default timeout for complete calls. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. The call timeout spans the entire call: resolving DNS, connecting, writing the request body, server processing, and reading the response body. If the call requires redirects or retries all must complete within one timeout period. The default value is 0 which imposes no timeout.","title":"callTimeout"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/certificate-pinner/","text":"okhttp / okhttp3 / OkHttpClient / Builder / certificatePinner certificatePinner \u00b6 fun certificatePinner(certificatePinner: CertificatePinner ): Builder Sets the certificate pinner that constrains which certificates are trusted. By default HTTPS connections rely on only the SSL socket factory to establish trust. Pinning certificates avoids the need to trust certificate authorities.","title":"certificatePinner - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/certificate-pinner/#certificatepinner","text":"fun certificatePinner(certificatePinner: CertificatePinner ): Builder Sets the certificate pinner that constrains which certificates are trusted. By default HTTPS connections rely on only the SSL socket factory to establish trust. Pinning certificates avoids the need to trust certificate authorities.","title":"certificatePinner"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/connect-timeout/","text":"okhttp / okhttp3 / OkHttpClient / Builder / connectTimeout connectTimeout \u00b6 fun connectTimeout(timeout: Long , unit: TimeUnit ): Builder @IgnoreJRERequirement fun connectTimeout(duration: Duration ): Builder Sets the default connect timeout for new connections. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. The connect timeout is applied when connecting a TCP socket to the target host. The default value is 10 seconds.","title":"connectTimeout - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/connect-timeout/#connecttimeout","text":"fun connectTimeout(timeout: Long , unit: TimeUnit ): Builder @IgnoreJRERequirement fun connectTimeout(duration: Duration ): Builder Sets the default connect timeout for new connections. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. The connect timeout is applied when connecting a TCP socket to the target host. The default value is 10 seconds.","title":"connectTimeout"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/connection-pool/","text":"okhttp / okhttp3 / OkHttpClient / Builder / connectionPool connectionPool \u00b6 fun connectionPool(connectionPool: ConnectionPool ): Builder Sets the connection pool used to recycle HTTP and HTTPS connections. If unset, a new connection pool will be used.","title":"connectionPool - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/connection-pool/#connectionpool","text":"fun connectionPool(connectionPool: ConnectionPool ): Builder Sets the connection pool used to recycle HTTP and HTTPS connections. If unset, a new connection pool will be used.","title":"connectionPool"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/connection-specs/","text":"okhttp / okhttp3 / OkHttpClient / Builder / connectionSpecs connectionSpecs \u00b6 fun connectionSpecs(connectionSpecs: List < ConnectionSpec >): Builder","title":"connectionSpecs - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/connection-specs/#connectionspecs","text":"fun connectionSpecs(connectionSpecs: List < ConnectionSpec >): Builder","title":"connectionSpecs"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/cookie-jar/","text":"okhttp / okhttp3 / OkHttpClient / Builder / cookieJar cookieJar \u00b6 fun cookieJar(cookieJar: CookieJar ): Builder Sets the handler that can accept cookies from incoming HTTP responses and provides cookies to outgoing HTTP requests. If unset, no cookies will be accepted nor provided.","title":"cookieJar - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/cookie-jar/#cookiejar","text":"fun cookieJar(cookieJar: CookieJar ): Builder Sets the handler that can accept cookies from incoming HTTP responses and provides cookies to outgoing HTTP requests. If unset, no cookies will be accepted nor provided.","title":"cookieJar"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/dispatcher/","text":"okhttp / okhttp3 / OkHttpClient / Builder / dispatcher dispatcher \u00b6 fun dispatcher(dispatcher: Dispatcher ): Builder Sets the dispatcher used to set policy and execute asynchronous requests. Must not be null.","title":"dispatcher - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/dispatcher/#dispatcher","text":"fun dispatcher(dispatcher: Dispatcher ): Builder Sets the dispatcher used to set policy and execute asynchronous requests. Must not be null.","title":"dispatcher"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/dns/","text":"okhttp / okhttp3 / OkHttpClient / Builder / dns dns \u00b6 fun dns(dns: Dns ): Builder Sets the DNS service used to lookup IP addresses for hostnames. If unset, the system-wide default DNS will be used.","title":"dns - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/dns/#dns","text":"fun dns(dns: Dns ): Builder Sets the DNS service used to lookup IP addresses for hostnames. If unset, the system-wide default DNS will be used.","title":"dns"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/event-listener-factory/","text":"okhttp / okhttp3 / OkHttpClient / Builder / eventListenerFactory eventListenerFactory \u00b6 fun eventListenerFactory(eventListenerFactory: Factory): Builder Configure a factory to provide per-call scoped listeners that will receive analytic events for this client. See Also EventListener","title":"eventListenerFactory - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/event-listener-factory/#eventlistenerfactory","text":"fun eventListenerFactory(eventListenerFactory: Factory): Builder Configure a factory to provide per-call scoped listeners that will receive analytic events for this client. See Also EventListener","title":"eventListenerFactory"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/event-listener/","text":"okhttp / okhttp3 / OkHttpClient / Builder / eventListener eventListener \u00b6 fun eventListener(eventListener: EventListener ): Builder Configure a single client scoped listener that will receive all analytic events for this client. See Also EventListener","title":"eventListener - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/event-listener/#eventlistener","text":"fun eventListener(eventListener: EventListener ): Builder Configure a single client scoped listener that will receive all analytic events for this client. See Also EventListener","title":"eventListener"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/follow-redirects/","text":"okhttp / okhttp3 / OkHttpClient / Builder / followRedirects followRedirects \u00b6 fun followRedirects(followRedirects: Boolean ): Builder Configure this client to follow redirects. If unset, redirects will be followed.","title":"followRedirects - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/follow-redirects/#followredirects","text":"fun followRedirects(followRedirects: Boolean ): Builder Configure this client to follow redirects. If unset, redirects will be followed.","title":"followRedirects"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/follow-ssl-redirects/","text":"okhttp / okhttp3 / OkHttpClient / Builder / followSslRedirects followSslRedirects \u00b6 fun followSslRedirects(followProtocolRedirects: Boolean ): Builder Configure this client to allow protocol redirects from HTTPS to HTTP and from HTTP to HTTPS. Redirects are still first restricted by followRedirects . Defaults to true. Parameters \u00b6 followProtocolRedirects - whether to follow redirects between HTTPS and HTTP.","title":"followSslRedirects - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/follow-ssl-redirects/#followsslredirects","text":"fun followSslRedirects(followProtocolRedirects: Boolean ): Builder Configure this client to allow protocol redirects from HTTPS to HTTP and from HTTP to HTTPS. Redirects are still first restricted by followRedirects . Defaults to true.","title":"followSslRedirects"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/follow-ssl-redirects/#parameters","text":"followProtocolRedirects - whether to follow redirects between HTTPS and HTTP.","title":"Parameters"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/hostname-verifier/","text":"okhttp / okhttp3 / OkHttpClient / Builder / hostnameVerifier hostnameVerifier \u00b6 fun hostnameVerifier(hostnameVerifier: HostnameVerifier ): Builder Sets the verifier used to confirm that response certificates apply to requested hostnames for HTTPS connections. If unset, a default hostname verifier will be used.","title":"hostnameVerifier - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/hostname-verifier/#hostnameverifier","text":"fun hostnameVerifier(hostnameVerifier: HostnameVerifier ): Builder Sets the verifier used to confirm that response certificates apply to requested hostnames for HTTPS connections. If unset, a default hostname verifier will be used.","title":"hostnameVerifier"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/interceptors/","text":"okhttp / okhttp3 / OkHttpClient / Builder / interceptors interceptors \u00b6 fun interceptors(): MutableList < Interceptor > Returns a modifiable list of interceptors that observe the full span of each call: from before the connection is established (if any) until after the response source is selected (either the origin server, cache, or both).","title":"interceptors - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/interceptors/#interceptors","text":"fun interceptors(): MutableList < Interceptor > Returns a modifiable list of interceptors that observe the full span of each call: from before the connection is established (if any) until after the response source is selected (either the origin server, cache, or both).","title":"interceptors"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/min-web-socket-message-to-compress/","text":"okhttp / okhttp3 / OkHttpClient / Builder / minWebSocketMessageToCompress minWebSocketMessageToCompress \u00b6 fun minWebSocketMessageToCompress(bytes: Long ): Builder Sets minimum outbound web socket message size (in bytes) that will be compressed. Set to 0 to enable compression for all outbound messages. 1024 by default.","title":"minWebSocketMessageToCompress - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/min-web-socket-message-to-compress/#minwebsocketmessagetocompress","text":"fun minWebSocketMessageToCompress(bytes: Long ): Builder Sets minimum outbound web socket message size (in bytes) that will be compressed. Set to 0 to enable compression for all outbound messages. 1024 by default.","title":"minWebSocketMessageToCompress"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/network-interceptors/","text":"okhttp / okhttp3 / OkHttpClient / Builder / networkInterceptors networkInterceptors \u00b6 fun networkInterceptors(): MutableList < Interceptor > Returns a modifiable list of interceptors that observe a single network request and response. These interceptors must call Interceptor.Chain.proceed exactly once: it is an error for a network interceptor to short-circuit or repeat a network request.","title":"networkInterceptors - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/network-interceptors/#networkinterceptors","text":"fun networkInterceptors(): MutableList < Interceptor > Returns a modifiable list of interceptors that observe a single network request and response. These interceptors must call Interceptor.Chain.proceed exactly once: it is an error for a network interceptor to short-circuit or repeat a network request.","title":"networkInterceptors"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/ping-interval/","text":"okhttp / okhttp3 / OkHttpClient / Builder / pingInterval pingInterval \u00b6 fun pingInterval(interval: Long , unit: TimeUnit ): Builder @IgnoreJRERequirement fun pingInterval(duration: Duration ): Builder Sets the interval between HTTP/2 and web socket pings initiated by this client. Use this to automatically send ping frames until either the connection fails or it is closed. This keeps the connection alive and may detect connectivity failures. If the server does not respond to each ping with a pong within interval , this client will assume that connectivity has been lost. When this happens on a web socket the connection is canceled and its listener is notified . When it happens on an HTTP/2 connection the connection is closed and any calls it is carrying will fail with an IOException . The default value of 0 disables client-initiated pings.","title":"pingInterval - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/ping-interval/#pinginterval","text":"fun pingInterval(interval: Long , unit: TimeUnit ): Builder @IgnoreJRERequirement fun pingInterval(duration: Duration ): Builder Sets the interval between HTTP/2 and web socket pings initiated by this client. Use this to automatically send ping frames until either the connection fails or it is closed. This keeps the connection alive and may detect connectivity failures. If the server does not respond to each ping with a pong within interval , this client will assume that connectivity has been lost. When this happens on a web socket the connection is canceled and its listener is notified . When it happens on an HTTP/2 connection the connection is closed and any calls it is carrying will fail with an IOException . The default value of 0 disables client-initiated pings.","title":"pingInterval"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/protocols/","text":"okhttp / okhttp3 / OkHttpClient / Builder / protocols protocols \u00b6 fun protocols(protocols: List < Protocol >): Builder Configure the protocols used by this client to communicate with remote servers. By default this client will prefer the most efficient transport available, falling back to more ubiquitous protocols. Applications should only call this method to avoid specific compatibility problems, such as web servers that behave incorrectly when HTTP/2 is enabled. The following protocols are currently supported: http/1.1 h2 h2 with prior knowledge(cleartext only) This is an evolving set. Future releases include support for transitional protocols. The http/1.1 transport will never be dropped. If multiple protocols are specified, ALPN will be used to negotiate a transport. Protocol negotiation is only attempted for HTTPS URLs. Protocol.HTTP_1_0 is not supported in this set. Requests are initiated with HTTP/1.1 . If the server responds with HTTP/1.0 , that will be exposed by Response.protocol . Parameters \u00b6 protocols - the protocols to use, in order of preference. If the list contains Protocol.H2_PRIOR_KNOWLEDGE then that must be the only protocol and HTTPS URLs will not be supported. Otherwise the list must contain Protocol.HTTP_1_1 . The list must not contain null or Protocol.HTTP_1_0 .","title":"protocols - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/protocols/#protocols","text":"fun protocols(protocols: List < Protocol >): Builder Configure the protocols used by this client to communicate with remote servers. By default this client will prefer the most efficient transport available, falling back to more ubiquitous protocols. Applications should only call this method to avoid specific compatibility problems, such as web servers that behave incorrectly when HTTP/2 is enabled. The following protocols are currently supported: http/1.1 h2 h2 with prior knowledge(cleartext only) This is an evolving set. Future releases include support for transitional protocols. The http/1.1 transport will never be dropped. If multiple protocols are specified, ALPN will be used to negotiate a transport. Protocol negotiation is only attempted for HTTPS URLs. Protocol.HTTP_1_0 is not supported in this set. Requests are initiated with HTTP/1.1 . If the server responds with HTTP/1.0 , that will be exposed by Response.protocol .","title":"protocols"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/protocols/#parameters","text":"protocols - the protocols to use, in order of preference. If the list contains Protocol.H2_PRIOR_KNOWLEDGE then that must be the only protocol and HTTPS URLs will not be supported. Otherwise the list must contain Protocol.HTTP_1_1 . The list must not contain null or Protocol.HTTP_1_0 .","title":"Parameters"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/proxy-authenticator/","text":"okhttp / okhttp3 / OkHttpClient / Builder / proxyAuthenticator proxyAuthenticator \u00b6 fun proxyAuthenticator(proxyAuthenticator: Authenticator ): Builder Sets the authenticator used to respond to challenges from proxy servers. Use authenticator to set the authenticator for origin servers. If unset, the no authentication will be attempted .","title":"proxyAuthenticator - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/proxy-authenticator/#proxyauthenticator","text":"fun proxyAuthenticator(proxyAuthenticator: Authenticator ): Builder Sets the authenticator used to respond to challenges from proxy servers. Use authenticator to set the authenticator for origin servers. If unset, the no authentication will be attempted .","title":"proxyAuthenticator"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/proxy-selector/","text":"okhttp / okhttp3 / OkHttpClient / Builder / proxySelector proxySelector \u00b6 fun proxySelector(proxySelector: ProxySelector ): Builder Sets the proxy selection policy to be used if no proxy is specified explicitly. The proxy selector may return multiple proxies; in that case they will be tried in sequence until a successful connection is established. If unset, the system-wide default proxy selector will be used.","title":"proxySelector - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/proxy-selector/#proxyselector","text":"fun proxySelector(proxySelector: ProxySelector ): Builder Sets the proxy selection policy to be used if no proxy is specified explicitly. The proxy selector may return multiple proxies; in that case they will be tried in sequence until a successful connection is established. If unset, the system-wide default proxy selector will be used.","title":"proxySelector"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/proxy/","text":"okhttp / okhttp3 / OkHttpClient / Builder / proxy proxy \u00b6 fun proxy(proxy: Proxy ?): Builder Sets the HTTP proxy that will be used by connections created by this client. This takes precedence over proxySelector , which is only honored when this proxy is null (which it is by default). To disable proxy use completely, call proxy(Proxy.NO_PROXY) .","title":"proxy - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/proxy/#proxy","text":"fun proxy(proxy: Proxy ?): Builder Sets the HTTP proxy that will be used by connections created by this client. This takes precedence over proxySelector , which is only honored when this proxy is null (which it is by default). To disable proxy use completely, call proxy(Proxy.NO_PROXY) .","title":"proxy"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/read-timeout/","text":"okhttp / okhttp3 / OkHttpClient / Builder / readTimeout readTimeout \u00b6 fun readTimeout(timeout: Long , unit: TimeUnit ): Builder @IgnoreJRERequirement fun readTimeout(duration: Duration ): Builder Sets the default read timeout for new connections. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. The read timeout is applied to both the TCP socket and for individual read IO operations including on Source of the Response . The default value is 10 seconds. See Also Socket.setSoTimeout Source.timeout","title":"readTimeout - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/read-timeout/#readtimeout","text":"fun readTimeout(timeout: Long , unit: TimeUnit ): Builder @IgnoreJRERequirement fun readTimeout(duration: Duration ): Builder Sets the default read timeout for new connections. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. The read timeout is applied to both the TCP socket and for individual read IO operations including on Source of the Response . The default value is 10 seconds. See Also Socket.setSoTimeout Source.timeout","title":"readTimeout"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/retry-on-connection-failure/","text":"okhttp / okhttp3 / OkHttpClient / Builder / retryOnConnectionFailure retryOnConnectionFailure \u00b6 fun retryOnConnectionFailure(retryOnConnectionFailure: Boolean ): Builder Configure this client to retry or not when a connectivity problem is encountered. By default, this client silently recovers from the following problems: Unreachable IP addresses. If the URL\u2019s host has multiple IP addresses, failure to reach any individual IP address doesn\u2019t fail the overall request. This can increase availability of multi-homed services. Stale pooled connections. The ConnectionPool reuses sockets to decrease request latency, but these connections will occasionally time out. Unreachable proxy servers. A ProxySelector can be used to attempt multiple proxy servers in sequence, eventually falling back to a direct connection. Set this to false to avoid retrying requests when doing so is destructive. In this case the calling application should do its own recovery of connectivity failures.","title":"retryOnConnectionFailure - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/retry-on-connection-failure/#retryonconnectionfailure","text":"fun retryOnConnectionFailure(retryOnConnectionFailure: Boolean ): Builder Configure this client to retry or not when a connectivity problem is encountered. By default, this client silently recovers from the following problems: Unreachable IP addresses. If the URL\u2019s host has multiple IP addresses, failure to reach any individual IP address doesn\u2019t fail the overall request. This can increase availability of multi-homed services. Stale pooled connections. The ConnectionPool reuses sockets to decrease request latency, but these connections will occasionally time out. Unreachable proxy servers. A ProxySelector can be used to attempt multiple proxy servers in sequence, eventually falling back to a direct connection. Set this to false to avoid retrying requests when doing so is destructive. In this case the calling application should do its own recovery of connectivity failures.","title":"retryOnConnectionFailure"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/socket-factory/","text":"okhttp / okhttp3 / OkHttpClient / Builder / socketFactory socketFactory \u00b6 fun socketFactory(socketFactory: SocketFactory ): Builder Sets the socket factory used to create connections. OkHttp only uses the parameterless SocketFactory.createSocket method to create unconnected sockets. Overriding this method, e. g., allows the socket to be bound to a specific local address. If unset, the system-wide default socket factory will be used.","title":"socketFactory - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/socket-factory/#socketfactory","text":"fun socketFactory(socketFactory: SocketFactory ): Builder Sets the socket factory used to create connections. OkHttp only uses the parameterless SocketFactory.createSocket method to create unconnected sockets. Overriding this method, e. g., allows the socket to be bound to a specific local address. If unset, the system-wide default socket factory will be used.","title":"socketFactory"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/ssl-socket-factory/","text":"okhttp / okhttp3 / OkHttpClient / Builder / sslSocketFactory sslSocketFactory \u00b6 fun sslSocketFactory(sslSocketFactory: SSLSocketFactory , trustManager: X509TrustManager ): Builder Sets the socket factory and trust manager used to secure HTTPS connections. If unset, the system defaults will be used. Most applications should not call this method, and instead use the system defaults. Those classes include special optimizations that can be lost if the implementations are decorated. If necessary, you can create and configure the defaults yourself with the following code: TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance( TrustManagerFactory.getDefaultAlgorithm()); trustManagerFactory.init((KeyStore) null); TrustManager[] trustManagers = trustManagerFactory.getTrustManagers(); if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) { throw new IllegalStateException(\"Unexpected default trust managers:\" + Arrays.toString(trustManagers)); } X509TrustManager trustManager = (X509TrustManager) trustManagers[0]; SSLContext sslContext = SSLContext.getInstance(\"TLS\"); sslContext.init(null, new TrustManager[] { trustManager }, null); SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory(); OkHttpClient client = new OkHttpClient.Builder() .sslSocketFactory(sslSocketFactory, trustManager) .build(); TrustManagers on Android are Weird! \u00b6 Trust managers targeting Android must also define a method that has this signature: @SuppressWarnings(\"unused\") public List<X509Certificate> checkServerTrusted( X509Certificate[] chain, String authType, String host) throws CertificateException { } This method works like X509TrustManager.checkServerTrusted but it receives the hostname of the server as an extra parameter. Regardless of what checks this method performs, OkHttp will always check that the server\u2019s certificates match its hostname using the HostnameVerifier . See android.net.http.X509TrustManagerExtensions for more information.","title":"sslSocketFactory - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/ssl-socket-factory/#sslsocketfactory","text":"fun sslSocketFactory(sslSocketFactory: SSLSocketFactory , trustManager: X509TrustManager ): Builder Sets the socket factory and trust manager used to secure HTTPS connections. If unset, the system defaults will be used. Most applications should not call this method, and instead use the system defaults. Those classes include special optimizations that can be lost if the implementations are decorated. If necessary, you can create and configure the defaults yourself with the following code: TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance( TrustManagerFactory.getDefaultAlgorithm()); trustManagerFactory.init((KeyStore) null); TrustManager[] trustManagers = trustManagerFactory.getTrustManagers(); if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) { throw new IllegalStateException(\"Unexpected default trust managers:\" + Arrays.toString(trustManagers)); } X509TrustManager trustManager = (X509TrustManager) trustManagers[0]; SSLContext sslContext = SSLContext.getInstance(\"TLS\"); sslContext.init(null, new TrustManager[] { trustManager }, null); SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory(); OkHttpClient client = new OkHttpClient.Builder() .sslSocketFactory(sslSocketFactory, trustManager) .build();","title":"sslSocketFactory"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/ssl-socket-factory/#trustmanagers-on-android-are-weird","text":"Trust managers targeting Android must also define a method that has this signature: @SuppressWarnings(\"unused\") public List<X509Certificate> checkServerTrusted( X509Certificate[] chain, String authType, String host) throws CertificateException { } This method works like X509TrustManager.checkServerTrusted but it receives the hostname of the server as an extra parameter. Regardless of what checks this method performs, OkHttp will always check that the server\u2019s certificates match its hostname using the HostnameVerifier . See android.net.http.X509TrustManagerExtensions for more information.","title":"TrustManagers on Android are Weird!"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/write-timeout/","text":"okhttp / okhttp3 / OkHttpClient / Builder / writeTimeout writeTimeout \u00b6 fun writeTimeout(timeout: Long , unit: TimeUnit ): Builder @IgnoreJRERequirement fun writeTimeout(duration: Duration ): Builder Sets the default write timeout for new connections. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. The write timeout is applied for individual write IO operations. The default value is 10 seconds. See Also Sink.timeout","title":"writeTimeout - OkHttp"},{"location":"4.x/okhttp/okhttp3/-ok-http-client/-builder/write-timeout/#writetimeout","text":"fun writeTimeout(timeout: Long , unit: TimeUnit ): Builder @IgnoreJRERequirement fun writeTimeout(duration: Duration ): Builder Sets the default write timeout for new connections. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds. The write timeout is applied for individual write IO operations. The default value is 10 seconds. See Also Sink.timeout","title":"writeTimeout"},{"location":"4.x/okhttp/okhttp3/-protocol/","text":"okhttp / okhttp3 / Protocol Protocol \u00b6 enum class Protocol Protocols that OkHttp implements for ALPN selection. Protocol vs Scheme \u00b6 Despite its name, java.net.URL.getProtocol returns the scheme (http, https, etc.) of the URL, not the protocol (http/1.1, spdy/3.1, etc.). OkHttp uses the word protocol to identify how HTTP messages are framed. Enum Values \u00b6 Name Summary HTTP_1_0 An obsolete plaintext framing that does not use persistent sockets by default. HTTP_1_1 A plaintext framing that includes persistent connections. HTTP_2 The IETF\u2019s binary-framed protocol that includes header compression, multiplexing multiple requests on the same socket, and server-push. HTTP/1.1 semantics are layered on HTTP/2. H2_PRIOR_KNOWLEDGE Cleartext HTTP/2 with no \u201cupgrade\u201d round trip. This option requires the client to have prior knowledge that the server supports cleartext HTTP/2. QUIC QUIC (Quick UDP Internet Connection) is a new multiplexed and secure transport atop UDP, designed from the ground up and optimized for HTTP/2 semantics. HTTP/1.1 semantics are layered on HTTP/2. Functions \u00b6 Name Summary toString Returns the string used to identify this protocol for ALPN, like \u201chttp/1.1\u201d, \u201cspdy/3.1\u201d or \u201ch2\u201d. fun toString(): String Companion Object Functions \u00b6 Name Summary get Returns the protocol identified by protocol . fun get(protocol: String ): Protocol","title":"Protocol - OkHttp"},{"location":"4.x/okhttp/okhttp3/-protocol/#protocol","text":"enum class Protocol Protocols that OkHttp implements for ALPN selection.","title":"Protocol"},{"location":"4.x/okhttp/okhttp3/-protocol/#protocol-vs-scheme","text":"Despite its name, java.net.URL.getProtocol returns the scheme (http, https, etc.) of the URL, not the protocol (http/1.1, spdy/3.1, etc.). OkHttp uses the word protocol to identify how HTTP messages are framed.","title":"Protocol vs Scheme"},{"location":"4.x/okhttp/okhttp3/-protocol/#enum-values","text":"Name Summary HTTP_1_0 An obsolete plaintext framing that does not use persistent sockets by default. HTTP_1_1 A plaintext framing that includes persistent connections. HTTP_2 The IETF\u2019s binary-framed protocol that includes header compression, multiplexing multiple requests on the same socket, and server-push. HTTP/1.1 semantics are layered on HTTP/2. H2_PRIOR_KNOWLEDGE Cleartext HTTP/2 with no \u201cupgrade\u201d round trip. This option requires the client to have prior knowledge that the server supports cleartext HTTP/2. QUIC QUIC (Quick UDP Internet Connection) is a new multiplexed and secure transport atop UDP, designed from the ground up and optimized for HTTP/2 semantics. HTTP/1.1 semantics are layered on HTTP/2.","title":"Enum Values"},{"location":"4.x/okhttp/okhttp3/-protocol/#functions","text":"Name Summary toString Returns the string used to identify this protocol for ALPN, like \u201chttp/1.1\u201d, \u201cspdy/3.1\u201d or \u201ch2\u201d. fun toString(): String","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-protocol/#companion-object-functions","text":"Name Summary get Returns the protocol identified by protocol . fun get(protocol: String ): Protocol","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-protocol/-h-t-t-p_1_0/","text":"okhttp / okhttp3 / Protocol / HTTP_1_0 HTTP_1_0 \u00b6 HTTP_1_0 An obsolete plaintext framing that does not use persistent sockets by default.","title":"HTTP_1_0 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-protocol/-h-t-t-p_1_0/#http_1_0","text":"HTTP_1_0 An obsolete plaintext framing that does not use persistent sockets by default.","title":"HTTP_1_0"},{"location":"4.x/okhttp/okhttp3/-protocol/-h-t-t-p_1_1/","text":"okhttp / okhttp3 / Protocol / HTTP_1_1 HTTP_1_1 \u00b6 HTTP_1_1 A plaintext framing that includes persistent connections. This version of OkHttp implements RFC 7230 , and tracks revisions to that spec.","title":"HTTP_1_1 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-protocol/-h-t-t-p_1_1/#http_1_1","text":"HTTP_1_1 A plaintext framing that includes persistent connections. This version of OkHttp implements RFC 7230 , and tracks revisions to that spec.","title":"HTTP_1_1"},{"location":"4.x/okhttp/okhttp3/-protocol/-h-t-t-p_2/","text":"okhttp / okhttp3 / Protocol / HTTP_2 HTTP_2 \u00b6 HTTP_2 The IETF\u2019s binary-framed protocol that includes header compression, multiplexing multiple requests on the same socket, and server-push. HTTP/1.1 semantics are layered on HTTP/2. HTTP/2 requires deployments of HTTP/2 that use TLS 1.2 support CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 , present in Java 8+ and Android 5+. Servers that enforce this may send an exception message including the string INADEQUATE_SECURITY .","title":"HTTP_2 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-protocol/-h-t-t-p_2/#http_2","text":"HTTP_2 The IETF\u2019s binary-framed protocol that includes header compression, multiplexing multiple requests on the same socket, and server-push. HTTP/1.1 semantics are layered on HTTP/2. HTTP/2 requires deployments of HTTP/2 that use TLS 1.2 support CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 , present in Java 8+ and Android 5+. Servers that enforce this may send an exception message including the string INADEQUATE_SECURITY .","title":"HTTP_2"},{"location":"4.x/okhttp/okhttp3/-protocol/-h2_-p-r-i-o-r_-k-n-o-w-l-e-d-g-e/","text":"okhttp / okhttp3 / Protocol / H2_PRIOR_KNOWLEDGE H2_PRIOR_KNOWLEDGE \u00b6 H2_PRIOR_KNOWLEDGE Cleartext HTTP/2 with no \u201cupgrade\u201d round trip. This option requires the client to have prior knowledge that the server supports cleartext HTTP/2. See also Starting HTTP/2 with Prior Knowledge .","title":"H2_PRIOR_KNOWLEDGE - OkHttp"},{"location":"4.x/okhttp/okhttp3/-protocol/-h2_-p-r-i-o-r_-k-n-o-w-l-e-d-g-e/#h2_prior_knowledge","text":"H2_PRIOR_KNOWLEDGE Cleartext HTTP/2 with no \u201cupgrade\u201d round trip. This option requires the client to have prior knowledge that the server supports cleartext HTTP/2. See also Starting HTTP/2 with Prior Knowledge .","title":"H2_PRIOR_KNOWLEDGE"},{"location":"4.x/okhttp/okhttp3/-protocol/-q-u-i-c/","text":"okhttp / okhttp3 / Protocol / QUIC QUIC \u00b6 QUIC QUIC (Quick UDP Internet Connection) is a new multiplexed and secure transport atop UDP, designed from the ground up and optimized for HTTP/2 semantics. HTTP/1.1 semantics are layered on HTTP/2. QUIC is not natively supported by OkHttp, but provided to allow a theoretical interceptor that provides support.","title":"QUIC - OkHttp"},{"location":"4.x/okhttp/okhttp3/-protocol/-q-u-i-c/#quic","text":"QUIC QUIC (Quick UDP Internet Connection) is a new multiplexed and secure transport atop UDP, designed from the ground up and optimized for HTTP/2 semantics. HTTP/1.1 semantics are layered on HTTP/2. QUIC is not natively supported by OkHttp, but provided to allow a theoretical interceptor that provides support.","title":"QUIC"},{"location":"4.x/okhttp/okhttp3/-protocol/get/","text":"okhttp / okhttp3 / Protocol / get get \u00b6 @JvmStatic fun get(protocol: String ): Protocol Returns the protocol identified by protocol . Exceptions \u00b6 IOException - if protocol is unknown.","title":"get - OkHttp"},{"location":"4.x/okhttp/okhttp3/-protocol/get/#get","text":"@JvmStatic fun get(protocol: String ): Protocol Returns the protocol identified by protocol .","title":"get"},{"location":"4.x/okhttp/okhttp3/-protocol/get/#exceptions","text":"IOException - if protocol is unknown.","title":"Exceptions"},{"location":"4.x/okhttp/okhttp3/-protocol/to-string/","text":"okhttp / okhttp3 / Protocol / toString toString \u00b6 fun toString(): String Returns the string used to identify this protocol for ALPN, like \u201chttp/1.1\u201d, \u201cspdy/3.1\u201d or \u201ch2\u201d. See also IANA tls-extensiontype-values .","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-protocol/to-string/#tostring","text":"fun toString(): String Returns the string used to identify this protocol for ALPN, like \u201chttp/1.1\u201d, \u201cspdy/3.1\u201d or \u201ch2\u201d. See also IANA tls-extensiontype-values .","title":"toString"},{"location":"4.x/okhttp/okhttp3/-request/","text":"okhttp / okhttp3 / Request Request \u00b6 class Request An HTTP request. Instances of this class are immutable if their body is null or itself immutable. Types \u00b6 Name Summary Builder class Builder Properties \u00b6 Name Summary body val body: RequestBody ? cacheControl Returns the cache control directives for this response. This is never null, even if this response contains no Cache-Control header. val cacheControl: CacheControl headers val headers: Headers isHttps val isHttps: Boolean method val method: String url val url: HttpUrl Functions \u00b6 Name Summary header fun header(name: String ): String ? headers fun headers(name: String ): List < String > newBuilder fun newBuilder(): Builder tag Returns the tag attached with Object.class as a key, or null if no tag is attached with that key. fun tag(): Any ? Returns the tag attached with type as a key, or null if no tag is attached with that key. fun <T> tag(type: Class <out T>): T? toString fun toString(): String","title":"Request - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/#request","text":"class Request An HTTP request. Instances of this class are immutable if their body is null or itself immutable.","title":"Request"},{"location":"4.x/okhttp/okhttp3/-request/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"4.x/okhttp/okhttp3/-request/#properties","text":"Name Summary body val body: RequestBody ? cacheControl Returns the cache control directives for this response. This is never null, even if this response contains no Cache-Control header. val cacheControl: CacheControl headers val headers: Headers isHttps val isHttps: Boolean method val method: String url val url: HttpUrl","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-request/#functions","text":"Name Summary header fun header(name: String ): String ? headers fun headers(name: String ): List < String > newBuilder fun newBuilder(): Builder tag Returns the tag attached with Object.class as a key, or null if no tag is attached with that key. fun tag(): Any ? Returns the tag attached with type as a key, or null if no tag is attached with that key. fun <T> tag(type: Class <out T>): T? toString fun toString(): String","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-request/body/","text":"okhttp / okhttp3 / Request / body body \u00b6 val body: RequestBody ?","title":"body - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/body/#body","text":"val body: RequestBody ?","title":"body"},{"location":"4.x/okhttp/okhttp3/-request/cache-control/","text":"okhttp / okhttp3 / Request / cacheControl cacheControl \u00b6 val cacheControl: CacheControl Returns the cache control directives for this response. This is never null, even if this response contains no Cache-Control header.","title":"cacheControl - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/cache-control/#cachecontrol","text":"val cacheControl: CacheControl Returns the cache control directives for this response. This is never null, even if this response contains no Cache-Control header.","title":"cacheControl"},{"location":"4.x/okhttp/okhttp3/-request/header/","text":"okhttp / okhttp3 / Request / header header \u00b6 fun header(name: String ): String ?","title":"header - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/header/#header","text":"fun header(name: String ): String ?","title":"header"},{"location":"4.x/okhttp/okhttp3/-request/headers/","text":"okhttp / okhttp3 / Request / headers headers \u00b6 fun headers(name: String ): List < String > val headers: Headers","title":"headers - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/headers/#headers","text":"fun headers(name: String ): List < String > val headers: Headers","title":"headers"},{"location":"4.x/okhttp/okhttp3/-request/is-https/","text":"okhttp / okhttp3 / Request / isHttps isHttps \u00b6 val isHttps: Boolean","title":"isHttps - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/is-https/#ishttps","text":"val isHttps: Boolean","title":"isHttps"},{"location":"4.x/okhttp/okhttp3/-request/method/","text":"okhttp / okhttp3 / Request / method method \u00b6 val method: String","title":"method - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/method/#method","text":"val method: String","title":"method"},{"location":"4.x/okhttp/okhttp3/-request/new-builder/","text":"okhttp / okhttp3 / Request / newBuilder newBuilder \u00b6 fun newBuilder(): Builder","title":"newBuilder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/new-builder/#newbuilder","text":"fun newBuilder(): Builder","title":"newBuilder"},{"location":"4.x/okhttp/okhttp3/-request/tag/","text":"okhttp / okhttp3 / Request / tag tag \u00b6 fun tag(): Any ? Returns the tag attached with Object.class as a key, or null if no tag is attached with that key. Prior to OkHttp 3.11, this method never returned null if no tag was attached. Instead it returned either this request, or the request upon which this request was derived with newBuilder . fun <T> tag(type: Class <out T>): T? Returns the tag attached with type as a key, or null if no tag is attached with that key.","title":"tag - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/tag/#tag","text":"fun tag(): Any ? Returns the tag attached with Object.class as a key, or null if no tag is attached with that key. Prior to OkHttp 3.11, this method never returned null if no tag was attached. Instead it returned either this request, or the request upon which this request was derived with newBuilder . fun <T> tag(type: Class <out T>): T? Returns the tag attached with type as a key, or null if no tag is attached with that key.","title":"tag"},{"location":"4.x/okhttp/okhttp3/-request/to-string/","text":"okhttp / okhttp3 / Request / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/okhttp/okhttp3/-request/url/","text":"okhttp / okhttp3 / Request / url url \u00b6 val url: HttpUrl","title":"url - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/url/#url","text":"val url: HttpUrl","title":"url"},{"location":"4.x/okhttp/okhttp3/-request/-builder/","text":"okhttp / okhttp3 / Request / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder() Functions \u00b6 Name Summary addHeader Adds a header with name and value . Prefer this method for multiply-valued headers like \u201cCookie\u201d. open fun addHeader(name: String , value: String ): Builder build open fun build(): Request cacheControl Sets this request\u2019s Cache-Control header, replacing any cache control headers already present. If cacheControl doesn\u2019t define any directives, this clears this request\u2019s cache-control headers. open fun cacheControl(cacheControl: CacheControl ): Builder delete open fun delete(body: RequestBody ? = EMPTY_REQUEST): Builder get open fun get(): Builder head open fun head(): Builder header Sets the header named name to value . If this request already has any headers with that name, they are all replaced. open fun header(name: String , value: String ): Builder headers Removes all headers on this builder and adds headers . open fun headers(headers: Headers ): Builder method open fun method(method: String , body: RequestBody ?): Builder patch open fun patch(body: RequestBody ): Builder post open fun post(body: RequestBody ): Builder put open fun put(body: RequestBody ): Builder removeHeader Removes all headers named name on this builder. open fun removeHeader(name: String ): Builder tag Attaches tag to the request using Object.class as a key. open fun tag(tag: Any ?): Builder Attaches tag to the request using type as a key. Tags can be read from a request using Request.tag . Use null to remove any existing tag assigned for type . open fun <T> tag(type: Class <in T>, tag: T?): Builder url open fun url(url: HttpUrl ): Builder Sets the URL target of this request. open fun url(url: String ): Builder open fun url(url: URL ): Builder","title":"Builder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"4.x/okhttp/okhttp3/-request/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-request/-builder/#functions","text":"Name Summary addHeader Adds a header with name and value . Prefer this method for multiply-valued headers like \u201cCookie\u201d. open fun addHeader(name: String , value: String ): Builder build open fun build(): Request cacheControl Sets this request\u2019s Cache-Control header, replacing any cache control headers already present. If cacheControl doesn\u2019t define any directives, this clears this request\u2019s cache-control headers. open fun cacheControl(cacheControl: CacheControl ): Builder delete open fun delete(body: RequestBody ? = EMPTY_REQUEST): Builder get open fun get(): Builder head open fun head(): Builder header Sets the header named name to value . If this request already has any headers with that name, they are all replaced. open fun header(name: String , value: String ): Builder headers Removes all headers on this builder and adds headers . open fun headers(headers: Headers ): Builder method open fun method(method: String , body: RequestBody ?): Builder patch open fun patch(body: RequestBody ): Builder post open fun post(body: RequestBody ): Builder put open fun put(body: RequestBody ): Builder removeHeader Removes all headers named name on this builder. open fun removeHeader(name: String ): Builder tag Attaches tag to the request using Object.class as a key. open fun tag(tag: Any ?): Builder Attaches tag to the request using type as a key. Tags can be read from a request using Request.tag . Use null to remove any existing tag assigned for type . open fun <T> tag(type: Class <in T>, tag: T?): Builder url open fun url(url: HttpUrl ): Builder Sets the URL target of this request. open fun url(url: String ): Builder open fun url(url: URL ): Builder","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-request/-builder/-init-/","text":"okhttp / okhttp3 / Request / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"4.x/okhttp/okhttp3/-request/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-request/-builder/add-header/","text":"okhttp / okhttp3 / Request / Builder / addHeader addHeader \u00b6 open fun addHeader(name: String , value: String ): Builder Adds a header with name and value . Prefer this method for multiply-valued headers like \u201cCookie\u201d. Note that for some headers including Content-Length and Content-Encoding , OkHttp may replace value with a header derived from the request body.","title":"addHeader - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/add-header/#addheader","text":"open fun addHeader(name: String , value: String ): Builder Adds a header with name and value . Prefer this method for multiply-valued headers like \u201cCookie\u201d. Note that for some headers including Content-Length and Content-Encoding , OkHttp may replace value with a header derived from the request body.","title":"addHeader"},{"location":"4.x/okhttp/okhttp3/-request/-builder/build/","text":"okhttp / okhttp3 / Request / Builder / build build \u00b6 open fun build(): Request","title":"build - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/build/#build","text":"open fun build(): Request","title":"build"},{"location":"4.x/okhttp/okhttp3/-request/-builder/cache-control/","text":"okhttp / okhttp3 / Request / Builder / cacheControl cacheControl \u00b6 open fun cacheControl(cacheControl: CacheControl ): Builder Sets this request\u2019s Cache-Control header, replacing any cache control headers already present. If cacheControl doesn\u2019t define any directives, this clears this request\u2019s cache-control headers.","title":"cacheControl - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/cache-control/#cachecontrol","text":"open fun cacheControl(cacheControl: CacheControl ): Builder Sets this request\u2019s Cache-Control header, replacing any cache control headers already present. If cacheControl doesn\u2019t define any directives, this clears this request\u2019s cache-control headers.","title":"cacheControl"},{"location":"4.x/okhttp/okhttp3/-request/-builder/delete/","text":"okhttp / okhttp3 / Request / Builder / delete delete \u00b6 @JvmOverloads open fun delete(body: RequestBody ? = EMPTY_REQUEST): Builder","title":"delete - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/delete/#delete","text":"@JvmOverloads open fun delete(body: RequestBody ? = EMPTY_REQUEST): Builder","title":"delete"},{"location":"4.x/okhttp/okhttp3/-request/-builder/get/","text":"okhttp / okhttp3 / Request / Builder / get get \u00b6 open fun get(): Builder","title":"get - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/get/#get","text":"open fun get(): Builder","title":"get"},{"location":"4.x/okhttp/okhttp3/-request/-builder/head/","text":"okhttp / okhttp3 / Request / Builder / head head \u00b6 open fun head(): Builder","title":"head - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/head/#head","text":"open fun head(): Builder","title":"head"},{"location":"4.x/okhttp/okhttp3/-request/-builder/header/","text":"okhttp / okhttp3 / Request / Builder / header header \u00b6 open fun header(name: String , value: String ): Builder Sets the header named name to value . If this request already has any headers with that name, they are all replaced.","title":"header - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/header/#header","text":"open fun header(name: String , value: String ): Builder Sets the header named name to value . If this request already has any headers with that name, they are all replaced.","title":"header"},{"location":"4.x/okhttp/okhttp3/-request/-builder/headers/","text":"okhttp / okhttp3 / Request / Builder / headers headers \u00b6 open fun headers(headers: Headers ): Builder Removes all headers on this builder and adds headers .","title":"headers - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/headers/#headers","text":"open fun headers(headers: Headers ): Builder Removes all headers on this builder and adds headers .","title":"headers"},{"location":"4.x/okhttp/okhttp3/-request/-builder/method/","text":"okhttp / okhttp3 / Request / Builder / method method \u00b6 open fun method(method: String , body: RequestBody ?): Builder","title":"method - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/method/#method","text":"open fun method(method: String , body: RequestBody ?): Builder","title":"method"},{"location":"4.x/okhttp/okhttp3/-request/-builder/patch/","text":"okhttp / okhttp3 / Request / Builder / patch patch \u00b6 open fun patch(body: RequestBody ): Builder","title":"patch - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/patch/#patch","text":"open fun patch(body: RequestBody ): Builder","title":"patch"},{"location":"4.x/okhttp/okhttp3/-request/-builder/post/","text":"okhttp / okhttp3 / Request / Builder / post post \u00b6 open fun post(body: RequestBody ): Builder","title":"post - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/post/#post","text":"open fun post(body: RequestBody ): Builder","title":"post"},{"location":"4.x/okhttp/okhttp3/-request/-builder/put/","text":"okhttp / okhttp3 / Request / Builder / put put \u00b6 open fun put(body: RequestBody ): Builder","title":"put - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/put/#put","text":"open fun put(body: RequestBody ): Builder","title":"put"},{"location":"4.x/okhttp/okhttp3/-request/-builder/remove-header/","text":"okhttp / okhttp3 / Request / Builder / removeHeader removeHeader \u00b6 open fun removeHeader(name: String ): Builder Removes all headers named name on this builder.","title":"removeHeader - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/remove-header/#removeheader","text":"open fun removeHeader(name: String ): Builder Removes all headers named name on this builder.","title":"removeHeader"},{"location":"4.x/okhttp/okhttp3/-request/-builder/tag/","text":"okhttp / okhttp3 / Request / Builder / tag tag \u00b6 open fun tag(tag: Any ?): Builder Attaches tag to the request using Object.class as a key. open fun <T> tag(type: Class <in T>, tag: T?): Builder Attaches tag to the request using type as a key. Tags can be read from a request using Request.tag . Use null to remove any existing tag assigned for type . Use this API to attach timing, debugging, or other application data to a request so that you may read it in interceptors, event listeners, or callbacks.","title":"tag - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/tag/#tag","text":"open fun tag(tag: Any ?): Builder Attaches tag to the request using Object.class as a key. open fun <T> tag(type: Class <in T>, tag: T?): Builder Attaches tag to the request using type as a key. Tags can be read from a request using Request.tag . Use null to remove any existing tag assigned for type . Use this API to attach timing, debugging, or other application data to a request so that you may read it in interceptors, event listeners, or callbacks.","title":"tag"},{"location":"4.x/okhttp/okhttp3/-request/-builder/url/","text":"okhttp / okhttp3 / Request / Builder / url url \u00b6 open fun url(url: HttpUrl ): Builder``open fun url(url: String ): Builder Sets the URL target of this request. Exceptions \u00b6 IllegalArgumentException - if url is not a valid HTTP or HTTPS URL. Avoid this exception by calling HttpUrl.parse ; it returns null for invalid URLs. open fun url(url: URL ): Builder Sets the URL target of this request. Exceptions \u00b6 IllegalArgumentException - if the scheme of url is not http or https .","title":"url - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request/-builder/url/#url","text":"open fun url(url: HttpUrl ): Builder``open fun url(url: String ): Builder Sets the URL target of this request.","title":"url"},{"location":"4.x/okhttp/okhttp3/-request/-builder/url/#exceptions","text":"IllegalArgumentException - if url is not a valid HTTP or HTTPS URL. Avoid this exception by calling HttpUrl.parse ; it returns null for invalid URLs. open fun url(url: URL ): Builder Sets the URL target of this request.","title":"Exceptions"},{"location":"4.x/okhttp/okhttp3/-request/-builder/url/#exceptions_1","text":"IllegalArgumentException - if the scheme of url is not http or https .","title":"Exceptions"},{"location":"4.x/okhttp/okhttp3/-request-body/","text":"okhttp / okhttp3 / RequestBody RequestBody \u00b6 abstract class RequestBody Constructors \u00b6 Name Summary <init> RequestBody() Functions \u00b6 Name Summary contentLength Returns the number of bytes that will be written to sink in a call to writeTo , or -1 if that count is unknown. open fun contentLength(): Long contentType Returns the Content-Type header for this body. abstract fun contentType(): MediaType ? isDuplex A duplex request body is special in how it is transmitted on the network and in the API contract between OkHttp and the application. open fun isDuplex(): Boolean isOneShot Returns true if this body expects at most one call to writeTo and can be transmitted at most once. This is typically used when writing the request body is destructive and it is not possible to recreate the request body after it has been sent. open fun isOneShot(): Boolean writeTo Writes the content of this request to sink . abstract fun writeTo(sink: BufferedSink ): Unit Companion Object Functions \u00b6 Name Summary asRequestBody Returns a new request body that transmits the content of this. fun File .asRequestBody(contentType: MediaType ? = null): RequestBody toRequestBody Returns a new request body that transmits this string. If contentType is non-null and lacks a charset, this will use UTF-8. fun String .toRequestBody(contentType: MediaType ? = null): RequestBody Returns a new request body that transmits this. fun ByteString .toRequestBody(contentType: MediaType ? = null): RequestBody fun ByteArray .toRequestBody(contentType: MediaType ? = null, offset: Int = 0, byteCount: Int = size): RequestBody Inheritors \u00b6 Name Summary FormBody class FormBody : RequestBody MultipartBody An RFC 2387 -compliant request body. class MultipartBody : RequestBody","title":"RequestBody - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request-body/#requestbody","text":"abstract class RequestBody","title":"RequestBody"},{"location":"4.x/okhttp/okhttp3/-request-body/#constructors","text":"Name Summary <init> RequestBody()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-request-body/#functions","text":"Name Summary contentLength Returns the number of bytes that will be written to sink in a call to writeTo , or -1 if that count is unknown. open fun contentLength(): Long contentType Returns the Content-Type header for this body. abstract fun contentType(): MediaType ? isDuplex A duplex request body is special in how it is transmitted on the network and in the API contract between OkHttp and the application. open fun isDuplex(): Boolean isOneShot Returns true if this body expects at most one call to writeTo and can be transmitted at most once. This is typically used when writing the request body is destructive and it is not possible to recreate the request body after it has been sent. open fun isOneShot(): Boolean writeTo Writes the content of this request to sink . abstract fun writeTo(sink: BufferedSink ): Unit","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-request-body/#companion-object-functions","text":"Name Summary asRequestBody Returns a new request body that transmits the content of this. fun File .asRequestBody(contentType: MediaType ? = null): RequestBody toRequestBody Returns a new request body that transmits this string. If contentType is non-null and lacks a charset, this will use UTF-8. fun String .toRequestBody(contentType: MediaType ? = null): RequestBody Returns a new request body that transmits this. fun ByteString .toRequestBody(contentType: MediaType ? = null): RequestBody fun ByteArray .toRequestBody(contentType: MediaType ? = null, offset: Int = 0, byteCount: Int = size): RequestBody","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-request-body/#inheritors","text":"Name Summary FormBody class FormBody : RequestBody MultipartBody An RFC 2387 -compliant request body. class MultipartBody : RequestBody","title":"Inheritors"},{"location":"4.x/okhttp/okhttp3/-request-body/-init-/","text":"okhttp / okhttp3 / RequestBody / <init> <init> \u00b6 RequestBody()","title":" init "},{"location":"4.x/okhttp/okhttp3/-request-body/-init-/#init","text":"RequestBody()","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-request-body/as-request-body/","text":"okhttp / okhttp3 / RequestBody / asRequestBody asRequestBody \u00b6 @JvmStatic @JvmName(\"create\") fun File .asRequestBody(contentType: MediaType ? = null): RequestBody Returns a new request body that transmits the content of this.","title":"asRequestBody - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request-body/as-request-body/#asrequestbody","text":"@JvmStatic @JvmName(\"create\") fun File .asRequestBody(contentType: MediaType ? = null): RequestBody Returns a new request body that transmits the content of this.","title":"asRequestBody"},{"location":"4.x/okhttp/okhttp3/-request-body/content-length/","text":"okhttp / okhttp3 / RequestBody / contentLength contentLength \u00b6 open fun contentLength(): Long Returns the number of bytes that will be written to sink in a call to writeTo , or -1 if that count is unknown.","title":"contentLength - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request-body/content-length/#contentlength","text":"open fun contentLength(): Long Returns the number of bytes that will be written to sink in a call to writeTo , or -1 if that count is unknown.","title":"contentLength"},{"location":"4.x/okhttp/okhttp3/-request-body/content-type/","text":"okhttp / okhttp3 / RequestBody / contentType contentType \u00b6 abstract fun contentType(): MediaType ? Returns the Content-Type header for this body.","title":"contentType - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request-body/content-type/#contenttype","text":"abstract fun contentType(): MediaType ? Returns the Content-Type header for this body.","title":"contentType"},{"location":"4.x/okhttp/okhttp3/-request-body/is-duplex/","text":"okhttp / okhttp3 / RequestBody / isDuplex isDuplex \u00b6 open fun isDuplex(): Boolean A duplex request body is special in how it is transmitted on the network and in the API contract between OkHttp and the application. This method returns false unless it is overridden by a subclass. Duplex Transmission \u00b6 With regular HTTP calls the request always completes sending before the response may begin receiving. With duplex the request and response may be interleaved! That is, request body bytes may be sent after response headers or body bytes have been received. Though any call may be initiated as a duplex call, only web servers that are specially designed for this nonstandard interaction will use it. As of 2019-01, the only widely-used implementation of this pattern is gRPC . Because the encoding of interleaved data is not well-defined for HTTP/1, duplex request bodies may only be used with HTTP/2. Calls to HTTP/1 servers will fail before the HTTP request is transmitted. If you cannot ensure that your client and server both support HTTP/2, do not use this feature. Duplex APIs \u00b6 With regular request bodies it is not legal to write bytes to the sink passed to RequestBody.writeTo after that method returns. For duplex requests bodies that condition is lifted. Such writes occur on an application-provided thread and may occur concurrently with reads of the ResponseBody . For duplex request bodies, writeTo should return quickly, possibly by handing off the provided request body to another thread to perform writing.","title":"isDuplex - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request-body/is-duplex/#isduplex","text":"open fun isDuplex(): Boolean A duplex request body is special in how it is transmitted on the network and in the API contract between OkHttp and the application. This method returns false unless it is overridden by a subclass.","title":"isDuplex"},{"location":"4.x/okhttp/okhttp3/-request-body/is-duplex/#duplex-transmission","text":"With regular HTTP calls the request always completes sending before the response may begin receiving. With duplex the request and response may be interleaved! That is, request body bytes may be sent after response headers or body bytes have been received. Though any call may be initiated as a duplex call, only web servers that are specially designed for this nonstandard interaction will use it. As of 2019-01, the only widely-used implementation of this pattern is gRPC . Because the encoding of interleaved data is not well-defined for HTTP/1, duplex request bodies may only be used with HTTP/2. Calls to HTTP/1 servers will fail before the HTTP request is transmitted. If you cannot ensure that your client and server both support HTTP/2, do not use this feature.","title":"Duplex Transmission"},{"location":"4.x/okhttp/okhttp3/-request-body/is-duplex/#duplex-apis","text":"With regular request bodies it is not legal to write bytes to the sink passed to RequestBody.writeTo after that method returns. For duplex requests bodies that condition is lifted. Such writes occur on an application-provided thread and may occur concurrently with reads of the ResponseBody . For duplex request bodies, writeTo should return quickly, possibly by handing off the provided request body to another thread to perform writing.","title":"Duplex APIs"},{"location":"4.x/okhttp/okhttp3/-request-body/is-one-shot/","text":"okhttp / okhttp3 / RequestBody / isOneShot isOneShot \u00b6 open fun isOneShot(): Boolean Returns true if this body expects at most one call to writeTo and can be transmitted at most once. This is typically used when writing the request body is destructive and it is not possible to recreate the request body after it has been sent. This method returns false unless it is overridden by a subclass. By default OkHttp will attempt to retransmit request bodies when the original request fails due to any of: A stale connection. The request was made on a reused connection and that reused connection has since been closed by the server. A client timeout (HTTP 408). A authorization challenge (HTTP 401 and 407) that is satisfied by the Authenticator . A retryable server failure (HTTP 503 with a Retry-After: 0 response header). A misdirected request (HTTP 421) on a coalesced connection.","title":"isOneShot - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request-body/is-one-shot/#isoneshot","text":"open fun isOneShot(): Boolean Returns true if this body expects at most one call to writeTo and can be transmitted at most once. This is typically used when writing the request body is destructive and it is not possible to recreate the request body after it has been sent. This method returns false unless it is overridden by a subclass. By default OkHttp will attempt to retransmit request bodies when the original request fails due to any of: A stale connection. The request was made on a reused connection and that reused connection has since been closed by the server. A client timeout (HTTP 408). A authorization challenge (HTTP 401 and 407) that is satisfied by the Authenticator . A retryable server failure (HTTP 503 with a Retry-After: 0 response header). A misdirected request (HTTP 421) on a coalesced connection.","title":"isOneShot"},{"location":"4.x/okhttp/okhttp3/-request-body/to-request-body/","text":"okhttp / okhttp3 / RequestBody / toRequestBody toRequestBody \u00b6 @JvmStatic @JvmName(\"create\") fun String .toRequestBody(contentType: MediaType ? = null): RequestBody Returns a new request body that transmits this string. If contentType is non-null and lacks a charset, this will use UTF-8. @JvmStatic @JvmName(\"create\") fun ByteString .toRequestBody(contentType: MediaType ? = null): RequestBody @JvmOverloads @JvmStatic @JvmName(\"create\") fun ByteArray .toRequestBody(contentType: MediaType ? = null, offset: Int = 0, byteCount: Int = size): RequestBody Returns a new request body that transmits this.","title":"toRequestBody - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request-body/to-request-body/#torequestbody","text":"@JvmStatic @JvmName(\"create\") fun String .toRequestBody(contentType: MediaType ? = null): RequestBody Returns a new request body that transmits this string. If contentType is non-null and lacks a charset, this will use UTF-8. @JvmStatic @JvmName(\"create\") fun ByteString .toRequestBody(contentType: MediaType ? = null): RequestBody @JvmOverloads @JvmStatic @JvmName(\"create\") fun ByteArray .toRequestBody(contentType: MediaType ? = null, offset: Int = 0, byteCount: Int = size): RequestBody Returns a new request body that transmits this.","title":"toRequestBody"},{"location":"4.x/okhttp/okhttp3/-request-body/write-to/","text":"okhttp / okhttp3 / RequestBody / writeTo writeTo \u00b6 abstract fun writeTo(sink: BufferedSink ): Unit Writes the content of this request to sink .","title":"writeTo - OkHttp"},{"location":"4.x/okhttp/okhttp3/-request-body/write-to/#writeto","text":"abstract fun writeTo(sink: BufferedSink ): Unit Writes the content of this request to sink .","title":"writeTo"},{"location":"4.x/okhttp/okhttp3/-response/","text":"okhttp / okhttp3 / Response Response \u00b6 class Response : Closeable An HTTP response. Instances of this class are not immutable: the response body is a one-shot value that may be consumed only once and then closed. All other properties are immutable. This class implements Closeable . Closing it simply closes its response body. See ResponseBody for an explanation and examples. Types \u00b6 Name Summary Builder class Builder Properties \u00b6 Name Summary body Returns a non-null value if this response was passed to Callback.onResponse or returned from Call.execute . Response bodies must be closed and may be consumed only once. val body: ResponseBody ? cacheControl Returns the cache control directives for this response. This is never null, even if this response contains no Cache-Control header. val cacheControl: CacheControl cacheResponse Returns the raw response received from the cache. Will be null if this response didn\u2019t use the cache. For conditional get requests the cache response and network response may both be non-null. The body of the returned response should not be read. val cacheResponse: Response ? code Returns the HTTP status code. val code: Int handshake Returns the TLS handshake of the connection that carried this response, or null if the response was received without TLS. val handshake: Handshake ? headers Returns the HTTP headers. val headers: Headers isRedirect Returns true if this response redirects to another resource. val isRedirect: Boolean isSuccessful Returns true if the code is in [200..300), which means the request was successfully received, understood, and accepted. val isSuccessful: Boolean message Returns the HTTP status message. val message: String networkResponse Returns the raw response received from the network. Will be null if this response didn\u2019t use the network, such as when the response is fully cached. The body of the returned response should not be read. val networkResponse: Response ? priorResponse Returns the response for the HTTP redirect or authorization challenge that triggered this response, or null if this response wasn\u2019t triggered by an automatic retry. The body of the returned response should not be read because it has already been consumed by the redirecting client. val priorResponse: Response ? protocol Returns the HTTP protocol, such as Protocol.HTTP_1_1 or Protocol.HTTP_1_0 . val protocol: Protocol receivedResponseAtMillis Returns a timestamp taken immediately after OkHttp received this response\u2019s headers from the network. If this response is being served from the cache then this is the timestamp of the original response. val receivedResponseAtMillis: Long request The wire-level request that initiated this HTTP response. This is not necessarily the same request issued by the application: val request: Request sentRequestAtMillis Returns a timestamp taken immediately before OkHttp transmitted the initiating request over the network. If this response is being served from the cache then this is the timestamp of the original request. val sentRequestAtMillis: Long Functions \u00b6 Name Summary challenges Returns the RFC 7235 authorization challenges appropriate for this response\u2019s code. If the response code is 401 unauthorized, this returns the \u201cWWW-Authenticate\u201d challenges. If the response code is 407 proxy unauthorized, this returns the \u201cProxy-Authenticate\u201d challenges. Otherwise this returns an empty list of challenges. fun challenges(): List < Challenge > close Closes the response body. Equivalent to body().close() . fun close(): Unit header fun header(name: String , defaultValue: String ? = null): String ? headers fun headers(name: String ): List < String > newBuilder fun newBuilder(): Builder peekBody Peeks up to byteCount bytes from the response body and returns them as a new response body. If fewer than byteCount bytes are in the response body, the full response body is returned. If more than byteCount bytes are in the response body, the returned value will be truncated to byteCount bytes. fun peekBody(byteCount: Long ): ResponseBody toString fun toString(): String trailers Returns the trailers after the HTTP response, which may be empty. It is an error to call this before the entire HTTP response body has been consumed. fun trailers(): Headers","title":"Response - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/#response","text":"class Response : Closeable An HTTP response. Instances of this class are not immutable: the response body is a one-shot value that may be consumed only once and then closed. All other properties are immutable. This class implements Closeable . Closing it simply closes its response body. See ResponseBody for an explanation and examples.","title":"Response"},{"location":"4.x/okhttp/okhttp3/-response/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"4.x/okhttp/okhttp3/-response/#properties","text":"Name Summary body Returns a non-null value if this response was passed to Callback.onResponse or returned from Call.execute . Response bodies must be closed and may be consumed only once. val body: ResponseBody ? cacheControl Returns the cache control directives for this response. This is never null, even if this response contains no Cache-Control header. val cacheControl: CacheControl cacheResponse Returns the raw response received from the cache. Will be null if this response didn\u2019t use the cache. For conditional get requests the cache response and network response may both be non-null. The body of the returned response should not be read. val cacheResponse: Response ? code Returns the HTTP status code. val code: Int handshake Returns the TLS handshake of the connection that carried this response, or null if the response was received without TLS. val handshake: Handshake ? headers Returns the HTTP headers. val headers: Headers isRedirect Returns true if this response redirects to another resource. val isRedirect: Boolean isSuccessful Returns true if the code is in [200..300), which means the request was successfully received, understood, and accepted. val isSuccessful: Boolean message Returns the HTTP status message. val message: String networkResponse Returns the raw response received from the network. Will be null if this response didn\u2019t use the network, such as when the response is fully cached. The body of the returned response should not be read. val networkResponse: Response ? priorResponse Returns the response for the HTTP redirect or authorization challenge that triggered this response, or null if this response wasn\u2019t triggered by an automatic retry. The body of the returned response should not be read because it has already been consumed by the redirecting client. val priorResponse: Response ? protocol Returns the HTTP protocol, such as Protocol.HTTP_1_1 or Protocol.HTTP_1_0 . val protocol: Protocol receivedResponseAtMillis Returns a timestamp taken immediately after OkHttp received this response\u2019s headers from the network. If this response is being served from the cache then this is the timestamp of the original response. val receivedResponseAtMillis: Long request The wire-level request that initiated this HTTP response. This is not necessarily the same request issued by the application: val request: Request sentRequestAtMillis Returns a timestamp taken immediately before OkHttp transmitted the initiating request over the network. If this response is being served from the cache then this is the timestamp of the original request. val sentRequestAtMillis: Long","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-response/#functions","text":"Name Summary challenges Returns the RFC 7235 authorization challenges appropriate for this response\u2019s code. If the response code is 401 unauthorized, this returns the \u201cWWW-Authenticate\u201d challenges. If the response code is 407 proxy unauthorized, this returns the \u201cProxy-Authenticate\u201d challenges. Otherwise this returns an empty list of challenges. fun challenges(): List < Challenge > close Closes the response body. Equivalent to body().close() . fun close(): Unit header fun header(name: String , defaultValue: String ? = null): String ? headers fun headers(name: String ): List < String > newBuilder fun newBuilder(): Builder peekBody Peeks up to byteCount bytes from the response body and returns them as a new response body. If fewer than byteCount bytes are in the response body, the full response body is returned. If more than byteCount bytes are in the response body, the returned value will be truncated to byteCount bytes. fun peekBody(byteCount: Long ): ResponseBody toString fun toString(): String trailers Returns the trailers after the HTTP response, which may be empty. It is an error to call this before the entire HTTP response body has been consumed. fun trailers(): Headers","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-response/body/","text":"okhttp / okhttp3 / Response / body body \u00b6 val body: ResponseBody ? Returns a non-null value if this response was passed to Callback.onResponse or returned from Call.execute . Response bodies must be closed and may be consumed only once. This always returns null on responses returned from cacheResponse , networkResponse , and priorResponse .","title":"body - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/body/#body","text":"val body: ResponseBody ? Returns a non-null value if this response was passed to Callback.onResponse or returned from Call.execute . Response bodies must be closed and may be consumed only once. This always returns null on responses returned from cacheResponse , networkResponse , and priorResponse .","title":"body"},{"location":"4.x/okhttp/okhttp3/-response/cache-control/","text":"okhttp / okhttp3 / Response / cacheControl cacheControl \u00b6 val cacheControl: CacheControl Returns the cache control directives for this response. This is never null, even if this response contains no Cache-Control header.","title":"cacheControl - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/cache-control/#cachecontrol","text":"val cacheControl: CacheControl Returns the cache control directives for this response. This is never null, even if this response contains no Cache-Control header.","title":"cacheControl"},{"location":"4.x/okhttp/okhttp3/-response/cache-response/","text":"okhttp / okhttp3 / Response / cacheResponse cacheResponse \u00b6 val cacheResponse: Response ? Returns the raw response received from the cache. Will be null if this response didn\u2019t use the cache. For conditional get requests the cache response and network response may both be non-null. The body of the returned response should not be read.","title":"cacheResponse - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/cache-response/#cacheresponse","text":"val cacheResponse: Response ? Returns the raw response received from the cache. Will be null if this response didn\u2019t use the cache. For conditional get requests the cache response and network response may both be non-null. The body of the returned response should not be read.","title":"cacheResponse"},{"location":"4.x/okhttp/okhttp3/-response/challenges/","text":"okhttp / okhttp3 / Response / challenges challenges \u00b6 fun challenges(): List < Challenge > Returns the RFC 7235 authorization challenges appropriate for this response\u2019s code. If the response code is 401 unauthorized, this returns the \u201cWWW-Authenticate\u201d challenges. If the response code is 407 proxy unauthorized, this returns the \u201cProxy-Authenticate\u201d challenges. Otherwise this returns an empty list of challenges. If a challenge uses the token68 variant instead of auth params, there is exactly one auth param in the challenge at key null. Invalid headers and challenges are ignored. No semantic validation is done, for example that Basic auth must have a realm auth param, this is up to the caller that interprets these challenges.","title":"challenges - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/challenges/#challenges","text":"fun challenges(): List < Challenge > Returns the RFC 7235 authorization challenges appropriate for this response\u2019s code. If the response code is 401 unauthorized, this returns the \u201cWWW-Authenticate\u201d challenges. If the response code is 407 proxy unauthorized, this returns the \u201cProxy-Authenticate\u201d challenges. Otherwise this returns an empty list of challenges. If a challenge uses the token68 variant instead of auth params, there is exactly one auth param in the challenge at key null. Invalid headers and challenges are ignored. No semantic validation is done, for example that Basic auth must have a realm auth param, this is up to the caller that interprets these challenges.","title":"challenges"},{"location":"4.x/okhttp/okhttp3/-response/close/","text":"okhttp / okhttp3 / Response / close close \u00b6 fun close(): Unit Closes the response body. Equivalent to body().close() . It is an error to close a response that is not eligible for a body. This includes the responses returned from cacheResponse , networkResponse , and priorResponse .","title":"close - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/close/#close","text":"fun close(): Unit Closes the response body. Equivalent to body().close() . It is an error to close a response that is not eligible for a body. This includes the responses returned from cacheResponse , networkResponse , and priorResponse .","title":"close"},{"location":"4.x/okhttp/okhttp3/-response/code/","text":"okhttp / okhttp3 / Response / code code \u00b6 val code: Int Returns the HTTP status code.","title":"code - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/code/#code","text":"val code: Int Returns the HTTP status code.","title":"code"},{"location":"4.x/okhttp/okhttp3/-response/handshake/","text":"okhttp / okhttp3 / Response / handshake handshake \u00b6 val handshake: Handshake ? Returns the TLS handshake of the connection that carried this response, or null if the response was received without TLS.","title":"handshake - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/handshake/#handshake","text":"val handshake: Handshake ? Returns the TLS handshake of the connection that carried this response, or null if the response was received without TLS.","title":"handshake"},{"location":"4.x/okhttp/okhttp3/-response/header/","text":"okhttp / okhttp3 / Response / header header \u00b6 @JvmOverloads fun header(name: String , defaultValue: String ? = null): String ?","title":"header - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/header/#header","text":"@JvmOverloads fun header(name: String , defaultValue: String ? = null): String ?","title":"header"},{"location":"4.x/okhttp/okhttp3/-response/headers/","text":"okhttp / okhttp3 / Response / headers headers \u00b6 fun headers(name: String ): List < String >``val headers: Headers Returns the HTTP headers.","title":"headers - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/headers/#headers","text":"fun headers(name: String ): List < String >``val headers: Headers Returns the HTTP headers.","title":"headers"},{"location":"4.x/okhttp/okhttp3/-response/is-redirect/","text":"okhttp / okhttp3 / Response / isRedirect isRedirect \u00b6 val isRedirect: Boolean Returns true if this response redirects to another resource.","title":"isRedirect - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/is-redirect/#isredirect","text":"val isRedirect: Boolean Returns true if this response redirects to another resource.","title":"isRedirect"},{"location":"4.x/okhttp/okhttp3/-response/is-successful/","text":"okhttp / okhttp3 / Response / isSuccessful isSuccessful \u00b6 val isSuccessful: Boolean Returns true if the code is in [200..300), which means the request was successfully received, understood, and accepted.","title":"isSuccessful - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/is-successful/#issuccessful","text":"val isSuccessful: Boolean Returns true if the code is in [200..300), which means the request was successfully received, understood, and accepted.","title":"isSuccessful"},{"location":"4.x/okhttp/okhttp3/-response/message/","text":"okhttp / okhttp3 / Response / message message \u00b6 val message: String Returns the HTTP status message.","title":"message - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/message/#message","text":"val message: String Returns the HTTP status message.","title":"message"},{"location":"4.x/okhttp/okhttp3/-response/network-response/","text":"okhttp / okhttp3 / Response / networkResponse networkResponse \u00b6 val networkResponse: Response ? Returns the raw response received from the network. Will be null if this response didn\u2019t use the network, such as when the response is fully cached. The body of the returned response should not be read.","title":"networkResponse - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/network-response/#networkresponse","text":"val networkResponse: Response ? Returns the raw response received from the network. Will be null if this response didn\u2019t use the network, such as when the response is fully cached. The body of the returned response should not be read.","title":"networkResponse"},{"location":"4.x/okhttp/okhttp3/-response/new-builder/","text":"okhttp / okhttp3 / Response / newBuilder newBuilder \u00b6 fun newBuilder(): Builder","title":"newBuilder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/new-builder/#newbuilder","text":"fun newBuilder(): Builder","title":"newBuilder"},{"location":"4.x/okhttp/okhttp3/-response/peek-body/","text":"okhttp / okhttp3 / Response / peekBody peekBody \u00b6 fun peekBody(byteCount: Long ): ResponseBody Peeks up to byteCount bytes from the response body and returns them as a new response body. If fewer than byteCount bytes are in the response body, the full response body is returned. If more than byteCount bytes are in the response body, the returned value will be truncated to byteCount bytes. It is an error to call this method after the body has been consumed. Warning: this method loads the requested bytes into memory. Most applications should set a modest limit on byteCount , such as 1 MiB.","title":"peekBody - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/peek-body/#peekbody","text":"fun peekBody(byteCount: Long ): ResponseBody Peeks up to byteCount bytes from the response body and returns them as a new response body. If fewer than byteCount bytes are in the response body, the full response body is returned. If more than byteCount bytes are in the response body, the returned value will be truncated to byteCount bytes. It is an error to call this method after the body has been consumed. Warning: this method loads the requested bytes into memory. Most applications should set a modest limit on byteCount , such as 1 MiB.","title":"peekBody"},{"location":"4.x/okhttp/okhttp3/-response/prior-response/","text":"okhttp / okhttp3 / Response / priorResponse priorResponse \u00b6 val priorResponse: Response ? Returns the response for the HTTP redirect or authorization challenge that triggered this response, or null if this response wasn\u2019t triggered by an automatic retry. The body of the returned response should not be read because it has already been consumed by the redirecting client.","title":"priorResponse - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/prior-response/#priorresponse","text":"val priorResponse: Response ? Returns the response for the HTTP redirect or authorization challenge that triggered this response, or null if this response wasn\u2019t triggered by an automatic retry. The body of the returned response should not be read because it has already been consumed by the redirecting client.","title":"priorResponse"},{"location":"4.x/okhttp/okhttp3/-response/protocol/","text":"okhttp / okhttp3 / Response / protocol protocol \u00b6 val protocol: Protocol Returns the HTTP protocol, such as Protocol.HTTP_1_1 or Protocol.HTTP_1_0 .","title":"protocol - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/protocol/#protocol","text":"val protocol: Protocol Returns the HTTP protocol, such as Protocol.HTTP_1_1 or Protocol.HTTP_1_0 .","title":"protocol"},{"location":"4.x/okhttp/okhttp3/-response/received-response-at-millis/","text":"okhttp / okhttp3 / Response / receivedResponseAtMillis receivedResponseAtMillis \u00b6 val receivedResponseAtMillis: Long Returns a timestamp taken immediately after OkHttp received this response\u2019s headers from the network. If this response is being served from the cache then this is the timestamp of the original response.","title":"receivedResponseAtMillis - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/received-response-at-millis/#receivedresponseatmillis","text":"val receivedResponseAtMillis: Long Returns a timestamp taken immediately after OkHttp received this response\u2019s headers from the network. If this response is being served from the cache then this is the timestamp of the original response.","title":"receivedResponseAtMillis"},{"location":"4.x/okhttp/okhttp3/-response/request/","text":"okhttp / okhttp3 / Response / request request \u00b6 val request: Request The wire-level request that initiated this HTTP response. This is not necessarily the same request issued by the application: It may be transformed by the HTTP client. For example, the client may copy headers like Content-Length from the request body. It may be the request generated in response to an HTTP redirect or authentication challenge. In this case the request URL may be different than the initial request URL.","title":"request - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/request/#request","text":"val request: Request The wire-level request that initiated this HTTP response. This is not necessarily the same request issued by the application: It may be transformed by the HTTP client. For example, the client may copy headers like Content-Length from the request body. It may be the request generated in response to an HTTP redirect or authentication challenge. In this case the request URL may be different than the initial request URL.","title":"request"},{"location":"4.x/okhttp/okhttp3/-response/sent-request-at-millis/","text":"okhttp / okhttp3 / Response / sentRequestAtMillis sentRequestAtMillis \u00b6 val sentRequestAtMillis: Long Returns a timestamp taken immediately before OkHttp transmitted the initiating request over the network. If this response is being served from the cache then this is the timestamp of the original request.","title":"sentRequestAtMillis - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/sent-request-at-millis/#sentrequestatmillis","text":"val sentRequestAtMillis: Long Returns a timestamp taken immediately before OkHttp transmitted the initiating request over the network. If this response is being served from the cache then this is the timestamp of the original request.","title":"sentRequestAtMillis"},{"location":"4.x/okhttp/okhttp3/-response/to-string/","text":"okhttp / okhttp3 / Response / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/okhttp/okhttp3/-response/trailers/","text":"okhttp / okhttp3 / Response / trailers trailers \u00b6 fun trailers(): Headers Returns the trailers after the HTTP response, which may be empty. It is an error to call this before the entire HTTP response body has been consumed.","title":"trailers - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/trailers/#trailers","text":"fun trailers(): Headers Returns the trailers after the HTTP response, which may be empty. It is an error to call this before the entire HTTP response body has been consumed.","title":"trailers"},{"location":"4.x/okhttp/okhttp3/-response/-builder/","text":"okhttp / okhttp3 / Response / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder() Functions \u00b6 Name Summary addHeader Adds a header with name to value . Prefer this method for multiply-valued headers like \u201cSet-Cookie\u201d. open fun addHeader(name: String , value: String ): Builder body open fun body(body: ResponseBody ?): Builder build open fun build(): Response cacheResponse open fun cacheResponse(cacheResponse: Response ?): Builder code open fun code(code: Int ): Builder handshake open fun handshake(handshake: Handshake ?): Builder header Sets the header named name to value . If this request already has any headers with that name, they are all replaced. open fun header(name: String , value: String ): Builder headers Removes all headers on this builder and adds headers . open fun headers(headers: Headers ): Builder message open fun message(message: String ): Builder networkResponse open fun networkResponse(networkResponse: Response ?): Builder priorResponse open fun priorResponse(priorResponse: Response ?): Builder protocol open fun protocol(protocol: Protocol ): Builder receivedResponseAtMillis open fun receivedResponseAtMillis(receivedResponseAtMillis: Long ): Builder removeHeader Removes all headers named name on this builder. open fun removeHeader(name: String ): Builder request open fun request(request: Request ): Builder sentRequestAtMillis open fun sentRequestAtMillis(sentRequestAtMillis: Long ): Builder","title":"Builder - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"4.x/okhttp/okhttp3/-response/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-response/-builder/#functions","text":"Name Summary addHeader Adds a header with name to value . Prefer this method for multiply-valued headers like \u201cSet-Cookie\u201d. open fun addHeader(name: String , value: String ): Builder body open fun body(body: ResponseBody ?): Builder build open fun build(): Response cacheResponse open fun cacheResponse(cacheResponse: Response ?): Builder code open fun code(code: Int ): Builder handshake open fun handshake(handshake: Handshake ?): Builder header Sets the header named name to value . If this request already has any headers with that name, they are all replaced. open fun header(name: String , value: String ): Builder headers Removes all headers on this builder and adds headers . open fun headers(headers: Headers ): Builder message open fun message(message: String ): Builder networkResponse open fun networkResponse(networkResponse: Response ?): Builder priorResponse open fun priorResponse(priorResponse: Response ?): Builder protocol open fun protocol(protocol: Protocol ): Builder receivedResponseAtMillis open fun receivedResponseAtMillis(receivedResponseAtMillis: Long ): Builder removeHeader Removes all headers named name on this builder. open fun removeHeader(name: String ): Builder request open fun request(request: Request ): Builder sentRequestAtMillis open fun sentRequestAtMillis(sentRequestAtMillis: Long ): Builder","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-response/-builder/-init-/","text":"okhttp / okhttp3 / Response / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"4.x/okhttp/okhttp3/-response/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-response/-builder/add-header/","text":"okhttp / okhttp3 / Response / Builder / addHeader addHeader \u00b6 open fun addHeader(name: String , value: String ): Builder Adds a header with name to value . Prefer this method for multiply-valued headers like \u201cSet-Cookie\u201d.","title":"addHeader - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/add-header/#addheader","text":"open fun addHeader(name: String , value: String ): Builder Adds a header with name to value . Prefer this method for multiply-valued headers like \u201cSet-Cookie\u201d.","title":"addHeader"},{"location":"4.x/okhttp/okhttp3/-response/-builder/body/","text":"okhttp / okhttp3 / Response / Builder / body body \u00b6 open fun body(body: ResponseBody ?): Builder","title":"body - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/body/#body","text":"open fun body(body: ResponseBody ?): Builder","title":"body"},{"location":"4.x/okhttp/okhttp3/-response/-builder/build/","text":"okhttp / okhttp3 / Response / Builder / build build \u00b6 open fun build(): Response","title":"build - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/build/#build","text":"open fun build(): Response","title":"build"},{"location":"4.x/okhttp/okhttp3/-response/-builder/cache-response/","text":"okhttp / okhttp3 / Response / Builder / cacheResponse cacheResponse \u00b6 open fun cacheResponse(cacheResponse: Response ?): Builder","title":"cacheResponse - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/cache-response/#cacheresponse","text":"open fun cacheResponse(cacheResponse: Response ?): Builder","title":"cacheResponse"},{"location":"4.x/okhttp/okhttp3/-response/-builder/code/","text":"okhttp / okhttp3 / Response / Builder / code code \u00b6 open fun code(code: Int ): Builder","title":"code - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/code/#code","text":"open fun code(code: Int ): Builder","title":"code"},{"location":"4.x/okhttp/okhttp3/-response/-builder/handshake/","text":"okhttp / okhttp3 / Response / Builder / handshake handshake \u00b6 open fun handshake(handshake: Handshake ?): Builder","title":"handshake - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/handshake/#handshake","text":"open fun handshake(handshake: Handshake ?): Builder","title":"handshake"},{"location":"4.x/okhttp/okhttp3/-response/-builder/header/","text":"okhttp / okhttp3 / Response / Builder / header header \u00b6 open fun header(name: String , value: String ): Builder Sets the header named name to value . If this request already has any headers with that name, they are all replaced.","title":"header - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/header/#header","text":"open fun header(name: String , value: String ): Builder Sets the header named name to value . If this request already has any headers with that name, they are all replaced.","title":"header"},{"location":"4.x/okhttp/okhttp3/-response/-builder/headers/","text":"okhttp / okhttp3 / Response / Builder / headers headers \u00b6 open fun headers(headers: Headers ): Builder Removes all headers on this builder and adds headers .","title":"headers - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/headers/#headers","text":"open fun headers(headers: Headers ): Builder Removes all headers on this builder and adds headers .","title":"headers"},{"location":"4.x/okhttp/okhttp3/-response/-builder/message/","text":"okhttp / okhttp3 / Response / Builder / message message \u00b6 open fun message(message: String ): Builder","title":"message - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/message/#message","text":"open fun message(message: String ): Builder","title":"message"},{"location":"4.x/okhttp/okhttp3/-response/-builder/network-response/","text":"okhttp / okhttp3 / Response / Builder / networkResponse networkResponse \u00b6 open fun networkResponse(networkResponse: Response ?): Builder","title":"networkResponse - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/network-response/#networkresponse","text":"open fun networkResponse(networkResponse: Response ?): Builder","title":"networkResponse"},{"location":"4.x/okhttp/okhttp3/-response/-builder/prior-response/","text":"okhttp / okhttp3 / Response / Builder / priorResponse priorResponse \u00b6 open fun priorResponse(priorResponse: Response ?): Builder","title":"priorResponse - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/prior-response/#priorresponse","text":"open fun priorResponse(priorResponse: Response ?): Builder","title":"priorResponse"},{"location":"4.x/okhttp/okhttp3/-response/-builder/protocol/","text":"okhttp / okhttp3 / Response / Builder / protocol protocol \u00b6 open fun protocol(protocol: Protocol ): Builder","title":"protocol - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/protocol/#protocol","text":"open fun protocol(protocol: Protocol ): Builder","title":"protocol"},{"location":"4.x/okhttp/okhttp3/-response/-builder/received-response-at-millis/","text":"okhttp / okhttp3 / Response / Builder / receivedResponseAtMillis receivedResponseAtMillis \u00b6 open fun receivedResponseAtMillis(receivedResponseAtMillis: Long ): Builder","title":"receivedResponseAtMillis - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/received-response-at-millis/#receivedresponseatmillis","text":"open fun receivedResponseAtMillis(receivedResponseAtMillis: Long ): Builder","title":"receivedResponseAtMillis"},{"location":"4.x/okhttp/okhttp3/-response/-builder/remove-header/","text":"okhttp / okhttp3 / Response / Builder / removeHeader removeHeader \u00b6 open fun removeHeader(name: String ): Builder Removes all headers named name on this builder.","title":"removeHeader - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/remove-header/#removeheader","text":"open fun removeHeader(name: String ): Builder Removes all headers named name on this builder.","title":"removeHeader"},{"location":"4.x/okhttp/okhttp3/-response/-builder/request/","text":"okhttp / okhttp3 / Response / Builder / request request \u00b6 open fun request(request: Request ): Builder","title":"request - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/request/#request","text":"open fun request(request: Request ): Builder","title":"request"},{"location":"4.x/okhttp/okhttp3/-response/-builder/sent-request-at-millis/","text":"okhttp / okhttp3 / Response / Builder / sentRequestAtMillis sentRequestAtMillis \u00b6 open fun sentRequestAtMillis(sentRequestAtMillis: Long ): Builder","title":"sentRequestAtMillis - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response/-builder/sent-request-at-millis/#sentrequestatmillis","text":"open fun sentRequestAtMillis(sentRequestAtMillis: Long ): Builder","title":"sentRequestAtMillis"},{"location":"4.x/okhttp/okhttp3/-response-body/","text":"okhttp / okhttp3 / ResponseBody ResponseBody \u00b6 abstract class ResponseBody : Closeable A one-shot stream from the origin server to the client application with the raw bytes of the response body. Each response body is supported by an active connection to the webserver. This imposes both obligations and limits on the client application. The response body must be closed. \u00b6 Each response body is backed by a limited resource like a socket (live network responses) or an open file (for cached responses). Failing to close the response body will leak resources and may ultimately cause the application to slow down or crash. Both this class and Response implement Closeable . Closing a response simply closes its response body. If you invoke Call.execute or implement Callback.onResponse you must close this body by calling any of the following methods: Response.close() Response.body().close() Response.body().source().close() Response.body().charStream().close() Response.body().byteStream().close() Response.body().bytes() Response.body().string() There is no benefit to invoking multiple close() methods for the same response body. For synchronous calls, the easiest way to make sure a response body is closed is with a try block. With this structure the compiler inserts an implicit finally clause that calls close() for you. Call call = client.newCall(request); try (Response response = call.execute()) { ... // Use the response. } You can use a similar block for asynchronous calls: Call call = client.newCall(request); call.enqueue(new Callback() { public void onResponse(Call call, Response response) throws IOException { try (ResponseBody responseBody = response.body()) { ... // Use the response. } } public void onFailure(Call call, IOException e) { ... // Handle the failure. } }); These examples will not work if you\u2019re consuming the response body on another thread. In such cases the consuming thread must call close when it has finished reading the response body. The response body can be consumed only once. \u00b6 This class may be used to stream very large responses. For example, it is possible to use this class to read a response that is larger than the entire memory allocated to the current process. It can even stream a response larger than the total storage on the current device, which is a common requirement for video streaming applications. Because this class does not buffer the full response in memory, the application may not re-read the bytes of the response. Use this one shot to read the entire response into memory with bytes or string . Or stream the response with either source , byteStream , or charStream . Constructors \u00b6 Name Summary <init> A one-shot stream from the origin server to the client application with the raw bytes of the response body. Each response body is supported by an active connection to the webserver. This imposes both obligations and limits on the client application. ResponseBody() Functions \u00b6 Name Summary bytes Returns the response as a byte array. fun bytes(): ByteArray byteStream fun byteStream(): InputStream byteString Returns the response as a ByteString . fun byteString(): ByteString charStream Returns the response as a character stream. fun charStream(): Reader close open fun close(): Unit contentLength Returns the number of bytes in that will returned by bytes , or byteStream , or -1 if unknown. abstract fun contentLength(): Long contentType abstract fun contentType(): MediaType ? source abstract fun source(): BufferedSource string Returns the response as a string. fun string(): String Companion Object Functions \u00b6 Name Summary asResponseBody Returns a new response body that transmits this source. fun BufferedSource .asResponseBody(contentType: MediaType ? = null, contentLength: Long = -1L): ResponseBody toResponseBody Returns a new response body that transmits this string. If contentType is non-null and lacks a charset, this will use UTF-8. fun String .toResponseBody(contentType: MediaType ? = null): ResponseBody Returns a new response body that transmits this byte array. fun ByteArray .toResponseBody(contentType: MediaType ? = null): ResponseBody Returns a new response body that transmits this byte string. fun ByteString .toResponseBody(contentType: MediaType ? = null): ResponseBody","title":"ResponseBody - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response-body/#responsebody","text":"abstract class ResponseBody : Closeable A one-shot stream from the origin server to the client application with the raw bytes of the response body. Each response body is supported by an active connection to the webserver. This imposes both obligations and limits on the client application.","title":"ResponseBody"},{"location":"4.x/okhttp/okhttp3/-response-body/#the-response-body-must-be-closed","text":"Each response body is backed by a limited resource like a socket (live network responses) or an open file (for cached responses). Failing to close the response body will leak resources and may ultimately cause the application to slow down or crash. Both this class and Response implement Closeable . Closing a response simply closes its response body. If you invoke Call.execute or implement Callback.onResponse you must close this body by calling any of the following methods: Response.close() Response.body().close() Response.body().source().close() Response.body().charStream().close() Response.body().byteStream().close() Response.body().bytes() Response.body().string() There is no benefit to invoking multiple close() methods for the same response body. For synchronous calls, the easiest way to make sure a response body is closed is with a try block. With this structure the compiler inserts an implicit finally clause that calls close() for you. Call call = client.newCall(request); try (Response response = call.execute()) { ... // Use the response. } You can use a similar block for asynchronous calls: Call call = client.newCall(request); call.enqueue(new Callback() { public void onResponse(Call call, Response response) throws IOException { try (ResponseBody responseBody = response.body()) { ... // Use the response. } } public void onFailure(Call call, IOException e) { ... // Handle the failure. } }); These examples will not work if you\u2019re consuming the response body on another thread. In such cases the consuming thread must call close when it has finished reading the response body.","title":"The response body must be closed."},{"location":"4.x/okhttp/okhttp3/-response-body/#the-response-body-can-be-consumed-only-once","text":"This class may be used to stream very large responses. For example, it is possible to use this class to read a response that is larger than the entire memory allocated to the current process. It can even stream a response larger than the total storage on the current device, which is a common requirement for video streaming applications. Because this class does not buffer the full response in memory, the application may not re-read the bytes of the response. Use this one shot to read the entire response into memory with bytes or string . Or stream the response with either source , byteStream , or charStream .","title":"The response body can be consumed only once."},{"location":"4.x/okhttp/okhttp3/-response-body/#constructors","text":"Name Summary <init> A one-shot stream from the origin server to the client application with the raw bytes of the response body. Each response body is supported by an active connection to the webserver. This imposes both obligations and limits on the client application. ResponseBody()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-response-body/#functions","text":"Name Summary bytes Returns the response as a byte array. fun bytes(): ByteArray byteStream fun byteStream(): InputStream byteString Returns the response as a ByteString . fun byteString(): ByteString charStream Returns the response as a character stream. fun charStream(): Reader close open fun close(): Unit contentLength Returns the number of bytes in that will returned by bytes , or byteStream , or -1 if unknown. abstract fun contentLength(): Long contentType abstract fun contentType(): MediaType ? source abstract fun source(): BufferedSource string Returns the response as a string. fun string(): String","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-response-body/#companion-object-functions","text":"Name Summary asResponseBody Returns a new response body that transmits this source. fun BufferedSource .asResponseBody(contentType: MediaType ? = null, contentLength: Long = -1L): ResponseBody toResponseBody Returns a new response body that transmits this string. If contentType is non-null and lacks a charset, this will use UTF-8. fun String .toResponseBody(contentType: MediaType ? = null): ResponseBody Returns a new response body that transmits this byte array. fun ByteArray .toResponseBody(contentType: MediaType ? = null): ResponseBody Returns a new response body that transmits this byte string. fun ByteString .toResponseBody(contentType: MediaType ? = null): ResponseBody","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-response-body/-init-/","text":"okhttp / okhttp3 / ResponseBody / <init> <init> \u00b6 ResponseBody() A one-shot stream from the origin server to the client application with the raw bytes of the response body. Each response body is supported by an active connection to the webserver. This imposes both obligations and limits on the client application. The response body must be closed. \u00b6 Each response body is backed by a limited resource like a socket (live network responses) or an open file (for cached responses). Failing to close the response body will leak resources and may ultimately cause the application to slow down or crash. Both this class and Response implement Closeable . Closing a response simply closes its response body. If you invoke Call.execute or implement Callback.onResponse you must close this body by calling any of the following methods: Response.close() Response.body().close() Response.body().source().close() Response.body().charStream().close() Response.body().byteStream().close() Response.body().bytes() Response.body().string() There is no benefit to invoking multiple close() methods for the same response body. For synchronous calls, the easiest way to make sure a response body is closed is with a try block. With this structure the compiler inserts an implicit finally clause that calls close() for you. Call call = client.newCall(request); try (Response response = call.execute()) { ... // Use the response. } You can use a similar block for asynchronous calls: Call call = client.newCall(request); call.enqueue(new Callback() { public void onResponse(Call call, Response response) throws IOException { try (ResponseBody responseBody = response.body()) { ... // Use the response. } } public void onFailure(Call call, IOException e) { ... // Handle the failure. } }); These examples will not work if you\u2019re consuming the response body on another thread. In such cases the consuming thread must call close when it has finished reading the response body. The response body can be consumed only once. \u00b6 This class may be used to stream very large responses. For example, it is possible to use this class to read a response that is larger than the entire memory allocated to the current process. It can even stream a response larger than the total storage on the current device, which is a common requirement for video streaming applications. Because this class does not buffer the full response in memory, the application may not re-read the bytes of the response. Use this one shot to read the entire response into memory with bytes or string . Or stream the response with either source , byteStream , or charStream .","title":" init "},{"location":"4.x/okhttp/okhttp3/-response-body/-init-/#init","text":"ResponseBody() A one-shot stream from the origin server to the client application with the raw bytes of the response body. Each response body is supported by an active connection to the webserver. This imposes both obligations and limits on the client application.","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-response-body/-init-/#the-response-body-must-be-closed","text":"Each response body is backed by a limited resource like a socket (live network responses) or an open file (for cached responses). Failing to close the response body will leak resources and may ultimately cause the application to slow down or crash. Both this class and Response implement Closeable . Closing a response simply closes its response body. If you invoke Call.execute or implement Callback.onResponse you must close this body by calling any of the following methods: Response.close() Response.body().close() Response.body().source().close() Response.body().charStream().close() Response.body().byteStream().close() Response.body().bytes() Response.body().string() There is no benefit to invoking multiple close() methods for the same response body. For synchronous calls, the easiest way to make sure a response body is closed is with a try block. With this structure the compiler inserts an implicit finally clause that calls close() for you. Call call = client.newCall(request); try (Response response = call.execute()) { ... // Use the response. } You can use a similar block for asynchronous calls: Call call = client.newCall(request); call.enqueue(new Callback() { public void onResponse(Call call, Response response) throws IOException { try (ResponseBody responseBody = response.body()) { ... // Use the response. } } public void onFailure(Call call, IOException e) { ... // Handle the failure. } }); These examples will not work if you\u2019re consuming the response body on another thread. In such cases the consuming thread must call close when it has finished reading the response body.","title":"The response body must be closed."},{"location":"4.x/okhttp/okhttp3/-response-body/-init-/#the-response-body-can-be-consumed-only-once","text":"This class may be used to stream very large responses. For example, it is possible to use this class to read a response that is larger than the entire memory allocated to the current process. It can even stream a response larger than the total storage on the current device, which is a common requirement for video streaming applications. Because this class does not buffer the full response in memory, the application may not re-read the bytes of the response. Use this one shot to read the entire response into memory with bytes or string . Or stream the response with either source , byteStream , or charStream .","title":"The response body can be consumed only once."},{"location":"4.x/okhttp/okhttp3/-response-body/as-response-body/","text":"okhttp / okhttp3 / ResponseBody / asResponseBody asResponseBody \u00b6 @JvmStatic @JvmName(\"create\") fun BufferedSource .asResponseBody(contentType: MediaType ? = null, contentLength: Long = -1L): ResponseBody Returns a new response body that transmits this source.","title":"asResponseBody - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response-body/as-response-body/#asresponsebody","text":"@JvmStatic @JvmName(\"create\") fun BufferedSource .asResponseBody(contentType: MediaType ? = null, contentLength: Long = -1L): ResponseBody Returns a new response body that transmits this source.","title":"asResponseBody"},{"location":"4.x/okhttp/okhttp3/-response-body/byte-stream/","text":"okhttp / okhttp3 / ResponseBody / byteStream byteStream \u00b6 fun byteStream(): InputStream","title":"byteStream - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response-body/byte-stream/#bytestream","text":"fun byteStream(): InputStream","title":"byteStream"},{"location":"4.x/okhttp/okhttp3/-response-body/byte-string/","text":"okhttp / okhttp3 / ResponseBody / byteString byteString \u00b6 fun byteString(): ByteString Returns the response as a ByteString . This method loads entire response body into memory. If the response body is very large this may trigger an OutOfMemoryError . Prefer to stream the response body if this is a possibility for your response.","title":"byteString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response-body/byte-string/#bytestring","text":"fun byteString(): ByteString Returns the response as a ByteString . This method loads entire response body into memory. If the response body is very large this may trigger an OutOfMemoryError . Prefer to stream the response body if this is a possibility for your response.","title":"byteString"},{"location":"4.x/okhttp/okhttp3/-response-body/bytes/","text":"okhttp / okhttp3 / ResponseBody / bytes bytes \u00b6 fun bytes(): ByteArray Returns the response as a byte array. This method loads entire response body into memory. If the response body is very large this may trigger an OutOfMemoryError . Prefer to stream the response body if this is a possibility for your response.","title":"bytes - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response-body/bytes/#bytes","text":"fun bytes(): ByteArray Returns the response as a byte array. This method loads entire response body into memory. If the response body is very large this may trigger an OutOfMemoryError . Prefer to stream the response body if this is a possibility for your response.","title":"bytes"},{"location":"4.x/okhttp/okhttp3/-response-body/char-stream/","text":"okhttp / okhttp3 / ResponseBody / charStream charStream \u00b6 fun charStream(): Reader Returns the response as a character stream. If the response starts with a Byte Order Mark (BOM) , it is consumed and used to determine the charset of the response bytes. Otherwise if the response has a Content-Type header that specifies a charset, that is used to determine the charset of the response bytes. Otherwise the response bytes are decoded as UTF-8.","title":"charStream - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response-body/char-stream/#charstream","text":"fun charStream(): Reader Returns the response as a character stream. If the response starts with a Byte Order Mark (BOM) , it is consumed and used to determine the charset of the response bytes. Otherwise if the response has a Content-Type header that specifies a charset, that is used to determine the charset of the response bytes. Otherwise the response bytes are decoded as UTF-8.","title":"charStream"},{"location":"4.x/okhttp/okhttp3/-response-body/close/","text":"okhttp / okhttp3 / ResponseBody / close close \u00b6 open fun close(): Unit","title":"close - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response-body/close/#close","text":"open fun close(): Unit","title":"close"},{"location":"4.x/okhttp/okhttp3/-response-body/content-length/","text":"okhttp / okhttp3 / ResponseBody / contentLength contentLength \u00b6 abstract fun contentLength(): Long Returns the number of bytes in that will returned by bytes , or byteStream , or -1 if unknown.","title":"contentLength - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response-body/content-length/#contentlength","text":"abstract fun contentLength(): Long Returns the number of bytes in that will returned by bytes , or byteStream , or -1 if unknown.","title":"contentLength"},{"location":"4.x/okhttp/okhttp3/-response-body/content-type/","text":"okhttp / okhttp3 / ResponseBody / contentType contentType \u00b6 abstract fun contentType(): MediaType ?","title":"contentType - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response-body/content-type/#contenttype","text":"abstract fun contentType(): MediaType ?","title":"contentType"},{"location":"4.x/okhttp/okhttp3/-response-body/source/","text":"okhttp / okhttp3 / ResponseBody / source source \u00b6 abstract fun source(): BufferedSource","title":"source - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response-body/source/#source","text":"abstract fun source(): BufferedSource","title":"source"},{"location":"4.x/okhttp/okhttp3/-response-body/string/","text":"okhttp / okhttp3 / ResponseBody / string string \u00b6 fun string(): String Returns the response as a string. If the response starts with a Byte Order Mark (BOM) , it is consumed and used to determine the charset of the response bytes. Otherwise if the response has a Content-Type header that specifies a charset, that is used to determine the charset of the response bytes. Otherwise the response bytes are decoded as UTF-8. This method loads entire response body into memory. If the response body is very large this may trigger an OutOfMemoryError . Prefer to stream the response body if this is a possibility for your response.","title":"string - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response-body/string/#string","text":"fun string(): String Returns the response as a string. If the response starts with a Byte Order Mark (BOM) , it is consumed and used to determine the charset of the response bytes. Otherwise if the response has a Content-Type header that specifies a charset, that is used to determine the charset of the response bytes. Otherwise the response bytes are decoded as UTF-8. This method loads entire response body into memory. If the response body is very large this may trigger an OutOfMemoryError . Prefer to stream the response body if this is a possibility for your response.","title":"string"},{"location":"4.x/okhttp/okhttp3/-response-body/to-response-body/","text":"okhttp / okhttp3 / ResponseBody / toResponseBody toResponseBody \u00b6 @JvmStatic @JvmName(\"create\") fun String .toResponseBody(contentType: MediaType ? = null): ResponseBody Returns a new response body that transmits this string. If contentType is non-null and lacks a charset, this will use UTF-8. @JvmStatic @JvmName(\"create\") fun ByteArray .toResponseBody(contentType: MediaType ? = null): ResponseBody Returns a new response body that transmits this byte array. @JvmStatic @JvmName(\"create\") fun ByteString .toResponseBody(contentType: MediaType ? = null): ResponseBody Returns a new response body that transmits this byte string.","title":"toResponseBody - OkHttp"},{"location":"4.x/okhttp/okhttp3/-response-body/to-response-body/#toresponsebody","text":"@JvmStatic @JvmName(\"create\") fun String .toResponseBody(contentType: MediaType ? = null): ResponseBody Returns a new response body that transmits this string. If contentType is non-null and lacks a charset, this will use UTF-8. @JvmStatic @JvmName(\"create\") fun ByteArray .toResponseBody(contentType: MediaType ? = null): ResponseBody Returns a new response body that transmits this byte array. @JvmStatic @JvmName(\"create\") fun ByteString .toResponseBody(contentType: MediaType ? = null): ResponseBody Returns a new response body that transmits this byte string.","title":"toResponseBody"},{"location":"4.x/okhttp/okhttp3/-route/","text":"okhttp / okhttp3 / Route Route \u00b6 class Route The concrete route used by a connection to reach an abstract origin server. When creating a connection the client has many options: HTTP proxy: a proxy server may be explicitly configured for the client. Otherwise the proxy selector is used. It may return multiple proxies to attempt. IP address: whether connecting directly to an origin server or a proxy, opening a socket requires an IP address. The DNS server may return multiple IP addresses to attempt. Each route is a specific selection of these options. Constructors \u00b6 Name Summary <init> The concrete route used by a connection to reach an abstract origin server. When creating a connection the client has many options: Route(address: Address , proxy: Proxy , socketAddress: InetSocketAddress ) Properties \u00b6 Name Summary address val address: Address proxy Returns the Proxy of this route. val proxy: Proxy socketAddress val socketAddress: InetSocketAddress Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int requiresTunnel Returns true if this route tunnels HTTPS through an HTTP proxy. See RFC 2817, Section 5.2 . fun requiresTunnel(): Boolean toString fun toString(): String","title":"Route - OkHttp"},{"location":"4.x/okhttp/okhttp3/-route/#route","text":"class Route The concrete route used by a connection to reach an abstract origin server. When creating a connection the client has many options: HTTP proxy: a proxy server may be explicitly configured for the client. Otherwise the proxy selector is used. It may return multiple proxies to attempt. IP address: whether connecting directly to an origin server or a proxy, opening a socket requires an IP address. The DNS server may return multiple IP addresses to attempt. Each route is a specific selection of these options.","title":"Route"},{"location":"4.x/okhttp/okhttp3/-route/#constructors","text":"Name Summary <init> The concrete route used by a connection to reach an abstract origin server. When creating a connection the client has many options: Route(address: Address , proxy: Proxy , socketAddress: InetSocketAddress )","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-route/#properties","text":"Name Summary address val address: Address proxy Returns the Proxy of this route. val proxy: Proxy socketAddress val socketAddress: InetSocketAddress","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-route/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int requiresTunnel Returns true if this route tunnels HTTPS through an HTTP proxy. See RFC 2817, Section 5.2 . fun requiresTunnel(): Boolean toString fun toString(): String","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-route/-init-/","text":"okhttp / okhttp3 / Route / <init> <init> \u00b6 Route(address: Address , proxy: Proxy , socketAddress: InetSocketAddress ) The concrete route used by a connection to reach an abstract origin server. When creating a connection the client has many options: HTTP proxy: a proxy server may be explicitly configured for the client. Otherwise the proxy selector is used. It may return multiple proxies to attempt. IP address: whether connecting directly to an origin server or a proxy, opening a socket requires an IP address. The DNS server may return multiple IP addresses to attempt. Each route is a specific selection of these options.","title":" init "},{"location":"4.x/okhttp/okhttp3/-route/-init-/#init","text":"Route(address: Address , proxy: Proxy , socketAddress: InetSocketAddress ) The concrete route used by a connection to reach an abstract origin server. When creating a connection the client has many options: HTTP proxy: a proxy server may be explicitly configured for the client. Otherwise the proxy selector is used. It may return multiple proxies to attempt. IP address: whether connecting directly to an origin server or a proxy, opening a socket requires an IP address. The DNS server may return multiple IP addresses to attempt. Each route is a specific selection of these options.","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-route/address/","text":"okhttp / okhttp3 / Route / address address \u00b6 val address: Address","title":"address - OkHttp"},{"location":"4.x/okhttp/okhttp3/-route/address/#address","text":"val address: Address","title":"address"},{"location":"4.x/okhttp/okhttp3/-route/equals/","text":"okhttp / okhttp3 / Route / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - OkHttp"},{"location":"4.x/okhttp/okhttp3/-route/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"4.x/okhttp/okhttp3/-route/hash-code/","text":"okhttp / okhttp3 / Route / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - OkHttp"},{"location":"4.x/okhttp/okhttp3/-route/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"4.x/okhttp/okhttp3/-route/proxy/","text":"okhttp / okhttp3 / Route / proxy proxy \u00b6 val proxy: Proxy Returns the Proxy of this route. Warning: This may disagree with Address.proxy when it is null. When the address\u2019s proxy is null, the proxy selector is used.","title":"proxy - OkHttp"},{"location":"4.x/okhttp/okhttp3/-route/proxy/#proxy","text":"val proxy: Proxy Returns the Proxy of this route. Warning: This may disagree with Address.proxy when it is null. When the address\u2019s proxy is null, the proxy selector is used.","title":"proxy"},{"location":"4.x/okhttp/okhttp3/-route/requires-tunnel/","text":"okhttp / okhttp3 / Route / requiresTunnel requiresTunnel \u00b6 fun requiresTunnel(): Boolean Returns true if this route tunnels HTTPS through an HTTP proxy. See RFC 2817, Section 5.2 .","title":"requiresTunnel - OkHttp"},{"location":"4.x/okhttp/okhttp3/-route/requires-tunnel/#requirestunnel","text":"fun requiresTunnel(): Boolean Returns true if this route tunnels HTTPS through an HTTP proxy. See RFC 2817, Section 5.2 .","title":"requiresTunnel"},{"location":"4.x/okhttp/okhttp3/-route/socket-address/","text":"okhttp / okhttp3 / Route / socketAddress socketAddress \u00b6 val socketAddress: InetSocketAddress","title":"socketAddress - OkHttp"},{"location":"4.x/okhttp/okhttp3/-route/socket-address/#socketaddress","text":"val socketAddress: InetSocketAddress","title":"socketAddress"},{"location":"4.x/okhttp/okhttp3/-route/to-string/","text":"okhttp / okhttp3 / Route / toString toString \u00b6 fun toString(): String","title":"toString - OkHttp"},{"location":"4.x/okhttp/okhttp3/-route/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"4.x/okhttp/okhttp3/-tls-version/","text":"okhttp / okhttp3 / TlsVersion TlsVersion \u00b6 enum class TlsVersion Versions of TLS that can be offered when negotiating a secure socket. See javax.net.ssl.SSLSocket.setEnabledProtocols . Enum Values \u00b6 Name Summary TLS_1_3 TLS_1_2 TLS_1_1 TLS_1_0 SSL_3_0 Properties \u00b6 Name Summary javaName val javaName: String Companion Object Functions \u00b6 Name Summary forJavaName fun forJavaName(javaName: String ): TlsVersion","title":"TlsVersion - OkHttp"},{"location":"4.x/okhttp/okhttp3/-tls-version/#tlsversion","text":"enum class TlsVersion Versions of TLS that can be offered when negotiating a secure socket. See javax.net.ssl.SSLSocket.setEnabledProtocols .","title":"TlsVersion"},{"location":"4.x/okhttp/okhttp3/-tls-version/#enum-values","text":"Name Summary TLS_1_3 TLS_1_2 TLS_1_1 TLS_1_0 SSL_3_0","title":"Enum Values"},{"location":"4.x/okhttp/okhttp3/-tls-version/#properties","text":"Name Summary javaName val javaName: String","title":"Properties"},{"location":"4.x/okhttp/okhttp3/-tls-version/#companion-object-functions","text":"Name Summary forJavaName fun forJavaName(javaName: String ): TlsVersion","title":"Companion Object Functions"},{"location":"4.x/okhttp/okhttp3/-tls-version/-s-s-l_3_0/","text":"okhttp / okhttp3 / TlsVersion / SSL_3_0 SSL_3_0 \u00b6 SSL_3_0","title":"SSL_3_0 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-tls-version/-s-s-l_3_0/#ssl_3_0","text":"SSL_3_0","title":"SSL_3_0"},{"location":"4.x/okhttp/okhttp3/-tls-version/-t-l-s_1_0/","text":"okhttp / okhttp3 / TlsVersion / TLS_1_0 TLS_1_0 \u00b6 TLS_1_0","title":"TLS_1_0 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-tls-version/-t-l-s_1_0/#tls_1_0","text":"TLS_1_0","title":"TLS_1_0"},{"location":"4.x/okhttp/okhttp3/-tls-version/-t-l-s_1_1/","text":"okhttp / okhttp3 / TlsVersion / TLS_1_1 TLS_1_1 \u00b6 TLS_1_1","title":"TLS_1_1 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-tls-version/-t-l-s_1_1/#tls_1_1","text":"TLS_1_1","title":"TLS_1_1"},{"location":"4.x/okhttp/okhttp3/-tls-version/-t-l-s_1_2/","text":"okhttp / okhttp3 / TlsVersion / TLS_1_2 TLS_1_2 \u00b6 TLS_1_2","title":"TLS_1_2 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-tls-version/-t-l-s_1_2/#tls_1_2","text":"TLS_1_2","title":"TLS_1_2"},{"location":"4.x/okhttp/okhttp3/-tls-version/-t-l-s_1_3/","text":"okhttp / okhttp3 / TlsVersion / TLS_1_3 TLS_1_3 \u00b6 TLS_1_3","title":"TLS_1_3 - OkHttp"},{"location":"4.x/okhttp/okhttp3/-tls-version/-t-l-s_1_3/#tls_1_3","text":"TLS_1_3","title":"TLS_1_3"},{"location":"4.x/okhttp/okhttp3/-tls-version/for-java-name/","text":"okhttp / okhttp3 / TlsVersion / forJavaName forJavaName \u00b6 @JvmStatic fun forJavaName(javaName: String ): TlsVersion","title":"forJavaName - OkHttp"},{"location":"4.x/okhttp/okhttp3/-tls-version/for-java-name/#forjavaname","text":"@JvmStatic fun forJavaName(javaName: String ): TlsVersion","title":"forJavaName"},{"location":"4.x/okhttp/okhttp3/-tls-version/java-name/","text":"okhttp / okhttp3 / TlsVersion / javaName javaName \u00b6 val javaName: String","title":"javaName - OkHttp"},{"location":"4.x/okhttp/okhttp3/-tls-version/java-name/#javaname","text":"val javaName: String","title":"javaName"},{"location":"4.x/okhttp/okhttp3/-web-socket/","text":"okhttp / okhttp3 / WebSocket WebSocket \u00b6 interface WebSocket A non-blocking interface to a web socket. Use the factory to create instances; usually this is OkHttpClient . Web Socket Lifecycle \u00b6 Upon normal operation each web socket progresses through a sequence of states: Connecting: the initial state of each web socket. Messages may be enqueued but they won\u2019t be transmitted until the web socket is open. Open: the web socket has been accepted by the remote peer and is fully operational. Messages in either direction are enqueued for immediate transmission. Closing: one of the peers on the web socket has initiated a graceful shutdown. The web socket will continue to transmit already-enqueued messages but will refuse to enqueue new ones. Closed: the web socket has transmitted all of its messages and has received all messages from the peer. Web sockets may fail due to HTTP upgrade problems, connectivity problems, or if either peer chooses to short-circuit the graceful shutdown process: Canceled: the web socket connection failed. Messages that were successfully enqueued by either peer may not have been transmitted to the other. Note that the state progression is independent for each peer. Arriving at a gracefully-closed state indicates that a peer has sent all of its outgoing messages and received all of its incoming messages. But it does not guarantee that the other peer will successfully receive all of its incoming messages. Types \u00b6 Name Summary Factory interface Factory Functions \u00b6 Name Summary <no name provided> abstract fun <no name provided>(): Unit cancel Immediately and violently release resources held by this web socket, discarding any enqueued messages. This does nothing if the web socket has already been closed or canceled. abstract fun cancel(): Unit close Attempts to initiate a graceful shutdown of this web socket. Any already-enqueued messages will be transmitted before the close message is sent but subsequent calls to send will return false and their messages will not be enqueued. abstract fun close(code: Int , reason: String ?): Boolean queueSize Returns the size in bytes of all messages enqueued to be transmitted to the server. This doesn\u2019t include framing overhead. If compression is enabled, uncompressed messages size is used to calculate this value. It also doesn\u2019t include any bytes buffered by the operating system or network intermediaries. This method returns 0 if no messages are waiting in the queue. If may return a nonzero value after the web socket has been canceled; this indicates that enqueued messages were not transmitted. abstract fun queueSize(): Long request Returns the original request that initiated this web socket. abstract fun request(): Request send Attempts to enqueue text to be UTF-8 encoded and sent as a the data of a text (type 0x1 ) message. abstract fun send(text: String ): Boolean Attempts to enqueue bytes to be sent as a the data of a binary (type 0x2 ) message. abstract fun send(bytes: ByteString ): Boolean","title":"WebSocket - OkHttp"},{"location":"4.x/okhttp/okhttp3/-web-socket/#websocket","text":"interface WebSocket A non-blocking interface to a web socket. Use the factory to create instances; usually this is OkHttpClient .","title":"WebSocket"},{"location":"4.x/okhttp/okhttp3/-web-socket/#web-socket-lifecycle","text":"Upon normal operation each web socket progresses through a sequence of states: Connecting: the initial state of each web socket. Messages may be enqueued but they won\u2019t be transmitted until the web socket is open. Open: the web socket has been accepted by the remote peer and is fully operational. Messages in either direction are enqueued for immediate transmission. Closing: one of the peers on the web socket has initiated a graceful shutdown. The web socket will continue to transmit already-enqueued messages but will refuse to enqueue new ones. Closed: the web socket has transmitted all of its messages and has received all messages from the peer. Web sockets may fail due to HTTP upgrade problems, connectivity problems, or if either peer chooses to short-circuit the graceful shutdown process: Canceled: the web socket connection failed. Messages that were successfully enqueued by either peer may not have been transmitted to the other. Note that the state progression is independent for each peer. Arriving at a gracefully-closed state indicates that a peer has sent all of its outgoing messages and received all of its incoming messages. But it does not guarantee that the other peer will successfully receive all of its incoming messages.","title":"Web Socket Lifecycle"},{"location":"4.x/okhttp/okhttp3/-web-socket/#types","text":"Name Summary Factory interface Factory","title":"Types"},{"location":"4.x/okhttp/okhttp3/-web-socket/#functions","text":"Name Summary <no name provided> abstract fun <no name provided>(): Unit cancel Immediately and violently release resources held by this web socket, discarding any enqueued messages. This does nothing if the web socket has already been closed or canceled. abstract fun cancel(): Unit close Attempts to initiate a graceful shutdown of this web socket. Any already-enqueued messages will be transmitted before the close message is sent but subsequent calls to send will return false and their messages will not be enqueued. abstract fun close(code: Int , reason: String ?): Boolean queueSize Returns the size in bytes of all messages enqueued to be transmitted to the server. This doesn\u2019t include framing overhead. If compression is enabled, uncompressed messages size is used to calculate this value. It also doesn\u2019t include any bytes buffered by the operating system or network intermediaries. This method returns 0 if no messages are waiting in the queue. If may return a nonzero value after the web socket has been canceled; this indicates that enqueued messages were not transmitted. abstract fun queueSize(): Long request Returns the original request that initiated this web socket. abstract fun request(): Request send Attempts to enqueue text to be UTF-8 encoded and sent as a the data of a text (type 0x1 ) message. abstract fun send(text: String ): Boolean Attempts to enqueue bytes to be sent as a the data of a binary (type 0x2 ) message. abstract fun send(bytes: ByteString ): Boolean","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-web-socket/-no%20name%20provided-/","text":"okhttp / okhttp3 / WebSocket / <no name provided> <no name provided> \u00b6 abstract fun <no name provided>(): Unit","title":" no name provided "},{"location":"4.x/okhttp/okhttp3/-web-socket/-no%20name%20provided-/#no-name-provided","text":"abstract fun <no name provided>(): Unit","title":"&lt;no name provided&gt;"},{"location":"4.x/okhttp/okhttp3/-web-socket/cancel/","text":"okhttp / okhttp3 / WebSocket / cancel cancel \u00b6 abstract fun cancel(): Unit Immediately and violently release resources held by this web socket, discarding any enqueued messages. This does nothing if the web socket has already been closed or canceled.","title":"cancel - OkHttp"},{"location":"4.x/okhttp/okhttp3/-web-socket/cancel/#cancel","text":"abstract fun cancel(): Unit Immediately and violently release resources held by this web socket, discarding any enqueued messages. This does nothing if the web socket has already been closed or canceled.","title":"cancel"},{"location":"4.x/okhttp/okhttp3/-web-socket/close/","text":"okhttp / okhttp3 / WebSocket / close close \u00b6 abstract fun close(code: Int , reason: String ?): Boolean Attempts to initiate a graceful shutdown of this web socket. Any already-enqueued messages will be transmitted before the close message is sent but subsequent calls to send will return false and their messages will not be enqueued. This returns true if a graceful shutdown was initiated by this call. It returns false if a graceful shutdown was already underway or if the web socket is already closed or canceled. Parameters \u00b6 code - Status code as defined by Section 7.4 of RFC 6455 . reason - Reason for shutting down, no longer than 123 bytes of UTF-8 encoded data ( not characters) or null. Exceptions \u00b6 IllegalArgumentException - if code is invalid or reason is too long.","title":"close - OkHttp"},{"location":"4.x/okhttp/okhttp3/-web-socket/close/#close","text":"abstract fun close(code: Int , reason: String ?): Boolean Attempts to initiate a graceful shutdown of this web socket. Any already-enqueued messages will be transmitted before the close message is sent but subsequent calls to send will return false and their messages will not be enqueued. This returns true if a graceful shutdown was initiated by this call. It returns false if a graceful shutdown was already underway or if the web socket is already closed or canceled.","title":"close"},{"location":"4.x/okhttp/okhttp3/-web-socket/close/#parameters","text":"code - Status code as defined by Section 7.4 of RFC 6455 . reason - Reason for shutting down, no longer than 123 bytes of UTF-8 encoded data ( not characters) or null.","title":"Parameters"},{"location":"4.x/okhttp/okhttp3/-web-socket/close/#exceptions","text":"IllegalArgumentException - if code is invalid or reason is too long.","title":"Exceptions"},{"location":"4.x/okhttp/okhttp3/-web-socket/queue-size/","text":"okhttp / okhttp3 / WebSocket / queueSize queueSize \u00b6 abstract fun queueSize(): Long Returns the size in bytes of all messages enqueued to be transmitted to the server. This doesn\u2019t include framing overhead. If compression is enabled, uncompressed messages size is used to calculate this value. It also doesn\u2019t include any bytes buffered by the operating system or network intermediaries. This method returns 0 if no messages are waiting in the queue. If may return a nonzero value after the web socket has been canceled; this indicates that enqueued messages were not transmitted.","title":"queueSize - OkHttp"},{"location":"4.x/okhttp/okhttp3/-web-socket/queue-size/#queuesize","text":"abstract fun queueSize(): Long Returns the size in bytes of all messages enqueued to be transmitted to the server. This doesn\u2019t include framing overhead. If compression is enabled, uncompressed messages size is used to calculate this value. It also doesn\u2019t include any bytes buffered by the operating system or network intermediaries. This method returns 0 if no messages are waiting in the queue. If may return a nonzero value after the web socket has been canceled; this indicates that enqueued messages were not transmitted.","title":"queueSize"},{"location":"4.x/okhttp/okhttp3/-web-socket/request/","text":"okhttp / okhttp3 / WebSocket / request request \u00b6 abstract fun request(): Request Returns the original request that initiated this web socket.","title":"request - OkHttp"},{"location":"4.x/okhttp/okhttp3/-web-socket/request/#request","text":"abstract fun request(): Request Returns the original request that initiated this web socket.","title":"request"},{"location":"4.x/okhttp/okhttp3/-web-socket/send/","text":"okhttp / okhttp3 / WebSocket / send send \u00b6 abstract fun send(text: String ): Boolean Attempts to enqueue text to be UTF-8 encoded and sent as a the data of a text (type 0x1 ) message. This method returns true if the message was enqueued. Messages that would overflow the outgoing message buffer will be rejected and trigger a graceful shutdown of this web socket. This method returns false in that case, and in any other case where this web socket is closing, closed, or canceled. This method returns immediately. abstract fun send(bytes: ByteString ): Boolean Attempts to enqueue bytes to be sent as a the data of a binary (type 0x2 ) message. This method returns true if the message was enqueued. Messages that would overflow the outgoing message buffer (16 MiB) will be rejected and trigger a graceful shutdown of this web socket. This method returns false in that case, and in any other case where this web socket is closing, closed, or canceled. This method returns immediately.","title":"send - OkHttp"},{"location":"4.x/okhttp/okhttp3/-web-socket/send/#send","text":"abstract fun send(text: String ): Boolean Attempts to enqueue text to be UTF-8 encoded and sent as a the data of a text (type 0x1 ) message. This method returns true if the message was enqueued. Messages that would overflow the outgoing message buffer will be rejected and trigger a graceful shutdown of this web socket. This method returns false in that case, and in any other case where this web socket is closing, closed, or canceled. This method returns immediately. abstract fun send(bytes: ByteString ): Boolean Attempts to enqueue bytes to be sent as a the data of a binary (type 0x2 ) message. This method returns true if the message was enqueued. Messages that would overflow the outgoing message buffer (16 MiB) will be rejected and trigger a graceful shutdown of this web socket. This method returns false in that case, and in any other case where this web socket is closing, closed, or canceled. This method returns immediately.","title":"send"},{"location":"4.x/okhttp/okhttp3/-web-socket/-factory/","text":"okhttp / okhttp3 / WebSocket / Factory Factory \u00b6 interface Factory Functions \u00b6 Name Summary newWebSocket Creates a new web socket and immediately returns it. Creating a web socket initiates an asynchronous process to connect the socket. Once that succeeds or fails, listener will be notified. The caller must either close or cancel the returned web socket when it is no longer in use. abstract fun newWebSocket(request: Request , listener: WebSocketListener ): WebSocket","title":"Factory - OkHttp"},{"location":"4.x/okhttp/okhttp3/-web-socket/-factory/#factory","text":"interface Factory","title":"Factory"},{"location":"4.x/okhttp/okhttp3/-web-socket/-factory/#functions","text":"Name Summary newWebSocket Creates a new web socket and immediately returns it. Creating a web socket initiates an asynchronous process to connect the socket. Once that succeeds or fails, listener will be notified. The caller must either close or cancel the returned web socket when it is no longer in use. abstract fun newWebSocket(request: Request , listener: WebSocketListener ): WebSocket","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-web-socket/-factory/new-web-socket/","text":"okhttp / okhttp3 / WebSocket / Factory / newWebSocket newWebSocket \u00b6 abstract fun newWebSocket(request: Request , listener: WebSocketListener ): WebSocket Creates a new web socket and immediately returns it. Creating a web socket initiates an asynchronous process to connect the socket. Once that succeeds or fails, listener will be notified. The caller must either close or cancel the returned web socket when it is no longer in use.","title":"newWebSocket - OkHttp"},{"location":"4.x/okhttp/okhttp3/-web-socket/-factory/new-web-socket/#newwebsocket","text":"abstract fun newWebSocket(request: Request , listener: WebSocketListener ): WebSocket Creates a new web socket and immediately returns it. Creating a web socket initiates an asynchronous process to connect the socket. Once that succeeds or fails, listener will be notified. The caller must either close or cancel the returned web socket when it is no longer in use.","title":"newWebSocket"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/","text":"okhttp / okhttp3 / WebSocketListener WebSocketListener \u00b6 abstract class WebSocketListener Constructors \u00b6 Name Summary <init> WebSocketListener() Functions \u00b6 Name Summary onClosed Invoked when both peers have indicated that no more messages will be transmitted and the connection has been successfully released. No further calls to this listener will be made. open fun onClosed(webSocket: WebSocket , code: Int , reason: String ): Unit onClosing Invoked when the remote peer has indicated that no more incoming messages will be transmitted. open fun onClosing(webSocket: WebSocket , code: Int , reason: String ): Unit onFailure Invoked when a web socket has been closed due to an error reading from or writing to the network. Both outgoing and incoming messages may have been lost. No further calls to this listener will be made. open fun onFailure(webSocket: WebSocket , t: Throwable , response: Response ?): Unit onMessage Invoked when a text (type 0x1 ) message has been received. open fun onMessage(webSocket: WebSocket , text: String ): Unit Invoked when a binary (type 0x2 ) message has been received. open fun onMessage(webSocket: WebSocket , bytes: ByteString ): Unit onOpen Invoked when a web socket has been accepted by the remote peer and may begin transmitting messages. open fun onOpen(webSocket: WebSocket , response: Response ): Unit","title":"WebSocketListener - OkHttp"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/#websocketlistener","text":"abstract class WebSocketListener","title":"WebSocketListener"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/#constructors","text":"Name Summary <init> WebSocketListener()","title":"Constructors"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/#functions","text":"Name Summary onClosed Invoked when both peers have indicated that no more messages will be transmitted and the connection has been successfully released. No further calls to this listener will be made. open fun onClosed(webSocket: WebSocket , code: Int , reason: String ): Unit onClosing Invoked when the remote peer has indicated that no more incoming messages will be transmitted. open fun onClosing(webSocket: WebSocket , code: Int , reason: String ): Unit onFailure Invoked when a web socket has been closed due to an error reading from or writing to the network. Both outgoing and incoming messages may have been lost. No further calls to this listener will be made. open fun onFailure(webSocket: WebSocket , t: Throwable , response: Response ?): Unit onMessage Invoked when a text (type 0x1 ) message has been received. open fun onMessage(webSocket: WebSocket , text: String ): Unit Invoked when a binary (type 0x2 ) message has been received. open fun onMessage(webSocket: WebSocket , bytes: ByteString ): Unit onOpen Invoked when a web socket has been accepted by the remote peer and may begin transmitting messages. open fun onOpen(webSocket: WebSocket , response: Response ): Unit","title":"Functions"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/-init-/","text":"okhttp / okhttp3 / WebSocketListener / <init> <init> \u00b6 WebSocketListener()","title":" init "},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/-init-/#init","text":"WebSocketListener()","title":"&lt;init&gt;"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/on-closed/","text":"okhttp / okhttp3 / WebSocketListener / onClosed onClosed \u00b6 open fun onClosed(webSocket: WebSocket , code: Int , reason: String ): Unit Invoked when both peers have indicated that no more messages will be transmitted and the connection has been successfully released. No further calls to this listener will be made.","title":"onClosed - OkHttp"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/on-closed/#onclosed","text":"open fun onClosed(webSocket: WebSocket , code: Int , reason: String ): Unit Invoked when both peers have indicated that no more messages will be transmitted and the connection has been successfully released. No further calls to this listener will be made.","title":"onClosed"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/on-closing/","text":"okhttp / okhttp3 / WebSocketListener / onClosing onClosing \u00b6 open fun onClosing(webSocket: WebSocket , code: Int , reason: String ): Unit Invoked when the remote peer has indicated that no more incoming messages will be transmitted.","title":"onClosing - OkHttp"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/on-closing/#onclosing","text":"open fun onClosing(webSocket: WebSocket , code: Int , reason: String ): Unit Invoked when the remote peer has indicated that no more incoming messages will be transmitted.","title":"onClosing"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/on-failure/","text":"okhttp / okhttp3 / WebSocketListener / onFailure onFailure \u00b6 open fun onFailure(webSocket: WebSocket , t: Throwable , response: Response ?): Unit Invoked when a web socket has been closed due to an error reading from or writing to the network. Both outgoing and incoming messages may have been lost. No further calls to this listener will be made.","title":"onFailure - OkHttp"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/on-failure/#onfailure","text":"open fun onFailure(webSocket: WebSocket , t: Throwable , response: Response ?): Unit Invoked when a web socket has been closed due to an error reading from or writing to the network. Both outgoing and incoming messages may have been lost. No further calls to this listener will be made.","title":"onFailure"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/on-message/","text":"okhttp / okhttp3 / WebSocketListener / onMessage onMessage \u00b6 open fun onMessage(webSocket: WebSocket , text: String ): Unit Invoked when a text (type 0x1 ) message has been received. open fun onMessage(webSocket: WebSocket , bytes: ByteString ): Unit Invoked when a binary (type 0x2 ) message has been received.","title":"onMessage - OkHttp"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/on-message/#onmessage","text":"open fun onMessage(webSocket: WebSocket , text: String ): Unit Invoked when a text (type 0x1 ) message has been received. open fun onMessage(webSocket: WebSocket , bytes: ByteString ): Unit Invoked when a binary (type 0x2 ) message has been received.","title":"onMessage"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/on-open/","text":"okhttp / okhttp3 / WebSocketListener / onOpen onOpen \u00b6 open fun onOpen(webSocket: WebSocket , response: Response ): Unit Invoked when a web socket has been accepted by the remote peer and may begin transmitting messages.","title":"onOpen - OkHttp"},{"location":"4.x/okhttp/okhttp3/-web-socket-listener/on-open/#onopen","text":"open fun onOpen(webSocket: WebSocket , response: Response ): Unit Invoked when a web socket has been accepted by the remote peer and may begin transmitting messages.","title":"onOpen"},{"location":"4.x/okhttp-brotli/","text":"okhttp-brotli Packages \u00b6 Name Summary okhttp3.brotli okhttp3.brotli.internal Index \u00b6 All Types","title":"Packages - OkHttp"},{"location":"4.x/okhttp-brotli/#packages","text":"Name Summary okhttp3.brotli okhttp3.brotli.internal","title":"Packages"},{"location":"4.x/okhttp-brotli/#index","text":"All Types","title":"Index"},{"location":"4.x/okhttp-brotli/alltypes/","text":"All Types \u00b6 Name Summary okhttp3.brotli.BrotliInterceptor \u00b6 Transparent Brotli response support.","title":"All Types - OkHttp"},{"location":"4.x/okhttp-brotli/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"4.x/okhttp-brotli/alltypes/#okhttp3brotlibrotliinterceptor","text":"Transparent Brotli response support.","title":"okhttp3.brotli.BrotliInterceptor"},{"location":"4.x/okhttp-brotli/okhttp3.brotli/","text":"okhttp-brotli / okhttp3.brotli Package okhttp3.brotli \u00b6 Types \u00b6 Name Summary BrotliInterceptor Transparent Brotli response support. object BrotliInterceptor : Interceptor","title":"brotli"},{"location":"4.x/okhttp-brotli/okhttp3.brotli/#package-okhttp3brotli","text":"","title":"Package okhttp3.brotli"},{"location":"4.x/okhttp-brotli/okhttp3.brotli/#types","text":"Name Summary BrotliInterceptor Transparent Brotli response support. object BrotliInterceptor : Interceptor","title":"Types"},{"location":"4.x/okhttp-brotli/okhttp3.brotli/-brotli-interceptor/","text":"okhttp-brotli / okhttp3.brotli / BrotliInterceptor BrotliInterceptor \u00b6 object BrotliInterceptor : Interceptor Transparent Brotli response support. Adds Accept-Encoding: br to request and checks (and strips) for Content-Encoding: br in responses. n.b. this replaces the transparent gzip compression in BridgeInterceptor. Functions \u00b6 Name Summary intercept fun intercept(chain: Chain): Response","title":"BrotliInterceptor - OkHttp"},{"location":"4.x/okhttp-brotli/okhttp3.brotli/-brotli-interceptor/#brotliinterceptor","text":"object BrotliInterceptor : Interceptor Transparent Brotli response support. Adds Accept-Encoding: br to request and checks (and strips) for Content-Encoding: br in responses. n.b. this replaces the transparent gzip compression in BridgeInterceptor.","title":"BrotliInterceptor"},{"location":"4.x/okhttp-brotli/okhttp3.brotli/-brotli-interceptor/#functions","text":"Name Summary intercept fun intercept(chain: Chain): Response","title":"Functions"},{"location":"4.x/okhttp-brotli/okhttp3.brotli/-brotli-interceptor/intercept/","text":"okhttp-brotli / okhttp3.brotli / BrotliInterceptor / intercept intercept \u00b6 fun intercept(chain: Chain): Response","title":"intercept - OkHttp"},{"location":"4.x/okhttp-brotli/okhttp3.brotli/-brotli-interceptor/intercept/#intercept","text":"fun intercept(chain: Chain): Response","title":"intercept"},{"location":"4.x/okhttp-brotli/okhttp3.brotli.internal/","text":"okhttp-brotli / okhttp3.brotli.internal Package okhttp3.brotli.internal \u00b6 Functions \u00b6 Name Summary uncompress fun uncompress(response: Response): Response","title":"Package okhttp3.brotli.internal - OkHttp"},{"location":"4.x/okhttp-brotli/okhttp3.brotli.internal/#package-okhttp3brotliinternal","text":"","title":"Package okhttp3.brotli.internal"},{"location":"4.x/okhttp-brotli/okhttp3.brotli.internal/#functions","text":"Name Summary uncompress fun uncompress(response: Response): Response","title":"Functions"},{"location":"4.x/okhttp-brotli/okhttp3.brotli.internal/uncompress/","text":"okhttp-brotli / okhttp3.brotli.internal / uncompress uncompress \u00b6 fun uncompress(response: Response): Response","title":"uncompress - OkHttp"},{"location":"4.x/okhttp-brotli/okhttp3.brotli.internal/uncompress/#uncompress","text":"fun uncompress(response: Response): Response","title":"uncompress"},{"location":"4.x/okhttp-dnsoverhttps/","text":"okhttp-dnsoverhttps Packages \u00b6 Name Summary okhttp3.dnsoverhttps Index \u00b6 All Types","title":"Packages - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/#packages","text":"Name Summary okhttp3.dnsoverhttps","title":"Packages"},{"location":"4.x/okhttp-dnsoverhttps/#index","text":"All Types","title":"Index"},{"location":"4.x/okhttp-dnsoverhttps/alltypes/","text":"All Types \u00b6 Name Summary okhttp3.dnsoverhttps.DnsOverHttps \u00b6 DNS over HTTPS implementation . | okhttp3.dnsoverhttps.DnsRecordCodec \u00b6 Trivial Dns Encoder/Decoder, basically ripped from Netty full implementation.","title":"All Types - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"4.x/okhttp-dnsoverhttps/alltypes/#okhttp3dnsoverhttpsdnsoverhttps","text":"DNS over HTTPS implementation . |","title":"okhttp3.dnsoverhttps.DnsOverHttps"},{"location":"4.x/okhttp-dnsoverhttps/alltypes/#okhttp3dnsoverhttpsdnsrecordcodec","text":"Trivial Dns Encoder/Decoder, basically ripped from Netty full implementation.","title":"okhttp3.dnsoverhttps.DnsRecordCodec"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps Package okhttp3.dnsoverhttps \u00b6 Types \u00b6 Name Summary DnsOverHttps DNS over HTTPS implementation . class DnsOverHttps : Dns DnsRecordCodec Trivial Dns Encoder/Decoder, basically ripped from Netty full implementation. object DnsRecordCodec","title":"dnsoverhttps"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/#package-okhttp3dnsoverhttps","text":"","title":"Package okhttp3.dnsoverhttps"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/#types","text":"Name Summary DnsOverHttps DNS over HTTPS implementation . class DnsOverHttps : Dns DnsRecordCodec Trivial Dns Encoder/Decoder, basically ripped from Netty full implementation. object DnsRecordCodec","title":"Types"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps DnsOverHttps \u00b6 class DnsOverHttps : Dns DNS over HTTPS implementation . A DNS API client encodes a single DNS query into an HTTP request using either the HTTP GET or POST method and the other requirements of this section. The DNS API server defines the URI used by the request through the use of a URI Template. Types \u00b6 Name Summary Builder class Builder Properties \u00b6 Name Summary client val client: OkHttpClient includeIPv6 val includeIPv6: Boolean post val post: Boolean resolvePrivateAddresses val resolvePrivateAddresses: Boolean resolvePublicAddresses val resolvePublicAddresses: Boolean url val url: HttpUrl Functions \u00b6 Name Summary lookup fun lookup(hostname: String ): List < InetAddress > Companion Object Properties \u00b6 Name Summary DNS_MESSAGE val DNS_MESSAGE: MediaType MAX_RESPONSE_SIZE const val MAX_RESPONSE_SIZE: Int","title":"DnsOverHttps - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/#dnsoverhttps","text":"class DnsOverHttps : Dns DNS over HTTPS implementation . A DNS API client encodes a single DNS query into an HTTP request using either the HTTP GET or POST method and the other requirements of this section. The DNS API server defines the URI used by the request through the use of a URI Template.","title":"DnsOverHttps"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/#properties","text":"Name Summary client val client: OkHttpClient includeIPv6 val includeIPv6: Boolean post val post: Boolean resolvePrivateAddresses val resolvePrivateAddresses: Boolean resolvePublicAddresses val resolvePublicAddresses: Boolean url val url: HttpUrl","title":"Properties"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/#functions","text":"Name Summary lookup fun lookup(hostname: String ): List < InetAddress >","title":"Functions"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/#companion-object-properties","text":"Name Summary DNS_MESSAGE val DNS_MESSAGE: MediaType MAX_RESPONSE_SIZE const val MAX_RESPONSE_SIZE: Int","title":"Companion Object Properties"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-d-n-s_-m-e-s-s-a-g-e/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / DNS_MESSAGE DNS_MESSAGE \u00b6 val DNS_MESSAGE: MediaType","title":"DNS_MESSAGE - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-d-n-s_-m-e-s-s-a-g-e/#dns_message","text":"val DNS_MESSAGE: MediaType","title":"DNS_MESSAGE"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-m-a-x_-r-e-s-p-o-n-s-e_-s-i-z-e/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / MAX_RESPONSE_SIZE MAX_RESPONSE_SIZE \u00b6 const val MAX_RESPONSE_SIZE: Int","title":"MAX_RESPONSE_SIZE - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-m-a-x_-r-e-s-p-o-n-s-e_-s-i-z-e/#max_response_size","text":"const val MAX_RESPONSE_SIZE: Int","title":"MAX_RESPONSE_SIZE"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/client/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / client client \u00b6 val client: OkHttpClient","title":"client - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/client/#client","text":"val client: OkHttpClient","title":"client"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/include-i-pv6/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / includeIPv6 includeIPv6 \u00b6 val includeIPv6: Boolean","title":"includeIPv6 - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/include-i-pv6/#includeipv6","text":"val includeIPv6: Boolean","title":"includeIPv6"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/lookup/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / lookup lookup \u00b6 fun lookup(hostname: String ): List < InetAddress >","title":"lookup - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/lookup/#lookup","text":"fun lookup(hostname: String ): List < InetAddress >","title":"lookup"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/post/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / post post \u00b6 val post: Boolean","title":"post - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/post/#post","text":"val post: Boolean","title":"post"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/resolve-private-addresses/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / resolvePrivateAddresses resolvePrivateAddresses \u00b6 val resolvePrivateAddresses: Boolean","title":"resolvePrivateAddresses - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/resolve-private-addresses/#resolveprivateaddresses","text":"val resolvePrivateAddresses: Boolean","title":"resolvePrivateAddresses"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/resolve-public-addresses/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / resolvePublicAddresses resolvePublicAddresses \u00b6 val resolvePublicAddresses: Boolean","title":"resolvePublicAddresses - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/resolve-public-addresses/#resolvepublicaddresses","text":"val resolvePublicAddresses: Boolean","title":"resolvePublicAddresses"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/url/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / url url \u00b6 val url: HttpUrl","title":"url - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/url/#url","text":"val url: HttpUrl","title":"url"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder() Functions \u00b6 Name Summary bootstrapDnsHosts fun bootstrapDnsHosts(bootstrapDnsHosts: List < InetAddress >?): Builder fun bootstrapDnsHosts(vararg bootstrapDnsHosts: InetAddress ): Builder build fun build(): DnsOverHttps client fun client(client: OkHttpClient): Builder includeIPv6 fun includeIPv6(includeIPv6: Boolean ): Builder post fun post(post: Boolean ): Builder resolvePrivateAddresses fun resolvePrivateAddresses(resolvePrivateAddresses: Boolean ): Builder resolvePublicAddresses fun resolvePublicAddresses(resolvePublicAddresses: Boolean ): Builder systemDns fun systemDns(systemDns: Dns): Builder url fun url(url: HttpUrl): Builder","title":"Builder - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/#functions","text":"Name Summary bootstrapDnsHosts fun bootstrapDnsHosts(bootstrapDnsHosts: List < InetAddress >?): Builder fun bootstrapDnsHosts(vararg bootstrapDnsHosts: InetAddress ): Builder build fun build(): DnsOverHttps client fun client(client: OkHttpClient): Builder includeIPv6 fun includeIPv6(includeIPv6: Boolean ): Builder post fun post(post: Boolean ): Builder resolvePrivateAddresses fun resolvePrivateAddresses(resolvePrivateAddresses: Boolean ): Builder resolvePublicAddresses fun resolvePublicAddresses(resolvePublicAddresses: Boolean ): Builder systemDns fun systemDns(systemDns: Dns): Builder url fun url(url: HttpUrl): Builder","title":"Functions"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/-init-/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/bootstrap-dns-hosts/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / Builder / bootstrapDnsHosts bootstrapDnsHosts \u00b6 fun bootstrapDnsHosts(bootstrapDnsHosts: List < InetAddress >?): Builder fun bootstrapDnsHosts(vararg bootstrapDnsHosts: InetAddress ): Builder","title":"bootstrapDnsHosts - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/bootstrap-dns-hosts/#bootstrapdnshosts","text":"fun bootstrapDnsHosts(bootstrapDnsHosts: List < InetAddress >?): Builder fun bootstrapDnsHosts(vararg bootstrapDnsHosts: InetAddress ): Builder","title":"bootstrapDnsHosts"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/build/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / Builder / build build \u00b6 fun build(): DnsOverHttps","title":"build - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/build/#build","text":"fun build(): DnsOverHttps","title":"build"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/client/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / Builder / client client \u00b6 fun client(client: OkHttpClient): Builder","title":"client - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/client/#client","text":"fun client(client: OkHttpClient): Builder","title":"client"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/include-i-pv6/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / Builder / includeIPv6 includeIPv6 \u00b6 fun includeIPv6(includeIPv6: Boolean ): Builder","title":"includeIPv6 - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/include-i-pv6/#includeipv6","text":"fun includeIPv6(includeIPv6: Boolean ): Builder","title":"includeIPv6"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/post/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / Builder / post post \u00b6 fun post(post: Boolean ): Builder","title":"post - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/post/#post","text":"fun post(post: Boolean ): Builder","title":"post"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/resolve-private-addresses/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / Builder / resolvePrivateAddresses resolvePrivateAddresses \u00b6 fun resolvePrivateAddresses(resolvePrivateAddresses: Boolean ): Builder","title":"resolvePrivateAddresses - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/resolve-private-addresses/#resolveprivateaddresses","text":"fun resolvePrivateAddresses(resolvePrivateAddresses: Boolean ): Builder","title":"resolvePrivateAddresses"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/resolve-public-addresses/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / Builder / resolvePublicAddresses resolvePublicAddresses \u00b6 fun resolvePublicAddresses(resolvePublicAddresses: Boolean ): Builder","title":"resolvePublicAddresses - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/resolve-public-addresses/#resolvepublicaddresses","text":"fun resolvePublicAddresses(resolvePublicAddresses: Boolean ): Builder","title":"resolvePublicAddresses"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/system-dns/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / Builder / systemDns systemDns \u00b6 fun systemDns(systemDns: Dns): Builder","title":"systemDns - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/system-dns/#systemdns","text":"fun systemDns(systemDns: Dns): Builder","title":"systemDns"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/url/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsOverHttps / Builder / url url \u00b6 fun url(url: HttpUrl): Builder","title":"url - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-over-https/-builder/url/#url","text":"fun url(url: HttpUrl): Builder","title":"url"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-record-codec/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsRecordCodec DnsRecordCodec \u00b6 object DnsRecordCodec Trivial Dns Encoder/Decoder, basically ripped from Netty full implementation. Properties \u00b6 Name Summary TYPE_A const val TYPE_A: Int TYPE_AAAA const val TYPE_AAAA: Int Functions \u00b6 Name Summary decodeAnswers fun decodeAnswers(hostname: String , byteString: ByteString ): List < InetAddress > encodeQuery fun encodeQuery(host: String , type: Int ): ByteString","title":"DnsRecordCodec - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-record-codec/#dnsrecordcodec","text":"object DnsRecordCodec Trivial Dns Encoder/Decoder, basically ripped from Netty full implementation.","title":"DnsRecordCodec"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-record-codec/#properties","text":"Name Summary TYPE_A const val TYPE_A: Int TYPE_AAAA const val TYPE_AAAA: Int","title":"Properties"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-record-codec/#functions","text":"Name Summary decodeAnswers fun decodeAnswers(hostname: String , byteString: ByteString ): List < InetAddress > encodeQuery fun encodeQuery(host: String , type: Int ): ByteString","title":"Functions"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-record-codec/-t-y-p-e_-a-a-a-a/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsRecordCodec / TYPE_AAAA TYPE_AAAA \u00b6 const val TYPE_AAAA: Int","title":"TYPE_AAAA - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-record-codec/-t-y-p-e_-a-a-a-a/#type_aaaa","text":"const val TYPE_AAAA: Int","title":"TYPE_AAAA"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-record-codec/-t-y-p-e_-a/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsRecordCodec / TYPE_A TYPE_A \u00b6 const val TYPE_A: Int","title":"TYPE_A - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-record-codec/-t-y-p-e_-a/#type_a","text":"const val TYPE_A: Int","title":"TYPE_A"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-record-codec/decode-answers/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsRecordCodec / decodeAnswers decodeAnswers \u00b6 fun decodeAnswers(hostname: String , byteString: ByteString ): List < InetAddress >","title":"decodeAnswers - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-record-codec/decode-answers/#decodeanswers","text":"fun decodeAnswers(hostname: String , byteString: ByteString ): List < InetAddress >","title":"decodeAnswers"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-record-codec/encode-query/","text":"okhttp-dnsoverhttps / okhttp3.dnsoverhttps / DnsRecordCodec / encodeQuery encodeQuery \u00b6 fun encodeQuery(host: String , type: Int ): ByteString","title":"encodeQuery - OkHttp"},{"location":"4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/-dns-record-codec/encode-query/#encodequery","text":"fun encodeQuery(host: String , type: Int ): ByteString","title":"encodeQuery"},{"location":"4.x/okhttp-logging-interceptor/","text":"okhttp-logging-interceptor An OkHttp interceptor which logs HTTP request and response data. Packages \u00b6 Name Summary okhttp3.logging okhttp3.logging.internal Index \u00b6 All Types","title":"Packages - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/#packages","text":"Name Summary okhttp3.logging okhttp3.logging.internal","title":"Packages"},{"location":"4.x/okhttp-logging-interceptor/#index","text":"All Types","title":"Index"},{"location":"4.x/okhttp-logging-interceptor/alltypes/","text":"An OkHttp interceptor which logs HTTP request and response data. All Types \u00b6 Name Summary (extensions in package okhttp3.logging.internal) okio.Buffer \u00b6 | okhttp3.logging.HttpLoggingInterceptor \u00b6 An OkHttp interceptor which logs request and response information. Can be applied as an application interceptor or as a OkHttpClient.networkInterceptors . | okhttp3.logging.LoggingEventListener \u00b6 An OkHttp EventListener, which logs call events. Can be applied as an event listener factory .","title":"All Types - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/alltypes/#all-types","text":"Name Summary (extensions in package okhttp3.logging.internal)","title":"All Types"},{"location":"4.x/okhttp-logging-interceptor/alltypes/#okiobuffer","text":"|","title":"okio.Buffer"},{"location":"4.x/okhttp-logging-interceptor/alltypes/#okhttp3logginghttplogginginterceptor","text":"An OkHttp interceptor which logs request and response information. Can be applied as an application interceptor or as a OkHttpClient.networkInterceptors . |","title":"okhttp3.logging.HttpLoggingInterceptor"},{"location":"4.x/okhttp-logging-interceptor/alltypes/#okhttp3loggingloggingeventlistener","text":"An OkHttp EventListener, which logs call events. Can be applied as an event listener factory .","title":"okhttp3.logging.LoggingEventListener"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/","text":"okhttp-logging-interceptor / okhttp3.logging Package okhttp3.logging \u00b6 Types \u00b6 Name Summary HttpLoggingInterceptor An OkHttp interceptor which logs request and response information. Can be applied as an application interceptor or as a OkHttpClient.networkInterceptors . class HttpLoggingInterceptor : Interceptor LoggingEventListener An OkHttp EventListener, which logs call events. Can be applied as an event listener factory . class LoggingEventListener : EventListener","title":"logging-interceptor"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/#package-okhttp3logging","text":"","title":"Package okhttp3.logging"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/#types","text":"Name Summary HttpLoggingInterceptor An OkHttp interceptor which logs request and response information. Can be applied as an application interceptor or as a OkHttpClient.networkInterceptors . class HttpLoggingInterceptor : Interceptor LoggingEventListener An OkHttp EventListener, which logs call events. Can be applied as an event listener factory . class LoggingEventListener : EventListener","title":"Types"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor HttpLoggingInterceptor \u00b6 class HttpLoggingInterceptor : Interceptor An OkHttp interceptor which logs request and response information. Can be applied as an application interceptor or as a OkHttpClient.networkInterceptors . The format of the logs created by this class should not be considered stable and may change slightly between releases. If you need a stable logging format, use your own interceptor. Types \u00b6 Name Summary Level enum class Level Logger interface Logger Constructors \u00b6 Name Summary <init> An OkHttp interceptor which logs request and response information. Can be applied as an application interceptor or as a OkHttpClient.networkInterceptors . HttpLoggingInterceptor(logger: Logger = Logger.DEFAULT) Properties \u00b6 Name Summary level var level: Level Functions \u00b6 Name Summary <no name provided> fun <no name provided>(): Unit intercept fun intercept(chain: Chain): Response redactHeader fun redactHeader(name: String ): Unit setLevel Sets the level and returns this. fun setLevel(level: Level): HttpLoggingInterceptor","title":"HttpLoggingInterceptor - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/#httplogginginterceptor","text":"class HttpLoggingInterceptor : Interceptor An OkHttp interceptor which logs request and response information. Can be applied as an application interceptor or as a OkHttpClient.networkInterceptors . The format of the logs created by this class should not be considered stable and may change slightly between releases. If you need a stable logging format, use your own interceptor.","title":"HttpLoggingInterceptor"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/#types","text":"Name Summary Level enum class Level Logger interface Logger","title":"Types"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/#constructors","text":"Name Summary <init> An OkHttp interceptor which logs request and response information. Can be applied as an application interceptor or as a OkHttpClient.networkInterceptors . HttpLoggingInterceptor(logger: Logger = Logger.DEFAULT)","title":"Constructors"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/#properties","text":"Name Summary level var level: Level","title":"Properties"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/#functions","text":"Name Summary <no name provided> fun <no name provided>(): Unit intercept fun intercept(chain: Chain): Response redactHeader fun redactHeader(name: String ): Unit setLevel Sets the level and returns this. fun setLevel(level: Level): HttpLoggingInterceptor","title":"Functions"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-init-/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor / <init> <init> \u00b6 HttpLoggingInterceptor(logger: Logger = Logger.DEFAULT) An OkHttp interceptor which logs request and response information. Can be applied as an application interceptor or as a OkHttpClient.networkInterceptors . The format of the logs created by this class should not be considered stable and may change slightly between releases. If you need a stable logging format, use your own interceptor.","title":" init "},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-init-/#init","text":"HttpLoggingInterceptor(logger: Logger = Logger.DEFAULT) An OkHttp interceptor which logs request and response information. Can be applied as an application interceptor or as a OkHttpClient.networkInterceptors . The format of the logs created by this class should not be considered stable and may change slightly between releases. If you need a stable logging format, use your own interceptor.","title":"&lt;init&gt;"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-no%20name%20provided-/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor / <no name provided> <no name provided> \u00b6 fun <no name provided>(): Unit","title":" no name provided "},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-no%20name%20provided-/#no-name-provided","text":"fun <no name provided>(): Unit","title":"&lt;no name provided&gt;"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/intercept/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor / intercept intercept \u00b6 fun intercept(chain: Chain): Response","title":"intercept - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/intercept/#intercept","text":"fun intercept(chain: Chain): Response","title":"intercept"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/level/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor / level level \u00b6 var level: Level","title":"level - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/level/#level","text":"var level: Level","title":"level"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/redact-header/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor / redactHeader redactHeader \u00b6 fun redactHeader(name: String ): Unit","title":"redactHeader - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/redact-header/#redactheader","text":"fun redactHeader(name: String ): Unit","title":"redactHeader"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/set-level/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor / setLevel setLevel \u00b6 fun setLevel(level: Level): HttpLoggingInterceptor Sets the level and returns this. This was deprecated in OkHttp 4.0 in favor of the level val. In OkHttp 4.3 it is un-deprecated because Java callers can\u2019t chain when assigning Kotlin vals. (The getter remains deprecated).","title":"setLevel - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/set-level/#setlevel","text":"fun setLevel(level: Level): HttpLoggingInterceptor Sets the level and returns this. This was deprecated in OkHttp 4.0 in favor of the level val. In OkHttp 4.3 it is un-deprecated because Java callers can\u2019t chain when assigning Kotlin vals. (The getter remains deprecated).","title":"setLevel"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-level/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor / Level Level \u00b6 enum class Level Enum Values \u00b6 Name Summary NONE No logs. BASIC Logs request and response lines. HEADERS Logs request and response lines and their respective headers. BODY Logs request and response lines and their respective headers and bodies (if present).","title":"Level - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-level/#level","text":"enum class Level","title":"Level"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-level/#enum-values","text":"Name Summary NONE No logs. BASIC Logs request and response lines. HEADERS Logs request and response lines and their respective headers. BODY Logs request and response lines and their respective headers and bodies (if present).","title":"Enum Values"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-level/-b-a-s-i-c/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor / Level / BASIC BASIC \u00b6 BASIC Logs request and response lines. Example: --> POST /greeting http/1.1 (3-byte body) <-- 200 OK (22ms, 6-byte body)","title":"BASIC - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-level/-b-a-s-i-c/#basic","text":"BASIC Logs request and response lines. Example: --> POST /greeting http/1.1 (3-byte body) <-- 200 OK (22ms, 6-byte body)","title":"BASIC"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-level/-b-o-d-y/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor / Level / BODY BODY \u00b6 BODY Logs request and response lines and their respective headers and bodies (if present). Example: --> POST /greeting http/1.1 Host: example.com Content-Type: plain/text Content-Length: 3 Hi? --> END POST <-- 200 OK (22ms) Content-Type: plain/text Content-Length: 6 Hello! <-- END HTTP","title":"BODY - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-level/-b-o-d-y/#body","text":"BODY Logs request and response lines and their respective headers and bodies (if present). Example: --> POST /greeting http/1.1 Host: example.com Content-Type: plain/text Content-Length: 3 Hi? --> END POST <-- 200 OK (22ms) Content-Type: plain/text Content-Length: 6 Hello! <-- END HTTP","title":"BODY"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-level/-h-e-a-d-e-r-s/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor / Level / HEADERS HEADERS \u00b6 HEADERS Logs request and response lines and their respective headers. Example: --> POST /greeting http/1.1 Host: example.com Content-Type: plain/text Content-Length: 3 --> END POST <-- 200 OK (22ms) Content-Type: plain/text Content-Length: 6 <-- END HTTP","title":"HEADERS - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-level/-h-e-a-d-e-r-s/#headers","text":"HEADERS Logs request and response lines and their respective headers. Example: --> POST /greeting http/1.1 Host: example.com Content-Type: plain/text Content-Length: 3 --> END POST <-- 200 OK (22ms) Content-Type: plain/text Content-Length: 6 <-- END HTTP","title":"HEADERS"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-level/-n-o-n-e/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor / Level / NONE NONE \u00b6 NONE No logs.","title":"NONE - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-level/-n-o-n-e/#none","text":"NONE No logs.","title":"NONE"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-logger/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor / Logger Logger \u00b6 interface Logger Functions \u00b6 Name Summary log abstract fun log(message: String ): Unit Companion Object Properties \u00b6 Name Summary DEFAULT A Logger defaults output appropriate for the current platform. val DEFAULT: Logger","title":"Logger - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-logger/#logger","text":"interface Logger","title":"Logger"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-logger/#functions","text":"Name Summary log abstract fun log(message: String ): Unit","title":"Functions"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-logger/#companion-object-properties","text":"Name Summary DEFAULT A Logger defaults output appropriate for the current platform. val DEFAULT: Logger","title":"Companion Object Properties"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-logger/-d-e-f-a-u-l-t/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor / Logger / DEFAULT DEFAULT \u00b6 val DEFAULT: Logger A Logger defaults output appropriate for the current platform.","title":"DEFAULT - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-logger/-d-e-f-a-u-l-t/#default","text":"val DEFAULT: Logger A Logger defaults output appropriate for the current platform.","title":"DEFAULT"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-logger/log/","text":"okhttp-logging-interceptor / okhttp3.logging / HttpLoggingInterceptor / Logger / log log \u00b6 abstract fun log(message: String ): Unit","title":"log - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-http-logging-interceptor/-logger/log/#log","text":"abstract fun log(message: String ): Unit","title":"log"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener LoggingEventListener \u00b6 class LoggingEventListener : EventListener An OkHttp EventListener, which logs call events. Can be applied as an event listener factory . The format of the logs created by this class should not be considered stable and may change slightly between releases. If you need a stable logging format, use your own event listener. Types \u00b6 Name Summary Factory class Factory : Factory Functions \u00b6 Name Summary cacheConditionalHit fun cacheConditionalHit(call: Call, cachedResponse: Response): Unit cacheHit fun cacheHit(call: Call, response: Response): Unit cacheMiss fun cacheMiss(call: Call): Unit callEnd fun callEnd(call: Call): Unit callFailed fun callFailed(call: Call, ioe: IOException ): Unit callStart fun callStart(call: Call): Unit canceled fun canceled(call: Call): Unit connectEnd fun connectEnd(call: Call, inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol?): Unit connectFailed fun connectFailed(call: Call, inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol?, ioe: IOException ): Unit connectionAcquired fun connectionAcquired(call: Call, connection: Connection): Unit connectionReleased fun connectionReleased(call: Call, connection: Connection): Unit connectStart fun connectStart(call: Call, inetSocketAddress: InetSocketAddress , proxy: Proxy ): Unit dnsEnd fun dnsEnd(call: Call, domainName: String , inetAddressList: List < InetAddress >): Unit dnsStart fun dnsStart(call: Call, domainName: String ): Unit proxySelectEnd fun proxySelectEnd(call: Call, url: HttpUrl, proxies: List < Proxy >): Unit proxySelectStart fun proxySelectStart(call: Call, url: HttpUrl): Unit requestBodyEnd fun requestBodyEnd(call: Call, byteCount: Long ): Unit requestBodyStart fun requestBodyStart(call: Call): Unit requestFailed fun requestFailed(call: Call, ioe: IOException ): Unit requestHeadersEnd fun requestHeadersEnd(call: Call, request: Request): Unit requestHeadersStart fun requestHeadersStart(call: Call): Unit responseBodyEnd fun responseBodyEnd(call: Call, byteCount: Long ): Unit responseBodyStart fun responseBodyStart(call: Call): Unit responseFailed fun responseFailed(call: Call, ioe: IOException ): Unit responseHeadersEnd fun responseHeadersEnd(call: Call, response: Response): Unit responseHeadersStart fun responseHeadersStart(call: Call): Unit satisfactionFailure fun satisfactionFailure(call: Call, response: Response): Unit secureConnectEnd fun secureConnectEnd(call: Call, handshake: Handshake?): Unit secureConnectStart fun secureConnectStart(call: Call): Unit","title":"LoggingEventListener - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/#loggingeventlistener","text":"class LoggingEventListener : EventListener An OkHttp EventListener, which logs call events. Can be applied as an event listener factory . The format of the logs created by this class should not be considered stable and may change slightly between releases. If you need a stable logging format, use your own event listener.","title":"LoggingEventListener"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/#types","text":"Name Summary Factory class Factory : Factory","title":"Types"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/#functions","text":"Name Summary cacheConditionalHit fun cacheConditionalHit(call: Call, cachedResponse: Response): Unit cacheHit fun cacheHit(call: Call, response: Response): Unit cacheMiss fun cacheMiss(call: Call): Unit callEnd fun callEnd(call: Call): Unit callFailed fun callFailed(call: Call, ioe: IOException ): Unit callStart fun callStart(call: Call): Unit canceled fun canceled(call: Call): Unit connectEnd fun connectEnd(call: Call, inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol?): Unit connectFailed fun connectFailed(call: Call, inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol?, ioe: IOException ): Unit connectionAcquired fun connectionAcquired(call: Call, connection: Connection): Unit connectionReleased fun connectionReleased(call: Call, connection: Connection): Unit connectStart fun connectStart(call: Call, inetSocketAddress: InetSocketAddress , proxy: Proxy ): Unit dnsEnd fun dnsEnd(call: Call, domainName: String , inetAddressList: List < InetAddress >): Unit dnsStart fun dnsStart(call: Call, domainName: String ): Unit proxySelectEnd fun proxySelectEnd(call: Call, url: HttpUrl, proxies: List < Proxy >): Unit proxySelectStart fun proxySelectStart(call: Call, url: HttpUrl): Unit requestBodyEnd fun requestBodyEnd(call: Call, byteCount: Long ): Unit requestBodyStart fun requestBodyStart(call: Call): Unit requestFailed fun requestFailed(call: Call, ioe: IOException ): Unit requestHeadersEnd fun requestHeadersEnd(call: Call, request: Request): Unit requestHeadersStart fun requestHeadersStart(call: Call): Unit responseBodyEnd fun responseBodyEnd(call: Call, byteCount: Long ): Unit responseBodyStart fun responseBodyStart(call: Call): Unit responseFailed fun responseFailed(call: Call, ioe: IOException ): Unit responseHeadersEnd fun responseHeadersEnd(call: Call, response: Response): Unit responseHeadersStart fun responseHeadersStart(call: Call): Unit satisfactionFailure fun satisfactionFailure(call: Call, response: Response): Unit secureConnectEnd fun secureConnectEnd(call: Call, handshake: Handshake?): Unit secureConnectStart fun secureConnectStart(call: Call): Unit","title":"Functions"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/cache-conditional-hit/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / cacheConditionalHit cacheConditionalHit \u00b6 fun cacheConditionalHit(call: Call, cachedResponse: Response): Unit","title":"cacheConditionalHit - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/cache-conditional-hit/#cacheconditionalhit","text":"fun cacheConditionalHit(call: Call, cachedResponse: Response): Unit","title":"cacheConditionalHit"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/cache-hit/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / cacheHit cacheHit \u00b6 fun cacheHit(call: Call, response: Response): Unit","title":"cacheHit - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/cache-hit/#cachehit","text":"fun cacheHit(call: Call, response: Response): Unit","title":"cacheHit"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/cache-miss/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / cacheMiss cacheMiss \u00b6 fun cacheMiss(call: Call): Unit","title":"cacheMiss - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/cache-miss/#cachemiss","text":"fun cacheMiss(call: Call): Unit","title":"cacheMiss"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/call-end/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / callEnd callEnd \u00b6 fun callEnd(call: Call): Unit","title":"callEnd - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/call-end/#callend","text":"fun callEnd(call: Call): Unit","title":"callEnd"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/call-failed/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / callFailed callFailed \u00b6 fun callFailed(call: Call, ioe: IOException ): Unit","title":"callFailed - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/call-failed/#callfailed","text":"fun callFailed(call: Call, ioe: IOException ): Unit","title":"callFailed"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/call-start/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / callStart callStart \u00b6 fun callStart(call: Call): Unit","title":"callStart - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/call-start/#callstart","text":"fun callStart(call: Call): Unit","title":"callStart"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/canceled/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / canceled canceled \u00b6 fun canceled(call: Call): Unit","title":"canceled - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/canceled/#canceled","text":"fun canceled(call: Call): Unit","title":"canceled"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/connect-end/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / connectEnd connectEnd \u00b6 fun connectEnd(call: Call, inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol?): Unit","title":"connectEnd - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/connect-end/#connectend","text":"fun connectEnd(call: Call, inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol?): Unit","title":"connectEnd"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/connect-failed/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / connectFailed connectFailed \u00b6 fun connectFailed(call: Call, inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol?, ioe: IOException ): Unit","title":"connectFailed - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/connect-failed/#connectfailed","text":"fun connectFailed(call: Call, inetSocketAddress: InetSocketAddress , proxy: Proxy , protocol: Protocol?, ioe: IOException ): Unit","title":"connectFailed"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/connect-start/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / connectStart connectStart \u00b6 fun connectStart(call: Call, inetSocketAddress: InetSocketAddress , proxy: Proxy ): Unit","title":"connectStart - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/connect-start/#connectstart","text":"fun connectStart(call: Call, inetSocketAddress: InetSocketAddress , proxy: Proxy ): Unit","title":"connectStart"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/connection-acquired/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / connectionAcquired connectionAcquired \u00b6 fun connectionAcquired(call: Call, connection: Connection): Unit","title":"connectionAcquired - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/connection-acquired/#connectionacquired","text":"fun connectionAcquired(call: Call, connection: Connection): Unit","title":"connectionAcquired"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/connection-released/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / connectionReleased connectionReleased \u00b6 fun connectionReleased(call: Call, connection: Connection): Unit","title":"connectionReleased - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/connection-released/#connectionreleased","text":"fun connectionReleased(call: Call, connection: Connection): Unit","title":"connectionReleased"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/dns-end/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / dnsEnd dnsEnd \u00b6 fun dnsEnd(call: Call, domainName: String , inetAddressList: List < InetAddress >): Unit","title":"dnsEnd - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/dns-end/#dnsend","text":"fun dnsEnd(call: Call, domainName: String , inetAddressList: List < InetAddress >): Unit","title":"dnsEnd"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/dns-start/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / dnsStart dnsStart \u00b6 fun dnsStart(call: Call, domainName: String ): Unit","title":"dnsStart - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/dns-start/#dnsstart","text":"fun dnsStart(call: Call, domainName: String ): Unit","title":"dnsStart"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/proxy-select-end/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / proxySelectEnd proxySelectEnd \u00b6 fun proxySelectEnd(call: Call, url: HttpUrl, proxies: List < Proxy >): Unit","title":"proxySelectEnd - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/proxy-select-end/#proxyselectend","text":"fun proxySelectEnd(call: Call, url: HttpUrl, proxies: List < Proxy >): Unit","title":"proxySelectEnd"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/proxy-select-start/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / proxySelectStart proxySelectStart \u00b6 fun proxySelectStart(call: Call, url: HttpUrl): Unit","title":"proxySelectStart - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/proxy-select-start/#proxyselectstart","text":"fun proxySelectStart(call: Call, url: HttpUrl): Unit","title":"proxySelectStart"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/request-body-end/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / requestBodyEnd requestBodyEnd \u00b6 fun requestBodyEnd(call: Call, byteCount: Long ): Unit","title":"requestBodyEnd - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/request-body-end/#requestbodyend","text":"fun requestBodyEnd(call: Call, byteCount: Long ): Unit","title":"requestBodyEnd"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/request-body-start/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / requestBodyStart requestBodyStart \u00b6 fun requestBodyStart(call: Call): Unit","title":"requestBodyStart - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/request-body-start/#requestbodystart","text":"fun requestBodyStart(call: Call): Unit","title":"requestBodyStart"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/request-failed/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / requestFailed requestFailed \u00b6 fun requestFailed(call: Call, ioe: IOException ): Unit","title":"requestFailed - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/request-failed/#requestfailed","text":"fun requestFailed(call: Call, ioe: IOException ): Unit","title":"requestFailed"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/request-headers-end/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / requestHeadersEnd requestHeadersEnd \u00b6 fun requestHeadersEnd(call: Call, request: Request): Unit","title":"requestHeadersEnd - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/request-headers-end/#requestheadersend","text":"fun requestHeadersEnd(call: Call, request: Request): Unit","title":"requestHeadersEnd"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/request-headers-start/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / requestHeadersStart requestHeadersStart \u00b6 fun requestHeadersStart(call: Call): Unit","title":"requestHeadersStart - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/request-headers-start/#requestheadersstart","text":"fun requestHeadersStart(call: Call): Unit","title":"requestHeadersStart"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/response-body-end/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / responseBodyEnd responseBodyEnd \u00b6 fun responseBodyEnd(call: Call, byteCount: Long ): Unit","title":"responseBodyEnd - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/response-body-end/#responsebodyend","text":"fun responseBodyEnd(call: Call, byteCount: Long ): Unit","title":"responseBodyEnd"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/response-body-start/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / responseBodyStart responseBodyStart \u00b6 fun responseBodyStart(call: Call): Unit","title":"responseBodyStart - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/response-body-start/#responsebodystart","text":"fun responseBodyStart(call: Call): Unit","title":"responseBodyStart"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/response-failed/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / responseFailed responseFailed \u00b6 fun responseFailed(call: Call, ioe: IOException ): Unit","title":"responseFailed - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/response-failed/#responsefailed","text":"fun responseFailed(call: Call, ioe: IOException ): Unit","title":"responseFailed"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/response-headers-end/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / responseHeadersEnd responseHeadersEnd \u00b6 fun responseHeadersEnd(call: Call, response: Response): Unit","title":"responseHeadersEnd - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/response-headers-end/#responseheadersend","text":"fun responseHeadersEnd(call: Call, response: Response): Unit","title":"responseHeadersEnd"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/response-headers-start/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / responseHeadersStart responseHeadersStart \u00b6 fun responseHeadersStart(call: Call): Unit","title":"responseHeadersStart - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/response-headers-start/#responseheadersstart","text":"fun responseHeadersStart(call: Call): Unit","title":"responseHeadersStart"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/satisfaction-failure/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / satisfactionFailure satisfactionFailure \u00b6 fun satisfactionFailure(call: Call, response: Response): Unit","title":"satisfactionFailure - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/satisfaction-failure/#satisfactionfailure","text":"fun satisfactionFailure(call: Call, response: Response): Unit","title":"satisfactionFailure"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/secure-connect-end/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / secureConnectEnd secureConnectEnd \u00b6 fun secureConnectEnd(call: Call, handshake: Handshake?): Unit","title":"secureConnectEnd - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/secure-connect-end/#secureconnectend","text":"fun secureConnectEnd(call: Call, handshake: Handshake?): Unit","title":"secureConnectEnd"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/secure-connect-start/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / secureConnectStart secureConnectStart \u00b6 fun secureConnectStart(call: Call): Unit","title":"secureConnectStart - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/secure-connect-start/#secureconnectstart","text":"fun secureConnectStart(call: Call): Unit","title":"secureConnectStart"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/-factory/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / Factory Factory \u00b6 class Factory : Factory Constructors \u00b6 Name Summary <init> Factory(logger: Logger = HttpLoggingInterceptor.Logger.DEFAULT) Functions \u00b6 Name Summary create open fun create(call: Call): EventListener","title":"Factory - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/-factory/#factory","text":"class Factory : Factory","title":"Factory"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/-factory/#constructors","text":"Name Summary <init> Factory(logger: Logger = HttpLoggingInterceptor.Logger.DEFAULT)","title":"Constructors"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/-factory/#functions","text":"Name Summary create open fun create(call: Call): EventListener","title":"Functions"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/-factory/-init-/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / Factory / <init> <init> \u00b6 Factory(logger: Logger = HttpLoggingInterceptor.Logger.DEFAULT)","title":" init "},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/-factory/-init-/#init","text":"Factory(logger: Logger = HttpLoggingInterceptor.Logger.DEFAULT)","title":"&lt;init&gt;"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/-factory/create/","text":"okhttp-logging-interceptor / okhttp3.logging / LoggingEventListener / Factory / create create \u00b6 open fun create(call: Call): EventListener","title":"create - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging/-logging-event-listener/-factory/create/#create","text":"open fun create(call: Call): EventListener","title":"create"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging.internal/","text":"okhttp-logging-interceptor / okhttp3.logging.internal Package okhttp3.logging.internal \u00b6 Extensions for External Classes \u00b6 Name Summary okio.Buffer","title":"Package okhttp3.logging.internal - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging.internal/#package-okhttp3logginginternal","text":"","title":"Package okhttp3.logging.internal"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging.internal/#extensions-for-external-classes","text":"Name Summary okio.Buffer","title":"Extensions for External Classes"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging.internal/okio.-buffer/","text":"okhttp-logging-interceptor / okhttp3.logging.internal / okio.Buffer Extensions for okio.Buffer \u00b6 Name Summary isProbablyUtf8 Returns true if the body in question probably contains human readable text. Uses a small sample of code points to detect unicode control characters commonly used in binary file signatures. fun Buffer .isProbablyUtf8(): Boolean","title":"Extensions for okio.Buffer - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging.internal/okio.-buffer/#extensions-for-okiobuffer","text":"Name Summary isProbablyUtf8 Returns true if the body in question probably contains human readable text. Uses a small sample of code points to detect unicode control characters commonly used in binary file signatures. fun Buffer .isProbablyUtf8(): Boolean","title":"Extensions for okio.Buffer"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging.internal/okio.-buffer/is-probably-utf8/","text":"okhttp-logging-interceptor / okhttp3.logging.internal / okio.Buffer / isProbablyUtf8 isProbablyUtf8 \u00b6 fun Buffer .isProbablyUtf8(): Boolean Returns true if the body in question probably contains human readable text. Uses a small sample of code points to detect unicode control characters commonly used in binary file signatures.","title":"isProbablyUtf8 - OkHttp"},{"location":"4.x/okhttp-logging-interceptor/okhttp3.logging.internal/okio.-buffer/is-probably-utf8/#isprobablyutf8","text":"fun Buffer .isProbablyUtf8(): Boolean Returns true if the body in question probably contains human readable text. Uses a small sample of code points to detect unicode control characters commonly used in binary file signatures.","title":"isProbablyUtf8"},{"location":"4.x/okhttp-sse/","text":"okhttp-sse Support for server-sent events. Packages \u00b6 Name Summary okhttp3.sse okhttp3.sse.internal Index \u00b6 All Types","title":"Packages - OkHttp"},{"location":"4.x/okhttp-sse/#packages","text":"Name Summary okhttp3.sse okhttp3.sse.internal","title":"Packages"},{"location":"4.x/okhttp-sse/#index","text":"All Types","title":"Index"},{"location":"4.x/okhttp-sse/alltypes/","text":"Support for server-sent events. All Types \u00b6 Name Summary okhttp3.sse.EventSource \u00b6 | okhttp3.sse.EventSourceListener \u00b6 | okhttp3.sse.EventSources \u00b6 | okhttp3.sse.internal.RealEventSource \u00b6 | okhttp3.sse.internal.ServerSentEventReader \u00b6","title":"All Types - OkHttp"},{"location":"4.x/okhttp-sse/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"4.x/okhttp-sse/alltypes/#okhttp3sseeventsource","text":"|","title":"okhttp3.sse.EventSource"},{"location":"4.x/okhttp-sse/alltypes/#okhttp3sseeventsourcelistener","text":"|","title":"okhttp3.sse.EventSourceListener"},{"location":"4.x/okhttp-sse/alltypes/#okhttp3sseeventsources","text":"|","title":"okhttp3.sse.EventSources"},{"location":"4.x/okhttp-sse/alltypes/#okhttp3sseinternalrealeventsource","text":"|","title":"okhttp3.sse.internal.RealEventSource"},{"location":"4.x/okhttp-sse/alltypes/#okhttp3sseinternalserversenteventreader","text":"","title":"okhttp3.sse.internal.ServerSentEventReader"},{"location":"4.x/okhttp-sse/okhttp3.sse/","text":"okhttp-sse / okhttp3.sse Package okhttp3.sse \u00b6 Types \u00b6 Name Summary EventSource interface EventSource EventSourceListener abstract class EventSourceListener EventSources object EventSources","title":"sse"},{"location":"4.x/okhttp-sse/okhttp3.sse/#package-okhttp3sse","text":"","title":"Package okhttp3.sse"},{"location":"4.x/okhttp-sse/okhttp3.sse/#types","text":"Name Summary EventSource interface EventSource EventSourceListener abstract class EventSourceListener EventSources object EventSources","title":"Types"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/","text":"okhttp-sse / okhttp3.sse / EventSource EventSource \u00b6 interface EventSource Types \u00b6 Name Summary Factory interface Factory Functions \u00b6 Name Summary <no name provided> abstract fun <no name provided>(): Unit cancel Immediately and violently release resources held by this event source. This does nothing if the event source has already been closed or canceled. abstract fun cancel(): Unit request Returns the original request that initiated this event source. abstract fun request(): Request Inheritors \u00b6 Name Summary RealEventSource class RealEventSource : EventSource , Callback, Callback","title":"EventSource - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/#eventsource","text":"interface EventSource","title":"EventSource"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/#types","text":"Name Summary Factory interface Factory","title":"Types"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/#functions","text":"Name Summary <no name provided> abstract fun <no name provided>(): Unit cancel Immediately and violently release resources held by this event source. This does nothing if the event source has already been closed or canceled. abstract fun cancel(): Unit request Returns the original request that initiated this event source. abstract fun request(): Request","title":"Functions"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/#inheritors","text":"Name Summary RealEventSource class RealEventSource : EventSource , Callback, Callback","title":"Inheritors"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/-no%20name%20provided-/","text":"okhttp-sse / okhttp3.sse / EventSource / <no name provided> <no name provided> \u00b6 abstract fun <no name provided>(): Unit","title":" no name provided "},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/-no%20name%20provided-/#no-name-provided","text":"abstract fun <no name provided>(): Unit","title":"&lt;no name provided&gt;"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/cancel/","text":"okhttp-sse / okhttp3.sse / EventSource / cancel cancel \u00b6 abstract fun cancel(): Unit Immediately and violently release resources held by this event source. This does nothing if the event source has already been closed or canceled.","title":"cancel - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/cancel/#cancel","text":"abstract fun cancel(): Unit Immediately and violently release resources held by this event source. This does nothing if the event source has already been closed or canceled.","title":"cancel"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/request/","text":"okhttp-sse / okhttp3.sse / EventSource / request request \u00b6 abstract fun request(): Request Returns the original request that initiated this event source.","title":"request - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/request/#request","text":"abstract fun request(): Request Returns the original request that initiated this event source.","title":"request"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/-factory/","text":"okhttp-sse / okhttp3.sse / EventSource / Factory Factory \u00b6 interface Factory Functions \u00b6 Name Summary newEventSource Creates a new event source and immediately returns it. Creating an event source initiates an asynchronous process to connect the socket. Once that succeeds or fails, listener will be notified. The caller must cancel the returned event source when it is no longer in use. abstract fun newEventSource(request: Request, listener: EventSourceListener ): EventSource","title":"Factory - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/-factory/#factory","text":"interface Factory","title":"Factory"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/-factory/#functions","text":"Name Summary newEventSource Creates a new event source and immediately returns it. Creating an event source initiates an asynchronous process to connect the socket. Once that succeeds or fails, listener will be notified. The caller must cancel the returned event source when it is no longer in use. abstract fun newEventSource(request: Request, listener: EventSourceListener ): EventSource","title":"Functions"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/-factory/new-event-source/","text":"okhttp-sse / okhttp3.sse / EventSource / Factory / newEventSource newEventSource \u00b6 abstract fun newEventSource(request: Request, listener: EventSourceListener ): EventSource Creates a new event source and immediately returns it. Creating an event source initiates an asynchronous process to connect the socket. Once that succeeds or fails, listener will be notified. The caller must cancel the returned event source when it is no longer in use.","title":"newEventSource - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source/-factory/new-event-source/#neweventsource","text":"abstract fun newEventSource(request: Request, listener: EventSourceListener ): EventSource Creates a new event source and immediately returns it. Creating an event source initiates an asynchronous process to connect the socket. Once that succeeds or fails, listener will be notified. The caller must cancel the returned event source when it is no longer in use.","title":"newEventSource"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source-listener/","text":"okhttp-sse / okhttp3.sse / EventSourceListener EventSourceListener \u00b6 abstract class EventSourceListener Constructors \u00b6 Name Summary <init> EventSourceListener() Functions \u00b6 Name Summary onClosed TODO description. open fun onClosed(eventSource: EventSource ): Unit onEvent TODO description. open fun onEvent(eventSource: EventSource , id: String ?, type: String ?, data: String ): Unit onFailure Invoked when an event source has been closed due to an error reading from or writing to the network. Incoming events may have been lost. No further calls to this listener will be made. open fun onFailure(eventSource: EventSource , t: Throwable ?, response: Response?): Unit onOpen Invoked when an event source has been accepted by the remote peer and may begin transmitting events. open fun onOpen(eventSource: EventSource , response: Response): Unit","title":"EventSourceListener - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source-listener/#eventsourcelistener","text":"abstract class EventSourceListener","title":"EventSourceListener"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source-listener/#constructors","text":"Name Summary <init> EventSourceListener()","title":"Constructors"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source-listener/#functions","text":"Name Summary onClosed TODO description. open fun onClosed(eventSource: EventSource ): Unit onEvent TODO description. open fun onEvent(eventSource: EventSource , id: String ?, type: String ?, data: String ): Unit onFailure Invoked when an event source has been closed due to an error reading from or writing to the network. Incoming events may have been lost. No further calls to this listener will be made. open fun onFailure(eventSource: EventSource , t: Throwable ?, response: Response?): Unit onOpen Invoked when an event source has been accepted by the remote peer and may begin transmitting events. open fun onOpen(eventSource: EventSource , response: Response): Unit","title":"Functions"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source-listener/-init-/","text":"okhttp-sse / okhttp3.sse / EventSourceListener / <init> <init> \u00b6 EventSourceListener()","title":" init "},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source-listener/-init-/#init","text":"EventSourceListener()","title":"&lt;init&gt;"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source-listener/on-closed/","text":"okhttp-sse / okhttp3.sse / EventSourceListener / onClosed onClosed \u00b6 open fun onClosed(eventSource: EventSource ): Unit TODO description. No further calls to this listener will be made.","title":"onClosed - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source-listener/on-closed/#onclosed","text":"open fun onClosed(eventSource: EventSource ): Unit TODO description. No further calls to this listener will be made.","title":"onClosed"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source-listener/on-event/","text":"okhttp-sse / okhttp3.sse / EventSourceListener / onEvent onEvent \u00b6 open fun onEvent(eventSource: EventSource , id: String ?, type: String ?, data: String ): Unit TODO description.","title":"onEvent - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source-listener/on-event/#onevent","text":"open fun onEvent(eventSource: EventSource , id: String ?, type: String ?, data: String ): Unit TODO description.","title":"onEvent"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source-listener/on-failure/","text":"okhttp-sse / okhttp3.sse / EventSourceListener / onFailure onFailure \u00b6 open fun onFailure(eventSource: EventSource , t: Throwable ?, response: Response?): Unit Invoked when an event source has been closed due to an error reading from or writing to the network. Incoming events may have been lost. No further calls to this listener will be made.","title":"onFailure - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source-listener/on-failure/#onfailure","text":"open fun onFailure(eventSource: EventSource , t: Throwable ?, response: Response?): Unit Invoked when an event source has been closed due to an error reading from or writing to the network. Incoming events may have been lost. No further calls to this listener will be made.","title":"onFailure"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source-listener/on-open/","text":"okhttp-sse / okhttp3.sse / EventSourceListener / onOpen onOpen \u00b6 open fun onOpen(eventSource: EventSource , response: Response): Unit Invoked when an event source has been accepted by the remote peer and may begin transmitting events.","title":"onOpen - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-source-listener/on-open/#onopen","text":"open fun onOpen(eventSource: EventSource , response: Response): Unit Invoked when an event source has been accepted by the remote peer and may begin transmitting events.","title":"onOpen"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-sources/","text":"okhttp-sse / okhttp3.sse / EventSources EventSources \u00b6 object EventSources Functions \u00b6 Name Summary createFactory fun createFactory(client: OkHttpClient): Factory processResponse fun processResponse(response: Response, listener: EventSourceListener ): Unit","title":"EventSources - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-sources/#eventsources","text":"object EventSources","title":"EventSources"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-sources/#functions","text":"Name Summary createFactory fun createFactory(client: OkHttpClient): Factory processResponse fun processResponse(response: Response, listener: EventSourceListener ): Unit","title":"Functions"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-sources/create-factory/","text":"okhttp-sse / okhttp3.sse / EventSources / createFactory createFactory \u00b6 @JvmStatic fun createFactory(client: OkHttpClient): Factory","title":"createFactory - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-sources/create-factory/#createfactory","text":"@JvmStatic fun createFactory(client: OkHttpClient): Factory","title":"createFactory"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-sources/process-response/","text":"okhttp-sse / okhttp3.sse / EventSources / processResponse processResponse \u00b6 @JvmStatic fun processResponse(response: Response, listener: EventSourceListener ): Unit","title":"processResponse - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse/-event-sources/process-response/#processresponse","text":"@JvmStatic fun processResponse(response: Response, listener: EventSourceListener ): Unit","title":"processResponse"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/","text":"okhttp-sse / okhttp3.sse.internal Package okhttp3.sse.internal \u00b6 Types \u00b6 Name Summary RealEventSource class RealEventSource : EventSource , Callback, Callback ServerSentEventReader class ServerSentEventReader","title":"Package okhttp3.sse.internal - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/#package-okhttp3sseinternal","text":"","title":"Package okhttp3.sse.internal"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/#types","text":"Name Summary RealEventSource class RealEventSource : EventSource , Callback, Callback ServerSentEventReader class ServerSentEventReader","title":"Types"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/","text":"okhttp-sse / okhttp3.sse.internal / RealEventSource RealEventSource \u00b6 class RealEventSource : EventSource , Callback, Callback Constructors \u00b6 Name Summary <init> RealEventSource(request: Request, listener: EventSourceListener ) Functions \u00b6 Name Summary cancel Immediately and violently release resources held by this event source. This does nothing if the event source has already been closed or canceled. fun cancel(): Unit connect fun connect(client: OkHttpClient): Unit onEvent fun onEvent(id: String ?, type: String ?, data: String ): Unit onFailure fun onFailure(call: Call, e: IOException ): Unit onResponse fun onResponse(call: Call, response: Response): Unit onRetryChange fun onRetryChange(timeMs: Long ): Unit processResponse fun processResponse(response: Response): Unit request Returns the original request that initiated this event source. fun request(): Request","title":"RealEventSource - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/#realeventsource","text":"class RealEventSource : EventSource , Callback, Callback","title":"RealEventSource"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/#constructors","text":"Name Summary <init> RealEventSource(request: Request, listener: EventSourceListener )","title":"Constructors"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/#functions","text":"Name Summary cancel Immediately and violently release resources held by this event source. This does nothing if the event source has already been closed or canceled. fun cancel(): Unit connect fun connect(client: OkHttpClient): Unit onEvent fun onEvent(id: String ?, type: String ?, data: String ): Unit onFailure fun onFailure(call: Call, e: IOException ): Unit onResponse fun onResponse(call: Call, response: Response): Unit onRetryChange fun onRetryChange(timeMs: Long ): Unit processResponse fun processResponse(response: Response): Unit request Returns the original request that initiated this event source. fun request(): Request","title":"Functions"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/-init-/","text":"okhttp-sse / okhttp3.sse.internal / RealEventSource / <init> <init> \u00b6 RealEventSource(request: Request, listener: EventSourceListener )","title":" init "},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/-init-/#init","text":"RealEventSource(request: Request, listener: EventSourceListener )","title":"&lt;init&gt;"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/cancel/","text":"okhttp-sse / okhttp3.sse.internal / RealEventSource / cancel cancel \u00b6 fun cancel(): Unit Immediately and violently release resources held by this event source. This does nothing if the event source has already been closed or canceled.","title":"cancel - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/cancel/#cancel","text":"fun cancel(): Unit Immediately and violently release resources held by this event source. This does nothing if the event source has already been closed or canceled.","title":"cancel"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/connect/","text":"okhttp-sse / okhttp3.sse.internal / RealEventSource / connect connect \u00b6 fun connect(client: OkHttpClient): Unit","title":"connect - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/connect/#connect","text":"fun connect(client: OkHttpClient): Unit","title":"connect"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/on-event/","text":"okhttp-sse / okhttp3.sse.internal / RealEventSource / onEvent onEvent \u00b6 fun onEvent(id: String ?, type: String ?, data: String ): Unit","title":"onEvent - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/on-event/#onevent","text":"fun onEvent(id: String ?, type: String ?, data: String ): Unit","title":"onEvent"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/on-failure/","text":"okhttp-sse / okhttp3.sse.internal / RealEventSource / onFailure onFailure \u00b6 fun onFailure(call: Call, e: IOException ): Unit","title":"onFailure - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/on-failure/#onfailure","text":"fun onFailure(call: Call, e: IOException ): Unit","title":"onFailure"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/on-response/","text":"okhttp-sse / okhttp3.sse.internal / RealEventSource / onResponse onResponse \u00b6 fun onResponse(call: Call, response: Response): Unit","title":"onResponse - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/on-response/#onresponse","text":"fun onResponse(call: Call, response: Response): Unit","title":"onResponse"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/on-retry-change/","text":"okhttp-sse / okhttp3.sse.internal / RealEventSource / onRetryChange onRetryChange \u00b6 fun onRetryChange(timeMs: Long ): Unit","title":"onRetryChange - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/on-retry-change/#onretrychange","text":"fun onRetryChange(timeMs: Long ): Unit","title":"onRetryChange"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/process-response/","text":"okhttp-sse / okhttp3.sse.internal / RealEventSource / processResponse processResponse \u00b6 fun processResponse(response: Response): Unit","title":"processResponse - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/process-response/#processresponse","text":"fun processResponse(response: Response): Unit","title":"processResponse"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/request/","text":"okhttp-sse / okhttp3.sse.internal / RealEventSource / request request \u00b6 fun request(): Request Returns the original request that initiated this event source.","title":"request - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-real-event-source/request/#request","text":"fun request(): Request Returns the original request that initiated this event source.","title":"request"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/","text":"okhttp-sse / okhttp3.sse.internal / ServerSentEventReader ServerSentEventReader \u00b6 class ServerSentEventReader Types \u00b6 Name Summary Callback interface Callback Constructors \u00b6 Name Summary <init> ServerSentEventReader(source: BufferedSource , callback: Callback) Functions \u00b6 Name Summary processNextEvent Process the next event. This will result in a single call to Callback.onEvent unless the data section was empty. Any number of calls to Callback.onRetryChange may occur while processing an event. fun processNextEvent(): Boolean Companion Object Properties \u00b6 Name Summary options val options: Options","title":"ServerSentEventReader - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/#serversenteventreader","text":"class ServerSentEventReader","title":"ServerSentEventReader"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/#types","text":"Name Summary Callback interface Callback","title":"Types"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/#constructors","text":"Name Summary <init> ServerSentEventReader(source: BufferedSource , callback: Callback)","title":"Constructors"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/#functions","text":"Name Summary processNextEvent Process the next event. This will result in a single call to Callback.onEvent unless the data section was empty. Any number of calls to Callback.onRetryChange may occur while processing an event. fun processNextEvent(): Boolean","title":"Functions"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/#companion-object-properties","text":"Name Summary options val options: Options","title":"Companion Object Properties"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/-init-/","text":"okhttp-sse / okhttp3.sse.internal / ServerSentEventReader / <init> <init> \u00b6 ServerSentEventReader(source: BufferedSource , callback: Callback)","title":" init "},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/-init-/#init","text":"ServerSentEventReader(source: BufferedSource , callback: Callback)","title":"&lt;init&gt;"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/options/","text":"okhttp-sse / okhttp3.sse.internal / ServerSentEventReader / options options \u00b6 val options: Options","title":"options - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/options/#options","text":"val options: Options","title":"options"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/process-next-event/","text":"okhttp-sse / okhttp3.sse.internal / ServerSentEventReader / processNextEvent processNextEvent \u00b6 fun processNextEvent(): Boolean Process the next event. This will result in a single call to Callback.onEvent unless the data section was empty. Any number of calls to Callback.onRetryChange may occur while processing an event. Return false when EOF is reached","title":"processNextEvent - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/process-next-event/#processnextevent","text":"fun processNextEvent(): Boolean Process the next event. This will result in a single call to Callback.onEvent unless the data section was empty. Any number of calls to Callback.onRetryChange may occur while processing an event. Return false when EOF is reached","title":"processNextEvent"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/-callback/","text":"okhttp-sse / okhttp3.sse.internal / ServerSentEventReader / Callback Callback \u00b6 interface Callback Functions \u00b6 Name Summary onEvent abstract fun onEvent(id: String ?, type: String ?, data: String ): Unit onRetryChange abstract fun onRetryChange(timeMs: Long ): Unit","title":"Callback - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/-callback/#callback","text":"interface Callback","title":"Callback"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/-callback/#functions","text":"Name Summary onEvent abstract fun onEvent(id: String ?, type: String ?, data: String ): Unit onRetryChange abstract fun onRetryChange(timeMs: Long ): Unit","title":"Functions"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/-callback/on-event/","text":"okhttp-sse / okhttp3.sse.internal / ServerSentEventReader / Callback / onEvent onEvent \u00b6 abstract fun onEvent(id: String ?, type: String ?, data: String ): Unit","title":"onEvent - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/-callback/on-event/#onevent","text":"abstract fun onEvent(id: String ?, type: String ?, data: String ): Unit","title":"onEvent"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/-callback/on-retry-change/","text":"okhttp-sse / okhttp3.sse.internal / ServerSentEventReader / Callback / onRetryChange onRetryChange \u00b6 abstract fun onRetryChange(timeMs: Long ): Unit","title":"onRetryChange - OkHttp"},{"location":"4.x/okhttp-sse/okhttp3.sse.internal/-server-sent-event-reader/-callback/on-retry-change/#onretrychange","text":"abstract fun onRetryChange(timeMs: Long ): Unit","title":"onRetryChange"},{"location":"4.x/okhttp-tls/","text":"okhttp-tls OkHttp Transport Layer Security (TLS) library. Packages \u00b6 Name Summary okhttp3.tls okhttp3.tls.internal Index \u00b6 All Types","title":"Packages - OkHttp"},{"location":"4.x/okhttp-tls/#packages","text":"Name Summary okhttp3.tls okhttp3.tls.internal","title":"Packages"},{"location":"4.x/okhttp-tls/#index","text":"All Types","title":"Index"},{"location":"4.x/okhttp-tls/alltypes/","text":"OkHttp Transport Layer Security (TLS) library. All Types \u00b6 Name Summary okhttp3.tls.HandshakeCertificates \u00b6 Certificates to identify which peers to trust and also to earn the trust of those peers in kind. Client and server exchange these certificates during the handshake phase of a TLS connection. | okhttp3.tls.HeldCertificate \u00b6 A certificate and its private key. These are some properties of certificates that are used with TLS: | (extensions in package okhttp3.tls) kotlin.String \u00b6 | okhttp3.tls.internal.TlsUtil \u00b6 | (extensions in package okhttp3.tls) java.security.cert.X509Certificate \u00b6","title":"All Types - OkHttp"},{"location":"4.x/okhttp-tls/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"4.x/okhttp-tls/alltypes/#okhttp3tlshandshakecertificates","text":"Certificates to identify which peers to trust and also to earn the trust of those peers in kind. Client and server exchange these certificates during the handshake phase of a TLS connection. |","title":"okhttp3.tls.HandshakeCertificates"},{"location":"4.x/okhttp-tls/alltypes/#okhttp3tlsheldcertificate","text":"A certificate and its private key. These are some properties of certificates that are used with TLS: | (extensions in package okhttp3.tls)","title":"okhttp3.tls.HeldCertificate"},{"location":"4.x/okhttp-tls/alltypes/#kotlinstring","text":"|","title":"kotlin.String"},{"location":"4.x/okhttp-tls/alltypes/#okhttp3tlsinternaltlsutil","text":"| (extensions in package okhttp3.tls)","title":"okhttp3.tls.internal.TlsUtil"},{"location":"4.x/okhttp-tls/alltypes/#javasecuritycertx509certificate","text":"","title":"java.security.cert.X509Certificate"},{"location":"4.x/okhttp-tls/okhttp3.tls/","text":"okhttp-tls / okhttp3.tls Package okhttp3.tls \u00b6 Types \u00b6 Name Summary HandshakeCertificates Certificates to identify which peers to trust and also to earn the trust of those peers in kind. Client and server exchange these certificates during the handshake phase of a TLS connection. class HandshakeCertificates HeldCertificate A certificate and its private key. These are some properties of certificates that are used with TLS: class HeldCertificate Extensions for External Classes \u00b6 Name Summary java.security.cert.X509Certificate kotlin.String","title":"tls"},{"location":"4.x/okhttp-tls/okhttp3.tls/#package-okhttp3tls","text":"","title":"Package okhttp3.tls"},{"location":"4.x/okhttp-tls/okhttp3.tls/#types","text":"Name Summary HandshakeCertificates Certificates to identify which peers to trust and also to earn the trust of those peers in kind. Client and server exchange these certificates during the handshake phase of a TLS connection. class HandshakeCertificates HeldCertificate A certificate and its private key. These are some properties of certificates that are used with TLS: class HeldCertificate","title":"Types"},{"location":"4.x/okhttp-tls/okhttp3.tls/#extensions-for-external-classes","text":"Name Summary java.security.cert.X509Certificate kotlin.String","title":"Extensions for External Classes"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/","text":"okhttp-tls / okhttp3.tls / HandshakeCertificates HandshakeCertificates \u00b6 class HandshakeCertificates Certificates to identify which peers to trust and also to earn the trust of those peers in kind. Client and server exchange these certificates during the handshake phase of a TLS connection. Server Authentication \u00b6 This is the most common form of TLS authentication: clients verify that servers are trusted and that they own the hostnames that they represent. Server authentication is required. To perform server authentication: The server\u2019s handshake certificates must have a held certificate (a certificate and its private key). The certificate\u2019s subject alternative names must match the server\u2019s hostname. The server must also have is a (possibly-empty) chain of intermediate certificates to establish trust from a root certificate to the server\u2019s certificate. The root certificate is not included in this chain. The client\u2019s handshake certificates must include a set of trusted root certificates. They will be used to authenticate the server\u2019s certificate chain. Typically this is a set of well-known root certificates that is distributed with the HTTP client or its platform. It may be augmented by certificates private to an organization or service. Client Authentication \u00b6 This is authentication of the client by the server during the TLS handshake. Client authentication is optional. To perform client authentication: The client\u2019s handshake certificates must have a held certificate (a certificate and its private key). The client must also have a (possibly-empty) chain of intermediate certificates to establish trust from a root certificate to the client\u2019s certificate. The root certificate is not included in this chain. The server\u2019s handshake certificates must include a set of trusted root certificates. They will be used to authenticate the client\u2019s certificate chain. Typically this is not the same set of root certificates used in server authentication. Instead it will be a small set of roots private to an organization or service. Types \u00b6 Name Summary Builder class Builder Properties \u00b6 Name Summary keyManager val keyManager: X509KeyManager trustManager val trustManager: X509TrustManager Functions \u00b6 Name Summary sslContext fun sslContext(): SSLContext sslSocketFactory fun sslSocketFactory(): SSLSocketFactory","title":"HandshakeCertificates - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/#handshakecertificates","text":"class HandshakeCertificates Certificates to identify which peers to trust and also to earn the trust of those peers in kind. Client and server exchange these certificates during the handshake phase of a TLS connection.","title":"HandshakeCertificates"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/#server-authentication","text":"This is the most common form of TLS authentication: clients verify that servers are trusted and that they own the hostnames that they represent. Server authentication is required. To perform server authentication: The server\u2019s handshake certificates must have a held certificate (a certificate and its private key). The certificate\u2019s subject alternative names must match the server\u2019s hostname. The server must also have is a (possibly-empty) chain of intermediate certificates to establish trust from a root certificate to the server\u2019s certificate. The root certificate is not included in this chain. The client\u2019s handshake certificates must include a set of trusted root certificates. They will be used to authenticate the server\u2019s certificate chain. Typically this is a set of well-known root certificates that is distributed with the HTTP client or its platform. It may be augmented by certificates private to an organization or service.","title":"Server Authentication"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/#client-authentication","text":"This is authentication of the client by the server during the TLS handshake. Client authentication is optional. To perform client authentication: The client\u2019s handshake certificates must have a held certificate (a certificate and its private key). The client must also have a (possibly-empty) chain of intermediate certificates to establish trust from a root certificate to the client\u2019s certificate. The root certificate is not included in this chain. The server\u2019s handshake certificates must include a set of trusted root certificates. They will be used to authenticate the client\u2019s certificate chain. Typically this is not the same set of root certificates used in server authentication. Instead it will be a small set of roots private to an organization or service.","title":"Client Authentication"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/#properties","text":"Name Summary keyManager val keyManager: X509KeyManager trustManager val trustManager: X509TrustManager","title":"Properties"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/#functions","text":"Name Summary sslContext fun sslContext(): SSLContext sslSocketFactory fun sslSocketFactory(): SSLSocketFactory","title":"Functions"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/key-manager/","text":"okhttp-tls / okhttp3.tls / HandshakeCertificates / keyManager keyManager \u00b6 val keyManager: X509KeyManager","title":"keyManager - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/key-manager/#keymanager","text":"val keyManager: X509KeyManager","title":"keyManager"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/ssl-context/","text":"okhttp-tls / okhttp3.tls / HandshakeCertificates / sslContext sslContext \u00b6 fun sslContext(): SSLContext","title":"sslContext - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/ssl-context/#sslcontext","text":"fun sslContext(): SSLContext","title":"sslContext"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/ssl-socket-factory/","text":"okhttp-tls / okhttp3.tls / HandshakeCertificates / sslSocketFactory sslSocketFactory \u00b6 fun sslSocketFactory(): SSLSocketFactory","title":"sslSocketFactory - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/ssl-socket-factory/#sslsocketfactory","text":"fun sslSocketFactory(): SSLSocketFactory","title":"sslSocketFactory"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/trust-manager/","text":"okhttp-tls / okhttp3.tls / HandshakeCertificates / trustManager trustManager \u00b6 val trustManager: X509TrustManager","title":"trustManager - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/trust-manager/#trustmanager","text":"val trustManager: X509TrustManager","title":"trustManager"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/","text":"okhttp-tls / okhttp3.tls / HandshakeCertificates / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder() Functions \u00b6 Name Summary addInsecureHost Configures this to not authenticate the HTTPS server on to hostname . This makes the user vulnerable to man-in-the-middle attacks and should only be used only in private development environments and only to carry test data. fun addInsecureHost(hostname: String ): Builder addPlatformTrustedCertificates Add all of the host platform\u2019s trusted root certificates. This set varies by platform (Android vs. Java), by platform release (Android 4.4 vs. Android 9), and with user customizations. fun addPlatformTrustedCertificates(): Builder addTrustedCertificate Add a trusted root certificate to use when authenticating a peer. Peers must provide a chain of certificates whose root is one of these. fun addTrustedCertificate(certificate: X509Certificate ): Builder build fun build(): HandshakeCertificates heldCertificate Configure the certificate chain to use when being authenticated. The first certificate is the held certificate, further certificates are included in the handshake so the peer can build a trusted path to a trusted root certificate. fun heldCertificate(heldCertificate: HeldCertificate , vararg intermediates: X509Certificate ): Builder","title":"Builder - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/#functions","text":"Name Summary addInsecureHost Configures this to not authenticate the HTTPS server on to hostname . This makes the user vulnerable to man-in-the-middle attacks and should only be used only in private development environments and only to carry test data. fun addInsecureHost(hostname: String ): Builder addPlatformTrustedCertificates Add all of the host platform\u2019s trusted root certificates. This set varies by platform (Android vs. Java), by platform release (Android 4.4 vs. Android 9), and with user customizations. fun addPlatformTrustedCertificates(): Builder addTrustedCertificate Add a trusted root certificate to use when authenticating a peer. Peers must provide a chain of certificates whose root is one of these. fun addTrustedCertificate(certificate: X509Certificate ): Builder build fun build(): HandshakeCertificates heldCertificate Configure the certificate chain to use when being authenticated. The first certificate is the held certificate, further certificates are included in the handshake so the peer can build a trusted path to a trusted root certificate. fun heldCertificate(heldCertificate: HeldCertificate , vararg intermediates: X509Certificate ): Builder","title":"Functions"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/-init-/","text":"okhttp-tls / okhttp3.tls / HandshakeCertificates / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/add-insecure-host/","text":"okhttp-tls / okhttp3.tls / HandshakeCertificates / Builder / addInsecureHost addInsecureHost \u00b6 fun addInsecureHost(hostname: String ): Builder Configures this to not authenticate the HTTPS server on to hostname . This makes the user vulnerable to man-in-the-middle attacks and should only be used only in private development environments and only to carry test data. The server\u2019s TLS certificate does not need to be signed by a trusted certificate authority. Instead, it will trust any well-formed certificate, even if it is self-signed. This is necessary for testing against localhost or in development environments where a certificate authority is not possible. The server\u2019s TLS certificate still must match the requested hostname. For example, if the certificate is issued to example.com and the request is to localhost , the connection will fail. Use a custom HostnameVerifier to ignore such problems. Other TLS features are still used but provide no security benefits in absence of the above gaps. For example, an insecure TLS connection is capable of negotiating HTTP/2 with ALPN and it also has a regular-looking handshake. This feature is not supported on Android API levels less than 24. Prior releases lacked a mechanism to trust some hosts and not others. Parameters \u00b6 hostname - the exact hostname from the URL for insecure connections.","title":"addInsecureHost - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/add-insecure-host/#addinsecurehost","text":"fun addInsecureHost(hostname: String ): Builder Configures this to not authenticate the HTTPS server on to hostname . This makes the user vulnerable to man-in-the-middle attacks and should only be used only in private development environments and only to carry test data. The server\u2019s TLS certificate does not need to be signed by a trusted certificate authority. Instead, it will trust any well-formed certificate, even if it is self-signed. This is necessary for testing against localhost or in development environments where a certificate authority is not possible. The server\u2019s TLS certificate still must match the requested hostname. For example, if the certificate is issued to example.com and the request is to localhost , the connection will fail. Use a custom HostnameVerifier to ignore such problems. Other TLS features are still used but provide no security benefits in absence of the above gaps. For example, an insecure TLS connection is capable of negotiating HTTP/2 with ALPN and it also has a regular-looking handshake. This feature is not supported on Android API levels less than 24. Prior releases lacked a mechanism to trust some hosts and not others.","title":"addInsecureHost"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/add-insecure-host/#parameters","text":"hostname - the exact hostname from the URL for insecure connections.","title":"Parameters"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/add-platform-trusted-certificates/","text":"okhttp-tls / okhttp3.tls / HandshakeCertificates / Builder / addPlatformTrustedCertificates addPlatformTrustedCertificates \u00b6 fun addPlatformTrustedCertificates(): Builder Add all of the host platform\u2019s trusted root certificates. This set varies by platform (Android vs. Java), by platform release (Android 4.4 vs. Android 9), and with user customizations. Most TLS clients that connect to hosts on the public Internet should call this method. Otherwise it is necessary to manually prepare a comprehensive set of trusted roots. If the host platform is compromised or misconfigured this may contain untrustworthy root certificates. Applications that connect to a known set of servers may be able to mitigate this problem with certificate pinning .","title":"addPlatformTrustedCertificates - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/add-platform-trusted-certificates/#addplatformtrustedcertificates","text":"fun addPlatformTrustedCertificates(): Builder Add all of the host platform\u2019s trusted root certificates. This set varies by platform (Android vs. Java), by platform release (Android 4.4 vs. Android 9), and with user customizations. Most TLS clients that connect to hosts on the public Internet should call this method. Otherwise it is necessary to manually prepare a comprehensive set of trusted roots. If the host platform is compromised or misconfigured this may contain untrustworthy root certificates. Applications that connect to a known set of servers may be able to mitigate this problem with certificate pinning .","title":"addPlatformTrustedCertificates"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/add-trusted-certificate/","text":"okhttp-tls / okhttp3.tls / HandshakeCertificates / Builder / addTrustedCertificate addTrustedCertificate \u00b6 fun addTrustedCertificate(certificate: X509Certificate ): Builder Add a trusted root certificate to use when authenticating a peer. Peers must provide a chain of certificates whose root is one of these.","title":"addTrustedCertificate - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/add-trusted-certificate/#addtrustedcertificate","text":"fun addTrustedCertificate(certificate: X509Certificate ): Builder Add a trusted root certificate to use when authenticating a peer. Peers must provide a chain of certificates whose root is one of these.","title":"addTrustedCertificate"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/build/","text":"okhttp-tls / okhttp3.tls / HandshakeCertificates / Builder / build build \u00b6 fun build(): HandshakeCertificates","title":"build - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/build/#build","text":"fun build(): HandshakeCertificates","title":"build"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/held-certificate/","text":"okhttp-tls / okhttp3.tls / HandshakeCertificates / Builder / heldCertificate heldCertificate \u00b6 fun heldCertificate(heldCertificate: HeldCertificate , vararg intermediates: X509Certificate ): Builder Configure the certificate chain to use when being authenticated. The first certificate is the held certificate, further certificates are included in the handshake so the peer can build a trusted path to a trusted root certificate. The chain should include all intermediate certificates but does not need the root certificate that we expect to be known by the remote peer. The peer already has that certificate so transmitting it is unnecessary.","title":"heldCertificate - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/held-certificate/#heldcertificate","text":"fun heldCertificate(heldCertificate: HeldCertificate , vararg intermediates: X509Certificate ): Builder Configure the certificate chain to use when being authenticated. The first certificate is the held certificate, further certificates are included in the handshake so the peer can build a trusted path to a trusted root certificate. The chain should include all intermediate certificates but does not need the root certificate that we expect to be known by the remote peer. The peer already has that certificate so transmitting it is unnecessary.","title":"heldCertificate"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/","text":"okhttp-tls / okhttp3.tls / HeldCertificate HeldCertificate \u00b6 class HeldCertificate A certificate and its private key. These are some properties of certificates that are used with TLS: A common name. This is a string identifier for the certificate. It usually describes the purpose of the certificate like \u201cEntrust Root Certification Authority - G2\u201d or \u201c www.squareup.com \u201d. A set of hostnames. These are in the certificate\u2019s subject alternative name (SAN) extension. A subject alternative name is either a literal hostname ( squareup.com ), a literal IP address ( 74.122.190.80 ), or a hostname pattern ( *.api.squareup.com ). A validity interval. A certificate should not be used before its validity interval starts or after it ends. A public key. This cryptographic key is used for asymmetric encryption digital signatures. Note that the private key is not a part of the certificate! A signature issued by another certificate\u2019s private key. This mechanism allows a trusted third-party to endorse a certificate. Third parties should only endorse certificates once they\u2019ve confirmed that the owner of the private key is also the owner of the certificate\u2019s other properties. Certificates are signed by other certificates and a sequence of them is called a certificate chain. The chain terminates in a self-signed \u201croot\u201d certificate. Signing certificates in the middle of the chain are called \u201cintermediates\u201d. Organizations that offer certificate signing are called certificate authorities (CAs). Browsers and other HTTP clients need a set of trusted root certificates to authenticate their peers. Sets of root certificates are managed by either the HTTP client (like Firefox), or the host platform (like Android). In July 2018 Android had 134 trusted root certificates for its HTTP clients to trust. For example, in order to establish a secure connection to https://www.squareup.com/ , these three certificates are used. www.squareup.com certificate: Common Name: www.squareup.com Subject Alternative Names: www.squareup.com, squareup.com, account.squareup.com... Validity: 2018-07-03T20:18:17Z \u2013 2019-08-01T20:48:15Z Public Key: d107beecc17325f55da976bcbab207ba4df68bd3f8fce7c3b5850311128264fd53e1baa342f58d93... Signature: 1fb0e66fac05322721fe3a3917f7c98dee1729af39c99eab415f22d8347b508acdf0bab91781c3720... signed by intermediate certificate: Common Name: Entrust Certification Authority - L1M Subject Alternative Names: none Validity: 2014-12-15T15:25:03Z \u2013 2030-10-15T15:55:03Z Public Key: d081c13923c2b1d1ecf757dd55243691202248f7fcca520ab0ab3f33b5b08407f6df4e7ab0fb9822... Signature: b487c784221a29c0a478ecf54f1bb484976f77eed4cf59afa843962f1d58dea6f3155b2ed9439c4c4... signed by root certificate: Common Name: Entrust Root Certification Authority - G2 Subject Alternative Names: none Validity: 2009-07-07T17:25:54Z \u2013 2030-12-07T17:55:54Z Public Key: ba84b672db9e0c6be299e93001a776ea32b895411ac9da614e5872cffef68279bf7361060aa527d8... Self-signed Signature: 799f1d96c6b6793f228d87d3870304606a6b9a2e59897311ac43d1f513ff8d392bc0f... In this example the HTTP client already knows and trusts the last certificate, \u201cEntrust Root Certification Authority - G2\u201d. That certificate is used to verify the signature of the intermediate certificate, \u201cEntrust Certification Authority - L1M\u201d. The intermediate certificate is used to verify the signature of the \u201c www.squareup.com \u201d certificate. This roles are reversed for client authentication. In that case the client has a private key and a chain of certificates. The server uses a set of trusted root certificates to authenticate the client. Subject alternative names are not used for client authentication. Types \u00b6 Name Summary Builder Build a held certificate with reasonable defaults. class Builder Constructors \u00b6 Name Summary <init> A certificate and its private key. These are some properties of certificates that are used with TLS: HeldCertificate(keyPair: KeyPair , certificate: X509Certificate ) Properties \u00b6 Name Summary certificate val certificate: X509Certificate keyPair val keyPair: KeyPair Functions \u00b6 Name Summary certificatePem Returns the certificate encoded in PEM format . fun certificatePem(): String privateKeyPkcs1Pem Returns the RSA private key encoded in PKCS #1 PEM format . fun privateKeyPkcs1Pem(): String privateKeyPkcs8Pem Returns the private key encoded in PKCS #8 PEM format . fun privateKeyPkcs8Pem(): String Companion Object Functions \u00b6 Name Summary decode Decodes a multiline string that contains both a certificate and a private key , both PEM-encoded . A typical input string looks like this: fun decode(certificateAndPrivateKeyPem: String ): HeldCertificate","title":"HeldCertificate - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/#heldcertificate","text":"class HeldCertificate A certificate and its private key. These are some properties of certificates that are used with TLS: A common name. This is a string identifier for the certificate. It usually describes the purpose of the certificate like \u201cEntrust Root Certification Authority - G2\u201d or \u201c www.squareup.com \u201d. A set of hostnames. These are in the certificate\u2019s subject alternative name (SAN) extension. A subject alternative name is either a literal hostname ( squareup.com ), a literal IP address ( 74.122.190.80 ), or a hostname pattern ( *.api.squareup.com ). A validity interval. A certificate should not be used before its validity interval starts or after it ends. A public key. This cryptographic key is used for asymmetric encryption digital signatures. Note that the private key is not a part of the certificate! A signature issued by another certificate\u2019s private key. This mechanism allows a trusted third-party to endorse a certificate. Third parties should only endorse certificates once they\u2019ve confirmed that the owner of the private key is also the owner of the certificate\u2019s other properties. Certificates are signed by other certificates and a sequence of them is called a certificate chain. The chain terminates in a self-signed \u201croot\u201d certificate. Signing certificates in the middle of the chain are called \u201cintermediates\u201d. Organizations that offer certificate signing are called certificate authorities (CAs). Browsers and other HTTP clients need a set of trusted root certificates to authenticate their peers. Sets of root certificates are managed by either the HTTP client (like Firefox), or the host platform (like Android). In July 2018 Android had 134 trusted root certificates for its HTTP clients to trust. For example, in order to establish a secure connection to https://www.squareup.com/ , these three certificates are used. www.squareup.com certificate: Common Name: www.squareup.com Subject Alternative Names: www.squareup.com, squareup.com, account.squareup.com... Validity: 2018-07-03T20:18:17Z \u2013 2019-08-01T20:48:15Z Public Key: d107beecc17325f55da976bcbab207ba4df68bd3f8fce7c3b5850311128264fd53e1baa342f58d93... Signature: 1fb0e66fac05322721fe3a3917f7c98dee1729af39c99eab415f22d8347b508acdf0bab91781c3720... signed by intermediate certificate: Common Name: Entrust Certification Authority - L1M Subject Alternative Names: none Validity: 2014-12-15T15:25:03Z \u2013 2030-10-15T15:55:03Z Public Key: d081c13923c2b1d1ecf757dd55243691202248f7fcca520ab0ab3f33b5b08407f6df4e7ab0fb9822... Signature: b487c784221a29c0a478ecf54f1bb484976f77eed4cf59afa843962f1d58dea6f3155b2ed9439c4c4... signed by root certificate: Common Name: Entrust Root Certification Authority - G2 Subject Alternative Names: none Validity: 2009-07-07T17:25:54Z \u2013 2030-12-07T17:55:54Z Public Key: ba84b672db9e0c6be299e93001a776ea32b895411ac9da614e5872cffef68279bf7361060aa527d8... Self-signed Signature: 799f1d96c6b6793f228d87d3870304606a6b9a2e59897311ac43d1f513ff8d392bc0f... In this example the HTTP client already knows and trusts the last certificate, \u201cEntrust Root Certification Authority - G2\u201d. That certificate is used to verify the signature of the intermediate certificate, \u201cEntrust Certification Authority - L1M\u201d. The intermediate certificate is used to verify the signature of the \u201c www.squareup.com \u201d certificate. This roles are reversed for client authentication. In that case the client has a private key and a chain of certificates. The server uses a set of trusted root certificates to authenticate the client. Subject alternative names are not used for client authentication.","title":"HeldCertificate"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/#types","text":"Name Summary Builder Build a held certificate with reasonable defaults. class Builder","title":"Types"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/#constructors","text":"Name Summary <init> A certificate and its private key. These are some properties of certificates that are used with TLS: HeldCertificate(keyPair: KeyPair , certificate: X509Certificate )","title":"Constructors"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/#properties","text":"Name Summary certificate val certificate: X509Certificate keyPair val keyPair: KeyPair","title":"Properties"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/#functions","text":"Name Summary certificatePem Returns the certificate encoded in PEM format . fun certificatePem(): String privateKeyPkcs1Pem Returns the RSA private key encoded in PKCS #1 PEM format . fun privateKeyPkcs1Pem(): String privateKeyPkcs8Pem Returns the private key encoded in PKCS #8 PEM format . fun privateKeyPkcs8Pem(): String","title":"Functions"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/#companion-object-functions","text":"Name Summary decode Decodes a multiline string that contains both a certificate and a private key , both PEM-encoded . A typical input string looks like this: fun decode(certificateAndPrivateKeyPem: String ): HeldCertificate","title":"Companion Object Functions"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-init-/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / <init> <init> \u00b6 HeldCertificate(keyPair: KeyPair , certificate: X509Certificate ) A certificate and its private key. These are some properties of certificates that are used with TLS: A common name. This is a string identifier for the certificate. It usually describes the purpose of the certificate like \u201cEntrust Root Certification Authority - G2\u201d or \u201c www.squareup.com \u201d. A set of hostnames. These are in the certificate\u2019s subject alternative name (SAN) extension. A subject alternative name is either a literal hostname ( squareup.com ), a literal IP address ( 74.122.190.80 ), or a hostname pattern ( *.api.squareup.com ). A validity interval. A certificate should not be used before its validity interval starts or after it ends. A public key. This cryptographic key is used for asymmetric encryption digital signatures. Note that the private key is not a part of the certificate! A signature issued by another certificate\u2019s private key. This mechanism allows a trusted third-party to endorse a certificate. Third parties should only endorse certificates once they\u2019ve confirmed that the owner of the private key is also the owner of the certificate\u2019s other properties. Certificates are signed by other certificates and a sequence of them is called a certificate chain. The chain terminates in a self-signed \u201croot\u201d certificate. Signing certificates in the middle of the chain are called \u201cintermediates\u201d. Organizations that offer certificate signing are called certificate authorities (CAs). Browsers and other HTTP clients need a set of trusted root certificates to authenticate their peers. Sets of root certificates are managed by either the HTTP client (like Firefox), or the host platform (like Android). In July 2018 Android had 134 trusted root certificates for its HTTP clients to trust. For example, in order to establish a secure connection to https://www.squareup.com/ , these three certificates are used. www.squareup.com certificate: Common Name: www.squareup.com Subject Alternative Names: www.squareup.com, squareup.com, account.squareup.com... Validity: 2018-07-03T20:18:17Z \u2013 2019-08-01T20:48:15Z Public Key: d107beecc17325f55da976bcbab207ba4df68bd3f8fce7c3b5850311128264fd53e1baa342f58d93... Signature: 1fb0e66fac05322721fe3a3917f7c98dee1729af39c99eab415f22d8347b508acdf0bab91781c3720... signed by intermediate certificate: Common Name: Entrust Certification Authority - L1M Subject Alternative Names: none Validity: 2014-12-15T15:25:03Z \u2013 2030-10-15T15:55:03Z Public Key: d081c13923c2b1d1ecf757dd55243691202248f7fcca520ab0ab3f33b5b08407f6df4e7ab0fb9822... Signature: b487c784221a29c0a478ecf54f1bb484976f77eed4cf59afa843962f1d58dea6f3155b2ed9439c4c4... signed by root certificate: Common Name: Entrust Root Certification Authority - G2 Subject Alternative Names: none Validity: 2009-07-07T17:25:54Z \u2013 2030-12-07T17:55:54Z Public Key: ba84b672db9e0c6be299e93001a776ea32b895411ac9da614e5872cffef68279bf7361060aa527d8... Self-signed Signature: 799f1d96c6b6793f228d87d3870304606a6b9a2e59897311ac43d1f513ff8d392bc0f... In this example the HTTP client already knows and trusts the last certificate, \u201cEntrust Root Certification Authority - G2\u201d. That certificate is used to verify the signature of the intermediate certificate, \u201cEntrust Certification Authority - L1M\u201d. The intermediate certificate is used to verify the signature of the \u201c www.squareup.com \u201d certificate. This roles are reversed for client authentication. In that case the client has a private key and a chain of certificates. The server uses a set of trusted root certificates to authenticate the client. Subject alternative names are not used for client authentication.","title":" init "},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-init-/#init","text":"HeldCertificate(keyPair: KeyPair , certificate: X509Certificate ) A certificate and its private key. These are some properties of certificates that are used with TLS: A common name. This is a string identifier for the certificate. It usually describes the purpose of the certificate like \u201cEntrust Root Certification Authority - G2\u201d or \u201c www.squareup.com \u201d. A set of hostnames. These are in the certificate\u2019s subject alternative name (SAN) extension. A subject alternative name is either a literal hostname ( squareup.com ), a literal IP address ( 74.122.190.80 ), or a hostname pattern ( *.api.squareup.com ). A validity interval. A certificate should not be used before its validity interval starts or after it ends. A public key. This cryptographic key is used for asymmetric encryption digital signatures. Note that the private key is not a part of the certificate! A signature issued by another certificate\u2019s private key. This mechanism allows a trusted third-party to endorse a certificate. Third parties should only endorse certificates once they\u2019ve confirmed that the owner of the private key is also the owner of the certificate\u2019s other properties. Certificates are signed by other certificates and a sequence of them is called a certificate chain. The chain terminates in a self-signed \u201croot\u201d certificate. Signing certificates in the middle of the chain are called \u201cintermediates\u201d. Organizations that offer certificate signing are called certificate authorities (CAs). Browsers and other HTTP clients need a set of trusted root certificates to authenticate their peers. Sets of root certificates are managed by either the HTTP client (like Firefox), or the host platform (like Android). In July 2018 Android had 134 trusted root certificates for its HTTP clients to trust. For example, in order to establish a secure connection to https://www.squareup.com/ , these three certificates are used. www.squareup.com certificate: Common Name: www.squareup.com Subject Alternative Names: www.squareup.com, squareup.com, account.squareup.com... Validity: 2018-07-03T20:18:17Z \u2013 2019-08-01T20:48:15Z Public Key: d107beecc17325f55da976bcbab207ba4df68bd3f8fce7c3b5850311128264fd53e1baa342f58d93... Signature: 1fb0e66fac05322721fe3a3917f7c98dee1729af39c99eab415f22d8347b508acdf0bab91781c3720... signed by intermediate certificate: Common Name: Entrust Certification Authority - L1M Subject Alternative Names: none Validity: 2014-12-15T15:25:03Z \u2013 2030-10-15T15:55:03Z Public Key: d081c13923c2b1d1ecf757dd55243691202248f7fcca520ab0ab3f33b5b08407f6df4e7ab0fb9822... Signature: b487c784221a29c0a478ecf54f1bb484976f77eed4cf59afa843962f1d58dea6f3155b2ed9439c4c4... signed by root certificate: Common Name: Entrust Root Certification Authority - G2 Subject Alternative Names: none Validity: 2009-07-07T17:25:54Z \u2013 2030-12-07T17:55:54Z Public Key: ba84b672db9e0c6be299e93001a776ea32b895411ac9da614e5872cffef68279bf7361060aa527d8... Self-signed Signature: 799f1d96c6b6793f228d87d3870304606a6b9a2e59897311ac43d1f513ff8d392bc0f... In this example the HTTP client already knows and trusts the last certificate, \u201cEntrust Root Certification Authority - G2\u201d. That certificate is used to verify the signature of the intermediate certificate, \u201cEntrust Certification Authority - L1M\u201d. The intermediate certificate is used to verify the signature of the \u201c www.squareup.com \u201d certificate. This roles are reversed for client authentication. In that case the client has a private key and a chain of certificates. The server uses a set of trusted root certificates to authenticate the client. Subject alternative names are not used for client authentication.","title":"&lt;init&gt;"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/certificate-pem/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / certificatePem certificatePem \u00b6 fun certificatePem(): String Returns the certificate encoded in PEM format .","title":"certificatePem - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/certificate-pem/#certificatepem","text":"fun certificatePem(): String Returns the certificate encoded in PEM format .","title":"certificatePem"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/certificate/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / certificate certificate \u00b6 val certificate: X509Certificate","title":"certificate - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/certificate/#certificate","text":"val certificate: X509Certificate","title":"certificate"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/decode/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / decode decode \u00b6 @JvmStatic fun decode(certificateAndPrivateKeyPem: String ): HeldCertificate Decodes a multiline string that contains both a certificate and a private key , both PEM-encoded . A typical input string looks like this: -----BEGIN CERTIFICATE----- MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT yyaoEufLKVXhrTQhRfodTeigi4RX -----END CERTIFICATE----- -----BEGIN PRIVATE KEY----- MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J lu/GJQZoU9lDrCPeUcQ28tzOWw== -----END PRIVATE KEY----- The string should contain exactly one certificate and one private key in PKCS #8 format. It should not contain any other PEM-encoded blocks, but it may contain other text which will be ignored. Encode a held certificate into this format by concatenating the results of certificatePem() and privateKeyPkcs8Pem() .","title":"decode - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/decode/#decode","text":"@JvmStatic fun decode(certificateAndPrivateKeyPem: String ): HeldCertificate Decodes a multiline string that contains both a certificate and a private key , both PEM-encoded . A typical input string looks like this: -----BEGIN CERTIFICATE----- MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT yyaoEufLKVXhrTQhRfodTeigi4RX -----END CERTIFICATE----- -----BEGIN PRIVATE KEY----- MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J lu/GJQZoU9lDrCPeUcQ28tzOWw== -----END PRIVATE KEY----- The string should contain exactly one certificate and one private key in PKCS #8 format. It should not contain any other PEM-encoded blocks, but it may contain other text which will be ignored. Encode a held certificate into this format by concatenating the results of certificatePem() and privateKeyPkcs8Pem() .","title":"decode"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/key-pair/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / keyPair keyPair \u00b6 val keyPair: KeyPair","title":"keyPair - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/key-pair/#keypair","text":"val keyPair: KeyPair","title":"keyPair"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/private-key-pkcs1-pem/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / privateKeyPkcs1Pem privateKeyPkcs1Pem \u00b6 fun privateKeyPkcs1Pem(): String Returns the RSA private key encoded in PKCS #1 PEM format .","title":"privateKeyPkcs1Pem - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/private-key-pkcs1-pem/#privatekeypkcs1pem","text":"fun privateKeyPkcs1Pem(): String Returns the RSA private key encoded in PKCS #1 PEM format .","title":"privateKeyPkcs1Pem"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/private-key-pkcs8-pem/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / privateKeyPkcs8Pem privateKeyPkcs8Pem \u00b6 fun privateKeyPkcs8Pem(): String Returns the private key encoded in PKCS #8 PEM format .","title":"privateKeyPkcs8Pem - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/private-key-pkcs8-pem/#privatekeypkcs8pem","text":"fun privateKeyPkcs8Pem(): String Returns the private key encoded in PKCS #8 PEM format .","title":"privateKeyPkcs8Pem"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / Builder Builder \u00b6 class Builder Build a held certificate with reasonable defaults. Constructors \u00b6 Name Summary <init> Build a held certificate with reasonable defaults. Builder() Functions \u00b6 Name Summary addSubjectAlternativeName Adds a subject alternative name (SAN) to the certificate. This is usually a literal hostname, a literal IP address, or a hostname pattern. If no subject alternative names are added that extension will be omitted. fun addSubjectAlternativeName(altName: String ): Builder build fun build(): HeldCertificate certificateAuthority Set this certificate to be a signing certificate, with up to maxIntermediateCas intermediate signing certificates beneath it. fun certificateAuthority(maxIntermediateCas: Int ): Builder commonName Set this certificate\u2019s common name (CN). Historically this held the hostname of TLS certificate, but that practice was deprecated by RFC 2818 and replaced with addSubjectAlternativeName . If unset a random string will be used. fun commonName(cn: String ): Builder duration Sets the certificate to be valid immediately and until the specified duration has elapsed. The precision of this field is seconds; further precision will be truncated. fun duration(duration: Long , unit: TimeUnit ): Builder ecdsa256 Configure the certificate to generate a 256-bit ECDSA key, which provides about 128 bits of security. ECDSA keys are noticeably faster than RSA keys. fun ecdsa256(): Builder keyPair Sets the public/private key pair used for this certificate. If unset a key pair will be generated. fun keyPair(keyPair: KeyPair ): Builder fun keyPair(publicKey: PublicKey , privateKey: PrivateKey ): Builder organizationalUnit Sets the certificate\u2019s organizational unit (OU). If unset this field will be omitted. fun organizationalUnit(ou: String ): Builder rsa2048 Configure the certificate to generate a 2048-bit RSA key, which provides about 112 bits of security. RSA keys are interoperable with very old clients that don\u2019t support ECDSA. fun rsa2048(): Builder serialNumber Sets this certificate\u2019s serial number. If unset the serial number will be 1. fun serialNumber(serialNumber: BigInteger ): Builder fun serialNumber(serialNumber: Long ): Builder signedBy Set the certificate that will issue this certificate. If unset the certificate will be self-signed. fun signedBy(signedBy: HeldCertificate ?): Builder validityInterval Sets the certificate to be valid in [notBefore..notAfter] . Both endpoints are specified in the format of System.currentTimeMillis . Specify -1L for both values to use the default interval, 24 hours starting when the certificate is created. fun validityInterval(notBefore: Long , notAfter: Long ): Builder","title":"Builder - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/#builder","text":"class Builder Build a held certificate with reasonable defaults.","title":"Builder"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/#constructors","text":"Name Summary <init> Build a held certificate with reasonable defaults. Builder()","title":"Constructors"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/#functions","text":"Name Summary addSubjectAlternativeName Adds a subject alternative name (SAN) to the certificate. This is usually a literal hostname, a literal IP address, or a hostname pattern. If no subject alternative names are added that extension will be omitted. fun addSubjectAlternativeName(altName: String ): Builder build fun build(): HeldCertificate certificateAuthority Set this certificate to be a signing certificate, with up to maxIntermediateCas intermediate signing certificates beneath it. fun certificateAuthority(maxIntermediateCas: Int ): Builder commonName Set this certificate\u2019s common name (CN). Historically this held the hostname of TLS certificate, but that practice was deprecated by RFC 2818 and replaced with addSubjectAlternativeName . If unset a random string will be used. fun commonName(cn: String ): Builder duration Sets the certificate to be valid immediately and until the specified duration has elapsed. The precision of this field is seconds; further precision will be truncated. fun duration(duration: Long , unit: TimeUnit ): Builder ecdsa256 Configure the certificate to generate a 256-bit ECDSA key, which provides about 128 bits of security. ECDSA keys are noticeably faster than RSA keys. fun ecdsa256(): Builder keyPair Sets the public/private key pair used for this certificate. If unset a key pair will be generated. fun keyPair(keyPair: KeyPair ): Builder fun keyPair(publicKey: PublicKey , privateKey: PrivateKey ): Builder organizationalUnit Sets the certificate\u2019s organizational unit (OU). If unset this field will be omitted. fun organizationalUnit(ou: String ): Builder rsa2048 Configure the certificate to generate a 2048-bit RSA key, which provides about 112 bits of security. RSA keys are interoperable with very old clients that don\u2019t support ECDSA. fun rsa2048(): Builder serialNumber Sets this certificate\u2019s serial number. If unset the serial number will be 1. fun serialNumber(serialNumber: BigInteger ): Builder fun serialNumber(serialNumber: Long ): Builder signedBy Set the certificate that will issue this certificate. If unset the certificate will be self-signed. fun signedBy(signedBy: HeldCertificate ?): Builder validityInterval Sets the certificate to be valid in [notBefore..notAfter] . Both endpoints are specified in the format of System.currentTimeMillis . Specify -1L for both values to use the default interval, 24 hours starting when the certificate is created. fun validityInterval(notBefore: Long , notAfter: Long ): Builder","title":"Functions"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/-init-/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / Builder / <init> <init> \u00b6 Builder() Build a held certificate with reasonable defaults.","title":" init "},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/-init-/#init","text":"Builder() Build a held certificate with reasonable defaults.","title":"&lt;init&gt;"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/add-subject-alternative-name/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / Builder / addSubjectAlternativeName addSubjectAlternativeName \u00b6 fun addSubjectAlternativeName(altName: String ): Builder Adds a subject alternative name (SAN) to the certificate. This is usually a literal hostname, a literal IP address, or a hostname pattern. If no subject alternative names are added that extension will be omitted.","title":"addSubjectAlternativeName - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/add-subject-alternative-name/#addsubjectalternativename","text":"fun addSubjectAlternativeName(altName: String ): Builder Adds a subject alternative name (SAN) to the certificate. This is usually a literal hostname, a literal IP address, or a hostname pattern. If no subject alternative names are added that extension will be omitted.","title":"addSubjectAlternativeName"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/build/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / Builder / build build \u00b6 fun build(): HeldCertificate","title":"build - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/build/#build","text":"fun build(): HeldCertificate","title":"build"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/certificate-authority/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / Builder / certificateAuthority certificateAuthority \u00b6 fun certificateAuthority(maxIntermediateCas: Int ): Builder Set this certificate to be a signing certificate, with up to maxIntermediateCas intermediate signing certificates beneath it. By default this certificate cannot not sign other certificates. Set this to 0 so this certificate can sign other certificates (but those certificates cannot themselves sign certificates). Set this to 1 so this certificate can sign intermediate certificates that can themselves sign certificates. Add one for each additional layer of intermediates to permit.","title":"certificateAuthority - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/certificate-authority/#certificateauthority","text":"fun certificateAuthority(maxIntermediateCas: Int ): Builder Set this certificate to be a signing certificate, with up to maxIntermediateCas intermediate signing certificates beneath it. By default this certificate cannot not sign other certificates. Set this to 0 so this certificate can sign other certificates (but those certificates cannot themselves sign certificates). Set this to 1 so this certificate can sign intermediate certificates that can themselves sign certificates. Add one for each additional layer of intermediates to permit.","title":"certificateAuthority"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/common-name/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / Builder / commonName commonName \u00b6 fun commonName(cn: String ): Builder Set this certificate\u2019s common name (CN). Historically this held the hostname of TLS certificate, but that practice was deprecated by RFC 2818 and replaced with addSubjectAlternativeName . If unset a random string will be used.","title":"commonName - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/common-name/#commonname","text":"fun commonName(cn: String ): Builder Set this certificate\u2019s common name (CN). Historically this held the hostname of TLS certificate, but that practice was deprecated by RFC 2818 and replaced with addSubjectAlternativeName . If unset a random string will be used.","title":"commonName"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/duration/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / Builder / duration duration \u00b6 fun duration(duration: Long , unit: TimeUnit ): Builder Sets the certificate to be valid immediately and until the specified duration has elapsed. The precision of this field is seconds; further precision will be truncated.","title":"duration - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/duration/#duration","text":"fun duration(duration: Long , unit: TimeUnit ): Builder Sets the certificate to be valid immediately and until the specified duration has elapsed. The precision of this field is seconds; further precision will be truncated.","title":"duration"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/ecdsa256/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / Builder / ecdsa256 ecdsa256 \u00b6 fun ecdsa256(): Builder Configure the certificate to generate a 256-bit ECDSA key, which provides about 128 bits of security. ECDSA keys are noticeably faster than RSA keys. This is the default configuration and has been since this API was introduced in OkHttp 3.11.0. Note that the default may change in future releases.","title":"ecdsa256 - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/ecdsa256/#ecdsa256","text":"fun ecdsa256(): Builder Configure the certificate to generate a 256-bit ECDSA key, which provides about 128 bits of security. ECDSA keys are noticeably faster than RSA keys. This is the default configuration and has been since this API was introduced in OkHttp 3.11.0. Note that the default may change in future releases.","title":"ecdsa256"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/key-pair/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / Builder / keyPair keyPair \u00b6 fun keyPair(keyPair: KeyPair ): Builder fun keyPair(publicKey: PublicKey , privateKey: PrivateKey ): Builder Sets the public/private key pair used for this certificate. If unset a key pair will be generated.","title":"keyPair - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/key-pair/#keypair","text":"fun keyPair(keyPair: KeyPair ): Builder fun keyPair(publicKey: PublicKey , privateKey: PrivateKey ): Builder Sets the public/private key pair used for this certificate. If unset a key pair will be generated.","title":"keyPair"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/organizational-unit/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / Builder / organizationalUnit organizationalUnit \u00b6 fun organizationalUnit(ou: String ): Builder Sets the certificate\u2019s organizational unit (OU). If unset this field will be omitted.","title":"organizationalUnit - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/organizational-unit/#organizationalunit","text":"fun organizationalUnit(ou: String ): Builder Sets the certificate\u2019s organizational unit (OU). If unset this field will be omitted.","title":"organizationalUnit"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/rsa2048/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / Builder / rsa2048 rsa2048 \u00b6 fun rsa2048(): Builder Configure the certificate to generate a 2048-bit RSA key, which provides about 112 bits of security. RSA keys are interoperable with very old clients that don\u2019t support ECDSA.","title":"rsa2048 - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/rsa2048/#rsa2048","text":"fun rsa2048(): Builder Configure the certificate to generate a 2048-bit RSA key, which provides about 112 bits of security. RSA keys are interoperable with very old clients that don\u2019t support ECDSA.","title":"rsa2048"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/serial-number/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / Builder / serialNumber serialNumber \u00b6 fun serialNumber(serialNumber: BigInteger ): Builder fun serialNumber(serialNumber: Long ): Builder Sets this certificate\u2019s serial number. If unset the serial number will be 1.","title":"serialNumber - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/serial-number/#serialnumber","text":"fun serialNumber(serialNumber: BigInteger ): Builder fun serialNumber(serialNumber: Long ): Builder Sets this certificate\u2019s serial number. If unset the serial number will be 1.","title":"serialNumber"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/signed-by/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / Builder / signedBy signedBy \u00b6 fun signedBy(signedBy: HeldCertificate ?): Builder Set the certificate that will issue this certificate. If unset the certificate will be self-signed.","title":"signedBy - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/signed-by/#signedby","text":"fun signedBy(signedBy: HeldCertificate ?): Builder Set the certificate that will issue this certificate. If unset the certificate will be self-signed.","title":"signedBy"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/validity-interval/","text":"okhttp-tls / okhttp3.tls / HeldCertificate / Builder / validityInterval validityInterval \u00b6 fun validityInterval(notBefore: Long , notAfter: Long ): Builder Sets the certificate to be valid in [notBefore..notAfter] . Both endpoints are specified in the format of System.currentTimeMillis . Specify -1L for both values to use the default interval, 24 hours starting when the certificate is created.","title":"validityInterval - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/validity-interval/#validityinterval","text":"fun validityInterval(notBefore: Long , notAfter: Long ): Builder Sets the certificate to be valid in [notBefore..notAfter] . Both endpoints are specified in the format of System.currentTimeMillis . Specify -1L for both values to use the default interval, 24 hours starting when the certificate is created.","title":"validityInterval"},{"location":"4.x/okhttp-tls/okhttp3.tls/java.security.cert.-x509-certificate/","text":"okhttp-tls / okhttp3.tls / java.security.cert.X509Certificate Extensions for java.security.cert.X509Certificate \u00b6 Name Summary certificatePem Returns the certificate encoded in PEM format . fun X509Certificate .certificatePem(): String","title":"Extensions for java.security.cert.X509Certificate - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/java.security.cert.-x509-certificate/#extensions-for-javasecuritycertx509certificate","text":"Name Summary certificatePem Returns the certificate encoded in PEM format . fun X509Certificate .certificatePem(): String","title":"Extensions for java.security.cert.X509Certificate"},{"location":"4.x/okhttp-tls/okhttp3.tls/java.security.cert.-x509-certificate/certificate-pem/","text":"okhttp-tls / okhttp3.tls / java.security.cert.X509Certificate / certificatePem certificatePem \u00b6 fun X509Certificate .certificatePem(): String Returns the certificate encoded in PEM format .","title":"certificatePem - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/java.security.cert.-x509-certificate/certificate-pem/#certificatepem","text":"fun X509Certificate .certificatePem(): String Returns the certificate encoded in PEM format .","title":"certificatePem"},{"location":"4.x/okhttp-tls/okhttp3.tls/kotlin.-string/","text":"okhttp-tls / okhttp3.tls / kotlin.String Extensions for kotlin.String \u00b6 Name Summary decodeCertificatePem Decodes a multiline string that contains a certificate which is PEM-encoded . A typical input string looks like this: fun String .decodeCertificatePem(): X509Certificate","title":"Extensions for kotlin.String - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/kotlin.-string/#extensions-for-kotlinstring","text":"Name Summary decodeCertificatePem Decodes a multiline string that contains a certificate which is PEM-encoded . A typical input string looks like this: fun String .decodeCertificatePem(): X509Certificate","title":"Extensions for kotlin.String"},{"location":"4.x/okhttp-tls/okhttp3.tls/kotlin.-string/decode-certificate-pem/","text":"okhttp-tls / okhttp3.tls / kotlin.String / decodeCertificatePem decodeCertificatePem \u00b6 fun String .decodeCertificatePem(): X509Certificate Decodes a multiline string that contains a certificate which is PEM-encoded . A typical input string looks like this: -----BEGIN CERTIFICATE----- MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT yyaoEufLKVXhrTQhRfodTeigi4RX -----END CERTIFICATE-----","title":"decodeCertificatePem - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls/kotlin.-string/decode-certificate-pem/#decodecertificatepem","text":"fun String .decodeCertificatePem(): X509Certificate Decodes a multiline string that contains a certificate which is PEM-encoded . A typical input string looks like this: -----BEGIN CERTIFICATE----- MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT yyaoEufLKVXhrTQhRfodTeigi4RX -----END CERTIFICATE-----","title":"decodeCertificatePem"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/","text":"okhttp-tls / okhttp3.tls.internal Package okhttp3.tls.internal \u00b6 Types \u00b6 Name Summary TlsUtil object TlsUtil","title":"Package okhttp3.tls.internal - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/#package-okhttp3tlsinternal","text":"","title":"Package okhttp3.tls.internal"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/#types","text":"Name Summary TlsUtil object TlsUtil","title":"Types"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/-tls-util/","text":"okhttp-tls / okhttp3.tls.internal / TlsUtil TlsUtil \u00b6 object TlsUtil Properties \u00b6 Name Summary password val password: CharArray Functions \u00b6 Name Summary localhost Returns an SSL client for this host\u2019s localhost address. fun localhost(): HandshakeCertificates newKeyManager Returns a key manager for the held certificate and its chain. Returns an empty key manager if heldCertificate is null. fun newKeyManager(keyStoreType: String ?, heldCertificate: HeldCertificate ?, vararg intermediates: X509Certificate ): X509KeyManager newTrustManager Returns a trust manager that trusts trustedCertificates . fun newTrustManager(keyStoreType: String ?, trustedCertificates: List < X509Certificate >, insecureHosts: List < String >): X509TrustManager","title":"TlsUtil - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/-tls-util/#tlsutil","text":"object TlsUtil","title":"TlsUtil"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/-tls-util/#properties","text":"Name Summary password val password: CharArray","title":"Properties"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/-tls-util/#functions","text":"Name Summary localhost Returns an SSL client for this host\u2019s localhost address. fun localhost(): HandshakeCertificates newKeyManager Returns a key manager for the held certificate and its chain. Returns an empty key manager if heldCertificate is null. fun newKeyManager(keyStoreType: String ?, heldCertificate: HeldCertificate ?, vararg intermediates: X509Certificate ): X509KeyManager newTrustManager Returns a trust manager that trusts trustedCertificates . fun newTrustManager(keyStoreType: String ?, trustedCertificates: List < X509Certificate >, insecureHosts: List < String >): X509TrustManager","title":"Functions"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/-tls-util/localhost/","text":"okhttp-tls / okhttp3.tls.internal / TlsUtil / localhost localhost \u00b6 @JvmStatic fun localhost(): HandshakeCertificates Returns an SSL client for this host\u2019s localhost address.","title":"localhost - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/-tls-util/localhost/#localhost","text":"@JvmStatic fun localhost(): HandshakeCertificates Returns an SSL client for this host\u2019s localhost address.","title":"localhost"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/-tls-util/new-key-manager/","text":"okhttp-tls / okhttp3.tls.internal / TlsUtil / newKeyManager newKeyManager \u00b6 @JvmStatic fun newKeyManager(keyStoreType: String ?, heldCertificate: HeldCertificate ?, vararg intermediates: X509Certificate ): X509KeyManager Returns a key manager for the held certificate and its chain. Returns an empty key manager if heldCertificate is null.","title":"newKeyManager - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/-tls-util/new-key-manager/#newkeymanager","text":"@JvmStatic fun newKeyManager(keyStoreType: String ?, heldCertificate: HeldCertificate ?, vararg intermediates: X509Certificate ): X509KeyManager Returns a key manager for the held certificate and its chain. Returns an empty key manager if heldCertificate is null.","title":"newKeyManager"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/-tls-util/new-trust-manager/","text":"okhttp-tls / okhttp3.tls.internal / TlsUtil / newTrustManager newTrustManager \u00b6 @JvmStatic @IgnoreJRERequirement fun newTrustManager(keyStoreType: String ?, trustedCertificates: List < X509Certificate >, insecureHosts: List < String >): X509TrustManager Returns a trust manager that trusts trustedCertificates .","title":"newTrustManager - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/-tls-util/new-trust-manager/#newtrustmanager","text":"@JvmStatic @IgnoreJRERequirement fun newTrustManager(keyStoreType: String ?, trustedCertificates: List < X509Certificate >, insecureHosts: List < String >): X509TrustManager Returns a trust manager that trusts trustedCertificates .","title":"newTrustManager"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/-tls-util/password/","text":"okhttp-tls / okhttp3.tls.internal / TlsUtil / password password \u00b6 val password: CharArray","title":"password - OkHttp"},{"location":"4.x/okhttp-tls/okhttp3.tls.internal/-tls-util/password/#password","text":"val password: CharArray","title":"password"},{"location":"4.x/okhttp-urlconnection/","text":"okhttp-urlconnection Packages \u00b6 Name Summary okhttp3 Index \u00b6 All Types","title":"Packages - OkHttp"},{"location":"4.x/okhttp-urlconnection/#packages","text":"Name Summary okhttp3","title":"Packages"},{"location":"4.x/okhttp-urlconnection/#index","text":"All Types","title":"Index"},{"location":"4.x/okhttp-urlconnection/alltypes/","text":"All Types \u00b6 Name Summary okhttp3.JavaNetAuthenticator \u00b6 Adapts Authenticator to okhttp3.Authenticator . Configure OkHttp to use Authenticator with okhttp3.OkHttpClient.Builder.authenticator or okhttp3.OkHttpClient.Builder.proxyAuthenticator . | okhttp3.JavaNetCookieJar \u00b6 A cookie jar that delegates to a java.net.CookieHandler .","title":"All Types - OkHttp"},{"location":"4.x/okhttp-urlconnection/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"4.x/okhttp-urlconnection/alltypes/#okhttp3javanetauthenticator","text":"Adapts Authenticator to okhttp3.Authenticator . Configure OkHttp to use Authenticator with okhttp3.OkHttpClient.Builder.authenticator or okhttp3.OkHttpClient.Builder.proxyAuthenticator . |","title":"okhttp3.JavaNetAuthenticator"},{"location":"4.x/okhttp-urlconnection/alltypes/#okhttp3javanetcookiejar","text":"A cookie jar that delegates to a java.net.CookieHandler .","title":"okhttp3.JavaNetCookieJar"},{"location":"4.x/okhttp-urlconnection/okhttp3/","text":"okhttp-urlconnection / okhttp3 Package okhttp3 \u00b6 Types \u00b6 Name Summary JavaNetAuthenticator Adapts Authenticator to okhttp3.Authenticator . Configure OkHttp to use Authenticator with okhttp3.OkHttpClient.Builder.authenticator or okhttp3.OkHttpClient.Builder.proxyAuthenticator . class JavaNetAuthenticator : Authenticator JavaNetCookieJar A cookie jar that delegates to a java.net.CookieHandler . class JavaNetCookieJar : CookieJar","title":"urlconnection"},{"location":"4.x/okhttp-urlconnection/okhttp3/#package-okhttp3","text":"","title":"Package okhttp3"},{"location":"4.x/okhttp-urlconnection/okhttp3/#types","text":"Name Summary JavaNetAuthenticator Adapts Authenticator to okhttp3.Authenticator . Configure OkHttp to use Authenticator with okhttp3.OkHttpClient.Builder.authenticator or okhttp3.OkHttpClient.Builder.proxyAuthenticator . class JavaNetAuthenticator : Authenticator JavaNetCookieJar A cookie jar that delegates to a java.net.CookieHandler . class JavaNetCookieJar : CookieJar","title":"Types"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-authenticator/","text":"okhttp-urlconnection / okhttp3 / JavaNetAuthenticator JavaNetAuthenticator \u00b6 class JavaNetAuthenticator : Authenticator Adapts Authenticator to okhttp3.Authenticator . Configure OkHttp to use Authenticator with okhttp3.OkHttpClient.Builder.authenticator or okhttp3.OkHttpClient.Builder.proxyAuthenticator . Constructors \u00b6 Name Summary <init> Adapts Authenticator to okhttp3.Authenticator . Configure OkHttp to use Authenticator with okhttp3.OkHttpClient.Builder.authenticator or okhttp3.OkHttpClient.Builder.proxyAuthenticator . JavaNetAuthenticator() Functions \u00b6 Name Summary authenticate fun authenticate(route: Route?, response: Response): Request?","title":"JavaNetAuthenticator - OkHttp"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-authenticator/#javanetauthenticator","text":"class JavaNetAuthenticator : Authenticator Adapts Authenticator to okhttp3.Authenticator . Configure OkHttp to use Authenticator with okhttp3.OkHttpClient.Builder.authenticator or okhttp3.OkHttpClient.Builder.proxyAuthenticator .","title":"JavaNetAuthenticator"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-authenticator/#constructors","text":"Name Summary <init> Adapts Authenticator to okhttp3.Authenticator . Configure OkHttp to use Authenticator with okhttp3.OkHttpClient.Builder.authenticator or okhttp3.OkHttpClient.Builder.proxyAuthenticator . JavaNetAuthenticator()","title":"Constructors"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-authenticator/#functions","text":"Name Summary authenticate fun authenticate(route: Route?, response: Response): Request?","title":"Functions"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-authenticator/-init-/","text":"okhttp-urlconnection / okhttp3 / JavaNetAuthenticator / <init> <init> \u00b6 JavaNetAuthenticator() Adapts Authenticator to okhttp3.Authenticator . Configure OkHttp to use Authenticator with okhttp3.OkHttpClient.Builder.authenticator or okhttp3.OkHttpClient.Builder.proxyAuthenticator .","title":" init "},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-authenticator/-init-/#init","text":"JavaNetAuthenticator() Adapts Authenticator to okhttp3.Authenticator . Configure OkHttp to use Authenticator with okhttp3.OkHttpClient.Builder.authenticator or okhttp3.OkHttpClient.Builder.proxyAuthenticator .","title":"&lt;init&gt;"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-authenticator/authenticate/","text":"okhttp-urlconnection / okhttp3 / JavaNetAuthenticator / authenticate authenticate \u00b6 fun authenticate(route: Route?, response: Response): Request?","title":"authenticate - OkHttp"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-authenticator/authenticate/#authenticate","text":"fun authenticate(route: Route?, response: Response): Request?","title":"authenticate"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-cookie-jar/","text":"okhttp-urlconnection / okhttp3 / JavaNetCookieJar JavaNetCookieJar \u00b6 class JavaNetCookieJar : CookieJar A cookie jar that delegates to a java.net.CookieHandler . Constructors \u00b6 Name Summary <init> A cookie jar that delegates to a java.net.CookieHandler . JavaNetCookieJar(cookieHandler: CookieHandler ) Functions \u00b6 Name Summary loadForRequest fun loadForRequest(url: HttpUrl): List <Cookie> saveFromResponse fun saveFromResponse(url: HttpUrl, cookies: List <Cookie>): Unit","title":"JavaNetCookieJar - OkHttp"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-cookie-jar/#javanetcookiejar","text":"class JavaNetCookieJar : CookieJar A cookie jar that delegates to a java.net.CookieHandler .","title":"JavaNetCookieJar"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-cookie-jar/#constructors","text":"Name Summary <init> A cookie jar that delegates to a java.net.CookieHandler . JavaNetCookieJar(cookieHandler: CookieHandler )","title":"Constructors"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-cookie-jar/#functions","text":"Name Summary loadForRequest fun loadForRequest(url: HttpUrl): List <Cookie> saveFromResponse fun saveFromResponse(url: HttpUrl, cookies: List <Cookie>): Unit","title":"Functions"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-cookie-jar/-init-/","text":"okhttp-urlconnection / okhttp3 / JavaNetCookieJar / <init> <init> \u00b6 JavaNetCookieJar(cookieHandler: CookieHandler ) A cookie jar that delegates to a java.net.CookieHandler .","title":" init "},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-cookie-jar/-init-/#init","text":"JavaNetCookieJar(cookieHandler: CookieHandler ) A cookie jar that delegates to a java.net.CookieHandler .","title":"&lt;init&gt;"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-cookie-jar/load-for-request/","text":"okhttp-urlconnection / okhttp3 / JavaNetCookieJar / loadForRequest loadForRequest \u00b6 fun loadForRequest(url: HttpUrl): List <Cookie>","title":"loadForRequest - OkHttp"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-cookie-jar/load-for-request/#loadforrequest","text":"fun loadForRequest(url: HttpUrl): List <Cookie>","title":"loadForRequest"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-cookie-jar/save-from-response/","text":"okhttp-urlconnection / okhttp3 / JavaNetCookieJar / saveFromResponse saveFromResponse \u00b6 fun saveFromResponse(url: HttpUrl, cookies: List <Cookie>): Unit","title":"saveFromResponse - OkHttp"},{"location":"4.x/okhttp-urlconnection/okhttp3/-java-net-cookie-jar/save-from-response/#savefromresponse","text":"fun saveFromResponse(url: HttpUrl, cookies: List <Cookie>): Unit","title":"saveFromResponse"}]}