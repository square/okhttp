{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OkHttp","text":"<p>HTTP is the way modern applications network. It\u2019s how we exchange data &amp; media. Doing HTTP efficiently makes your stuff load faster and saves bandwidth.</p> <p>OkHttp is an HTTP client that\u2019s efficient by default:</p> <ul> <li>HTTP/2 support allows all requests to the same host to share a socket.</li> <li>Connection pooling reduces request latency (if HTTP/2 isn\u2019t available).</li> <li>Transparent GZIP shrinks download sizes.</li> <li>Response caching avoids the network completely for repeat requests.</li> </ul> <p>OkHttp perseveres when the network is troublesome: it will silently recover from common connection problems. If your service has multiple IP addresses, OkHttp will attempt alternate addresses if the first connect fails. This is necessary for IPv4+IPv6 and services hosted in redundant data centers. OkHttp supports modern TLS features (TLS 1.3, ALPN, certificate pinning). It can be configured to fall back for broad connectivity.</p> <p>Using OkHttp is easy. Its request/response API is designed with fluent builders and immutability. It supports both synchronous blocking calls and async calls with callbacks.</p>"},{"location":"#a-well-behaved-user-agent","title":"A well behaved user agent","text":"<p>OkHttp follows modern HTTP specifications such as</p> <ul> <li>HTTP Semantics - RFC 9110</li> <li>HTTP Caching- RFC 9111</li> <li>HTTP/1.1 - RFC 9112</li> <li>HTTP/2 - RFC 9113</li> <li>Websockets - RFC 6455</li> <li>SSE - Server-sent events</li> </ul> <p>Where the spec is ambiguous, OkHttp follows modern user agents such as popular Browsers or common HTTP Libraries.</p> <p>OkHttp is principled and avoids being overly configurable, especially when such configuration is to workaround a buggy server, test invalid scenarios or that contradict the relevant RFC. Other HTTP libraries exist that fill that gap allowing extensive customisation including potentially invalid requests.</p> <p>Example Limitations</p> <ul> <li>Does not allow GET with a body.</li> <li>Cache is not an interface with alternative implementations.</li> </ul>"},{"location":"#get-a-url","title":"Get a URL","text":"<p>This program downloads a URL and prints its contents as a string. Full source.</p> <pre><code>OkHttpClient client = new OkHttpClient();\n\nString run(String url) throws IOException {\n  Request request = new Request.Builder()\n      .url(url)\n      .build();\n\n  try (Response response = client.newCall(request).execute()) {\n    return response.body().string();\n  }\n}\n</code></pre>"},{"location":"#post-to-a-server","title":"Post to a Server","text":"<p>This program posts data to a service. Full source.</p> <pre><code>public static final MediaType JSON = MediaType.get(\"application/json\");\n\nOkHttpClient client = new OkHttpClient();\n\nString post(String url, String json) throws IOException {\n  RequestBody body = RequestBody.create(json, JSON);\n  Request request = new Request.Builder()\n      .url(url)\n      .post(body)\n      .build();\n  try (Response response = client.newCall(request).execute()) {\n    return response.body().string();\n  }\n}\n</code></pre> <p>Further examples are on the OkHttp Recipes page.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>OkHttp works on Android 5.0+ (API level 21+) and Java 8+.</p> <p>On Android, OkHttp uses AndroidX Startup. If you disable the initializer in the manifest, then apps are responsible for calling <code>OkHttp.initialize(applicationContext)</code> in <code>Application.onCreate</code>.</p> <p>OkHttp depends on Okio for high-performance I/O and the Kotlin standard library. Both are small libraries with strong backward-compatibility.</p> <p>We highly recommend you keep OkHttp up-to-date. As with auto-updating web browsers, staying current with HTTPS clients is an important defense against potential security problems. We track the dynamic TLS ecosystem and adjust OkHttp to improve connectivity and security.</p> <p>OkHttp uses your platform\u2019s built-in TLS implementation. On Java platforms OkHttp also supports Conscrypt, which integrates BoringSSL with Java. OkHttp will use Conscrypt if it is the first security provider:</p> <pre><code>Security.insertProviderAt(Conscrypt.newProvider(), 1);\n</code></pre> <p>The OkHttp <code>3.12.x</code> branch supports Android 2.3+ (API level 9+) and Java 7+. These platforms lack support for TLS 1.2 and should not be used.</p>"},{"location":"#releases","title":"Releases","text":"<p>Our change log has release history.</p> <p>The latest release is available on Maven Central.</p> <pre><code>implementation(\"com.squareup.okhttp3:okhttp:5.2.1\")\n</code></pre> <p>Snapshot builds are available. R8 and ProGuard rules are available.</p> <p>Also, we have a bill of materials (BOM) available to help you keep OkHttp artifacts up to date and be sure about version compatibility.</p> <pre><code>    dependencies {\n       // define a BOM and its version\n       implementation(platform(\"com.squareup.okhttp3:okhttp-bom:5.2.1\"))\n\n       // define any required OkHttp artifacts without version\n       implementation(\"com.squareup.okhttp3:okhttp\")\n       implementation(\"com.squareup.okhttp3:logging-interceptor\")\n    }\n</code></pre>"},{"location":"#maven-and-jvm-projects","title":"Maven and JVM Projects","text":"<p>OkHttp is published as a Kotlin Multiplatform project. While Gradle handles this automatically, Maven projects must select between <code>okhttp-jvm</code> and <code>okhttp-android</code>. The <code>okhttp</code> artifact will be empty in Maven projects.</p> <pre><code>&lt;dependencyManagement&gt;\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;\n      &lt;artifactId&gt;okhttp-bom&lt;/artifactId&gt;\n      &lt;version&gt;5.2.0&lt;/version&gt;\n      &lt;type&gt;pom&lt;/type&gt;\n      &lt;scope&gt;import&lt;/scope&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;\n  &lt;artifactId&gt;okhttp-jvm&lt;/artifactId&gt;\n  &lt;!-- Remove after OkHttp 5.2.0 with updated BOM. --&gt;\n  &lt;version&gt;5.1.0&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;\n  &lt;artifactId&gt;mockwebserver3&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;\n  &lt;artifactId&gt;logging-interceptor&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"#mockwebserver","title":"MockWebServer","text":"<p>OkHttp includes a library for testing HTTP, HTTPS, and HTTP/2 clients.</p> <p>The latest release is available on Maven Central.</p> <pre><code>testImplementation(\"com.squareup.okhttp3:mockwebserver3:5.2.1\")\n</code></pre> <p>MockWebServer is used for firstly for internal testing, and for basic testing of apps using OkHttp client. It is not a full featured HTTP testing library that is developed standalone. It is not being actively developed for new features. As such you might find your needs outgrow MockWebServer and you may which to use a more full featured testing library such as MockServer.</p>"},{"location":"#graalvm-native-image","title":"GraalVM Native Image","text":"<p>Building your native images with GraalVM should work automatically.</p> <p>See the okcurl module for an example build.</p> <pre><code>$ ./gradlew okcurl:nativeImage\n$ ./okcurl/build/graal/okcurl https://httpbin.org/get\n</code></pre>"},{"location":"#java-modules","title":"Java Modules","text":"<p>OkHttp (5.2+) implements Java 9 Modules.</p> <p>With this in place Java builds should fail if apps attempt to use internal packages.</p> <pre><code>error: package okhttp3.internal.platform is not visible\n    okhttp3.internal.platform.Platform.get();\n                    ^\n  (package okhttp3.internal.platform is declared in module okhttp3,\n    which does not export it to module com.bigco.sdk)\n</code></pre> <p>The stable public API is based on the list of defined modules:</p> <ul> <li>okhttp3</li> <li>okhttp3.brotli</li> <li>okhttp3.coroutines</li> <li>okhttp3.dnsoverhttps</li> <li>okhttp3.java.net.cookiejar</li> <li>okhttp3.logging</li> <li>okhttp3.sse</li> <li>okhttp3.tls</li> <li>okhttp3.urlconnection</li> <li>mockwebserver3</li> <li>mockwebserver3.junit4</li> <li>mockwebserver3.junit5</li> </ul>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2019 Square, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"recipes/","title":"Recipes","text":"<p>We\u2019ve written some recipes that demonstrate how to solve common problems with OkHttp. Read through them to learn about how everything works together. Cut-and-paste these examples freely; that\u2019s what they\u2019re for.</p>"},{"location":"recipes/#synchronous-get-kt-java","title":"Synchronous Get (.kt, .java)","text":"<p>Download a file, print its headers, and print its response body as a string.</p> <p>The <code>string()</code> method on response body is convenient and efficient for small documents. But if the response body is large (greater than 1 MiB), avoid <code>string()</code> because it will load the entire document into memory. In that case, prefer to process the body as a stream.</p>  Kotlin Java <pre><code>  private val client = OkHttpClient()\n\n  fun run() {\n    val request = Request.Builder()\n        .url(\"https://publicobject.com/helloworld.txt\")\n        .build()\n\n    client.newCall(request).execute().use { response -&gt;\n      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n      for ((name, value) in response.headers) {\n        println(\"$name: $value\")\n      }\n\n      println(response.body!!.string())\n    }\n  }\n</code></pre> <pre><code>  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://publicobject.com/helloworld.txt\")\n        .build();\n\n    try (Response response = client.newCall(request).execute()) {\n      if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n      Headers responseHeaders = response.headers();\n      for (int i = 0; i &lt; responseHeaders.size(); i++) {\n        System.out.println(responseHeaders.name(i) + \": \" + responseHeaders.value(i));\n      }\n\n      System.out.println(response.body().string());\n    }\n  }\n</code></pre>"},{"location":"recipes/#asynchronous-get-kt-java","title":"Asynchronous Get (.kt, .java)","text":"<p>Download a file on a worker thread, and get called back when the response is readable. The callback is made after the response headers are ready. Reading the response body may still block. OkHttp doesn\u2019t currently offer asynchronous APIs to receive a response body in parts.</p>  Kotlin Java <pre><code>  private val client = OkHttpClient()\n\n  fun run() {\n    val request = Request.Builder()\n        .url(\"http://publicobject.com/helloworld.txt\")\n        .build()\n\n    client.newCall(request).enqueue(object : Callback {\n      override fun onFailure(call: Call, e: IOException) {\n        e.printStackTrace()\n      }\n\n      override fun onResponse(call: Call, response: Response) {\n        response.use {\n          if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n          for ((name, value) in response.headers) {\n            println(\"$name: $value\")\n          }\n\n          println(response.body!!.string())\n        }\n      }\n    })\n  }\n</code></pre> <pre><code>  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://publicobject.com/helloworld.txt\")\n        .build();\n\n    client.newCall(request).enqueue(new Callback() {\n      @Override public void onFailure(Call call, IOException e) {\n        e.printStackTrace();\n      }\n\n      @Override public void onResponse(Call call, Response response) throws IOException {\n        try (ResponseBody responseBody = response.body()) {\n          if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n          Headers responseHeaders = response.headers();\n          for (int i = 0, size = responseHeaders.size(); i &lt; size; i++) {\n            System.out.println(responseHeaders.name(i) + \": \" + responseHeaders.value(i));\n          }\n\n          System.out.println(responseBody.string());\n        }\n      }\n    });\n  }\n</code></pre>"},{"location":"recipes/#accessing-headers-kt-java","title":"Accessing Headers (.kt, .java)","text":"<p>Typically HTTP headers work like a <code>Map&lt;String, String&gt;</code>: each field has one value or none. But some headers permit multiple values, like Guava\u2019s Multimap. For example, it\u2019s legal and common for an HTTP response to supply multiple <code>Vary</code> headers. OkHttp\u2019s APIs attempt to make both cases comfortable.</p> <p>When writing request headers, use <code>header(name, value)</code> to set the only occurrence of <code>name</code> to <code>value</code>. If there are existing values, they will be removed before the new value is added. Use <code>addHeader(name, value)</code> to add a header without removing the headers already present.</p> <p>When reading response a header, use <code>header(name)</code> to return the last occurrence of the named value. Usually this is also the only occurrence! If no value is present, <code>header(name)</code> will return null. To read all of a field\u2019s values as a list, use <code>headers(name)</code>.</p> <p>To visit all headers, use the <code>Headers</code> class which supports access by index.</p>  Kotlin Java <pre><code>  private val client = OkHttpClient()\n\n  fun run() {\n    val request = Request.Builder()\n        .url(\"https://api.github.com/repos/square/okhttp/issues\")\n        .header(\"User-Agent\", \"OkHttp Headers.java\")\n        .addHeader(\"Accept\", \"application/json; q=0.5\")\n        .addHeader(\"Accept\", \"application/vnd.github.v3+json\")\n        .build()\n\n    client.newCall(request).execute().use { response -&gt;\n      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n      println(\"Server: ${response.header(\"Server\")}\")\n      println(\"Date: ${response.header(\"Date\")}\")\n      println(\"Vary: ${response.headers(\"Vary\")}\")\n    }\n  }\n</code></pre> <pre><code>  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/repos/square/okhttp/issues\")\n        .header(\"User-Agent\", \"OkHttp Headers.java\")\n        .addHeader(\"Accept\", \"application/json; q=0.5\")\n        .addHeader(\"Accept\", \"application/vnd.github.v3+json\")\n        .build();\n\n    try (Response response = client.newCall(request).execute()) {\n      if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n      System.out.println(\"Server: \" + response.header(\"Server\"));\n      System.out.println(\"Date: \" + response.header(\"Date\"));\n      System.out.println(\"Vary: \" + response.headers(\"Vary\"));\n    }\n  }\n</code></pre>"},{"location":"recipes/#posting-a-string-kt-java","title":"Posting a String (.kt, .java)","text":"<p>Use an HTTP POST to send a request body to a service. This example posts a markdown document to a web service that renders markdown as HTML. Because the entire request body is in memory simultaneously, avoid posting large (greater than 1 MiB) documents using this API.</p>  Kotlin Java <pre><code>  private val client = OkHttpClient()\n\n  fun run() {\n    val postBody = \"\"\"\n        |Releases\n        |--------\n        |\n        | * _1.0_ May 6, 2013\n        | * _1.1_ June 15, 2013\n        | * _1.2_ August 11, 2013\n        |\"\"\".trimMargin()\n\n    val request = Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(postBody.toRequestBody(MEDIA_TYPE_MARKDOWN))\n        .build()\n\n    client.newCall(request).execute().use { response -&gt;\n      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n      println(response.body!!.string())\n    }\n  }\n\n  companion object {\n    val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\".toMediaType()\n  }\n</code></pre> <pre><code>  public static final MediaType MEDIA_TYPE_MARKDOWN\n      = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    String postBody = \"\"\n        + \"Releases\\n\"\n        + \"--------\\n\"\n        + \"\\n\"\n        + \" * _1.0_ May 6, 2013\\n\"\n        + \" * _1.1_ June 15, 2013\\n\"\n        + \" * _1.2_ August 11, 2013\\n\";\n\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, postBody))\n        .build();\n\n    try (Response response = client.newCall(request).execute()) {\n      if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n      System.out.println(response.body().string());\n    }\n  }\n</code></pre>"},{"location":"recipes/#post-streaming-kt-java","title":"Post Streaming (.kt, .java)","text":"<p>Here we <code>POST</code> a request body as a stream. The content of this request body is being generated as it\u2019s being written. This example streams directly into the Okio buffered sink. Your programs may prefer an <code>OutputStream</code>, which you can get from <code>BufferedSink.outputStream()</code>.</p>  Kotlin Java <pre><code>  private val client = OkHttpClient()\n\n  fun run() {\n    val requestBody = object : RequestBody() {\n      override fun contentType() = MEDIA_TYPE_MARKDOWN\n\n      override fun writeTo(sink: BufferedSink) {\n        sink.writeUtf8(\"Numbers\\n\")\n        sink.writeUtf8(\"-------\\n\")\n        for (i in 2..997) {\n          sink.writeUtf8(String.format(\" * $i = ${factor(i)}\\n\"))\n        }\n      }\n\n      private fun factor(n: Int): String {\n        for (i in 2 until n) {\n          val x = n / i\n          if (x * i == n) return \"${factor(x)} \u00d7 $i\"\n        }\n        return n.toString()\n      }\n    }\n\n    val request = Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(requestBody)\n        .build()\n\n    client.newCall(request).execute().use { response -&gt;\n      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n      println(response.body!!.string())\n    }\n  }\n\n  companion object {\n    val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\".toMediaType()\n  }\n</code></pre> <pre><code>  public static final MediaType MEDIA_TYPE_MARKDOWN\n      = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    RequestBody requestBody = new RequestBody() {\n      @Override public MediaType contentType() {\n        return MEDIA_TYPE_MARKDOWN;\n      }\n\n      @Override public void writeTo(BufferedSink sink) throws IOException {\n        sink.writeUtf8(\"Numbers\\n\");\n        sink.writeUtf8(\"-------\\n\");\n        for (int i = 2; i &lt;= 997; i++) {\n          sink.writeUtf8(String.format(\" * %s = %s\\n\", i, factor(i)));\n        }\n      }\n\n      private String factor(int n) {\n        for (int i = 2; i &lt; n; i++) {\n          int x = n / i;\n          if (x * i == n) return factor(x) + \" \u00d7 \" + i;\n        }\n        return Integer.toString(n);\n      }\n    };\n\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(requestBody)\n        .build();\n\n    try (Response response = client.newCall(request).execute()) {\n      if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n      System.out.println(response.body().string());\n    }\n  }\n</code></pre>"},{"location":"recipes/#posting-a-file-kt-java","title":"Posting a File (.kt, .java)","text":"<p>It\u2019s easy to use a file as a request body.</p>  Kotlin Java <pre><code>  private val client = OkHttpClient()\n\n  fun run() {\n    val file = File(\"README.md\")\n\n    val request = Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(file.asRequestBody(MEDIA_TYPE_MARKDOWN))\n        .build()\n\n    client.newCall(request).execute().use { response -&gt;\n      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n      println(response.body!!.string())\n    }\n  }\n\n  companion object {\n    val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\".toMediaType()\n  }\n</code></pre> <pre><code>  public static final MediaType MEDIA_TYPE_MARKDOWN\n      = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    File file = new File(\"README.md\");\n\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))\n        .build();\n\n    try (Response response = client.newCall(request).execute()) {\n      if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n      System.out.println(response.body().string());\n    }\n  }\n</code></pre>"},{"location":"recipes/#posting-form-parameters-kt-java","title":"Posting form parameters (.kt, .java)","text":"<p>Use <code>FormBody.Builder</code> to build a request body that works like an HTML <code>&lt;form&gt;</code> tag. Names and values will be encoded using an HTML-compatible form URL encoding.</p>  Kotlin Java <pre><code>  private val client = OkHttpClient()\n\n  fun run() {\n    val formBody = FormBody.Builder()\n        .add(\"search\", \"Jurassic Park\")\n        .build()\n    val request = Request.Builder()\n        .url(\"https://en.wikipedia.org/w/index.php\")\n        .post(formBody)\n        .build()\n\n    client.newCall(request).execute().use { response -&gt;\n      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n      println(response.body!!.string())\n    }\n  }\n</code></pre> <pre><code>  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    RequestBody formBody = new FormBody.Builder()\n        .add(\"search\", \"Jurassic Park\")\n        .build();\n    Request request = new Request.Builder()\n        .url(\"https://en.wikipedia.org/w/index.php\")\n        .post(formBody)\n        .build();\n\n    try (Response response = client.newCall(request).execute()) {\n      if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n      System.out.println(response.body().string());\n    }\n  }\n</code></pre>"},{"location":"recipes/#posting-a-multipart-request-kt-java","title":"Posting a multipart request (.kt, .java)","text":"<p><code>MultipartBody.Builder</code> can build sophisticated request bodies compatible with HTML file upload forms. Each part of a multipart request body is itself a request body, and can define its own headers. If present, these headers should describe the part body, such as its <code>Content-Disposition</code>. The <code>Content-Length</code> and <code>Content-Type</code> headers are added automatically if they\u2019re available.</p>  Kotlin Java <pre><code>  private val client = OkHttpClient()\n\n  fun run() {\n    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image\n    val requestBody = MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart(\"title\", \"Square Logo\")\n        .addFormDataPart(\"image\", \"logo-square.png\",\n            File(\"docs/images/logo-square.png\").asRequestBody(MEDIA_TYPE_PNG))\n        .build()\n\n    val request = Request.Builder()\n        .header(\"Authorization\", \"Client-ID $IMGUR_CLIENT_ID\")\n        .url(\"https://api.imgur.com/3/image\")\n        .post(requestBody)\n        .build()\n\n    client.newCall(request).execute().use { response -&gt;\n      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n      println(response.body!!.string())\n    }\n  }\n\n  companion object {\n    /**\n     * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running\n     * these examples, please request your own client ID! https://api.imgur.com/oauth2\n     */\n    private val IMGUR_CLIENT_ID = \"9199fdef135c122\"\n    private val MEDIA_TYPE_PNG = \"image/png\".toMediaType()\n  }\n</code></pre> <pre><code>  /**\n   * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running\n   * these examples, please request your own client ID! https://api.imgur.com/oauth2\n   */\n  private static final String IMGUR_CLIENT_ID = \"...\";\n  private static final MediaType MEDIA_TYPE_PNG = MediaType.parse(\"image/png\");\n\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image\n    RequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart(\"title\", \"Square Logo\")\n        .addFormDataPart(\"image\", \"logo-square.png\",\n            RequestBody.create(MEDIA_TYPE_PNG, new File(\"website/static/logo-square.png\")))\n        .build();\n\n    Request request = new Request.Builder()\n        .header(\"Authorization\", \"Client-ID \" + IMGUR_CLIENT_ID)\n        .url(\"https://api.imgur.com/3/image\")\n        .post(requestBody)\n        .build();\n\n    try (Response response = client.newCall(request).execute()) {\n      if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n      System.out.println(response.body().string());\n    }\n  }\n</code></pre>"},{"location":"recipes/#parse-a-json-response-with-moshi-kt-java","title":"Parse a JSON Response With Moshi (.kt, .java)","text":"<p>Moshi is a handy API for converting between JSON and Java objects. Here we\u2019re using it to decode a JSON response from a GitHub API.</p> <p>Note that <code>ResponseBody.charStream()</code> uses the <code>Content-Type</code> response header to select which charset to use when decoding the response body. It defaults to <code>UTF-8</code> if no charset is specified.</p>  Kotlin Java <pre><code>  private val client = OkHttpClient()\n  private val moshi = Moshi.Builder().build()\n  private val gistJsonAdapter = moshi.adapter(Gist::class.java)\n\n  fun run() {\n    val request = Request.Builder()\n        .url(\"https://api.github.com/gists/c2a7c39532239ff261be\")\n        .build()\n    client.newCall(request).execute().use { response -&gt;\n      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n      val gist = gistJsonAdapter.fromJson(response.body!!.source())\n\n      for ((key, value) in gist!!.files!!) {\n        println(key)\n        println(value.content)\n      }\n    }\n  }\n\n  @JsonClass(generateAdapter = true)\n  data class Gist(var files: Map&lt;String, GistFile&gt;?)\n\n  @JsonClass(generateAdapter = true)\n  data class GistFile(var content: String?)\n</code></pre> <pre><code>  private final OkHttpClient client = new OkHttpClient();\n  private final Moshi moshi = new Moshi.Builder().build();\n  private final JsonAdapter&lt;Gist&gt; gistJsonAdapter = moshi.adapter(Gist.class);\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/gists/c2a7c39532239ff261be\")\n        .build();\n    try (Response response = client.newCall(request).execute()) {\n      if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n      Gist gist = gistJsonAdapter.fromJson(response.body().source());\n\n      for (Map.Entry&lt;String, GistFile&gt; entry : gist.files.entrySet()) {\n        System.out.println(entry.getKey());\n        System.out.println(entry.getValue().content);\n      }\n    }\n  }\n\n  static class Gist {\n    Map&lt;String, GistFile&gt; files;\n  }\n\n  static class GistFile {\n    String content;\n  }\n</code></pre>"},{"location":"recipes/#response-caching-kt-java","title":"Response Caching (.kt, .java)","text":"<p>To cache responses, you\u2019ll need a cache directory that you can read and write to, and a limit on the cache\u2019s size. The cache directory should be private, and untrusted applications should not be able to read its contents!</p> <p>It is an error to have multiple caches accessing the same cache directory simultaneously. Most applications should call <code>new OkHttpClient()</code> exactly once, configure it with their cache, and use that same instance everywhere. Otherwise the two cache instances will stomp on each other, corrupt the response cache, and possibly crash your program.</p> <p>Response caching uses HTTP headers for all configuration. You can add request headers like <code>Cache-Control: max-stale=3600</code> and OkHttp\u2019s cache will honor them. Your webserver configures how long responses are cached with its own response headers, like <code>Cache-Control: max-age=9600</code>. There are cache headers to force a cached response, force a network response, or force the network response to be validated with a conditional GET.</p>  Kotlin Java <pre><code>  private val client: OkHttpClient = OkHttpClient.Builder()\n      .cache(Cache(\n          directory = cacheDirectory,\n          maxSize = 10L * 1024L * 1024L // 10 MiB\n      ))\n      .build()\n\n  fun run() {\n    val request = Request.Builder()\n        .url(\"http://publicobject.com/helloworld.txt\")\n        .build()\n\n    val response1Body = client.newCall(request).execute().use {\n      if (!it.isSuccessful) throw IOException(\"Unexpected code $it\")\n\n      println(\"Response 1 response:          $it\")\n      println(\"Response 1 cache response:    ${it.cacheResponse}\")\n      println(\"Response 1 network response:  ${it.networkResponse}\")\n      return@use it.body!!.string()\n    }\n\n    val response2Body = client.newCall(request).execute().use {\n      if (!it.isSuccessful) throw IOException(\"Unexpected code $it\")\n\n      println(\"Response 2 response:          $it\")\n      println(\"Response 2 cache response:    ${it.cacheResponse}\")\n      println(\"Response 2 network response:  ${it.networkResponse}\")\n      return@use it.body!!.string()\n    }\n\n    println(\"Response 2 equals Response 1? \" + (response1Body == response2Body))\n  }\n</code></pre> <pre><code>  private final OkHttpClient client;\n\n  public CacheResponse(File cacheDirectory) throws Exception {\n    int cacheSize = 10 * 1024 * 1024; // 10 MiB\n    Cache cache = new Cache(cacheDirectory, cacheSize);\n\n    client = new OkHttpClient.Builder()\n        .cache(cache)\n        .build();\n  }\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://publicobject.com/helloworld.txt\")\n        .build();\n\n    String response1Body;\n    try (Response response1 = client.newCall(request).execute()) {\n      if (!response1.isSuccessful()) throw new IOException(\"Unexpected code \" + response1);\n\n      response1Body = response1.body().string();\n      System.out.println(\"Response 1 response:          \" + response1);\n      System.out.println(\"Response 1 cache response:    \" + response1.cacheResponse());\n      System.out.println(\"Response 1 network response:  \" + response1.networkResponse());\n    }\n\n    String response2Body;\n    try (Response response2 = client.newCall(request).execute()) {\n      if (!response2.isSuccessful()) throw new IOException(\"Unexpected code \" + response2);\n\n      response2Body = response2.body().string();\n      System.out.println(\"Response 2 response:          \" + response2);\n      System.out.println(\"Response 2 cache response:    \" + response2.cacheResponse());\n      System.out.println(\"Response 2 network response:  \" + response2.networkResponse());\n    }\n\n    System.out.println(\"Response 2 equals Response 1? \" + response1Body.equals(response2Body));\n  }\n</code></pre> <p>To prevent a response from using the cache, use <code>CacheControl.FORCE_NETWORK</code>. To prevent it from using the network, use <code>CacheControl.FORCE_CACHE</code>. Be warned: if you use <code>FORCE_CACHE</code> and the response requires the network, OkHttp will return a <code>504 Unsatisfiable Request</code> response.</p>"},{"location":"recipes/#canceling-a-call-kt-java","title":"Canceling a Call (.kt, .java)","text":"<p>Use <code>Call.cancel()</code> to stop an ongoing call immediately. If a thread is currently writing a request or reading a response, it will receive an <code>IOException</code>. Use this to conserve the network when a call is no longer necessary; for example when your user navigates away from an application. Both synchronous and asynchronous calls can be canceled.</p>  Kotlin Java <pre><code>  private val executor = Executors.newScheduledThreadPool(1)\n  private val client = OkHttpClient()\n\n  fun run() {\n    val request = Request.Builder()\n        .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n        .build()\n\n    val startNanos = System.nanoTime()\n    val call = client.newCall(request)\n\n    // Schedule a job to cancel the call in 1 second.\n    executor.schedule({\n      System.out.printf(\"%.2f Canceling call.%n\", (System.nanoTime() - startNanos) / 1e9f)\n      call.cancel()\n      System.out.printf(\"%.2f Canceled call.%n\", (System.nanoTime() - startNanos) / 1e9f)\n    }, 1, TimeUnit.SECONDS)\n\n    System.out.printf(\"%.2f Executing call.%n\", (System.nanoTime() - startNanos) / 1e9f)\n    try {\n      call.execute().use { response -&gt;\n        System.out.printf(\"%.2f Call was expected to fail, but completed: %s%n\",\n            (System.nanoTime() - startNanos) / 1e9f, response)\n      }\n    } catch (e: IOException) {\n      System.out.printf(\"%.2f Call failed as expected: %s%n\",\n          (System.nanoTime() - startNanos) / 1e9f, e)\n    }\n  }\n</code></pre> <pre><code>  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n        .build();\n\n    final long startNanos = System.nanoTime();\n    final Call call = client.newCall(request);\n\n    // Schedule a job to cancel the call in 1 second.\n    executor.schedule(new Runnable() {\n      @Override public void run() {\n        System.out.printf(\"%.2f Canceling call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n        call.cancel();\n        System.out.printf(\"%.2f Canceled call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n      }\n    }, 1, TimeUnit.SECONDS);\n\n    System.out.printf(\"%.2f Executing call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n    try (Response response = call.execute()) {\n      System.out.printf(\"%.2f Call was expected to fail, but completed: %s%n\",\n          (System.nanoTime() - startNanos) / 1e9f, response);\n    } catch (IOException e) {\n      System.out.printf(\"%.2f Call failed as expected: %s%n\",\n          (System.nanoTime() - startNanos) / 1e9f, e);\n    }\n  }\n</code></pre>"},{"location":"recipes/#timeouts-kt-java","title":"Timeouts (.kt, .java)","text":"<p>Use timeouts to fail a call when its peer is unreachable. Network partitions can be due to client connectivity problems, server availability problems, or anything between. OkHttp supports connect, write, read, and full call timeouts.</p>  Kotlin Java <pre><code>  private val client: OkHttpClient = OkHttpClient.Builder()\n      .connectTimeout(5, TimeUnit.SECONDS)\n      .writeTimeout(5, TimeUnit.SECONDS)\n      .readTimeout(5, TimeUnit.SECONDS)\n      .callTimeout(10, TimeUnit.SECONDS)\n      .build()\n\n  fun run() {\n    val request = Request.Builder()\n        .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n        .build()\n\n    client.newCall(request).execute().use { response -&gt;\n      println(\"Response completed: $response\")\n    }\n  }\n</code></pre> <pre><code>  private final OkHttpClient client;\n\n  public ConfigureTimeouts() throws Exception {\n    client = new OkHttpClient.Builder()\n        .connectTimeout(10, TimeUnit.SECONDS)\n        .writeTimeout(10, TimeUnit.SECONDS)\n        .readTimeout(30, TimeUnit.SECONDS)\n        .build();\n  }\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n        .build();\n\n    try (Response response = client.newCall(request).execute()) {\n      System.out.println(\"Response completed: \" + response);\n    }\n  }\n</code></pre>"},{"location":"recipes/#per-call-configuration-kt-java","title":"Per-call Configuration (.kt, .java)","text":"<p>All the HTTP client configuration lives in <code>OkHttpClient</code> including proxy settings, timeouts, and caches. When you need to change the configuration of a single call, call <code>OkHttpClient.newBuilder()</code>. This returns a builder that shares the same connection pool, dispatcher, and configuration with the original client. In the example below, we make one request with a 500 ms timeout and another with a 3000 ms timeout.</p>  Kotlin Java <pre><code>  private val client = OkHttpClient()\n\n  fun run() {\n    val request = Request.Builder()\n        .url(\"http://httpbin.org/delay/1\") // This URL is served with a 1 second delay.\n        .build()\n\n    // Copy to customize OkHttp for this request.\n    val client1 = client.newBuilder()\n        .readTimeout(500, TimeUnit.MILLISECONDS)\n        .build()\n    try {\n      client1.newCall(request).execute().use { response -&gt;\n        println(\"Response 1 succeeded: $response\")\n      }\n    } catch (e: IOException) {\n      println(\"Response 1 failed: $e\")\n    }\n\n    // Copy to customize OkHttp for this request.\n    val client2 = client.newBuilder()\n        .readTimeout(3000, TimeUnit.MILLISECONDS)\n        .build()\n    try {\n      client2.newCall(request).execute().use { response -&gt;\n        println(\"Response 2 succeeded: $response\")\n      }\n    } catch (e: IOException) {\n      println(\"Response 2 failed: $e\")\n    }\n  }\n</code></pre> <pre><code>  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://httpbin.org/delay/1\") // This URL is served with a 1 second delay.\n        .build();\n\n    // Copy to customize OkHttp for this request.\n    OkHttpClient client1 = client.newBuilder()\n        .readTimeout(500, TimeUnit.MILLISECONDS)\n        .build();\n    try (Response response = client1.newCall(request).execute()) {\n      System.out.println(\"Response 1 succeeded: \" + response);\n    } catch (IOException e) {\n      System.out.println(\"Response 1 failed: \" + e);\n    }\n\n    // Copy to customize OkHttp for this request.\n    OkHttpClient client2 = client.newBuilder()\n        .readTimeout(3000, TimeUnit.MILLISECONDS)\n        .build();\n    try (Response response = client2.newCall(request).execute()) {\n      System.out.println(\"Response 2 succeeded: \" + response);\n    } catch (IOException e) {\n      System.out.println(\"Response 2 failed: \" + e);\n    }\n  }\n</code></pre>"},{"location":"recipes/#handling-authentication-kt-java","title":"Handling authentication (.kt, .java)","text":"<p>OkHttp can automatically retry unauthenticated requests. When a response is <code>401 Not Authorized</code>, an <code>Authenticator</code> is asked to supply credentials. Implementations should build a new request that includes the missing credentials. If no credentials are available, return null to skip the retry.</p> <p>Use <code>Response.challenges()</code> to get the schemes and realms of any authentication challenges. When fulfilling a <code>Basic</code> challenge, use <code>Credentials.basic(username, password)</code> to encode the request header.</p>  Kotlin Java <pre><code>  private val client = OkHttpClient.Builder()\n      .authenticator(object : Authenticator {\n        @Throws(IOException::class)\n        override fun authenticate(route: Route?, response: Response): Request? {\n          if (response.request.header(\"Authorization\") != null) {\n            return null // Give up, we've already attempted to authenticate.\n          }\n\n          println(\"Authenticating for response: $response\")\n          println(\"Challenges: ${response.challenges()}\")\n          val credential = Credentials.basic(\"jesse\", \"password1\")\n          return response.request.newBuilder()\n              .header(\"Authorization\", credential)\n              .build()\n        }\n      })\n      .build()\n\n  fun run() {\n    val request = Request.Builder()\n        .url(\"http://publicobject.com/secrets/hellosecret.txt\")\n        .build()\n  }\n</code></pre> <p>To avoid making many retries when authentication isn\u2019t working, you can return null to give up. For example, you may want to skip the retry when these exact credentials have already been attempted:</p> <pre><code>if (credential == response.request.header(\"Authorization\")) {\n  return null // If we already failed with these credentials, don't retry.\n }\n</code></pre> <p>You may also skip the retry when you\u2019ve hit an application-defined attempt limit:</p> <pre><code>if (response.responseCount &gt;= 3) {\n  return null // If we've failed 3 times, give up.\n}\n</code></pre> <p>This above code relies on this <code>responseCount</code> extension val:</p> <pre><code>val Response.responseCount: Int\n  get() = generateSequence(this) { it.priorResponse }.count()\n</code></pre> <pre><code>  private final OkHttpClient client;\n\n  public Authenticate() {\n    client = new OkHttpClient.Builder()\n        .authenticator(new Authenticator() {\n          @Override public Request authenticate(Route route, Response response) throws IOException {\n            if (response.request().header(\"Authorization\") != null) {\n              return null; // Give up, we've already attempted to authenticate.\n            }\n\n            System.out.println(\"Authenticating for response: \" + response);\n            System.out.println(\"Challenges: \" + response.challenges());\n            String credential = Credentials.basic(\"jesse\", \"password1\");\n            return response.request().newBuilder()\n                .header(\"Authorization\", credential)\n                .build();\n          }\n        })\n        .build();\n  }\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://publicobject.com/secrets/hellosecret.txt\")\n        .build();\n\n    try (Response response = client.newCall(request).execute()) {\n      if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n      System.out.println(response.body().string());\n    }\n  }\n</code></pre> <p>To avoid making many retries when authentication isn\u2019t working, you can return null to give up. For example, you may want to skip the retry when these exact credentials have already been attempted:</p> <pre><code>  if (credential.equals(response.request().header(\"Authorization\"))) {\n    return null; // If we already failed with these credentials, don't retry.\n   }\n</code></pre> <p>You may also skip the retry when you\u2019ve hit an application-defined attempt limit:</p> <pre><code>  if (responseCount(response) &gt;= 3) {\n    return null; // If we've failed 3 times, give up.\n  }\n</code></pre> <p>This above code relies on this <code>responseCount()</code> method:</p> <pre><code>  private int responseCount(Response response) {\n    int result = 1;\n    while ((response = response.priorResponse()) != null) {\n      result++;\n    }\n    return result;\n  }\n</code></pre>"},{"location":"recipes/#upload-progress-kt-java","title":"Upload Progress (.kt, .java)","text":"<p>Upload a file to a server (for example, Imgur) and report progress as the request body is being written. You can implement a ProgressListener to receive updates and wrap the original request body with ProgressRequestBody. This allows you to monitor how many bytes have been uploaded and calculate the percentage of completion.</p>  Kotlin Java <pre><code>  class UploadProgress {\n\n    companion object {\n      private const val IMGUR_CLIENT_ID = \"9199fdef135c122\"\n      private val MEDIA_TYPE_PNG = \"image/png\".toMediaType()\n\n      @JvmStatic\n      fun main(args: Array&lt;String&gt;) {\n        UploadProgress().run()\n      }\n    }\n\n    private val client = OkHttpClient()\n\n    @Throws(Exception::class)\n    fun run() {\n      val progressListener = object : ProgressListener {\n        private var firstUpdate = true\n\n        override fun update(bytesWritten: Long, contentLength: Long, done: Boolean) {\n          if (done) {\n            println(\"completed\")\n          } else {\n            if (firstUpdate) {\n              firstUpdate = false\n              if (contentLength == -1L) {\n                println(\"content-length: unknown\")\n              } else {\n                println(\"content-length: $contentLength\")\n              }\n            }\n            println(bytesWritten)\n            if (contentLength != -1L) {\n              println(\"${100 * bytesWritten / contentLength}% done\")\n            }\n          }\n        }\n      }\n\n      val file = File(\"docs/images/logo-square.png\")\n      val requestBody: RequestBody = file.asRequestBody(MEDIA_TYPE_PNG)\n\n      val request =\n        Request.Builder().header(\"Authorization\", \"Client-ID $IMGUR_CLIENT_ID\")\n          .url(\"https://api.imgur.com/3/image\")\n          .post(ProgressRequestBody(requestBody, progressListener)).build()\n\n      client.newCall(request).execute().use { response -&gt;\n        if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n        println(response.body.string())\n      }\n    }\n\n    private class ProgressRequestBody(\n      private val delegate: RequestBody, private val progressListener: ProgressListener\n    ) : RequestBody() {\n\n      override fun contentType() = delegate.contentType()\n\n      @Throws(IOException::class)\n      override fun contentLength(): Long = delegate.contentLength()\n\n      @Throws(IOException::class)\n      override fun writeTo(sink: BufferedSink) {\n        val forwardingSink = object : ForwardingSink(sink) {\n          private var totalBytesWritten: Long = 0\n          private var completed = false\n\n          override fun write(source: Buffer, byteCount: Long) {\n            super.write(source, byteCount)\n            totalBytesWritten += byteCount\n            progressListener.update(totalBytesWritten, contentLength(), completed)\n          }\n\n          override fun close() {\n            super.close()\n            if (!completed) {\n              completed = true\n              progressListener.update(totalBytesWritten, contentLength(), completed)\n            }\n          }\n        }\n\n        val bufferedSink = forwardingSink.buffer()\n        delegate.writeTo(bufferedSink)\n        bufferedSink.flush()\n      }\n    }\n\n    fun interface ProgressListener {\n      fun update(bytesWritten: Long, contentLength: Long, done: Boolean)\n    }\n  }\n</code></pre> <pre><code>  public final class UploadProgress {\n    private static final String IMGUR_CLIENT_ID = \"9199fdef135c122\";\n    private static final MediaType MEDIA_TYPE_PNG = MediaType.get(\"image/png\");\n\n    private final OkHttpClient client = new OkHttpClient();\n\n    public void run() throws Exception {\n      final ProgressListener progressListener = new ProgressListener() {\n        boolean firstUpdate = true;\n\n        @Override public void update(long bytesWritten, long contentLength, boolean done) {\n          if (done) {\n            System.out.println(\"completed\");\n          } else {\n            if (firstUpdate) {\n              firstUpdate = false;\n              if (contentLength == -1) {\n                System.out.println(\"content-length: unknown\");\n              } else {\n                System.out.format(\"content-length: %d\\n\", contentLength);\n              }\n            }\n            System.out.println(bytesWritten);\n            if (contentLength != -1) {\n              System.out.format(\"%d%% done\\n\", (100 * bytesWritten) / contentLength);\n            }\n          }\n        }\n      };\n\n      RequestBody requestBody = RequestBody.create(\n          new File(\"docs/images/logo-square.png\"),\n          MEDIA_TYPE_PNG);\n\n      Request request = new Request.Builder()\n          .header(\"Authorization\", \"Client-ID \" + IMGUR_CLIENT_ID)\n          .url(\"https://api.imgur.com/3/image\")\n          .post(new ProgressRequestBody(requestBody, progressListener))\n          .build();\n\n      Response response = client.newCall(request).execute();\n      if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n      System.out.println(response.body().string());\n    }\n\n    public static void main(String... args) throws Exception {\n      new UploadProgress().run();\n    }\n\n    private static class ProgressRequestBody extends RequestBody {\n      private final ProgressListener progressListener;\n      private final RequestBody delegate;\n\n      public ProgressRequestBody(RequestBody delegate, ProgressListener progressListener) {\n        this.delegate = delegate;\n        this.progressListener = progressListener;\n      }\n\n      @Override public MediaType contentType() {\n        return delegate.contentType();\n      }\n\n      @Override public long contentLength() throws IOException {\n        return delegate.contentLength();\n      }\n\n      @Override public void writeTo(BufferedSink sink) throws IOException {\n        BufferedSink bufferedSink = Okio.buffer(sink(sink));\n        delegate.writeTo(bufferedSink);\n        bufferedSink.flush();\n      }\n\n      public Sink sink(Sink sink) {\n        return new ForwardingSink(sink) {\n          private long totalBytesWritten = 0L;\n          private boolean completed = false;\n\n          @Override public void write(Buffer source, long byteCount) throws IOException {\n            super.write(source, byteCount);\n            totalBytesWritten += byteCount;\n            progressListener.update(totalBytesWritten, contentLength(), completed);\n          }\n\n          @Override public void close() throws IOException {\n            super.close();\n            if (!completed) {\n              completed = true;\n              progressListener.update(totalBytesWritten, contentLength(), completed);\n            }\n          }\n        };\n      }\n    }\n\n    interface ProgressListener {\n      void update(long bytesWritten, long contentLength, boolean done);\n    }\n  }\n</code></pre>"},{"location":"releasing/","title":"Releasing","text":""},{"location":"releasing/#prerequisite-sonatype-maven-central-account","title":"Prerequisite: Sonatype (Maven Central) Account","text":"<p>Create an account on the Sonatype issues site. Ask an existing publisher to open an issue requesting publishing permissions for <code>com.squareup</code> projects.</p>"},{"location":"releasing/#cutting-a-release","title":"Cutting a Release","text":"<ol> <li> <p>Update <code>CHANGELOG.md</code>.</p> </li> <li> <p>Set versions:</p> <pre><code>export RELEASE_VERSION=X.Y.Z\nexport NEXT_VERSION=X.Y.Z-SNAPSHOT\n</code></pre> </li> <li> <p>Update versions:</p> <pre><code>sed -i \"\" \\\n  \"s/version = \\\".*\\\"/version = \\\"$RELEASE_VERSION\\\"/g\" \\\n  build.gradle.kts\nsed -i \"\" \\\n  \"s/\\\"com.squareup.okhttp3:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"com.squareup.okhttp3:\\1:$RELEASE_VERSION\\\"/g\" \\\n  `find . -name \"README.md\"`\nsed -i \"\" \\\n  \"s/\\/com.squareup.okhttp3\\/\\([^\\:]*\\)\\/[^\\/]*\\//\\/com.squareup.okhttp3\\/\\1\\/$RELEASE_VERSION\\//g\" \\\n  `find . -name \"README.md\"`\n</code></pre> </li> <li> <p>Tag the release and push to GitHub.</p> <pre><code>git commit -am \"Prepare for release $RELEASE_VERSION.\"\ngit tag -a parent-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\"\ngit push &amp;&amp; git push --tags\n</code></pre> </li> <li> <p>Wait for GitHub Actions to start the publish job.</p> </li> <li> <p>Prepare for ongoing development and push to GitHub.</p> <pre><code>sed -i \"\" \\\n  \"s/version = \\\".*\\\"/version = \\\"$NEXT_VERSION\\\"/g\" \\\n  build.gradle.kts\ngit commit -am \"Prepare next development version.\"\ngit push\n</code></pre> </li> <li> <p>Confirm the GitHub Actions publish job succeeded.</p> </li> </ol>"},{"location":"works_with_okhttp/","title":"Works with OkHttp","text":"<p>Here\u2019s some libraries that work nicely with OkHttp.</p> <ul> <li>Chucker: An in-app HTTP inspector for Android OkHttp clients.</li> <li>Coil: An image loading library for Android backed by Kotlin Coroutines.</li> <li>Communicator: An OkHttp wrapper for Scala built with Android in mind.</li> <li>Cronet Transport for OkHttp: A HTTP3 ready transport layer for OkHttp on Android, based on Chromium network stack.</li> <li>CWAC-NetSecurity: Simplifying Secure Internet Access.</li> <li>Failsafe: Fault tolerance and resilience patterns.</li> <li>Flipper: A desktop debugging platform for mobile developers.</li> <li>Fresco: An Android library for managing images and the memory they use.</li> <li>Glide: An image loading and caching library for Android focused on smooth scrolling.</li> <li>GoogleAppEngineOkHttp: An OkHttp Call that works on Google App Engine.</li> <li>Hunter: Configure all OkHttpClients centrally.</li> <li>\u2b1c\ufe0f Moshi: A modern JSON library for Android and Java.</li> <li>Ok2Curl: Convert OkHttp requests into curl logs.</li> <li>OkHttp AWS Signer: AWS V4 signing algorithm for OkHttp requests</li> <li>okhttp-digest: A digest authenticator for OkHttp.</li> <li>OkHttp Idling Resource: An Espresso IdlingResource for OkHttp.</li> <li>okhttp-client-mock: A simple OKHttp client mock, using a programmable request interceptor.</li> <li>OkHttp Profiler: An IntelliJ plugin for monitoring OkHttp calls.</li> <li>OkReplay: Record and replay OkHttp network interaction in your tests.</li> <li>okhttp-signpost: OAuth signing with signpost and OkHttp.</li> <li>okhttp-spring-boot: Spring Boot starters for OkHttp</li> <li>okhttp-staleiferror-interceptor: serve stale responses when the server isn\u2019t reachable.</li> <li>okhttp-stats: Get stats like average network speed.</li> <li>okhttp-system-keystore: Use trusted certificates from the operating system keystore (Keychain on macOS, Certificate Store on Windows).</li> <li>\u2b1c\ufe0f Okio: A modern I/O API for Java.</li> <li>OkLog: Response logging interceptor for OkHttp. Logs a URL link with URL-encoded response for every OkHttp call.</li> <li>Okurl A curl-like client for social networks and other APIs.</li> <li>PersistentCookieJar: A persistent <code>CookieJar</code>.</li> <li>\u2b1c\ufe0f Picasso: A powerful image downloading and caching library for Android.</li> <li>\u2b1c\ufe0f Retrofit: Type-safe HTTP client for Android and Java by Square.</li> <li>ScribeJava: Simple OAuth library for Java</li> <li>Stetho: Stetho is a debug bridge for Android applications.</li> <li>Thrifty: An implementation of Apache Thrift for Android.</li> <li>\u2b1c\ufe0f Wire: Clean, lightweight protocol buffers for Android and Java.</li> </ul>"},{"location":"changelogs/changelog/","title":"Change Log","text":""},{"location":"changelogs/changelog/#version-4x","title":"Version 4.x","text":"<p>See 4.x Change log for the stable version changelogs.</p>"},{"location":"changelogs/changelog/#version-521","title":"Version 5.2.1","text":"<p>2025-10-09</p> <ul> <li> <p>Fix: Don\u2019t crash when calling <code>Socket.shutdownOutput()</code> or <code>shutdownInput()</code> on an <code>SSLSocket</code>     on Android API 21 through 23. This method throws an <code>UnsupportedOperationException</code>, so we now     catch that and close the underlying stream instead.</p> </li> <li> <p>Upgrade: [Okio 3.16.1][okio_3_16_1].</p> </li> </ul>"},{"location":"changelogs/changelog/#version-520","title":"Version 5.2.0","text":"<p>2025-10-07</p> <ul> <li> <p>New: Support HTTP 101 responses with <code>Response.socket</code>. This mechanism is only supported on     HTTP/1.1. We also reimplemented our websocket client to use this new mechanism.</p> </li> <li> <p>New: The <code>okhttp-zstd</code> module negotiates Zstandard (zstd) compression with servers that     support it. It integrates a new (unstable) ZSTD-KMP library, also from Square. Enable it like     this:</p> <pre><code>val client = OkHttpClient.Builder()\n  .addInterceptor(CompressionInterceptor(Zstd, Gzip))\n  .build()\n</code></pre> </li> <li> <p>New: Support the <code>QUERY</code> HTTP method. You will need to set the <code>Request.cacheUrlOverride</code>     property to cache calls made with this method. The <code>RequestBody.sha256()</code> may be helpful here;     use it to compose a cache URL from the query body.</p> </li> <li> <p>New: Publish events when calls must wait to execute. <code>EventListener.dispatcherQueueStart()</code>     is invoked when a call starts waiting, and <code>dispatcherQueueEnd()</code> is invoked when it\u2019s done.</p> </li> <li> <p>New: <code>Request.toCurl()</code> returns a copy-pasteable curl command consistent with Chrome\u2019s and     Firefox\u2019s \u2018copy as cURL\u2019 features.</p> </li> <li> <p>New: Support JPMS. We replaced our <code>Automatic-Module-Name</code> metadata with proper     <code>module-info.java</code> files.</p> </li> <li> <p>Fix: Recover gracefully when worker threads are interrupted. When we introduced fast fallback in     OkHttp 5.0, we started using background threads while connecting. Sadly that code didn\u2019t handle     interruptions well. This is now fixed.</p> </li> <li> <p>Upgrade: Kotlin 2.2.20.</p> </li> <li>Upgrade: Okio 3.16.0.</li> </ul>"},{"location":"changelogs/changelog/#version-510","title":"Version 5.1.0","text":"<p>2025-07-07</p> <ul> <li> <p>New: <code>Response.peekTrailers()</code>. When we changed <code>Response.trailers()</code> to block instead of     throwing in 5.0.0, we inadvertently removed the ability for callers to peek the trailers     (by catching the <code>IllegalStateException</code> if they weren\u2019t available). This new API restores that     capability.</p> </li> <li> <p>Fix: Don\u2019t crash on <code>trailers()</code> if the response doesn\u2019t have a body. We broke Retrofit users     who read the trailers on the <code>raw()</code> OkHttp response, after its body was decoded.</p> </li> </ul>"},{"location":"changelogs/changelog/#version-500","title":"Version 5.0.0","text":"<p>2025-07-02</p> <p>This is our first stable release of OkHttp since 2023. Here\u2019s the highlights if you\u2019re upgrading from OkHttp 4.x:</p> <p>OkHttp is now packaged as separate JVM and Android artifacts. This allows us to offer platform-specific features and optimizations. If your build system handles Gradle module metadata, this change should be automatic.</p> <p>MockWebServer has a new coordinate and package name. We didn\u2019t like that our old artifact depends on JUnit 4 so the new one doesn\u2019t. It also has a better API built on immutable values. (We intend to continue publishing the old <code>okhttp3.mockwebserver</code> artifact so there\u2019s no urgency to migrate.)</p> Coordinate Package Name Description com.squareup.okhttp3:mockwebserver3:5.0.0 mockwebserver3 Core module. No JUnit dependency! com.squareup.okhttp3:mockwebserver3-junit4:5.0.0 mockwebserver3.junit4 Optional JUnit 4 integration. com.squareup.okhttp3:mockwebserver3-junit5:5.0.0 mockwebserver3.junit5 Optional JUnit 5 integration. com.squareup.okhttp3:mockwebserver:5.0.0 okhttp3.mockwebserver Obsolete. Depends on JUnit 4. <p>OkHttp now supports Happy Eyeballs (RFC 8305) for IPv4+IPv6 networks. It attempts both IPv6 and IPv4 connections concurrently, keeping whichever connects first.</p> <p>We\u2019ve improved our Kotlin APIs. You can skip the builder:</p> <pre><code>val request = Request(\n  url = \"https://cash.app/\".toHttpUrl(),\n)\n</code></pre> <p>OkHttp now supports GraalVM.</p> <p>Here\u2019s what has changed since 5.0.0-alpha.17:</p> <ul> <li>Upgrade: Okio 3.15.0.</li> <li>Upgrade: Kotlin 2.2.0.</li> <li>Fix: Don\u2019t crash with a <code>NoSuchMethodError</code> when using OkHttp with the Sentry SDK.</li> <li>Fix: Retain the query data in the old <code>okhttp3.mockwebserver.RecordedRequest.path</code> property. We     inadvertently changed this behavior when we introduced the <code>mockwebserver3</code> API.</li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha17","title":"Version 5.0.0-alpha.17","text":"<p>2025-06-29</p> <p>This release stabilizes many APIs for the imminent OkHttp 5.0.0 release.</p> <ul> <li> <p>New: <code>TrailersSource</code>, a public API for HTTP trailers. Production callers shouldn\u2019t need this     as the API to read response trailers is unchanged. Testers may use this new stable API to     supply trailers for a <code>Response</code>.</p> </li> <li> <p>New: <code>Path.asRequestBody()</code> is now a non-experimental API.</p> </li> <li> <p>New: <code>FileDescriptor.toRequestBody()</code> is now a non-experimental API.</p> </li> <li> <p>New: Stop using experimental coroutines APIs in our <code>okhttp-coroutines</code> artifact.</p> </li> <li> <p>Breaking: Move <code>gzip</code> from <code>RequestBody</code> to <code>Request.Builder</code>. This new API handles both     compressing the request body and also adding the corresponding <code>Content-Encoding</code> header. Note     that this function is sensitive to when it is called: the response body must be supplied before     it can be compressed.</p> </li> <li> <p>Breaking: Remove <code>AddressPolicy</code>, <code>AsyncDns</code>, and <code>ConnectionListener</code> from the public API. We     intend to ship a public API for these features, but we don\u2019t want to hold OkHttp 5.0.0 until     those APIs are stable.</p> </li> <li> <p>Fix: Change <code>MockWebServer.close()</code> to cancel ongoing calls that are blocked on a delay.</p> </li> <li> <p>Upgrade: Okio 3.13.0.</p> </li> </ul> <p>This release also stabilizes many APIs in the <code>mockwebserver3</code> artifact that\u2019s new in 5.0.</p> <ul> <li> <p>Breaking: <code>RecordedRequest.body</code> is now nullable. Null is used when the request does not have a     body.</p> </li> <li> <p>Breaking: <code>RecordedRequest.chunkSizes</code> is now nullable. Null is used when the request does not     use chunked encoding. This is different from an empty list - that indicates the request is     chunked but has no data.</p> </li> <li> <p>Breaking: Replace <code>SocketPolicy</code> with a new type, <code>SocketEffect</code>. It splits triggers (request     start, response body, etc.) from effects (closing the socket, closing the stream, etc.).</p> </li> <li> <p>Breaking: Rename <code>RecordedRequest.sequenceNumber</code> to <code>exchangeIndex</code> and introduce     <code>connectionIndex</code> on that type. These properties may be useful when testing features like     connection reuse.</p> </li> <li> <p>Breaking: Replace our parameters-based JUnit 5 extension with a new annotation, <code>@StartStop</code>.     Put this annotation on a <code>MockWebServer</code> property and the extension will start it before your     test executes and stop it after it completes. No further configuration is required.</p> <pre><code>@StartStop val server = MockWebServer()\n</code></pre> </li> <li> <p>Breaking: Don\u2019t automatically start <code>MockWebServer</code> after calls to accessors like <code>port</code>. Now     these accessors will throw an <code>IllegalStateException</code> if the service has not yet been started.</p> </li> <li> <p>Breaking: Rename <code>RecordedRequest.path</code> to <code>RecordedRequest.target</code>. (This property is     sometimes a path, but it can also be a path and query, or a full URL.)</p> </li> <li> <p>Breaking: Decompose the <code>RecordedRequest.requestLine</code> into three properties, <code>method</code>, <code>target</code>,     and <code>version</code>. This better suits HTTP/2 where the request line had to be synthesized from     component headers.</p> </li> <li> <p>Breaking: Change <code>RecordedRequest.body</code> from a mutable <code>Buffer</code> to an immutable <code>ByteString</code>.</p> </li> <li> <p>Breaking: Adopt Okio\u2019s new <code>Socket</code> interface for <code>MockResponse.socketHandler</code>.</p> </li> </ul> <p>Note that any Breaking changes above impact only APIs introduced in earlier 5.0.0-alpha releasees. We don\u2019t break binary compatibility with non-alpha APIs.</p>"},{"location":"changelogs/changelog/#version-500-alpha16","title":"Version 5.0.0-alpha.16","text":"<p>2025-05-29</p> <ul> <li>Fix: The previous release would crash when running on Robolectric. We didn\u2019t anticipate     running our Android artifact on the JVM platform!</li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha15","title":"Version 5.0.0-alpha.15","text":"<p>2025-05-28</p> <p>This release introduces separate JVM and Android artifacts. Until now, we\u2019ve distributed OkHttp as a JVM library that detects Android capabilities at runtime, but that doesn\u2019t offer Android-specific APIs. With this release we\u2019re starting to publish OkHttp as an AAR for Android users in addition to our existing JAR for JVM users.</p> <p>This first Android-specific artifact adopts Android\u2019s <code>assets</code> mechanism to embed the public suffix data. We will build more Android integration in future releases.</p> <p>The okhttp-android artifact first introduced in <code>5.0.0-alpha.7</code> is no longer available:</p> <ul> <li>The <code>AndroidAsyncDns</code> class moved to the <code>okhttp</code> artifact.</li> <li>The <code>AndroidLogging</code> class is no longer necessary. <code>LoggingEventListener</code> and     <code>HttpLoggingInterceptor</code> write to logcat by default.</li> </ul> <p>The rest of this release is our highest-quality release yet. Though we continue to use the word alpha in the version name, the only unstable thing in it is some non-final APIs tagged <code>@ExperimentalOkHttpApi</code>. You can safely use this release in production.</p> <ul> <li> <p>Fix: Attempt to read the response even if sending the request failed. This makes it possible     to handle response statuses like <code>HTTP/1.1 431 \"Request Header Fields Too Large</code>.</p> </li> <li> <p>Fix: Handle multiple 1xx responses.</p> </li> <li> <p>Fix: Address a performance bug in our internal task runner. We had a race condition that could     result in it OkHttp starting a thread for each queued task, even when a single thread could run     all of them.</p> </li> <li> <p>Fix: Address a performance bug in <code>MultipartReader</code>. We were scanning the entire input stream     for a delimiter when we only needed to scan enough to return a result.</p> </li> <li> <p>Fix: Don\u2019t double-compress the public suffix database. OkHttp is usually distributed in a     compressed file (like a JAR or APK), so compressing its internal data was redundant.</p> </li> <li> <p>Fix: Call <code>ProxySelector.connectFailed()</code> when a connection\u2019s initial TCP handshake fails.</p> </li> <li> <p>Fix: Change the signature of <code>Dispatcher</code> to accept a nullable <code>ExecutorService</code>. Changing this     parameter to be non-null was an unintended signature change in OkHttp 4.0.</p> </li> <li> <p>New: <code>EventListener.retryDecision()</code> is called each time a request fails with an <code>IOException</code>.     It notifies your listener if OkHttp will retry.</p> </li> <li> <p>New: <code>EventListener.followUpDecision()</code> is called each time a response is received. It notifies     your listener if OkHttp has decided to make a follow-up request. Some common follow-ups are     authentication challenges and redirects.</p> </li> <li> <p>New: Handy constants for <code>Headers.EMPTY</code>, <code>RequestBody.EMPTY</code>, and <code>ResponseBody.EMPTY</code>.</p> </li> <li> <p>New: OkHttp now calls <code>StrictMode.noteSlowCall()</code> when initializing TLS on Android. Use     <code>StrictMode</code> to detect if your <code>OkHttpClient</code> is being initialized on the main thread.</p> </li> <li> <p>Upgrade: Okio 3.12.0.</p> </li> <li> <p>Upgrade: Kotlin 2.1.21.</p> </li> <li> <p>Upgrade: kotlinx.coroutines 1.10.2. This is used by the optional     <code>okhttp-coroutines</code> artifact.</p> </li> <li> <p>Upgrade: AndroidX Startup 1.2.0. The Android variant of the <code>okhttp</code> artifact     now depends on this. This is a new dependency.</p> </li> <li> <p>Upgrade: AndroidX Annotation 1.9.1. As above, the Android variant of the     <code>okhttp</code> artifact now depends on this. This is also a new dependency.</p> </li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha14","title":"Version 5.0.0-alpha.14","text":"<p>2024-04-17</p> <ul> <li> <p>Breaking: Move coroutines extensions to okhttp3.coroutines. Previously this artifact shared the     <code>okhttp3</code> package name with our core module, which is incompatible with the Java Platform Module     System.</p> </li> <li> <p>Fix in okhttp-coroutines: Publish a valid artifact. The coroutines JAR file in 5.0.0-alpha.13     was corrupt and should not be used.</p> </li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha13","title":"Version 5.0.0-alpha.13","text":"<p>2024-04-16</p> <ul> <li> <p>Breaking: Tag unstable new APIs as <code>@ExperimentalOkHttpApi</code>. We intend to release OkHttp 5.0     without stabilizing these new APIs first.</p> <p>Do not use these experimental APIs in modules that may be executed using a version of OkHttp different from the version that the module was compiled with. Do not use them in published libraries. Do not use them if you aren\u2019t willing to track changes to them.</p> </li> <li> <p>Breaking: Drop support for Kotlin Multiplatform.</p> <p>We planned to support multiplatform in OkHttp 5.0, but after building it, we weren\u2019t happy with the implementation trade-offs. We can\u2019t use our HTTP client engine on Kotlin/JS, and we weren\u2019t prepared to build a TLS API for Kotlin/Native.</p> <p>We\u2019d prefer a multiplatform HTTP client API that\u2019s backed by OkHttp on Android and JVM, and other engines on other platforms. Ktor does this pretty well today!</p> </li> <li> <p>Breaking: Use <code>kotlin.time.Duration</code> in APIs like <code>OkHttpClient.Builder.callTimeout()</code>. This     update also drops support for the <code>DurationUnit</code> functions introduced in earlier alpha releases     of OkHttp 5.</p> </li> <li> <p>Breaking: Reorder the parameters in the Cache constructor that was introduced in 5.0.0-alpha.3.</p> </li> <li> <p>New: <code>Request.Builder.cacheUrlOverride()</code> customizes the cache key used for a request. This can     be used to make canonical URLs for the cache that omit insignificant query parameters or other     irrelevant data.</p> <p>This feature may be used with <code>POST</code> requests to cache their responses. In such cases the request body is not used to determine the cache key, so you must manually add cache-relevant data to the override URL. For example, you could add a <code>request-body-sha256</code> query parameter so requests with the same POST data get the same cache entry.</p> </li> <li> <p>New: <code>HttpLoggingInterceptor.redactQueryParams()</code> configures the query parameters to redact     in logs. For best security, don\u2019t put sensitive information in query parameters.</p> </li> <li> <p>New: <code>ConnectionPool.setPolicy()</code> configures a minimum connection pool size for a target     address. Use this to proactively open HTTP connections.</p> <p>Connections opened to fulfill this policy are subject to the connection pool\u2019s <code>keepAliveDuration</code> but do not count against the pool-wide <code>maxIdleConnections</code> limit.</p> <p>This feature increases the client\u2019s traffic and the load on the server. Talking to your server\u2019s operators before adopting it.</p> </li> <li> <p>New in okhttp-android: <code>HttpLoggingInterceptor.androidLogging()</code> and     <code>LoggingEventListener.androidLogging()</code> write HTTP calls or events to Logcat.</p> </li> <li> <p>New: <code>OkHttpClient.webSocketCloseTimeout</code> configures how long a web socket connection will wait     for a graceful shutdown before it performs an abrupt shutdown.</p> </li> <li> <p>Fix: Honor <code>RequestBody.isOneShot()</code> in <code>MultipartBody</code></p> </li> <li> <p>Fix in <code>okhttp-coroutines</code>: Don\u2019t leak response bodies in <code>executeAsync()</code>. We had a bug where     we didn\u2019t call <code>Response.close()</code> if the coroutine was canceled before its response was     returned.</p> </li> <li> <p>Upgrade: Okio 3.9.0.</p> </li> <li> <p>Upgrade: Kotlin 1.9.23.</p> </li> <li> <p>Upgrade: Unicode\u00ae IDNA 15.1.0</p> </li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha12","title":"Version 5.0.0-alpha.12","text":"<p>2023-12-17</p> <p>We took too long to cut this release and there\u2019s a lot of changes in it. We\u2019ve been busy.</p> <p>Although this release is labeled alpha, the only unstable thing in it is our new APIs. This release has many critical bug fixes and is safe to run in production. We\u2019re eager to stabilize our new APIs so we can get out of alpha.</p> <ul> <li> <p>New: Support Java 21\u2019s virtual threads (\u2018OpenJDK Project Loom\u2019). We changed OkHttp\u2019s internals     to use <code>Lock</code> and <code>Condition</code> instead of <code>synchronized</code> for best resource utilization.</p> </li> <li> <p>New: Switch our Internationalized Domain Name (IDN) implementation to UTS #46 Nontransitional     Processing. With this fix, the <code>\u00df</code> code point no longer maps to <code>ss</code>. OkHttp now embeds     its own IDN mapping table in the library.</p> </li> <li> <p>New: Prefer the client\u2019s configured precedence order for TLS cipher suites. (OkHttp used to     prefer the JDK\u2019s precedence order.) This change may cause your HTTP calls to negotiate a     different cipher suite than before! OkHttp\u2019s defaults cipher suites are selected for good     security and performance.</p> </li> <li> <p>New: <code>ConnectionListener</code> publishes events for connects, disconnects, and use of pooled     connections.</p> </li> <li> <p>Fix: Immediately update the connection\u2019s flow control window instead of waiting for the     receiving stream to process it.</p> <p>This change may increase OkHttp\u2019s memory use for applications that make many concurrent HTTP calls and that can receive data faster than they can process it. Previously, OkHttp limited HTTP/2 to 16 MiB of unacknowledged data per connection. With this fix there is a limit of 16 MiB of unacknowledged data per stream and no per-connection limit.</p> </li> <li> <p>Fix: Don\u2019t close a <code>Deflater</code> while we\u2019re still using it to compress a web socket message. We     had a severe bug where web sockets were closed on the wrong thread, which caused     <code>NullPointerException</code> crashes in <code>Deflater</code>.</p> </li> <li> <p>Fix: Don\u2019t crash after a web socket fails its connection upgrade. We incorrectly released     the web socket\u2019s connections back to the pool before their resources were cleaned up.</p> </li> <li> <p>Fix: Don\u2019t infinite loop when a received web socket message has self-terminating compressed     data.</p> </li> <li> <p>Fix: Don\u2019t fail the call when the response code is \u2018HTTP 102 Processing\u2019 or \u2018HTTP 103 Early     Hints\u2019.</p> </li> <li> <p>Fix: Honor interceptors\u2019 changes to connect and read timeouts.</p> </li> <li> <p>Fix: Recover gracefully when a cached response is corrupted on disk.</p> </li> <li> <p>Fix: Don\u2019t leak file handles when a cache disk write fails.</p> </li> <li> <p>Fix: Don\u2019t hang when the public suffix database cannot be loaded. We had a bug where a failure     reading the public suffix database would cause subsequent reads to hang when they should have     crashed.</p> </li> <li> <p>Fix: Avoid <code>InetAddress.getCanonicalHostName()</code> in MockWebServer. This avoids problems if the     host machine\u2019s IP address has additional DNS registrations.</p> </li> <li> <p>New: Create a JPMS-compatible artifact for <code>JavaNetCookieJar</code>. Previously, multiple OkHttp     artifacts defined classes in the <code>okhttp3</code> package, but this is forbidden by the Java module     system. We\u2019ve fixed this with a new package (<code>okhttp3.java.net.cookiejar</code>) and a new artifact,     <code>com.squareup.okhttp3:okhttp-java-net-cookiehandler</code>. (The original artifact now delegates to     this new one.)</p> <pre><code>implementation(\"com.squareup.okhttp3:okhttp-java-net-cookiehandler:5.0.0-alpha.12\")\n</code></pre> </li> <li> <p>New: <code>Cookie.sameSite</code> determines whether cookies should be sent on cross-site requests. This     is used by servers to defend against Cross-Site Request Forgery (CSRF) attacks.</p> </li> <li> <p>New: Log the total time of the HTTP call in <code>HttpLoggingInterceptor</code>.</p> </li> <li> <p>New: <code>OkHttpClient.Builder</code> now has APIs that use <code>kotlin.time.Duration</code>.</p> </li> <li> <p>New: <code>mockwebserver3.SocketPolicy</code> is now a sealed interface. This is one of several     backwards-incompatible API changes that may impact early adopters of this alpha API.</p> </li> <li> <p>New: <code>mockwebserver3.Stream</code> for duplex streams.</p> </li> <li> <p>New: <code>mockwebserver3.MockResponseBody</code> for streamed response bodies.</p> </li> <li> <p>New: <code>mockwebserver3.MockResponse</code> is now immutable, with a <code>Builder</code>.</p> </li> <li> <p>New: <code>mockwebserver3.RecordedRequest.handshakeServerNames</code> returns the SNI (Server Name     Indication) attribute from the TLS handshake.</p> </li> <li> <p>Upgrade: Kotlin 1.9.21.</p> </li> <li> <p>Upgrade: Okio 3.7.0.</p> </li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha11","title":"Version 5.0.0-alpha.11","text":"<p>2022-12-24</p> <ul> <li>New: Enable fast fallback by default. It\u2019s our implementation of Happy Eyeballs,     RFC 8305. Disable with <code>OkHttpClient.Builder.fastFallback(false)</code>.</li> <li>Fix: Don\u2019t log response bodies for server-sent events.</li> <li>Fix: Skip early hints (status code 103) responses.</li> <li>Fix: Don\u2019t log sensitive headers in <code>Request.toString()</code>.</li> <li>Fix: Don\u2019t crash when the dispatcher\u2019s <code>ExecutorService</code> is shutdown with many     calls still enqueued.</li> <li>Upgrade: GraalVM 22.</li> <li>Upgrade: Kotlin 1.7.10.</li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha10","title":"Version 5.0.0-alpha.10","text":"<p>2022-06-26</p> <ul> <li>Fix: Configure the multiplatform artifact (<code>com.squareup.okhttp3:okhttp:3.x.x</code>) to depend on the     JVM artifact (<code>com.squareup.okhttp3:okhttp-jvm:3.x.x</code>) for Maven builds. This should work-around     an issue where Maven doesn\u2019t interpret Gradle metadata.</li> <li>Fix: Make another attempt at supporting Kotlin 1.5.31 at runtime. We were crashing on     <code>DurationUnit</code> which was a typealias in 1.5.x.</li> <li>Upgrade: Okio 3.2.0.</li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha9","title":"Version 5.0.0-alpha.9","text":"<p>2022-06-16</p> <ul> <li>New: Enforce label length limits in URLs. <code>HttpUrl</code> now rejects URLs whose domains aren\u2019t valid.     This includes overly-long domain names (longer than 253 characters), overly-long labels (more     than 63 characters between dots), and empty labels.</li> <li>New: Don\u2019t include the <code>Content-Length</code> header in multipart bodies. Servers must delimit     OkHttp\u2019s request bodies using the boundary only. (This change makes OkHttp more consistent with     browsers and other HTTP clients.)</li> <li>New: Drop the <code>tunnelProxy</code> argument in <code>MockWebServer.useHttps()</code>. This change only impacts     the OkHttp 5.x API which uses the <code>mockwebserver3</code> package.</li> <li>Fix: Don\u2019t call <code>toDuration()</code> which isn\u2019t available in kotlin-stdlib 1.4.</li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha8","title":"Version 5.0.0-alpha.8","text":"<p>2022-06-08</p> <ul> <li> <p>Fix: Change how <code>H2_PRIOR_KNOWLEDGE</code> works with HTTP proxies. Previously OkHttp assumed the     proxy itself was a prior knowledge HTTP/2 server. With this update, OkHttp attempts a <code>CONNECT</code>     tunnel just as it would with HTTPS. For prior knowledge with proxies OkHttp\u2019s is now consistent     with these curl arguments:</p> <pre><code>curl \\\n  --http2-prior-knowledge \\\n  --proxy localhost:8888 \\\n  --proxytunnel \\\n  http://squareup.com/robots.txt\n</code></pre> </li> <li> <p>Fix: Support executing OkHttp on kotlin-stdlib versions as old as 1.4. The library still builds     on up-to-date Kotlin releases (1.6.21) but no longer needs that version as a runtime dependency.     This should make it easier to use OkHttp in Gradle plugins.</p> </li> <li> <p>Fix: Don\u2019t start the clock on response timeouts until the request body is fully transmitted.     This is only relevant for duplex request bodies, because they are written concurrently when     reading the response body.</p> </li> <li> <p>New: <code>MockResponse.inTunnel()</code> is a new <code>mockwebserver3</code> API to configure responses that are     served while creating a proxy tunnel. This obsoletes both the <code>tunnelProxy</code> argument on     <code>MockWebServer</code> and the <code>UPGRADE_TO_SSL_AT_END</code> socket option. (Only APIs on <code>mockwebserver3</code>     are changed; the old <code>okhttp3.mockwebserver</code> APIs remain as they always have been.</p> </li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha7","title":"Version 5.0.0-alpha.7","text":"<p>2022-04-26</p> <p>This release introduces new Kotlin-friendly APIs. When we migrated OkHttp from Java to Kotlin in OkHttp 4.0, we kept our Java-first APIs. With 5.0 we\u2019re continuing to support Java and adding additional improvements for Kotlin users. In this alpha we\u2019re excited to skip-the-builder for requests and remove a common source of non-null assertions (<code>!!</code>) on the response body.</p> <p>The alpha releases in the 5.0.0 series have production-quality code and an unstable API. We expect to make changes to the APIs introduced in 5.0.0-alpha.X. These releases are safe for production use and \u2018alpha\u2019 strictly signals that we\u2019re still experimenting with some new APIs. If you\u2019re eager for the fixes or features below, please upgrade.</p> <ul> <li> <p>New: Named and default parameters constructor for <code>Request</code>:</p> <pre><code>val request = Request(\n  url = \"https://cash.app/\".toHttpUrl(),\n)\n</code></pre> </li> <li> <p>New: <code>Response.body</code> is now non-null. This was generally the case in OkHttp 4.x, but the Kotlin     type declaration was nullable to support rare cases like the body on <code>Response.cacheResponse</code>,     <code>Response.networkResponse</code>, and <code>Response.priorResponse</code>. In such cases the body is now     non-null, but attempts to read its content will fail.</p> </li> <li>New: Kotlin-specific APIs for request tags. Kotlin language users can lookup tags with a type     parameter only, like <code>request.tag&lt;MyTagClass&gt;()</code>.</li> <li>New: MockWebServer has improved support for HTTP/1xx responses. Once you\u2019ve migrated to the new     <code>mockwebserver3</code> package, there\u2019s a new field, <code>MockResponse.informationalResponses</code>.</li> <li>Fix: Don\u2019t interpret trailers as headers after an HTTP/100 response. This was a bug only when     the HTTP response body itself is empty.</li> <li>Fix: Don\u2019t crash when a fast fallback call has both a deferred connection and a held connection.</li> <li>Fix: <code>OkHttpClient</code> no longer implements <code>Cloneable</code>. It never should have; the class is     immutable. This is left over from OkHttp 2.x (!) when that class was mutable. We\u2019re using the     5.x upgrade as an opportunity to remove very obsolete APIs.</li> <li>Fix: Recover gracefully when Android\u2019s <code>NativeCrypto</code> crashes with <code>\"ssl == null\"</code>. This occurs     when OkHttp retrieves ALPN state on a closed connection.</li> <li>Upgrade: Kotlin 1.6.21.</li> <li>Upgrade: Okio 3.1.0.</li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha6","title":"Version 5.0.0-alpha.6","text":"<p>2022-03-14</p> <ul> <li>Fix: Don\u2019t attempt to close pooled connections. We saw occasional fast fallback calls crash in     the previous alpha due to an unexpected race.</li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha5","title":"Version 5.0.0-alpha.5","text":"<p>2022-02-21</p> <ul> <li>Fix: Don\u2019t include Assertk in OkHttp\u2019s production dependencies. This regression was     introduced in the 5.0.0-alpha.4 release.</li> <li>Fix: Don\u2019t ask <code>Dns</code> implementations to resolve strings that are already IP addresses.</li> <li>Fix: Change fast fallback to race TCP handshakes only. To avoid wasted work, OkHttp will not     attempt multiple TLS handshakes for the same call concurrently.</li> <li>Fix: Don\u2019t crash loading the public suffix database in GraalVM native images. The function     <code>HttpUrl.topPrivateDomain()</code> uses a resource file to identify private domains, but we didn\u2019t     include this file on GraalVM.</li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha4","title":"Version 5.0.0-alpha.4","text":"<p>2022-02-01</p> <p>This release introduces fast fallback to better support mixed IPv4+IPv6 networks. Fast fallback is what we\u2019re calling our implementation of Happy Eyeballs, RFC 8305. With this feature OkHttp will attempt both IPv6 and IPv4 connections concurrently, keeping whichever connects first. Fast fallback gives IPv6 connections a 250 ms head start so IPv6 is preferred on networks where it\u2019s available.</p> <p>To opt-in, configure your <code>OkHttpClient.Builder</code>:</p> <pre><code>OkHttpClient client = new OkHttpClient.Builder()\n    .fastFallback(true)\n    .build();\n</code></pre> <ul> <li>New: Change the build from Kotlin-JVM to Kotlin-multiplatform (which includes JVM). Both     native and JavaScript platforms are unstable preview releases and subject to     backwards-incompatible changes in forthcoming releases.</li> <li>Fix: Don\u2019t crash loading the public suffix database resource in obfuscated builds.</li> <li>Fix: Don\u2019t silently ignore calls to <code>EventSource.cancel()</code> made from     <code>EventSourceListener.onOpen()</code>.</li> <li>Fix: Enforce the max intermediates constraint when using pinned certificates with Conscrypt.     This impacts Conscrypt when the server\u2019s presented certificates form both a trusted-but-unpinned     chain and an untrusted-but-pinned chain.</li> <li>Upgrade: Kotlin 1.6.10.</li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha3","title":"Version 5.0.0-alpha.3","text":"<p>2021-11-22</p> <ul> <li>Fix: Change <code>Headers.toString()</code> to redact authorization and cookie headers.</li> <li>Fix: Don\u2019t do DNS to get the hostname for <code>RecordedRequest.requestUrl</code>. This was doing a DNS     lookup for the local hostname, but we really just wanted the <code>Host</code> header.</li> <li>Fix: Don\u2019t crash with a <code>InaccessibleObjectException</code> when detecting the platform trust manager     on Java 17+.</li> <li>Fix: Don\u2019t crash if a cookie\u2019s value is a lone double quote character.</li> <li>Fix: Don\u2019t crash when canceling an event source created by <code>EventSources.processResponse()</code>.</li> <li>New: <code>Cache</code> now has a public constructor that takes an [okio.FileSystem]. This should make it     possible to implement decorators for cache encryption or compression.</li> <li>New: <code>Cookie.newBuilder()</code> to build upon an existing cookie.</li> <li>New: Use TLSv1.3 when running on JDK 8u261 or newer.</li> <li>New: <code>QueueDispatcher.clear()</code> may be used to reset a MockWebServer instance.</li> <li>New: <code>FileDescriptor.toRequestBody()</code> may be particularly useful for users of Android\u2019s Storage     Access Framework.</li> <li>Upgrade: Kotlin 1.5.31.</li> <li>Upgrade: Okio 3.0.0.</li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha2","title":"Version 5.0.0-alpha.2","text":"<p>2021-01-30</p> <p>In this release MockWebServer has a new Maven coordinate and package name. A longstanding problem with MockWebServer has been its API dependency on JUnit 4. We\u2019ve reorganized things to remove that dependency while preserving backwards compatibility.</p> Maven Coordinate Package Name Description com.squareup.okhttp3:mockwebserver3:5.0.0-alpha.2 mockwebserver3 Core module. No JUnit dependency! com.squareup.okhttp3:mockwebserver3-junit4:5.0.0-alpha.2 mockwebserver3.junit4 Optional JUnit 4 integration. com.squareup.okhttp3:mockwebserver3-junit5:5.0.0-alpha.2 mockwebserver3.junit5 Optional JUnit 5 integration. com.squareup.okhttp3:mockwebserver:5.0.0-alpha.2 okhttp3.mockwebserver Obsolete. Depends on JUnit 4. <p>The new APIs use <code>mockwebserver3</code> in both the Maven coordinate and package name. This new API is not stable and will likely change before the final 5.0.0 release.</p> <p>If you have code that subclasses <code>okhttp3.mockwebserver.QueueDispatcher</code>, this update is not source or binary compatible. Migrating to the new <code>mockwebserver3</code> package will fix this problem.</p> <ul> <li>New: DNS over HTTPS is now a stable feature of OkHttp. We introduced this as an experimental     module in 2018. We are confident in its stable API and solid implementation.</li> <li>Fix: Work around a crash in Android 10 and 11 that may be triggered when two threads     concurrently close an SSL socket. This would have appeared in crash logs as     <code>NullPointerException: bio == null</code>.</li> <li>Fix: Use plus <code>+</code> instead of <code>%20</code> to encode space characters in <code>FormBody</code>. This was a     longstanding bug in OkHttp. The fix makes OkHttp consistent with major web browsers.</li> <li>Fix: Don\u2019t crash if Conscrypt returns a null version.</li> <li>Fix: Include the public suffix data as a resource in GraalVM native images.</li> <li>Fix: Fail fast when the cache is corrupted.</li> <li>Fix: Fail fast when a private key cannot be encoded.</li> <li>Fix: Fail fast when attempting to verify a non-ASCII hostname.</li> <li>Upgrade: GraalVM 21.</li> <li>Upgrade: Kotlin 1.4.20.</li> </ul>"},{"location":"changelogs/changelog/#version-500-alpha1","title":"Version 5.0.0-alpha.1","text":"<p>2021-01-30</p> <p>This release adds initial support for GraalVM.</p> <p>GraalVM is an exciting new platform and we\u2019re eager to adopt it. The startup time improvements over the JVM are particularly impressive. Try it with okcurl:</p> <pre><code>$ ./gradlew okcurl:nativeImage\n$ ./okcurl/build/graal/okcurl https://cash.app/robots.txt\n</code></pre> <p>This is our first release that supports GraalVM. Our code on this platform is less mature than JVM and Android! Please report any issues you encounter: we\u2019ll fix them urgently.</p> <ul> <li>Fix: Attempt to read the response body even if the server canceled the request. This will cause     some calls to return nice error codes like <code>HTTP/1.1 429 Too Many Requests</code> instead of transport     errors like <code>SocketException: Connection reset</code> and <code>StreamResetException: stream was reset:     CANCEL</code>.</li> <li>New: Support OSGi metadata.</li> <li> <p>Upgrade: Okio 2.9.0.</p> <pre><code>implementation(\"com.squareup.okio:okio:2.9.0\")\n</code></pre> </li> </ul> <p>Note that this was originally released on 2020-10-06 as 4.10.0-RC1. The only change from that release is the version name.</p>"},{"location":"changelogs/changelog_1x/","title":"OkHttp 1.x Change Log","text":""},{"location":"changelogs/changelog_1x/#version-160","title":"Version 1.6.0","text":"<p>2014-05-23</p> <ul> <li>Offer bridges to make it easier to migrate from OkHttp 1.x to OkHttp 2.0.    This adds <code>OkUrlFactory</code>, <code>Cache</code>, and <code>@Deprecated</code> annotations for APIs    dropped in 2.0.</li> </ul>"},{"location":"changelogs/changelog_1x/#version-154","title":"Version 1.5.4","text":"<p>2014-04-14</p> <ul> <li>Drop ALPN support in Android. There\u2019s a concurrency bug in all    currently-shipping versions.</li> <li>Support asynchronous disconnects by breaking the socket only. This should    prevent flakiness from multiple threads concurrently accessing a stream.</li> </ul>"},{"location":"changelogs/changelog_1x/#version-153","title":"Version 1.5.3","text":"<p>2014-03-29</p> <ul> <li>Fix bug where the Content-Length header was not always dropped when    following a redirect from a POST to a GET.</li> <li>Implement basic support for <code>Thread.interrupt()</code>. OkHttp now checks    for an interruption before doing a blocking call. If it is interrupted,    it throws an <code>InterruptedIOException</code>.</li> </ul>"},{"location":"changelogs/changelog_1x/#version-152","title":"Version 1.5.2","text":"<p>2014-03-17</p> <ul> <li>Fix bug where deleting a file that was absent from the <code>HttpResponseCache</code>    caused an IOException.</li> <li>Fix bug in HTTP/2 where our HPACK decoder wasn\u2019t emitting entries in    certain eviction scenarios, leading to dropped response headers.</li> </ul>"},{"location":"changelogs/changelog_1x/#version-151","title":"Version 1.5.1","text":"<p>2014-03-11</p> <ul> <li>Fix 1.5.0 regression where connections should not have been recycled.</li> <li>Fix 1.5.0 regression where transparent Gzip was broken by attempting to    recover from another I/O failure.</li> <li>Fix problems where spdy/3.1 headers may not have been compressed properly.</li> <li>Fix problems with spdy/3.1 and http/2 where the wrong window size was being    used.</li> <li>Fix 1.5.0 regression where conditional cache responses could corrupt the    connection pool.</li> </ul>"},{"location":"changelogs/changelog_1x/#version-150","title":"Version 1.5.0","text":"<p>2014-03-07</p>"},{"location":"changelogs/changelog_1x/#okhttp-no-longer-uses-the-default-ssl-context","title":"OkHttp no longer uses the default SSL context.","text":"<p>Applications that want to use the global SSL context with OkHttp should configure their OkHttpClient instances with the following:</p> <pre><code>okHttpClient.setSslSocketFactory(HttpsURLConnection.getDefaultSSLSocketFactory());\n</code></pre> <p>A simpler solution is to avoid the shared default SSL socket factory. Instead, if you need to customize SSL, do so for your specific OkHttpClient instance only.</p>"},{"location":"changelogs/changelog_1x/#synthetic-headers-have-changed","title":"Synthetic headers have changed","text":"<p>Previously OkHttp added a synthetic response header, <code>OkHttp-Selected-Transport</code>. It has been replaced with a new synthetic header, <code>OkHttp-Selected-Protocol</code>.</p>"},{"location":"changelogs/changelog_1x/#changes","title":"Changes","text":"<ul> <li>New: Support for <code>HTTP-draft-09/2.0</code>.</li> <li>New: Support for <code>spdy/3.1</code>. Dropped support for <code>spdy/3</code>.</li> <li>New: Use ALPN on Android platforms that support it (4.4+)</li> <li>New: CacheControl model and parser.</li> <li>New: Protocol selection in MockWebServer.</li> <li>Fix: Route selection shouldn\u2019t use TLS modes that we know will fail.</li> <li>Fix: Cache SPDY responses even if the response body is closed prematurely.</li> <li>Fix: Use strict timeouts when aborting a download.</li> <li>Fix: Support Shoutcast HTTP responses like <code>ICY 200 OK</code>.</li> <li>Fix: Don\u2019t unzip if there isn\u2019t a response body.</li> <li>Fix: Don\u2019t leak gzip streams on redirects.</li> <li>Fix: Don\u2019t do DNS lookups on invalid hosts.</li> <li>Fix: Exhaust the underlying stream when reading gzip streams.</li> <li>Fix: Support the <code>PATCH</code> method.</li> <li>Fix: Support request bodies on <code>DELETE</code> method.</li> <li>Fix: Drop the <code>okhttp-protocols</code> module.</li> <li>Internal: Replaced internal byte array buffers with pooled buffers (\u201cOkBuffer\u201d).</li> </ul>"},{"location":"changelogs/changelog_1x/#version-130","title":"Version 1.3.0","text":"<p>2014-01-11</p> <ul> <li>New: Support for \u201cPATCH\u201d HTTP method in client and MockWebServer.</li> <li>Fix: Drop <code>Content-Length</code> header when redirected from POST to GET.</li> <li>Fix: Correctly read cached header entries with malformed header names.</li> <li>Fix: Do not directly support any authentication schemes other than \u201cBasic\u201d.</li> <li>Fix: Respect read timeouts on recycled connections.</li> <li>Fix: Transmit multiple cookie values as a single header with delimiter.</li> <li>Fix: Ensure <code>null</code> is never returned from a connection\u2019s <code>getHeaderFields()</code>.</li> <li>Fix: Persist proper <code>Content-Encoding</code> header to cache for GZip responses.</li> <li>Fix: Eliminate rare race condition in SPDY streams that would prevent connection reuse.</li> <li>Fix: Change HTTP date formats to UTC to conform to RFC2616 section 3.3.</li> <li>Fix: Support SPDY header blocks with trailing bytes.</li> <li>Fix: Allow <code>;</code> as separator for <code>Cache-Control</code> header.</li> <li>Fix: Correct bug where HTTPS POST requests were always automatically buffered.</li> <li>Fix: Honor read timeout when parsing SPDY headers.</li> </ul>"},{"location":"changelogs/changelog_1x/#version-121","title":"Version 1.2.1","text":"<p>2013-08-23</p> <ul> <li>Resolve issue with \u2018jar-with-dependencies\u2019 artifact creation.</li> <li>Fix: Support empty SPDY header values.</li> </ul>"},{"location":"changelogs/changelog_1x/#version-120","title":"Version 1.2.0","text":"<p>2013-08-11</p> <ul> <li>New APIs on OkHttpClient to set default timeouts for connect and read.</li> <li>Fix bug when caching SPDY responses.</li> <li>Fix a bug with SPDY plus half-closed streams. (thanks kwuollett)</li> <li>Fix a bug in <code>Content-Length</code> reporting for gzipped streams in the Apache     HTTP client adapter. (thanks kwuollett)</li> <li>Work around the Alcatel <code>getByInetAddress</code> bug (thanks k.kocel)</li> <li>Be more aggressive about testing pooled sockets before reuse. (thanks     warpspin)</li> <li>Include <code>Content-Type</code> and <code>Content-Encoding</code> in the Apache HTTP client     adapter. (thanks kwuollett)</li> <li>Add a media type class to OkHttp.</li> <li> <p>Change custom header prefix:</p> <p><pre><code>X-Android-Sent-Millis is now OkHttp-Sent-Millis\nX-Android-Received-Millis is now OkHttp-Received-Millis\nX-Android-Response-Source is now OkHttp-Response-Source\nX-Android-Selected-Transport is now OkHttp-Selected-Transport\n</code></pre>  *  Improve cache invalidation for POST-like requests.  *  Bring MockWebServer into OkHttp and teach it SPDY.</p> </li> </ul>"},{"location":"changelogs/changelog_1x/#version-111","title":"Version 1.1.1","text":"<p>2013-06-23</p> <ul> <li>Fix: ClassCastException when caching responses that were redirected from    HTTP to HTTPS.</li> </ul>"},{"location":"changelogs/changelog_1x/#version-110","title":"Version 1.1.0","text":"<p>2013-06-15</p> <ul> <li>Fix: Connection reuse was broken for most HTTPS connections due to a bug in    the way the hostname verifier was selected.</li> <li>Fix: Locking bug in SpdyConnection.</li> <li>Fix: Ignore null header values (for compatibility with HttpURLConnection).</li> <li>Add URLStreamHandlerFactory support so that <code>URL.openConnection()</code> uses    OkHttp.</li> <li>Expose the transport (\u201chttp/1.1\u201d, \u201cspdy/3\u201d, etc.) via magic request headers.    Use <code>X-Android-Transports</code> to write the preferred transports and    <code>X-Android-Selected-Transport</code> to read the negotiated transport.</li> </ul>"},{"location":"changelogs/changelog_1x/#version-102","title":"Version 1.0.2","text":"<p>2013-05-11</p> <ul> <li>Fix: Remove use of Java 6-only APIs.</li> <li>Fix: Properly handle exceptions from <code>NetworkInterface</code> when querying MTU.</li> <li>Fix: Ensure MTU has a reasonable default and upper-bound.</li> </ul>"},{"location":"changelogs/changelog_1x/#version-101","title":"Version 1.0.1","text":"<p>2013-05-06</p> <ul> <li>Correct casing of SSL in method names (<code>getSslSocketFactory</code>/<code>setSslSocketFactory</code>).</li> </ul>"},{"location":"changelogs/changelog_1x/#version-100","title":"Version 1.0.0","text":"<p>2013-05-06</p> <p>Initial release.</p>"},{"location":"changelogs/changelog_2x/","title":"OkHttp 2.x Change Log","text":""},{"location":"changelogs/changelog_2x/#version-275","title":"Version 2.7.5","text":"<p>2016-02-25</p> <ul> <li>Fix: Change the certificate pinner to always build full chains. This     prevents a potential crash when using certificate pinning with the Google     Play Services security provider.</li> </ul>"},{"location":"changelogs/changelog_2x/#version-274","title":"Version 2.7.4","text":"<p>2016-02-07</p> <ul> <li>Fix: Don\u2019t crash when finding the trust manager if the Play Services (GMS)     security provider is installed.</li> <li>Fix: The previous release introduced a performance regression on Android,     caused by looking up CA certificates. This is now fixed.</li> </ul>"},{"location":"changelogs/changelog_2x/#version-273","title":"Version 2.7.3","text":"<p>2016-02-06</p> <ul> <li>Fix: Permit the trusted CA root to be pinned by <code>CertificatePinner</code>.</li> </ul>"},{"location":"changelogs/changelog_2x/#version-272","title":"Version 2.7.2","text":"<p>2016-01-07</p> <ul> <li>Fix: Don\u2019t eagerly release stream allocations on cache hits. We might still     need them to handle redirects.</li> </ul>"},{"location":"changelogs/changelog_2x/#version-271","title":"Version 2.7.1","text":"<p>2016-01-01</p> <ul> <li>Fix: Don\u2019t do a health check on newly-created connections. This is     unnecessary work that could put the client in an inconsistent state if the     health check fails.</li> </ul>"},{"location":"changelogs/changelog_2x/#version-270","title":"Version 2.7.0","text":"<p>2015-12-13</p> <ul> <li>Rewritten connection management. Previously OkHttp\u2019s connection pool     managed both idle and active connections for HTTP/2, but only idle     connections for HTTP/1.x. With this update the connection pool manages both     idle and active connections for everything. OkHttp now detects and warns on     connections that were allocated but never released, and will enforce HTTP/2     stream limits. This update also fixes <code>Call.cancel()</code> to not do I/O on the     calling thread.</li> <li>Fix: Don\u2019t log gzipped data in the logging interceptor.</li> <li>Fix: Don\u2019t resolve DNS addresses when connecting through a SOCKS proxy.</li> <li>Fix: Drop the synthetic <code>OkHttp-Selected-Protocol</code> response header.</li> <li>Fix: Support 204 and 205 \u2018No Content\u2019 replies in the logging interceptor.</li> <li>New: Add <code>Call.isExecuted()</code>.</li> </ul>"},{"location":"changelogs/changelog_2x/#version-260","title":"Version 2.6.0","text":"<p>2015-11-22</p> <ul> <li> <p>New Logging Interceptor. The <code>logging-interceptor</code> subproject offers     simple request and response logging. It may be configured to log headers and     bodies for debugging. It requires this Maven dependency:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okhttp&lt;/groupId&gt;\n  &lt;artifactId&gt;logging-interceptor&lt;/artifactId&gt;\n  &lt;version&gt;2.6.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Configure basic logging like this:</p> <pre><code>HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();\nloggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BASIC);\nclient.networkInterceptors().add(loggingInterceptor);\n</code></pre> <p>Warning: Avoid <code>Level.HEADERS</code> and <code>Level.BODY</code> in production because they could leak passwords and other authentication credentials to insecure logs.</p> </li> <li> <p>WebSocket API now uses <code>RequestBody</code> and <code>ResponseBody</code> for messages.     This is a backwards-incompatible API change.</p> </li> <li> <p>The DNS service is now pluggable. In some situations this may be useful     to manually prioritize specific IP addresses.</p> </li> <li> <p>Fix: Don\u2019t throw when converting an <code>HttpUrl</code> to a <code>java.net.URI</code>.     Previously URLs with special characters like <code>|</code> and <code>[</code> would break when     subjected to URI\u2019s overly-strict validation.</p> </li> <li>Fix: Don\u2019t re-encode <code>+</code> as <code>%20</code> in encoded URL query strings. OkHttp     prefers <code>%20</code> when doing its own encoding, but will retain <code>+</code> when that is     provided.</li> <li>Fix: Enforce that callers call <code>WebSocket.close()</code> on IO errors. Error     handling in WebSockets is significantly improved.</li> <li>Fix: Don\u2019t use SPDY/3 style header concatenation for HTTP/2 request headers.     This could have corrupted requests where multiple headers had the same name,     as in cookies.</li> <li>Fix: Reject bad characters in the URL hostname. Previously characters like     <code>\\0</code> would cause a late crash when building the request.</li> <li>Fix: Allow interceptors to change the request method.</li> <li>Fix: Don\u2019t use the request\u2019s <code>User-Agent</code> or <code>Proxy-Authorization</code> when     connecting to an HTTPS server via an HTTP tunnel. The <code>Proxy-Authorization</code>     header was being leaked to the origin server.</li> <li>Fix: Digits may be used in a URL scheme.</li> <li>Fix: Improve connection timeout recovery.</li> <li>Fix: Recover from <code>getsockname</code> crashes impacting Android releases prior to     4.2.2.</li> <li>Fix: Drop partial support for HTTP/1.0. Previously OkHttp would send     <code>HTTP/1.0</code> on connections after seeing a response with <code>HTTP/1.0</code>. The fixed     behavior is consistent with Firefox and Chrome.</li> <li>Fix: Allow a body in <code>OPTIONS</code> requests.</li> <li>Fix: Don\u2019t percent-encode non-ASCII characters in URL fragments.</li> <li>Fix: Handle null fragments.</li> <li>Fix: Don\u2019t crash on interceptors that throw <code>IOException</code> before a     connection is attempted.</li> <li>New: Support WebDAV HTTP methods.</li> <li>New: Buffer WebSocket frames for better performance.</li> <li>New: Drop support for <code>TLS_DHE_DSS_WITH_AES_128_CBC_SHA</code>, our only remaining     DSS cipher suite. This is consistent with Firefox and Chrome which have also     dropped these cipher suite.</li> </ul>"},{"location":"changelogs/changelog_2x/#version-250","title":"Version 2.5.0","text":"<p>2015-08-25</p> <ul> <li> <p>Timeouts now default to 10 seconds. Previously we defaulted to never     timing out, and that was a lousy policy. If establishing a connection,     reading the next byte from a connection, or writing the next byte to a     connection takes more than 10 seconds to complete, you\u2019ll need to adjust     the timeouts manually.</p> </li> <li> <p>OkHttp now rejects request headers that contain invalid characters. This     includes potential security problems (newline characters) as well as simple     non-ASCII characters (including international characters and emoji).</p> </li> <li> <p>Call canceling is more reliable.  We had a bug where a socket being      connected wasn\u2019t being closed when the application used <code>Call.cancel()</code>.</p> </li> <li> <p>Changing a HttpUrl\u2019s scheme now tracks the default port. We had a bug     where changing a URL from <code>http</code> to <code>https</code> would leave it on port 80.</p> </li> <li> <p>Okio has been updated to 1.6.0. <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okio&lt;/groupId&gt;\n  &lt;artifactId&gt;okio&lt;/artifactId&gt;\n  &lt;version&gt;1.6.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> </li> <li> <p>New: <code>Cache.initialize()</code>. Call this on a background thread to eagerly     initialize the response cache.</p> </li> <li>New: Fold <code>MockWebServerRule</code> into <code>MockWebServer</code>. This makes it easier to     write JUnit tests with <code>MockWebServer</code>. The <code>MockWebServer</code> library now     depends on JUnit, though it continues to work with all testing frameworks.</li> <li>Fix: <code>FormEncodingBuilder</code> is now consistent with browsers in which     characters it escapes. Previously we weren\u2019t percent-encoding commas,     parens, and other characters.</li> <li>Fix: Relax <code>FormEncodingBuilder</code> to support building empty forms.</li> <li>Fix: Timeouts throw <code>SocketTimeoutException</code>, not <code>InterruptedIOException</code>.</li> <li>Fix: Change <code>MockWebServer</code> to use the same logic as OkHttp when determining     whether an HTTP request permits a body.</li> <li>Fix: <code>HttpUrl</code> now uses the canonical form for IPv6 addresses.</li> <li>Fix: Use <code>HttpUrl</code> internally.</li> <li>Fix: Recover from Android 4.2.2 EBADF crashes.</li> <li>Fix: Don\u2019t crash with an <code>IllegalStateException</code> if an HTTP/2 or SPDY     write fails, leaving the connection in an inconsistent state.</li> <li>Fix: Make sure the default user agent is ASCII.</li> </ul>"},{"location":"changelogs/changelog_2x/#version-240","title":"Version 2.4.0","text":"<p>2015-05-22</p> <ul> <li> <p>Forbid response bodies on HTTP 204 and 205 responses. Webservers that     return such malformed responses will now trigger a <code>ProtocolException</code> in     the client.</p> </li> <li> <p>WebSocketListener has incompatible changes. The <code>onOpen()</code> method is now     called on the reader thread, so implementations must return before further     websocket messages will be delivered. The <code>onFailure()</code> method now includes     an HTTP response if one was returned.</p> </li> </ul>"},{"location":"changelogs/changelog_2x/#version-240-rc1","title":"Version 2.4.0-RC1","text":"<p>2015-05-16</p> <ul> <li> <p>New HttpUrl API. It\u2019s like <code>java.net.URL</code> but good. Note that     <code>Request.Builder.url()</code> now throws <code>IllegalArgumentException</code> on malformed     URLs. (Previous releases would throw a <code>MalformedURLException</code> when calling     a malformed URL.)</p> </li> <li> <p>We\u2019ve improved connect failure recovery. We now differentiate between     setup, connecting, and connected and implement appropriate recovery rules     for each. This changes <code>Address</code> to no longer use <code>ConnectionSpec</code>. (This is     an incompatible API change).</p> </li> <li> <p><code>FormEncodingBuilder</code> now uses <code>%20</code> instead of <code>+</code> for encoded spaces.     Both are permitted-by-spec, but <code>%20</code> requires fewer special cases.</p> </li> <li> <p>Okio has been updated to 1.4.0. <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okio&lt;/groupId&gt;\n  &lt;artifactId&gt;okio&lt;/artifactId&gt;\n  &lt;version&gt;1.4.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> </li> <li> <p><code>Request.Builder</code> no longer accepts null if a request body is required.     Passing null will now fail for request methods that require a body. Instead     use an empty body such as this one:</p> <pre><code>    RequestBody.create(null, new byte[0]);\n</code></pre> </li> <li> <p><code>CertificatePinner</code> now supports wildcard hostnames. As always with    certificate pinning, you must be very careful to avoid bricking    your app. You\u2019ll need to pin both the top-level domain and the <code>*.</code> domain    for full coverage.</p> <pre><code> client.setCertificatePinner(new CertificatePinner.Builder()\n     .add(\"publicobject.com\",   \"sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=\")\n     .add(\"*.publicobject.com\", \"sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=\")\n     .add(\"publicobject.com\",   \"sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=\")\n     .add(\"*.publicobject.com\", \"sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=\")\n     .add(\"publicobject.com\",   \"sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=\")\n     .add(\"*.publicobject.com\", \"sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=\")\n     .add(\"publicobject.com\",   \"sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=\")\n     .add(\"*.publicobject.com\", \"sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=\")\n     .build());\n</code></pre> </li> <li> <p>Interceptors lists are now deep-copied by <code>OkHttpClient.clone()</code>.     Previously clones shared interceptors, which made it difficult to customize     the interceptors on a request-by-request basis.</p> </li> <li> <p>New: <code>Headers.toMultimap()</code>.</p> </li> <li>New: <code>RequestBody.create(MediaType, ByteString)</code>.</li> <li>New: <code>ConnectionSpec.isCompatible(SSLSocket)</code>.</li> <li>New: <code>Dispatcher.getQueuedCallCount()</code> and     <code>Dispatcher.getRunningCallCount()</code>. These can be useful in diagnostics.</li> <li>Fix: OkHttp no longer shares timeouts between pooled connections. This was     causing some applications to crash when connections were reused.</li> <li>Fix: <code>OkApacheClient</code> now allows an empty <code>PUT</code> and <code>POST</code>.</li> <li>Fix: Websockets no longer rebuffer socket streams.</li> <li>Fix: Websockets are now better at handling close frames.</li> <li>Fix: Content type matching is now case insensitive.</li> <li>Fix: <code>Vary</code> headers are not lost with <code>android.net.http.HttpResponseCache</code>.</li> <li>Fix: HTTP/2 wasn\u2019t enforcing stream timeouts when writing the underlying     connection. Now it is.</li> <li>Fix: Never return null on <code>call.proceed()</code>. This was a bug in call     cancelation.</li> <li>Fix: When a network interceptor mutates a request, that change is now     reflected in <code>Response.networkResponse()</code>.</li> <li>Fix: Badly-behaving caches now throw a checked exception instead of a     <code>NullPointerException</code>.</li> <li>Fix: Better handling of uncaught exceptions in MockWebServer with HTTP/2.</li> </ul>"},{"location":"changelogs/changelog_2x/#version-230","title":"Version 2.3.0","text":"<p>2015-03-16</p> <ul> <li> <p>HTTP/2 support. We\u2019ve done interop testing and haven\u2019t seen any     problems. HTTP/2 support has been a big effort and we\u2019re particularly     thankful to Adrian Cole who has helped us to reach this milestone.</p> </li> <li> <p>RC4 cipher suites are no longer supported by default. To connect to     old, obsolete servers relying on these cipher suites, you must create a     custom <code>ConnectionSpec</code>.</p> </li> <li> <p>Beta WebSockets support.. The <code>okhttp-ws</code> subproject offers a new     websockets client. Please try it out! When it\u2019s ready we intend to include     it with the core OkHttp library.</p> </li> <li> <p>Okio updated to 1.3.0.</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okio&lt;/groupId&gt;\n  &lt;artifactId&gt;okio&lt;/artifactId&gt;\n  &lt;version&gt;1.3.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> </li> <li> <p>Fix: improve parallelism of async requests. OkHttp\u2019s Dispatcher had a     misconfigured <code>ExecutorService</code> that limited the number of worker threads.     If you\u2019re using <code>Call.enqueue()</code> this update should significantly improve     request concurrency.</p> </li> <li> <p>Fix: Lazily initialize the response cache. This avoids strict mode     warnings when initializing OkHttp on Android\u2018s main thread.</p> </li> <li> <p>Fix: Disable ALPN on Android 4.4. That release of the feature was     unstable and prone to native crashes in the underlying OpenSSL code.</p> </li> <li>Fix: Don\u2019t send both <code>If-None-Match</code> and <code>If-Modified-Since</code> cache headers     when both are applicable.</li> <li>Fix: Fail early when a port is out of range.</li> <li>Fix: Offer <code>Content-Length</code> headers for multipart request bodies.</li> <li>Fix: Throw <code>UnknownServiceException</code> if a cleartext connection is attempted     when explicitly forbidden.</li> <li>Fix: Throw a <code>SSLPeerUnverifiedException</code> when host verification fails.</li> <li>Fix: MockWebServer explicitly closes sockets. (On some Android releases,     closing the input stream and output stream of a socket is not sufficient.</li> <li>Fix: Buffer outgoing HTTP/2 frames to limit how many outgoing frames are     created.</li> <li>Fix: Avoid crashing when cache writing fails due to a full disk.</li> <li>Fix: Improve caching of private responses.</li> <li>Fix: Update cache-by-default response codes.</li> <li>Fix: Reused <code>Request.Builder</code> instances no longer hold stale URL fields.</li> <li>New: ConnectionSpec can now be configured to use the SSL socket\u2019s default     cipher suites. To use, set the cipher suites to <code>null</code>.</li> <li>New: Support <code>DELETE</code> with a request body.</li> <li>New: <code>Headers.of(Map)</code> creates headers from a Map.</li> </ul>"},{"location":"changelogs/changelog_2x/#version-220","title":"Version 2.2.0","text":"<p>2014-12-30</p> <ul> <li> <p><code>RequestBody.contentLength()</code> now throws <code>IOException</code>.     This is a source-incompatible change. If you have code that calls     <code>RequestBody.contentLength()</code>, your compile will break with this     update. The change is binary-compatible, however: code compiled     for OkHttp 2.0 and 2.1 will continue to work with this update.</p> </li> <li> <p><code>COMPATIBLE_TLS</code> no longer supports SSLv3. In response to the     POODLE     vulnerability, OkHttp no longer offers SSLv3 when negotiation an     HTTPS connection. If you continue to need to connect to webservers     running SSLv3, you must manually configure your own <code>ConnectionSpec</code>.</p> </li> <li> <p>OkHttp now offers interceptors. Interceptors are a powerful mechanism     that can monitor, rewrite, and retry calls. The interceptors doc is a full     introduction to this new API.</p> </li> <li> <p>New: APIs to iterate and selectively clear the response cache.</p> </li> <li>New: Support for SOCKS proxies.</li> <li>New: Support for <code>TLS_FALLBACK_SCSV</code>.</li> <li>New: Update HTTP/2 support to <code>h2-16</code> and <code>hpack-10</code>.</li> <li>New: APIs to prevent retrying non-idempotent requests.</li> <li>Fix: Drop NPN support. Going forward we support ALPN only.</li> <li>Fix: The hostname verifier is now strict. This is consistent with the hostname     verifier in modern browsers.</li> <li>Fix: Improve <code>CONNECT</code> handling for misbehaving HTTP proxies.</li> <li>Fix: Don\u2019t retry requests that failed due to timeouts.</li> <li>Fix: Cache 302s and 308s that include appropriate response headers.</li> <li>Fix: Improve pooling of connections that use proxy selectors.</li> <li>Fix: Don\u2019t leak connections when using ALPN on the desktop.</li> <li>Fix: Update Jetty ALPN to <code>7.1.2.v20141202</code> (Java 7) and <code>8.1.2.v20141202</code> (Java 8).     This fixes a bug in resumed TLS sessions where the wrong protocol could be     selected.</li> <li>Fix: Don\u2019t crash in SPDY and HTTP/2 when disconnecting before connecting.</li> <li>Fix: Avoid a reverse DNS-lookup for a numeric proxy address</li> <li>Fix: Resurrect http/2 frame logging.</li> <li>Fix: Limit to 20 authorization attempts.</li> </ul>"},{"location":"changelogs/changelog_2x/#version-210","title":"Version 2.1.0","text":"<p>2014-11-11</p> <ul> <li>New: Typesafe APIs for interacting with cipher suites and TLS versions.</li> <li>Fix: Don\u2019t crash when mixing authorization challenges with upload retries.</li> </ul>"},{"location":"changelogs/changelog_2x/#version-210-rc1","title":"Version 2.1.0-RC1","text":"<p>2014-11-04</p> <ul> <li> <p>OkHttp now caches private responses. We\u2019ve changed from a shared cache     to a private cache, and will now store responses that use an <code>Authorization</code>     header. This means OkHttp\u2019s cache shouldn\u2019t be used on middleboxes that sit     between user agents and the origin server.</p> </li> <li> <p>TLS configuration updated. OkHttp now explicitly enables TLSv1.2,     TLSv1.1 and TLSv1.0 where they are supported. It will continue to perform     only one fallback, to SSLv3. Applications can now configure this with the     <code>ConnectionSpec</code> class.</p> <p>To disable TLS fallback:</p> <pre><code>client.setConnectionSpecs(Arrays.asList(\n    ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));\n</code></pre> <p>To disable cleartext connections, permitting <code>https</code> URLs only:</p> <pre><code>client.setConnectionSpecs(Arrays.asList(\n    ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));\n</code></pre> </li> <li> <p>New cipher suites. Please confirm that your webservers are reachable     with this limited set of cipher suites.</p> <pre><code>                                         Android\nName                                     Version\n\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256  5.0\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256    5.0\nTLS_DHE_RSA_WITH_AES_128_GCM_SHA256      5.0\nTLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA     4.0\nTLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA     4.0\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA       4.0\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA       4.0\nTLS_ECDHE_ECDSA_WITH_RC4_128_SHA         4.0\nTLS_ECDHE_RSA_WITH_RC4_128_SHA           4.0\nTLS_DHE_RSA_WITH_AES_128_CBC_SHA         2.3\nTLS_DHE_DSS_WITH_AES_128_CBC_SHA         2.3\nTLS_DHE_RSA_WITH_AES_256_CBC_SHA         2.3\nTLS_RSA_WITH_AES_128_GCM_SHA256          5.0\nTLS_RSA_WITH_AES_128_CBC_SHA             2.3\nTLS_RSA_WITH_AES_256_CBC_SHA             2.3\nSSL_RSA_WITH_3DES_EDE_CBC_SHA            2.3  (Deprecated in 5.0)\nSSL_RSA_WITH_RC4_128_SHA                 2.3\nSSL_RSA_WITH_RC4_128_MD5                 2.3  (Deprecated in 5.0)\n</code></pre> </li> <li> <p>Okio updated to 1.0.1.</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okio&lt;/groupId&gt;\n  &lt;artifactId&gt;okio&lt;/artifactId&gt;\n  &lt;version&gt;1.0.1&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> </li> <li> <p>New APIs to permit easy certificate pinning. Be warned, certificate     pinning is dangerous and could prevent your application from trusting your     server!</p> </li> <li> <p>Cache improvements. This release fixes some severe cache problems     including a bug where the cache could be corrupted upon certain access     patterns. We also fixed a bug where the cache was being cleared due to a     corrupted journal. We\u2019ve added APIs to configure a request\u2019s <code>Cache-Control</code>     headers, and to manually clear the cache.</p> </li> <li> <p>Request cancellation fixes. This update fixes a bug where synchronous     requests couldn\u2019t be canceled by tag. This update avoids crashing when     <code>onResponse()</code> throws an <code>IOException</code>. That failure will now be logged     instead of notifying the thread\u2019s uncaught exception handler. We\u2019ve added a     new API, <code>Call.isCanceled()</code> to check if a call has been canceled.</p> </li> <li> <p>New: Update <code>MultipartBuilder</code> to support content length.</p> </li> <li>New: Make it possible to mock <code>OkHttpClient</code> and <code>Call</code>.</li> <li>New: Update to h2-14 and hpack-9.</li> <li>New: OkHttp includes a user-agent by default, like <code>okhttp/2.1.0-RC1</code>.</li> <li>Fix: Handle response code <code>308 Permanent Redirect</code>.</li> <li>Fix: Don\u2019t skip the callback if a call is canceled.</li> <li>Fix: Permit hostnames with underscores.</li> <li>Fix: Permit overriding the content-type in <code>OkApacheClient</code>.</li> <li>Fix: Use the socket factory for direct connections.</li> <li>Fix: Honor <code>OkUrlFactory</code> APIs that disable redirects.</li> <li>Fix: Don\u2019t crash on concurrent modification of <code>SPDY</code> SPDY settings.</li> </ul>"},{"location":"changelogs/changelog_2x/#version-200","title":"Version 2.0.0","text":"<p>This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice on upgrading from 1.x to 2.x.</p> <p>2014-06-21</p> <ul> <li>API Change: Use <code>IOException</code> in <code>Callback.onFailure()</code>. This is     a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which     used <code>Throwable</code>.</li> <li>Fix: Fixed a caching bug where we weren\u2019t storing rewritten request headers     like <code>Accept-Encoding</code>.</li> <li>Fix: Fixed bugs in handling the SPDY window size. This was stalling certain     large downloads</li> <li>Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.)</li> </ul>"},{"location":"changelogs/changelog_2x/#version-200-rc2","title":"Version 2.0.0-RC2","text":"<p>2014-06-11</p> <p>This update fixes problems in 2.0.0-RC1. Read the 2.0.0-RC1 changes for advice on upgrading from 1.x to 2.x.</p> <ul> <li>Fix: Don\u2019t leak connections! There was a regression in 2.0.0-RC1 where     connections were neither closed nor pooled.</li> <li>Fix: Revert builder-style return types from OkHttpClient\u2019s timeout methods     for binary compatibility with OkHttp 1.x.</li> <li>Fix: Don\u2019t skip client stream 1 on SPDY/3.1. This fixes SPDY connectivity to     <code>https://google.com</code>, which doesn\u2019t follow the SPDY/3.1 spec!</li> <li>Fix: Always configure NPN headers. This fixes connectivity to     <code>https://facebook.com</code> when SPDY and HTTP/2 are both disabled. Otherwise an     unexpected NPN response is received and OkHttp crashes.</li> <li>Fix: Write continuation frames when HPACK data is larger than 16383 bytes.</li> <li>Fix: Don\u2019t drop uncaught exceptions thrown in async calls.</li> <li>Fix: Throw an exception eagerly when a request body is not legal. Previously     we ignored the problem at request-building time, only to crash later with a     <code>NullPointerException</code>.</li> <li>Fix: Include a backwards-compatible <code>OkHttp-Response-Source</code> header with     <code>OkUrlFactory</code>responses.</li> <li>Fix: Don\u2019t include a default User-Agent header in requests made with the Call     API. Requests made with OkUrlFactory will continue to have a default user     agent.</li> <li> <p>New: Guava-like API to create headers:</p> <pre><code>Headers headers = Headers.of(name1, value1, name2, value2, ...).\n</code></pre> </li> <li> <p>New: Make the content-type header optional for request bodies.</p> </li> <li>New: <code>Response.isSuccessful()</code> is a convenient API to check response codes.</li> <li>New: The response body can now be read outside of the callback. Response     bodies must always be closed, otherwise they will leak connections!</li> <li>New: APIs to create multipart request bodies (<code>MultipartBuilder</code>) and form     encoding bodies (<code>FormEncodingBuilder</code>).</li> </ul>"},{"location":"changelogs/changelog_2x/#version-200-rc1","title":"Version 2.0.0-RC1","text":"<p>2014-05-23</p> <p>OkHttp 2 is designed around a new API that is true to HTTP, with classes for requests, responses, headers, and calls. It uses modern Java patterns like immutability and chained builders. The API now offers asynchronous callbacks in addition to synchronous blocking calls.</p>"},{"location":"changelogs/changelog_2x/#api-changes","title":"API Changes","text":"<ul> <li> <p>New Request and Response types, each with their own builder. There\u2019s also     a <code>RequestBody</code> class to write the request body to the network and a     <code>ResponseBody</code> to read the response body from the network. The standalone     <code>Headers</code> class offers full access to the HTTP headers.</p> </li> <li> <p>Okio dependency added. OkHttp now depends on     Okio, an I/O library that makes it easier     to access, store and process data. Using this library internally makes OkHttp     faster while consuming less memory. You can write a <code>RequestBody</code> as an Okio     <code>BufferedSink</code> and a <code>ResponseBody</code> as an Okio <code>BufferedSource</code>. Standard     <code>InputStream</code> and <code>OutputStream</code> access is also available.</p> </li> <li> <p>New Call and Callback types execute requests and receive their     responses. Both types of calls can be canceled via the <code>Call</code> or the     <code>OkHttpClient</code>.</p> </li> <li> <p>URLConnection support has moved to the okhttp-urlconnection module.     If you\u2019re upgrading from 1.x, this change will impact you. You will need to     add the <code>okhttp-urlconnection</code> module to your project and use the     <code>OkUrlFactory</code> to create new instances of <code>HttpURLConnection</code>:</p> <pre><code>// OkHttp 1.x:\nHttpURLConnection connection = client.open(url);\n\n// OkHttp 2.x:\nHttpURLConnection connection = new OkUrlFactory(client).open(url);\n</code></pre> </li> <li> <p>Custom caches are no longer supported. In OkHttp 1.x it was possible to     define your own response cache with the <code>java.net.ResponseCache</code> and OkHttp\u2019s     <code>OkResponseCache</code> interfaces. Both of these APIs have been dropped. In     OkHttp 2 the built-in disk cache is the only supported response cache.</p> </li> <li> <p>HttpResponseCache has been renamed to Cache. Install it with     <code>OkHttpClient.setCache(...)</code> instead of <code>OkHttpClient.setResponseCache(...)</code>.</p> </li> <li> <p>OkAuthenticator has been replaced with Authenticator. This new     authenticator has access to the full incoming response and can respond with     whichever followup request is appropriate. The <code>Challenge</code> class is now a     top-level class and <code>Credential</code> is replaced with a utility class called     <code>Credentials</code>.</p> </li> <li> <p>OkHttpClient.getFollowProtocolRedirects() renamed to     getFollowSslRedirects(). We reserve the word protocol for the HTTP     version being used (HTTP/1.1, HTTP/2). The old name of this method was     misleading; it was always used to configure redirects between <code>https://</code> and     <code>http://</code> schemes.</p> </li> <li> <p>RouteDatabase is no longer public API. OkHttp continues to track which     routes have failed but this is no exposed in the API.</p> </li> <li> <p>ResponseSource is gone. This enum exposed whether a response came from     the cache, network, or both. OkHttp 2 offers more detail with raw access to     the cache and network responses in the new <code>Response</code> class.</p> </li> <li> <p>TunnelRequest is gone. It specified how to connect to an HTTP proxy.     OkHttp 2 uses the new <code>Request</code> class for this.</p> </li> <li> <p>Dispatcher is a new class that manages the queue of asynchronous calls. It     implements limits on total in-flight calls and in-flight calls per host.</p> </li> </ul>"},{"location":"changelogs/changelog_2x/#implementation-changes","title":"Implementation changes","text":"<ul> <li>Support Android <code>TrafficStats</code> socket tagging.</li> <li>Drop authentication headers on redirect.</li> <li>Added support for compressed data frames.</li> <li>Process push promise callbacks in order.</li> <li>Update to http/2 draft 12.</li> <li>Update to HPACK draft 07.</li> <li>Add ALPN support. Maven will use ALPN on OpenJDK 8.</li> <li>Update NPN dependency to target <code>jdk7u60-b13</code> and <code>Oracle jdk7u55-b13</code>.</li> <li>Ensure SPDY variants support zero-length DELETE and POST.</li> <li>Prevent leaking a cache item\u2019s InputStreams when metadata read fails.</li> <li>Use a string to identify TLS versions in routes.</li> <li>Add frame logger for HTTP/2.</li> <li>Replacing <code>httpMinorVersion</code> with <code>Protocol</code>. Expose HTTP/1.0 as a potential protocol.</li> <li>Use <code>Protocol</code> to describe framing.</li> <li>Implement write timeouts for HTTP/1.1 streams.</li> <li>Avoid use of SPDY stream ID 1, as that\u2019s typically used for UPGRADE.</li> <li>Support OAuth in <code>Authenticator</code>.</li> <li>Permit a dangling semicolon in media type parsing.</li> </ul>"},{"location":"changelogs/changelog_2x/#version-1x","title":"Version 1.x","text":"<p>Change log</p>"},{"location":"changelogs/changelog_3x/","title":"OkHttp 3.x Change Log","text":""},{"location":"changelogs/changelog_3x/#version-3149","title":"Version 3.14.9","text":"<p>2020-05-17</p> <ul> <li>Fix: Don\u2019t crash when running as a plugin in Android Studio Canary 4.1. To enable     platform-specific TLS features OkHttp must detect whether it\u2019s running in a JVM or in Android.     The upcoming Android Studio runs in a JVM but has classes from Android and that confused OkHttp!</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3148","title":"Version 3.14.8","text":"<p>2020-04-28</p> <ul> <li>Fix: Don\u2019t crash on Java 8u252 which introduces an API previously found only on Java 9 and     above. See Jetty\u2019s overview of the API change and its consequences.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3147","title":"Version 3.14.7","text":"<p>2020-02-24</p> <ul> <li>Fix: Don\u2019t crash on Android 11 due to use of restricted methods. This prevents a crash with the     exception, \u201cExpected Android API level 21+ but was 29\u201d.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3146","title":"Version 3.14.6","text":"<p>2020-01-11</p> <ul> <li>Fix: Don\u2019t crash if the connection is closed when sending a degraded ping. This fixes a     regression that was introduced in OkHttp 3.14.5.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3145","title":"Version 3.14.5","text":"<p>2020-01-03</p> <ul> <li>Fix: Degrade HTTP/2 connections after a timeout. When an HTTP/2 stream times out it may impact     the stream only or the entire connection. With this fix OkHttp will now send HTTP/2 pings after     a stream timeout to determine whether the connection should remain eligible for pooling.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3144","title":"Version 3.14.4","text":"<p>2019-09-29</p> <ul> <li>Fix: Cancel calls that fail due to unexpected exceptions. We had a bug where an enqueued call     would never call back if it crashed with an unchecked throwable, such as a     <code>NullPointerException</code> or <code>OutOfMemoryError</code>. We now call <code>Callback.onFailure()</code> with an     <code>IOException</code> that reports the call as canceled. The triggering exception is still delivered to     the thread\u2019s <code>UncaughtExceptionHandler</code>.</li> <li>Fix: Don\u2019t evict incomplete entries when iterating the cache. We had a bug where iterating     <code>Cache.urls()</code> would prevent in-flight entries from being written.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3143","title":"Version 3.14.3","text":"<p>2019-09-10</p> <ul> <li> <p>Fix: Don\u2019t lose HTTP/2 flow control bytes when incoming data races with a stream close. If this     happened enough then eventually the connection would stall.</p> </li> <li> <p>Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we     could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to     fail the call.</p> </li> <li> <p>Fix: Recover gracefully when a coalesced connection immediately goes unhealthy.</p> </li> </ul>"},{"location":"changelogs/changelog_3x/#version-3142","title":"Version 3.14.2","text":"<p>2019-05-19</p> <ul> <li> <p>Fix: Lock in a route when recovering from an HTTP/2 connection error. We had a bug where two     calls that failed at the same time could cause OkHttp to crash with a <code>NoSuchElementException</code>     instead of the expected <code>IOException</code>.</p> </li> <li> <p>Fix: Don\u2019t crash with a <code>NullPointerException</code> when formatting an error message describing a     truncated response from an HTTPS proxy.</p> </li> </ul>"},{"location":"changelogs/changelog_3x/#version-3141","title":"Version 3.14.1","text":"<p>2019-04-10</p> <ul> <li> <p>Fix: Don\u2019t crash when an interceptor retries when there are no more routes. This was an     edge-case regression introduced with the events cleanup in 3.14.0.</p> </li> <li> <p>Fix: Provide actionable advice when the exchange is non-null. Prior to 3.14, OkHttp would     silently leak connections when an interceptor retries without closing the response body. With     3.14 we detect this problem but the exception was not helpful.</p> </li> </ul>"},{"location":"changelogs/changelog_3x/#version-3140","title":"Version 3.14.0","text":"<p>2019-03-14</p> <ul> <li> <p>This release deletes the long-deprecated <code>OkUrlFactory</code> and <code>OkApacheClient</code> APIs. These     facades hide OkHttp\u2019s implementation behind another client\u2019s API. If you still need this please     copy and paste ObsoleteUrlFactory.java or     ObsoleteApacheClient.java into your project.</p> </li> <li> <p>OkHttp now supports duplex calls over HTTP/2. With normal HTTP calls the request must finish     before the response starts. With duplex, request and response bodies are transmitted     simultaneously. This can be used to implement interactive conversations within a single HTTP     call.</p> <p>Create duplex calls by overriding the new <code>RequestBody.isDuplex()</code> method to return true. This simple option dramatically changes the behavior of the request body and of the entire call.</p> <p>The <code>RequestBody.writeTo()</code> method may now retain a reference to the provided sink and hand it off to another thread to write to it after <code>writeTo</code> returns.</p> <p>The <code>EventListener</code> may now see requests and responses interleaved in ways not previously permitted. For example, a listener may receive <code>responseHeadersStart()</code> followed by <code>requestBodyEnd()</code>, both on the same call. Such events may be triggered by different threads even for a single call.</p> <p>Interceptors that rewrite or replace the request body may now inadvertently interfere with duplex request bodies. Such interceptors should check <code>RequestBody.isDuplex()</code> and avoid accessing the request body when it is.</p> <p>Duplex calls require HTTP/2. If HTTP/1 is established instead the duplex call will fail. The most common use of duplex calls is gRPC.</p> </li> <li> <p>New: Prevent OkHttp from retransmitting a request body by overriding <code>RequestBody.isOneShot()</code>.     This is most useful when writing the request body is destructive.</p> </li> <li> <p>New: We\u2019ve added <code>requestFailed()</code> and <code>responseFailed()</code> methods to <code>EventListener</code>. These     are called instead of <code>requestBodyEnd()</code> and <code>responseBodyEnd()</code> in some failure situations.     They may also be fired in cases where no event was published previously. In this release we did     an internal rewrite of our event code to fix problems where events were lost or unbalanced.</p> </li> <li> <p>Fix: Don\u2019t leak a connection when a call is canceled immediately preceding the <code>onFailure()</code>     callback.</p> </li> <li> <p>Fix: Apply call timeouts when connecting duplex calls, web sockets, and server-sent events.     Once the streams are established no further timeout is enforced.</p> </li> <li> <p>Fix: Retain the <code>Route</code> when a connection is reused on a redirect or other follow-up. This was     causing some <code>Authenticator</code> calls to see a null route when non-null was expected.</p> </li> <li> <p>Fix: Use the correct key size in the name of <code>TLS_AES_128_CCM_8_SHA256</code> which is a TLS 1.3     cipher suite. We accidentally specified a key size of 256, preventing that cipher suite from     being selected for any TLS handshakes. We didn\u2019t notice because this cipher suite isn\u2019t     supported on Android, Java, or Conscrypt.</p> <p>We removed this cipher suite and <code>TLS_AES_128_CCM_SHA256</code> from the restricted, modern, and compatible sets of cipher suites. These two cipher suites aren\u2019t enabled by default in either Firefox or Chrome.</p> <p>See our TLS Configuration History tracker for a log of all changes to OkHttp\u2019s default TLS options.</p> </li> <li> <p>New: Upgrade to Conscrypt 2.0.0. OkHttp works with other versions of Conscrypt but this is the     version we\u2019re testing against.</p> <pre><code>implementation(\"org.conscrypt:conscrypt-openjdk-uber:2.0.0\")\n</code></pre> </li> <li> <p>New: Update the embedded public suffixes list.</p> </li> </ul>"},{"location":"changelogs/changelog_3x/#version-3131","title":"Version 3.13.1","text":"<p>2019-02-05</p> <ul> <li>Fix: Don\u2019t crash when using a custom <code>X509TrustManager</code> or <code>SSLSocket</code> on Android. When we     removed obsolete code for Android 4.4 we inadvertently also removed support for custom     subclasses. We\u2019ve restored that support!</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3130","title":"Version 3.13.0","text":"<p>2019-02-04</p> <ul> <li> <p>This release bumps our minimum requirements to Java 8+ or Android 5+. Cutting off old     devices is a serious change and we don\u2019t do it lightly! This post explains     why we\u2019re doing this and how to upgrade.</p> <p>The OkHttp 3.12.x branch will be our long-term branch for Android 2.3+ (API level 9+) and Java 7+. These platforms lack support for TLS 1.2 and should not be used. But because upgrading is difficult we will backport critical fixes to the 3.12.x branch through December 31, 2021. (This commitment was originally through December 31, 2020; we have since extended it.)</p> </li> <li> <p>TLSv1 and TLSv1.1 are no longer enabled by default. Major web browsers are working towards     removing these versions altogether in early 2020. If your servers aren\u2019t ready yet you can     configure OkHttp 3.13 to allow TLSv1 and TLSv1.1 connections:</p> <pre><code>OkHttpClient client = new OkHttpClient.Builder()\n    .connectionSpecs(Arrays.asList(ConnectionSpec.COMPATIBLE_TLS))\n    .build();\n</code></pre> </li> <li> <p>New: You can now access HTTP trailers with <code>Response.trailers()</code>. This method may only be called     after the entire HTTP response body has been read.</p> </li> <li> <p>New: Upgrade to Okio 1.17.3. If you\u2019re on Kotlin-friendly Okio 2.x this release requires 2.2.2     or newer.</p> <pre><code>implementation(\"com.squareup.okio:okio:1.17.3\")\n</code></pre> </li> <li> <p>Fix: Don\u2019t miss cancels when sending HTTP/2 request headers.</p> </li> <li>Fix: Don\u2019t miss whole operation timeouts when calls redirect.</li> <li>Fix: Don\u2019t leak connections if web sockets have malformed responses or if <code>onOpen()</code> throws.</li> <li>Fix: Don\u2019t retry when request bodies fail due to <code>FileNotFoundException</code>.</li> <li>Fix: Don\u2019t crash when URLs have IPv4-mapped IPv6 addresses.</li> <li>Fix: Don\u2019t crash when building <code>HandshakeCertificates</code> on Android API 28.</li> <li>Fix: Permit multipart file names to contain non-ASCII characters.</li> <li>New: API to get MockWebServer\u2019s dispatcher.</li> <li>New: API to access headers as <code>java.time.Instant</code>.</li> <li>New: Fail fast if a <code>SSLSocketFactory</code> is used as a <code>SocketFactory</code>.</li> <li>New: Log the TLS handshake in <code>LoggingEventListener</code>.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-31213","title":"Version 3.12.13","text":"<p>2021-01-30</p> <ul> <li>Fix: Work around a crash in Android 10 and 11 that may be triggered when two threads     concurrently close an SSL socket. This would have appeared in crash logs as     <code>NullPointerException: bio == null</code>.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-31212","title":"Version 3.12.12","text":"<p>2020-05-17</p> <ul> <li>Fix: Don\u2019t crash when running as a plugin in Android Studio Canary 4.1. To enable     platform-specific TLS features OkHttp must detect whether it\u2019s running in a JVM or in Android.     The upcoming Android Studio runs in a JVM but has classes from Android and that confused OkHttp!</li> </ul>"},{"location":"changelogs/changelog_3x/#version-31211","title":"Version 3.12.11","text":"<p>2020-04-28</p> <ul> <li>Fix: Don\u2019t crash on Java 8u252 which introduces an API previously found only on Java 9 and     above. See Jetty\u2019s overview of the API change and its consequences.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-31210","title":"Version 3.12.10","text":"<p>2020-02-29</p> <ul> <li>Fix: Don\u2019t crash on Android 4.1 when detecting methods that became restricted in Android 11.     Supporting a full decade of Android releases on our 3.12.x branch is tricky!</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3129","title":"Version 3.12.9","text":"<p>2020-02-24</p> <ul> <li>Fix: Don\u2019t crash on Android 11 due to use of restricted methods. This prevents a crash with the     exception, \u201cExpected Android API level 21+ but was 29\u201d.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3128","title":"Version 3.12.8","text":"<p>2020-01-11</p> <ul> <li>Fix: Don\u2019t crash if the connection is closed when sending a degraded ping. This fixes a     regression that was introduced in OkHttp 3.12.7.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3127","title":"Version 3.12.7","text":"<p>2020-01-03</p> <ul> <li>Fix: Degrade HTTP/2 connections after a timeout. When an HTTP/2 stream times out it may impact     the stream only or the entire connection. With this fix OkHttp will now send HTTP/2 pings after     a stream timeout to determine whether the connection should remain eligible for pooling.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3126","title":"Version 3.12.6","text":"<p>2019-09-29</p> <ul> <li>Fix: Cancel calls that fail due to unexpected exceptions. We had a bug where an enqueued call     would never call back if it crashed with an unchecked throwable, such as a     <code>NullPointerException</code> or <code>OutOfMemoryError</code>. We now call <code>Callback.onFailure()</code> with an     <code>IOException</code> that reports the call as canceled. The triggering exception is still delivered to     the thread\u2019s <code>UncaughtExceptionHandler</code>.</li> <li>Fix: Don\u2019t evict incomplete entries when iterating the cache. We had a bug where iterating     <code>Cache.urls()</code> would prevent in-flight entries from being written.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3125","title":"Version 3.12.5","text":"<p>2019-09-10</p> <ul> <li> <p>Fix: Don\u2019t lose HTTP/2 flow control bytes when incoming data races with a stream close. If this     happened enough then eventually the connection would stall.</p> </li> <li> <p>Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we     could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to     fail the call.</p> </li> </ul>"},{"location":"changelogs/changelog_3x/#version-3124","title":"Version 3.12.4","text":"<p>2019-09-04</p> <ul> <li>Fix: Don\u2019t crash looking up an absent class on certain buggy Android 4.x devices.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3123","title":"Version 3.12.3","text":"<p>2019-05-07</p> <ul> <li>Fix: Permit multipart file names to contain non-ASCII characters.</li> <li>Fix: Retain the <code>Route</code> when a connection is reused on a redirect or other follow-up. This was     causing some <code>Authenticator</code> calls to see a null route when non-null was expected.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3122","title":"Version 3.12.2","text":"<p>2019-03-14</p> <ul> <li>Fix: Don\u2019t crash if the HTTPS server returns no certificates in the TLS handshake.</li> <li>Fix: Don\u2019t leak a connection when a call is canceled immediately preceding the <code>onFailure()</code>     callback.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3121","title":"Version 3.12.1","text":"<p>2018-12-23</p> <ul> <li>Fix: Remove overlapping <code>package-info.java</code>. This caused issues with some build tools.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3120","title":"Version 3.12.0","text":"<p>2018-11-16</p> <ul> <li> <p>OkHttp now supports TLS 1.3. This requires either Conscrypt or Java 11+.</p> </li> <li> <p>Proxy authenticators are now asked for preemptive authentication. OkHttp will now request     authentication credentials before creating TLS tunnels through HTTP proxies (HTTP <code>CONNECT</code>).     Authenticators should identify preemptive authentications by the presence of a challenge whose     scheme is \u201cOkHttp-Preemptive\u201d.</p> </li> <li> <p>OkHttp now offers full-operation timeouts. This sets a limit on how long the entire call may     take and covers resolving DNS, connecting, writing the request body, server processing, and     reading the full response body. If a call requires redirects or retries all must complete within     one timeout period.</p> <p>Use <code>OkHttpClient.Builder.callTimeout()</code> to specify the default duration and <code>Call.timeout()</code> to specify the timeout of an individual call.</p> </li> <li> <p>New: Return values and fields are now non-null unless otherwise annotated.</p> </li> <li>New: <code>LoggingEventListener</code> makes it easy to get basic visibility into a call\u2019s performance.     This class is in the <code>logging-interceptor</code> artifact.</li> <li>New: <code>Headers.Builder.addUnsafeNonAscii()</code> allows non-ASCII values to be added without an     immediate exception.</li> <li>New: Headers can be redacted in <code>HttpLoggingInterceptor</code>.</li> <li>New: <code>Headers.Builder</code> now accepts dates.</li> <li>New: OkHttp now accepts <code>java.time.Duration</code> for timeouts on Java 8+ and Android 26+.</li> <li>New: <code>Challenge</code> includes all authentication parameters.</li> <li> <p>New: Upgrade to BouncyCastle 1.60, Conscrypt 1.4.0, and Okio 1.15.0. We don\u2019t yet require     Kotlin-friendly Okio 2.x but OkHttp works fine with that series.</p> <pre><code>implementation(\"org.bouncycastle:bcprov-jdk15on:1.60\")\nimplementation(\"org.conscrypt:conscrypt-openjdk-uber:1.4.0\")\nimplementation(\"com.squareup.okio:okio:1.15.0\")\n</code></pre> </li> <li> <p>Fix: Handle dispatcher executor shutdowns gracefully. When there aren\u2019t any threads to carry a     call its callback now gets a <code>RejectedExecutionException</code>.</p> </li> <li>Fix: Don\u2019t permanently cache responses with <code>Cache-Control: immutable</code>. We misunderstood the     original <code>immutable</code> proposal!</li> <li>Fix: Change <code>Authenticator</code>\u2019s <code>Route</code> parameter to be nullable. This was marked as non-null but     could be called with null in some cases.</li> <li>Fix: Don\u2019t create malformed URLs when <code>MockWebServer</code> is reached via an IPv6 address.</li> <li>Fix: Don\u2019t crash if the system default authenticator is null.</li> <li>Fix: Don\u2019t crash generating elliptic curve certificates on Android.</li> <li>Fix: Don\u2019t crash doing platform detection on RoboVM.</li> <li>Fix: Don\u2019t leak socket connections when web socket upgrades fail.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3110","title":"Version 3.11.0","text":"<p>2018-07-12</p> <ul> <li> <p>OkHttp\u2019s new okhttp-tls submodule tames HTTPS and TLS.</p> <p><code>HeldCertificate</code> is a TLS certificate and its private key. Generate a certificate with its builder then use it to sign another certificate or perform a TLS handshake. The <code>certificatePem()</code> method encodes the certificate in the familiar PEM format (<code>--- BEGIN CERTIFICATE ---</code>); the <code>privateKeyPkcs8Pem()</code> does likewise for the private key.</p> <p><code>HandshakeCertificates</code> holds the TLS certificates required for a TLS handshake. On the server it keeps your <code>HeldCertificate</code> and its chain. On the client it keeps the root certificates that are trusted to sign a server\u2019s certificate chain. <code>HandshakeCertificates</code> also works with mutual TLS where these roles are reversed.</p> <p>These classes make it possible to enable HTTPS in MockWebServer in just a few lines of code.</p> </li> <li> <p>OkHttp now supports prior knowledge cleartext HTTP/2. Enable this by setting     <code>Protocol.H2_PRIOR_KNOWLEDGE</code> as the lone protocol on an <code>OkHttpClient.Builder</code>. This mode     only supports <code>http:</code> URLs and is best suited in closed environments where HTTPS is     inappropriate.</p> </li> <li> <p>New: <code>HttpUrl.get(String)</code> is an alternative to <code>HttpUrl.parse(String)</code> that throws an exception     when the URL is malformed instead of returning null. Use this to avoid checking for null in     situations where the input is known to be well-formed. We\u2019ve also added <code>MediaType.get(String)</code>     which is an exception-throwing alternative to <code>MediaType.parse(String)</code>.</p> </li> <li>New: The <code>EventListener</code> API previewed in OkHttp 3.9 has graduated to a stable API. Use this     interface to track metrics and monitor HTTP requests\u2019 size and duration.</li> <li>New: <code>okhttp-dnsoverhttps</code> is an experimental API for doing DNS queries over HTTPS. Using HTTPS     for DNS offers better security and potentially better performance. This feature is a preview:     the API is subject to change.</li> <li>New: <code>okhttp-sse</code> is an early preview of Server-Sent Events (SSE). This feature is incomplete     and is only suitable for experimental use.</li> <li>New: MockWebServer now supports client authentication (mutual TLS). Call <code>requestClientAuth()</code>     to permit an optional client certificate or <code>requireClientAuth()</code> to require one.</li> <li>New: <code>RecordedRequest.getHandshake()</code> returns the HTTPS handshake of a request sent to     <code>MockWebServer</code>.</li> <li>Fix: Honor the <code>MockResponse</code> header delay in MockWebServer.</li> <li>Fix: Don\u2019t release HTTP/2 connections that have multiple canceled calls. We had a bug where     canceling calls would cause the shared HTTP/2 connection to be unnecessarily released. This     harmed connection reuse.</li> <li>Fix: Ensure canceled and discarded HTTP/2 data is not permanently counted against the limited     flow control window. We had a few bugs where window size accounting was broken when streams     were canceled or reset.</li> <li>Fix: Recover gracefully if the TLS session returns an unexpected version (<code>NONE</code>) or cipher     suite (<code>SSL_NULL_WITH_NULL_NULL</code>).</li> <li>Fix: Don\u2019t change Conscrypt configuration globally. We migrated from a process-wide setting to     configuring only OkHttp\u2019s TLS sockets.</li> <li>Fix: Prefer TLSv1.2 where it is available. On certain older platforms it is necessary to opt-in     to TLSv1.2.</li> <li>New: <code>Request.tag()</code> permits multiple tags. Use a <code>Class&lt;?&gt;</code> as a key to identify tags. Note     that <code>tag()</code> now returns null if the request has no tag. Previously this would return the     request itself.</li> <li>New: <code>Headers.Builder.addAll(Headers)</code>.</li> <li>New: <code>ResponseBody.create(MediaType, ByteString)</code>.</li> <li>New: Embed R8/ProGuard rules in the jar. These will be applied automatically by R8.</li> <li>Fix: Release the connection if <code>Authenticator</code> throws an exception.</li> <li>Fix: Change the declaration of <code>OkHttpClient.cache()</code> to return a <code>@Nullable Cache</code>. The return     value has always been nullable but it wasn\u2019t declared properly.</li> <li>Fix: Reverse suppression of connect exceptions. When both a call and its retry fail, we now     throw the initial exception which is most likely to be actionable.</li> <li>Fix: Retain interrupted state when throwing <code>InterruptedIOException</code>. A single interrupt should     now be sufficient to break out an in-flight OkHttp call.</li> <li>Fix: Don\u2019t drop a call to <code>EventListener.callEnd()</code> when the response body is consumed inside an     interceptor.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-3100","title":"Version 3.10.0","text":"<p>2018-02-24</p> <ul> <li> <p>The pingInterval() feature now aggressively checks connectivity for web     sockets and HTTP/2 connections.</p> <p>Previously if you configured a ping interval that would cause OkHttp to send pings, but it did not track whether the reply pongs were received. With this update OkHttp requires that every ping receive a response: if it does not the connection will be closed and the listener\u2019s <code>onFailure()</code> method will be called.</p> <p>Web sockets have always been had pings, but pings on HTTP/2 connections is new in this release. Pings are used for connections that are busy carrying calls and for idle connections in the connection pool. (Pings do not impact when pooled connections are evicted).</p> <p>If you have a configured ping interval, you should confirm that it is long enough for a roundtrip from client to server. If your ping interval is too short, slow connections may be misinterpreted as failed connections. A ping interval of 30 seconds is reasonable for most use cases.</p> </li> <li> <p>OkHttp now supports Conscrypt. Conscrypt is a Java Security     Provider that integrates BoringSSL into the Java platform. Conscrypt     supports more cipher suites than the JVM\u2019s default provider and may also     execute more efficiently.</p> <p>To use it, first register a Conscrypt dependency in your build system.</p> <p>OkHttp will use Conscrypt if you set the <code>okhttp.platform</code> system property to <code>conscrypt</code>.</p> <p>Alternatively, OkHttp will also use Conscrypt if you install it as your preferred security provider. To do so, add the following code to execute before you create your <code>OkHttpClient</code>.</p> <pre><code>Security.insertProviderAt(\n    new org.conscrypt.OpenSSLProvider(), 1);\n</code></pre> <p>Conscrypt is the bundled security provider on Android so it is not necessary to configure it on that platform.</p> </li> <li> <p>New: <code>HttpUrl.addQueryParameter()</code> percent-escapes more characters.     Previously several ASCII punctuation characters were not percent-escaped     when used with this method. This does not impact already-encoded query     parameters in APIs like <code>HttpUrl.parse()</code> and     <code>HttpUrl.Builder.addEncodedQueryParameter()</code>.</p> </li> <li>New: CBC-mode ECDSA cipher suites have been removed from OkHttp\u2019s default     configuration: <code>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</code> and     <code>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</code>. This tracks a Chromium     change to remove these cipher suites because they are     fragile and rarely-used.</li> <li>New: Don\u2019t fall back to common name (CN) verification for hostnames. This     behavior was deprecated with RFC 2818 in May 2000 and was recently dropped     from major web browsers.</li> <li>New: Honor the <code>Retry-After</code> response header. HTTP 503 (Unavailable)     responses are retried automatically if this header is present and its delay     is 0 seconds. HTTP 408 (Client Timeout) responses are retried automatically     if the header is absent or its delay is 0 seconds.</li> <li>New: Allow request bodies for all HTTP methods except GET and HEAD.</li> <li>New: Automatic module name of <code>okhttp3</code> for use with the Java Platform     Module System.</li> <li>New: Log gzipped bodies when <code>HttpLoggingInterceptor</code> is used as a network     interceptor.</li> <li>New: <code>Protocol.QUIC</code> constant. This protocol is not supported but this     constant is included for completeness.</li> <li> <p>New: Upgrade to Okio 1.14.0.</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okio&lt;/groupId&gt;\n  &lt;artifactId&gt;okio&lt;/artifactId&gt;\n  &lt;version&gt;1.14.0&lt;/version&gt;\n&lt;/dependency&gt;\n\ncom.squareup.okio:okio:1.14.0\n</code></pre> </li> <li> <p>Fix: Handle <code>HTTP/1.1 100 Continue</code> status lines, even on requests that did     not send the <code>Expect: continue</code> request header.</p> </li> <li>Fix: Do not count web sockets toward the dispatcher\u2019s per-host connection     limit.</li> <li>Fix: Avoid using invalid HTTPS sessions. This prevents OkHttp from crashing     with the error, <code>Unexpected TLS version: NONE</code>.</li> <li>Fix: Don\u2019t corrupt the response cache when a 304 (Not Modified) response     overrides the stored \u201cContent-Encoding\u201d header.</li> <li>Fix: Gracefully shut down the HTTP/2 connection before it exhausts the     namespace of stream IDs (~536 million streams).</li> <li>Fix: Never pass a null <code>Route</code> to <code>Authenticator</code>. There was a bug where     routes were omitted for eagerly-closed connections.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-391","title":"Version 3.9.1","text":"<p>2017-11-18</p> <ul> <li>New: Recover gracefully when Android\u2019s DNS crashes with an unexpected     <code>NullPointerException</code>.</li> <li>New: Recover gracefully when Android\u2019s socket connections crash with an     unexpected <code>ClassCastException</code>.</li> <li>Fix: Don\u2019t include the URL\u2019s fragment in <code>encodedQuery()</code> when the query     itself is empty.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-390","title":"Version 3.9.0","text":"<p>2017-09-03</p> <ul> <li> <p>Interceptors are more capable. The <code>Chain</code> interface now offers access     to the call and can adjust all call timeouts. Note that this change is     source-incompatible for code that implements the <code>Chain</code> interface.     We don\u2019t expect this to be a problem in practice!</p> </li> <li> <p>OkHttp has an experimental new API for tracking metrics. The new     <code>EventListener</code> API is designed to help developers monitor HTTP requests\u2019     size and duration. This feature is an unstable preview: the API is subject     to change, and the implementation is incomplete. This is a big new API we     are eager for feedback.</p> </li> <li> <p>New: Support ALPN via Google Play Services\u2019 Dynamic Security Provider. This     expands HTTP/2 support to older Android devices that have Google Play     Services.</p> </li> <li>New: Consider all routes when looking for candidate coalesced connections.     This increases the likelihood that HTTP/2 connections will be shared.</li> <li>New: Authentication challenges and credentials now use a charset. Use this in     your authenticator to support user names and passwords with non-ASCII     characters.</li> <li>New: Accept a charset in <code>FormBody.Builder</code>. Previously form bodies were     always UTF-8.</li> <li>New: Support the <code>immutable</code> cache-control directive.</li> <li>Fix: Don\u2019t crash when an HTTP/2 call is redirected while the connection is     being shut down.</li> <li>Fix: Don\u2019t drop headers of healthy streams that raced with <code>GOAWAY</code> frames.     This bug would cause HTTP/2 streams to occasional hang when the connection     was shutting down.</li> <li>Fix: Honor <code>OkHttpClient.retryOnConnectionFailure()</code> when the response is a     HTTP 408 Request Timeout. If retries are enabled, OkHttp will retry exactly     once in response to a 408.</li> <li>Fix: Don\u2019t crash when reading the empty <code>HEAD</code> response body if it specifies     a <code>Content-Length</code>.</li> <li>Fix: Don\u2019t crash if the thread is interrupted while reading the public     suffix database.</li> <li>Fix: Use relative resource path when loading the public suffix database.     Loading the resource using a path relative to the class prevents conflicts     when the OkHttp classes are relocated (shaded) by allowing multiple private     copies of the database.</li> <li>Fix: Accept cookies for URLs that have an IPv6 address for a host.</li> <li>Fix: Don\u2019t log the protocol (HTTP/1.1, h2) in HttpLoggingInterceptor if the     protocol isn\u2019t negotiated yet! Previously we\u2019d log HTTP/1.1 by default, and     this was confusing.</li> <li>Fix: Omit the message from MockWebServer\u2019s HTTP/2 <code>:status</code> header.</li> <li>Fix: Handle \u2018Expect: 100 Continue\u2019 properly in MockWebServer.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-381","title":"Version 3.8.1","text":"<p>2017-06-18</p> <ul> <li>Fix: Recover gracefully from stale coalesced connections. We had a bug where     connection coalescing (introduced in OkHttp 3.7.0) and stale connection     recovery could interact to cause a <code>NoSuchElementException</code> crash in the     <code>RouteSelector</code>.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-380","title":"Version 3.8.0","text":"<p>2017-05-13</p> <ul> <li> <p>OkHttp now uses <code>@Nullable</code> to annotate all possibly-null values. We\u2019ve     added a compile-time dependency on the JSR 305 annotations. This is a     provided dependency and does not need to be included in     your build configuration, <code>.jar</code> file, or <code>.apk</code>. We use     <code>@ParametersAreNonnullByDefault</code> and all parameters and return types are     never null unless explicitly annotated <code>@Nullable</code>.</p> </li> <li> <p>Warning: this release is source-incompatible for Kotlin users.     Nullability was previously ambiguous and lenient but now the compiler will     enforce strict null checks.</p> </li> <li> <p>New: The response message is now non-null. This is the \u201cNot Found\u201d in the     status line \u201cHTTP 404 Not Found\u201d. If you are building responses     programmatically (with <code>new Response.Builder()</code>) you must now always supply     a message. An empty string <code>\"\"</code> is permitted. This value was never null on     responses returned by OkHttp itself, and it was an old mistake to permit     application code to omit a message.</p> </li> <li> <p>The challenge\u2019s scheme and realm are now non-null. If you are calling     <code>new Challenge(scheme, realm)</code> you must provide non-null values. These were     never null in challenges created by OkHttp, but could have been null in     application code that creates challenges.</p> </li> <li> <p>New: The <code>TlsVersion</code> of a <code>Handshake</code> is now non-null. If you are calling     <code>Handshake.get()</code> with a null TLS version, you must instead now provide a     non-null <code>TlsVersion</code>. Cache responses persisted prior to OkHttp 3.0 did not     store a TLS version; for these unknown values the handshake is defaulted to     <code>TlsVersion.SSL_3_0</code>.</p> </li> <li> <p>New: Upgrade to Okio 1.13.0.</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okio&lt;/groupId&gt;\n  &lt;artifactId&gt;okio&lt;/artifactId&gt;\n  &lt;version&gt;1.13.0&lt;/version&gt;\n&lt;/dependency&gt;\n\ncom.squareup.okio:okio:1.13.0\n</code></pre> </li> <li> <p>Fix: gracefully recover when Android 7.0\u2019s sockets throw an unexpected     <code>NullPointerException</code>.</p> </li> </ul>"},{"location":"changelogs/changelog_3x/#version-370","title":"Version 3.7.0","text":"<p>2017-04-15</p> <ul> <li>OkHttp no longer recovers from TLS handshake failures by attempting a TLSv1 connection.     The fallback was necessary for servers that implemented version negotiation incorrectly. Now     that 99.99% of servers do it right this fallback is obsolete.</li> <li>Fix: Do not honor cookies set on a public domain. Previously a malicious site could inject     cookies on top-level domains like <code>co.uk</code> because our cookie parser didn\u2019t honor the public     suffix list. Alongside this fix is a new API, <code>HttpUrl.topPrivateDomain()</code>,     which returns the privately domain name if the URL has one.</li> <li>Fix: Change <code>MediaType.charset()</code> to return null for unexpected charsets.</li> <li>Fix: Don\u2019t skip cache invalidation if the invalidating response has no body.</li> <li>Fix: Don\u2019t use a cryptographic random number generator for web sockets. Some Android devices     implement <code>SecureRandom</code> incorrectly!</li> <li>Fix: Correctly canonicalize IPv6 addresses in <code>HttpUrl</code>. This prevented OkHttp from trusting     HTTPS certificates issued to certain IPv6 addresses.</li> <li>Fix: Don\u2019t reuse connections after an unsuccessful <code>Expect: 100-continue</code>.</li> <li>Fix: Handle either <code>TLS_</code> or <code>SSL_</code> prefixes for cipher suite names. This is necessary for     IBM JVMs that use the <code>SSL_</code> prefix exclusively.</li> <li>Fix: Reject HTTP/2 data frames if the stream ID is 0.</li> <li> <p>New: Upgrade to Okio 1.12.0.</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okio&lt;/groupId&gt;\n  &lt;artifactId&gt;okio&lt;/artifactId&gt;\n  &lt;version&gt;1.12.0&lt;/version&gt;\n&lt;/dependency&gt;\n\ncom.squareup.okio:okio:1.12.0\n</code></pre> </li> <li> <p>New: Connection coalescing. OkHttp may reuse HTTP/2 connections across calls that share an IP     address and HTTPS certificate, even if their domain names are different.</p> </li> <li>New: MockWebServer\u2019s <code>RecordedRequest</code> exposes the requested <code>HttpUrl</code> with <code>getRequestUrl()</code>.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-360","title":"Version 3.6.0","text":"<p>2017-01-29</p> <ul> <li>Fix: Don\u2019t crash with a \u201ccache is closed\u201d error when there is an error initializing the cache.</li> <li>Fix: Calling <code>disconnect()</code> on a connecting <code>HttpUrlConnection</code> could cause it to retry in an     infinite loop! This regression was introduced in OkHttp 2.7.0.</li> <li>Fix: Drop cookies that contain ASCII NULL and other bad characters. Previously such cookies     would cause OkHttp to crash when they were included in a request.</li> <li>Fix: Release duplicated multiplexed connections. If we concurrently establish connections to an     HTTP/2 server, close all but the first connection.</li> <li>Fix: Fail the HTTP/2 connection if first frame isn\u2019t <code>SETTINGS</code>.</li> <li>Fix: Forbid spaces in header names.</li> <li>Fix: Don\u2019t offer to do gzip if the request is partial.</li> <li>Fix: MockWebServer is now usable with JUnit 5. That update broke the rules.</li> <li>New: Support <code>Expect: 100-continue</code> as a request header. Callers can use this header to     pessimistically hold off on transmitting a request body until a server gives the go-ahead.</li> <li>New: Permit network interceptors to rewrite the host header for HTTP/2. This makes it possible     to do domain fronting.</li> <li>New: charset support for <code>Credentials.basic()</code>.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-350","title":"Version 3.5.0","text":"<p>2016-11-30</p> <ul> <li> <p>Web Sockets are now a stable feature of OkHttp. Since being introduced as a beta feature in     OkHttp 2.3 our web socket client has matured. Connect to a server\u2019s web socket with     <code>OkHttpClient.newWebSocket()</code>, send messages with <code>send()</code>, and receive messages with the     <code>WebSocketListener</code>.</p> <p>The <code>okhttp-ws</code> submodule is no longer available and <code>okhttp-ws</code> artifacts from previous releases of OkHttp are not compatible with OkHttp 3.5. When upgrading to the new package please note that the <code>WebSocket</code> and <code>WebSocketCall</code> classes have been merged. Sending messages is now asynchronous and they may be enqueued before the web socket is connected.</p> </li> <li> <p>OkHttp no longer attempts a direct connection if the system\u2019s HTTP proxy fails. This     behavior was surprising because OkHttp was disregarding the user\u2019s specified configuration. If     you need to customize proxy fallback behavior, implement your own <code>java.net.ProxySelector</code>.</p> </li> <li> <p>Fix: Support TLSv1.3 on devices that support it.</p> </li> <li> <p>Fix: Share pooled connections across equivalent <code>OkHttpClient</code> instances. Previous releases had     a bug where a shared connection pool did not guarantee shared connections in some cases.</p> </li> <li>Fix: Prefer the server\u2019s response body on all conditional cache misses. Previously we would     return the cached response\u2019s body if it had a newer <code>Last-Modified</code> date.</li> <li>Fix: Update the stored timestamp on conditional cache hits.</li> <li>New: Optimized HTTP/2 request header encoding. More headers are HPACK-encoded and string     literals are now Huffman-encoded.</li> <li>New: Expose <code>Part</code> headers and body in <code>Multipart</code>.</li> <li> <p>New: Make <code>ResponseBody.string()</code> and <code>ResponseBody.charStream()</code> BOM-aware. If your HTTP     response body begins with a byte order mark it will be consumed and used to select a     charset for the remaining bytes. Most applications should not need a byte order mark.</p> </li> <li> <p>New: Upgrade to Okio 1.11.0.</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okio&lt;/groupId&gt;\n  &lt;artifactId&gt;okio&lt;/artifactId&gt;\n  &lt;version&gt;1.11.0&lt;/version&gt;\n&lt;/dependency&gt;\n\ncom.squareup.okio:okio:1.11.0\n</code></pre> </li> <li> <p>Fix: Avoid sending empty HTTP/2 data frames when there is no request body.</p> </li> <li>Fix: Add a leading <code>.</code> for better domain matching in <code>JavaNetCookieJar</code>.</li> <li>Fix: Gracefully recover from HTTP/2 connection shutdowns at start of request.</li> <li>Fix: Be lenient if a <code>MediaType</code>\u2019s character set is <code>'single-quoted'</code>.</li> <li>Fix: Allow horizontal tab characters in header values.</li> <li>Fix: When parsing HTTP authentication headers permit challenge parameters in any order.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-342","title":"Version 3.4.2","text":"<p>2016-11-03</p> <ul> <li>Fix: Recover gracefully when an HTTP/2 connection is shutdown. We had a     bug where shutdown HTTP/2 connections were considered usable. This caused     infinite loops when calls attempted to recover.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-341","title":"Version 3.4.1","text":"<p>2016-07-10</p> <ul> <li>Fix a major bug in encoding HTTP headers. In 3.4.0 and 3.4.0-RC1 OkHttp     had an off-by-one bug in our HPACK encoder. This bug could have caused the     wrong headers to be emitted after a sequence of HTTP/2 requests! Everyone     who is using OkHttp 3.4.0 or 3.4.0-RC1 should upgrade for this bug fix.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-340","title":"Version 3.4.0","text":"<p>2016-07-08</p> <ul> <li>New: Support dynamic table size changes to HPACK Encoder.</li> <li>Fix: Use <code>TreeMap</code> in <code>Headers.toMultimap()</code>. This makes string lookups on     the returned map case-insensitive.</li> <li>Fix: Don\u2019t share the OkHttpClient\u2019s <code>Dispatcher</code> in <code>HttpURLConnection</code>.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-340-rc1","title":"Version 3.4.0-RC1","text":"<p>2016-07-02</p> <ul> <li> <p>We\u2019ve rewritten HttpURLConnection and HttpsURLConnection. Previously we     shared a single HTTP engine between two frontend APIs: <code>HttpURLConnection</code>     and <code>Call</code>. With this release we\u2019ve rearranged things so that the     <code>HttpURLConnection</code> frontend now delegates to the <code>Call</code> APIs internally.     This has enabled substantial simplifications and optimizations in the OkHttp     core for both frontends.</p> <p>For most HTTP requests the consequences of this change will be negligible. If your application uses <code>HttpURLConnection.connect()</code>, <code>setFixedLengthStreamingMode()</code>, or <code>setChunkedStreamingMode()</code>, OkHttp will now use a async dispatcher thread to establish the HTTP connection.</p> <p>We don\u2019t expect this change to have any behavior or performance consequences. Regardless, please exercise your <code>OkUrlFactory</code> and <code>HttpURLConnection</code> code when applying this update.</p> </li> <li> <p>Cipher suites may now have arbitrary names. Previously <code>CipherSuite</code> was     a Java enum and it was impossible to define new cipher suites without first     upgrading OkHttp. With this change it is now a regular Java class with     enum-like constants. Application code that uses enum methods on cipher     suites (<code>ordinal()</code>, <code>name()</code>, etc.) will break with this change.</p> </li> <li> <p>Fix: <code>CertificatePinner</code> now matches canonicalized hostnames. Previously     this was case sensitive. This change should also make it easier to configure     certificate pinning for internationalized domain names.</p> </li> <li>Fix: Don\u2019t crash on non-ASCII <code>ETag</code> headers. Previously OkHttp would reject     these headers when validating a cached response.</li> <li>Fix: Don\u2019t allow remote peer to arbitrarily size the HPACK decoder dynamic     table.</li> <li>Fix: Honor per-host configuration in Android\u2019s network security config.     Previously disabling cleartext for any host would disable cleartext for all     hosts. Note that this setting is only available on Android 24+.</li> <li>New: HPACK compression is now dynamic. This should improve performance when     transmitting request headers over HTTP/2.</li> <li>New: <code>Dispatcher.setIdleCallback()</code> can be used to signal when there are no     calls in flight. This is useful for testing with     Espresso.</li> <li> <p>New: Upgrade to Okio 1.9.0.</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okio&lt;/groupId&gt;\n  &lt;artifactId&gt;okio&lt;/artifactId&gt;\n  &lt;version&gt;1.9.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> </li> </ul>"},{"location":"changelogs/changelog_3x/#version-331","title":"Version 3.3.1","text":"<p>2016-05-28</p> <ul> <li>Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified     newline characters as control characters. This is fixed.</li> <li>Fix: Don\u2019t crash reading non-ASCII characters in HTTP/2 headers or in cached     HTTP headers.</li> <li>Fix: Retain the response body when an attempt to open a web socket returns a     non-101 response code.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-330","title":"Version 3.3.0","text":"<p>2016-05-24</p> <ul> <li>New: <code>Response.sentRequestAtMillis()</code> and <code>receivedResponseAtMillis()</code>     methods track the system\u2019s local time when network calls are made. These     replace the <code>OkHttp-Sent-Millis</code> and <code>OkHttp-Received-Millis</code> headers that were     present in earlier versions of OkHttp.</li> <li>New: Accept user-provided trust managers in <code>OkHttpClient.Builder</code>. This     allows OkHttp to satisfy its TLS requirements directly. Otherwise OkHttp     will use reflection to extract the <code>TrustManager</code> from the     <code>SSLSocketFactory</code>.</li> <li>New: Support prerelease Java 9. This gets ALPN from the platform rather than     relying on the alpn-boot bootclasspath override.</li> <li>New: <code>HttpLoggingInterceptor</code> now logs connection failures.</li> <li> <p>New: Upgrade to Okio 1.8.0.</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.squareup.okio&lt;/groupId&gt;\n  &lt;artifactId&gt;okio&lt;/artifactId&gt;\n  &lt;version&gt;1.8.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> </li> <li> <p>Fix: Gracefully recover from a failure to rebuild the cache journal.</p> </li> <li>Fix: Don\u2019t corrupt cache entries when a cache entry is evicted while it is     being updated.</li> <li>Fix: Make logging more consistent throughout OkHttp.</li> <li>Fix: Log plaintext bodies only. This uses simple heuristics to differentiate     text from other data.</li> <li>Fix: Recover from <code>REFUSED_STREAM</code> errors in HTTP/2. This should improve     interoperability with Nginx 1.10.0, which refuses streams     created before HTTP/2 settings have been acknowledged.</li> <li>Fix: Improve recovery from failed routes.</li> <li>Fix: Accommodate tunneling proxies that close the connection after an auth     challenge.</li> <li>Fix: Use the proxy authenticator when authenticating HTTP proxies. This     regression was introduced in OkHttp 3.0.</li> <li>Fix: Fail fast if network interceptors transform the response body such that     closing it doesn\u2019t also close the underlying stream. We had a bug where     OkHttp would attempt to reuse a connection but couldn\u2019t because it was still     held by a prior request.</li> <li>Fix: Ensure network interceptors always have access to the underlying     connection.</li> <li>Fix: Use <code>X509TrustManagerExtensions</code> on Android 17+.</li> <li>Fix: Unblock waiting dispatchers on MockWebServer shutdown.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-320","title":"Version 3.2.0","text":"<p>2016-02-25</p> <ul> <li>Fix: Change the certificate pinner to always build full chains. This     prevents a potential crash when using certificate pinning with the Google     Play Services security provider.</li> <li>Fix: Make IPv6 request lines consistent with Firefox and Chrome.</li> <li>Fix: Recover gracefully when trimming the response cache fails.</li> <li>New: Add multiple path segments using a single string in <code>HttpUrl.Builder</code>.</li> <li>New: Support SHA-256 pins in certificate pinner.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-312","title":"Version 3.1.2","text":"<p>2016-02-10</p> <ul> <li>Fix: Don\u2019t crash when finding the trust manager on Robolectric. We attempted     to detect the host platform and got confused because Robolectric looks like     Android but isn\u2019t!</li> <li>Fix: Change <code>CertificatePinner</code> to skip sanitizing the certificate chain     when no certificates were pinned. This avoids an SSL failure in insecure     \u201ctrust everyone\u201d configurations, such as when talking to a development     HTTPS server that has a self-signed certificate.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-311","title":"Version 3.1.1","text":"<p>2016-02-07</p> <ul> <li>Fix: Don\u2019t crash when finding the trust manager if the Play Services (GMS)     security provider is installed.</li> <li>Fix: The previous release introduced a performance regression on Android,     caused by looking up CA certificates. This is now fixed.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-310","title":"Version 3.1.0","text":"<p>2016-02-06</p> <ul> <li>New: WebSockets now defer some writes. This should improve performance for     some applications.</li> <li>New: Override <code>equals()</code> and <code>hashCode()</code> in our new cookie class. This     class now defines equality by value rather than by reference.</li> <li>New: Handle 408 responses by retrying the request. This allows servers to     direct clients to retry rather than failing permanently.</li> <li>New: Expose the framed protocol in <code>Connection</code>. Previously this would     return the application-layer protocol (HTTP/1.1 or HTTP/1.0); now it always     returns the wire-layer protocol (HTTP/2, SPDY/3.1, or HTTP/1.1).</li> <li>Fix: Permit the trusted CA root to be pinned by <code>CertificatePinner</code>.</li> <li>Fix: Silently ignore unknown HTTP/2 settings. Previously this would cause     the entire connection to fail.</li> <li>Fix: Don\u2019t crash on unexpected charsets in the logging interceptor.</li> <li>Fix: <code>OkHttpClient</code> is now non-final for the benefit of mocking frameworks.     Mocking sophisticated classes like <code>OkHttpClient</code> is fragile and you     shouldn\u2019t do it. But if that\u2019s how you want to live your life we won\u2019t stand     in your way!</li> </ul>"},{"location":"changelogs/changelog_3x/#version-301","title":"Version 3.0.1","text":"<p>2016-01-14</p> <ul> <li>Rollback OSGi support. This was causing library jars to include more classes     than expected, which interfered with Gradle builds.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-300","title":"Version 3.0.0","text":"<p>2016-01-13</p> <p>This release commits to a stable 3.0 API. Read the 3.0.0-RC1 changes for advice on upgrading from 2.x to 3.x.</p> <ul> <li>The <code>Callback</code> interface now takes a <code>Call</code>. This makes it easier to     check if the call was canceled from within the callback. When migrating     async calls to this new API, <code>Call</code> is now the first parameter for both     <code>onResponse()</code> and <code>onFailure()</code>.</li> <li>Fix: handle multiple cookies in <code>JavaNetCookieJar</code> on Android.</li> <li>Fix: improve the default HTTP message in MockWebServer responses.</li> <li>Fix: don\u2019t leak file handles when a conditional GET throws.</li> <li>Fix: Use charset specified by the request body content type in OkHttp\u2019s     logging interceptor.</li> <li>Fix: Don\u2019t eagerly release pools on cache hits.</li> <li>New: Make OkHttp OSGi ready.</li> <li>New: Add already-implemented interfaces Closeable and Flushable to the cache.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-300-rc1","title":"Version 3.0.0-RC1","text":"<p>2016-01-02</p> <p>OkHttp 3 is a major release focused on API simplicity and consistency. The API changes are numerous but most are cosmetic. Applications should be able to upgrade from the 2.x API to the 3.x API mechanically and without risk.</p> <p>Because the release includes breaking API changes, we\u2019re changing the project\u2019s package name from <code>com.squareup.okhttp</code> to <code>okhttp3</code>. This should make it possible for large applications to migrate incrementally. The Maven group ID is now <code>com.squareup.okhttp3</code>. For an explanation of this strategy, see Jake Wharton\u2019s post, Java Interoperability Policy for Major Version Updates.</p> <p>This release obsoletes OkHttp 2.x, and all code that uses OkHttp\u2019s <code>com.squareup.okhttp</code> package should upgrade to the <code>okhttp3</code> package. Libraries that depend on OkHttp should upgrade quickly to prevent applications from being stuck on the old version.</p> <ul> <li> <p>There is no longer a global singleton connection pool. In OkHttp 2.x,     all <code>OkHttpClient</code> instances shared a common connection pool by default.     In OkHttp 3.x, each new <code>OkHttpClient</code> gets its own private connection pool.     Applications should avoid creating many connection pools as doing so     prevents connection reuse. Each connection pool holds its own set of     connections alive so applications that have many pools also risk exhausting     memory!</p> <p>The best practice in OkHttp 3 is to create a single OkHttpClient instance and share it throughout the application. Requests that needs a customized client should call <code>OkHttpClient.newBuilder()</code> on that shared instance. This allows customization without the drawbacks of separate connection pools.</p> </li> <li> <p>OkHttpClient is now stateless. In the 2.x API <code>OkHttpClient</code> had getters     and setters. Internally each request was forced to make its own complete     snapshot of the <code>OkHttpClient</code> instance to defend against racy configuration     changes. In 3.x, <code>OkHttpClient</code> is now stateless and has a builder. Note     that this class is not strictly immutable as it has stateful members like     the connection pool and cache.</p> </li> <li> <p>Get and Set prefixes are now avoided. With ubiquitous builders     throughout OkHttp these accessor prefixes aren\u2019t necessary. Previously     OkHttp used get and set prefixes sporadically which make the API     inconsistent and awkward to explore.</p> </li> <li> <p>OkHttpClient now implements the new <code>Call.Factory</code> interface. This     interface will make your code easier to test. When you test code that makes     HTTP requests, you can use this interface to replace the real <code>OkHttpClient</code>     with your own mocks or fakes.</p> <p>The interface will also let you use OkHttp\u2019s API with another HTTP client\u2019s implementation. This is useful in sandboxed environments like Google App Engine.</p> </li> <li> <p>OkHttp now does cookies. We\u2019ve replaced <code>java.net.CookieHandler</code> with     a new interface, <code>CookieJar</code> and added our own <code>Cookie</code> model class. This     new cookie follows the latest RFC and supports the same cookie attributes     as modern web browsers.</p> </li> <li> <p>Form and Multipart bodies are now modeled. We\u2019ve replaced the opaque     <code>FormEncodingBuilder</code> with the more powerful <code>FormBody</code> and     <code>FormBody.Builder</code> combo. Similarly we\u2019ve upgraded <code>MultipartBuilder</code> into     <code>MultipartBody</code>, <code>MultipartBody.Part</code>, and <code>MultipartBody.Builder</code>.</p> </li> <li> <p>The Apache HTTP client and HttpURLConnection APIs are deprecated. They     continue to work as they always have, but we\u2019re moving everything to the new     OkHttp 3 API. The <code>okhttp-apache</code> and <code>okhttp-urlconnection</code> modules should     be only be used to accelerate a transition to OkHttp\u2019s request/response API.     These deprecated modules will be dropped in an upcoming OkHttp 3.x release.</p> </li> <li> <p>Canceling batches of calls is now the application\u2019s responsibility.     The API to cancel calls by tag has been removed and replaced with a more     general mechanism. The dispatcher now exposes all in-flight calls via its     <code>runningCalls()</code> and <code>queuedCalls()</code> methods. You can write code that     selects calls by tag, host, or whatever, and invokes <code>Call.cancel()</code> on the     ones that are no longer necessary.</p> </li> <li> <p>OkHttp no longer uses the global <code>java.net.Authenticator</code> by default.     We\u2019ve changed our <code>Authenticator</code> interface to authenticate web and proxy     authentication failures through a single method. An adapter for the old     authenticator is available in the <code>okhttp-urlconnection</code> module.</p> </li> <li> <p>Fix: Don\u2019t throw <code>IOException</code> on <code>ResponseBody.contentLength()</code> or <code>close()</code>.</p> </li> <li>Fix: Never throw converting an <code>HttpUrl</code> to a <code>java.net.URI</code>. This changes     the <code>uri()</code> method to handle malformed percent-escapes and characters     forbidden by <code>URI</code>.</li> <li>Fix: When a connect times out, attempt an alternate route. Previously route     selection was less efficient when differentiating failures.</li> <li>New: <code>Response.peekBody()</code> lets you access the response body without     consuming it. This may be handy for interceptors!</li> <li>New: <code>HttpUrl.newBuilder()</code> resolves a link to a builder.</li> <li>New: Add the TLS version to the <code>Handshake</code>.</li> <li>New: Drop <code>Request.uri()</code> and <code>Request#urlString()</code>. Just use     <code>Request.url().uri()</code> and <code>Request.url().toString()</code>.</li> <li>New: Add URL to HTTP response logging.</li> <li>New: Make <code>HttpUrl</code> the blessed URL method of <code>Request</code>.</li> </ul>"},{"location":"changelogs/changelog_3x/#version-2x","title":"Version 2.x","text":"<p>Change log</p>"},{"location":"changelogs/changelog_4x/","title":"OkHttp 4.x Change Log","text":""},{"location":"changelogs/changelog_4x/#version-4120","title":"Version 4.12.0","text":"<p>2023-10-16</p> <ul> <li> <p>Fix: Don\u2019t hang taking headers for HTTP 103 responses.</p> </li> <li> <p>Fix: Recover gracefully when a cache entry\u2019s certificate is corrupted.</p> </li> <li> <p>Fix: Fail permanently when there\u2019s a failure loading the bundled public suffix database.     This is the dataset that powers <code>HttpUrl.topPrivateDomain()</code>.</p> </li> <li> <p>Fix: Immediately update the connection\u2019s flow control window instead of waiting for the     receiving stream to process it.</p> <p>This change may increase OkHttp\u2019s memory use for applications that make many concurrent HTTP calls and that can receive data faster than they can process it. Previously, OkHttp limited HTTP/2 to 16 MiB of unacknowledged data per connection. With this fix there is a limit of 16 MiB of unacknowledged data per stream and no per-connection limit.</p> </li> <li> <p>Fix: Don\u2019t operate on a connection after it\u2019s been returned to the pool. This race occurred     on failed web socket connection attempts.</p> </li> <li> <p>Upgrade: Okio 3.6.0.</p> </li> <li> <p>Upgrade: Kotlin 1.8.21.</p> </li> </ul>"},{"location":"changelogs/changelog_4x/#version-4110","title":"Version 4.11.0","text":"<p>2023-04-22</p> <ul> <li>Fix: Don\u2019t fail the call when the response code is \u2018HTTP 102 Processing\u2019 or     \u2018HTTP 103 Early Hints\u2019.</li> <li>Fix: Read the response even if writing the request fails. This means you\u2019ll get a proper HTTP     response even if the server rejects your request body.</li> <li>Fix: Use literal IP addresses directly rather than passing them to <code>DnsOverHttps</code>.</li> <li>Fix: Embed Proguard rules to prevent warnings from tools like DexGuard and R8. These warnings     were triggered by OkHttp\u2019s feature detection for TLS packages like <code>org.conscrypt</code>,     <code>org.bouncycastle</code>, and <code>org.openjsse</code>.</li> <li>Upgrade: Explicitly depend on <code>kotlin-stdlib-jdk8</code>. This fixes a problem with dependency     locking. That\u2019s a potential security vulnerability, tracked as CVE-2022-24329.</li> <li>Upgrade: publicsuffix.org data. This powers <code>HttpUrl.topPrivateDomain()</code>.     It\u2019s also how OkHttp knows which domains can share cookies with one another.</li> <li>Upgrade: Okio 3.2.0.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-4100","title":"Version 4.10.0","text":"<p>2022-06-12</p> <ul> <li>Upgrade: Kotlin 1.6.20.</li> <li>Upgrade: Okio 3.0.0.</li> <li>Fix: Recover gracefully when Android\u2019s <code>NativeCrypto</code> crashes with <code>\"ssl == null\"</code>. This occurs     when OkHttp retrieves ALPN state on a closed connection.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-493","title":"Version 4.9.3","text":"<p>2021-11-21</p> <ul> <li>Fix: Don\u2019t fail HTTP/2 responses if they complete before a <code>RST_STREAM</code> is sent.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-492","title":"Version 4.9.2","text":"<p>2021-09-30</p> <ul> <li>Fix: Don\u2019t include potentially-sensitive header values in <code>Headers.toString()</code> or exceptions.     This applies to <code>Authorization</code>, <code>Cookie</code>, <code>Proxy-Authorization</code>, and <code>Set-Cookie</code> headers.</li> <li>Fix: Don\u2019t crash with an <code>InaccessibleObjectException</code> when running on JDK17+ with strong     encapsulation enabled.</li> <li>Fix: Strictly verify hostnames used with OkHttp\u2019s <code>HostnameVerifier</code>. Programs that make direct     manual calls to <code>HostnameVerifier</code> could be defeated if the hostnames they pass in are not     strictly ASCII. This issue is tracked as CVE-2021-0341.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-491","title":"Version 4.9.1","text":"<p>2021-01-30</p> <ul> <li>Fix: Work around a crash in Android 10 and 11 that may be triggered when two threads     concurrently close an SSL socket. This would have appeared in crash logs as     <code>NullPointerException: bio == null</code>.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-490","title":"Version 4.9.0","text":"<p>2020-09-11</p> <p>With this release, <code>okhttp-tls</code> no longer depends on Bouncy Castle and doesn\u2019t install the Bouncy Castle security provider. If you still need it, you can do it yourself:</p> <pre><code>Security.addProvider(BouncyCastleProvider())\n</code></pre> <p>You will also need to configure this dependency:</p> <pre><code>dependencies {\n  implementation \"org.bouncycastle:bcprov-jdk15on:1.65\"\n}\n</code></pre> <ul> <li>Upgrade: Kotlin 1.4.10. We now use Kotlin 1.4.x functional     interfaces for <code>Authenticator</code>, <code>Interceptor</code>, and others.</li> <li>Upgrade: Build with Conscrypt 2.5.1.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-481","title":"Version 4.8.1","text":"<p>2020-08-06</p> <ul> <li>Fix: Don\u2019t crash in <code>HeldCertificate.Builder</code> when creating certificates on older versions of     Android, including Android 6. We were using a feature of <code>SimpleDateFormat</code> that wasn\u2019t     available in those versions!</li> </ul>"},{"location":"changelogs/changelog_4x/#version-480","title":"Version 4.8.0","text":"<p>2020-07-11</p> <ul> <li> <p>New: Change <code>HeldCertificate.Builder</code> to use its own ASN.1 certificate encoder. This is part     of our effort to remove the okhttp-tls module\u2019s dependency on Bouncy Castle. We think Bouncy     Castle is great! But it\u2019s a large dependency (6.5 MiB) and its security provider feature     impacts VM-wide behavior.</p> </li> <li> <p>New: Reduce contention for applications that make a very high number of concurrent requests.     Previously OkHttp used its connection pool as a lock when making changes to connections and     calls. With this change each connection is locked independently.</p> </li> <li> <p>Upgrade: Okio 2.7.0.</p> <pre><code>implementation(\"com.squareup.okio:okio:2.7.0\")\n</code></pre> </li> <li> <p>Fix: Avoid log messages like \u201cDidn\u2019t find class org.conscrypt.ConscryptHostnameVerifier\u201d when     detecting the TLS capabilities of the host platform.</p> </li> <li> <p>Fix: Don\u2019t crash in <code>HttpUrl.topPrivateDomain()</code> when the hostname is malformed.</p> </li> <li> <p>Fix: Don\u2019t attempt Brotli decompression if the response body is empty.</p> </li> </ul>"},{"location":"changelogs/changelog_4x/#version-472","title":"Version 4.7.2","text":"<p>2020-05-20</p> <ul> <li>Fix: Don\u2019t crash inspecting whether the host platform is JVM or Android. With 4.7.0 and 4.7.1 we     had a crash <code>IllegalArgumentException: Not a Conscrypt trust manager</code> because we depended on     initialization order of companion objects.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-471","title":"Version 4.7.1","text":"<p>2020-05-18</p> <ul> <li>Fix: Pass the right arguments in the trust manager created for <code>addInsecureHost()</code>. Without the     fix insecure hosts crash with an <code>IllegalArgumentException</code> on Android.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-470","title":"Version 4.7.0","text":"<p>2020-05-17</p> <ul> <li> <p>New: <code>HandshakeCertificates.Builder.addInsecureHost()</code> makes it easy to turn off security in     private development environments that only carry test data. Prefer this over creating an     all-trusting <code>TrustManager</code> because only hosts on the allowlist are insecure. From     our DevServer sample:</p> <pre><code>val clientCertificates = HandshakeCertificates.Builder()\n    .addPlatformTrustedCertificates()\n    .addInsecureHost(\"localhost\")\n    .build()\n\nval client = OkHttpClient.Builder()\n    .sslSocketFactory(clientCertificates.sslSocketFactory(), clientCertificates.trustManager)\n    .build()\n</code></pre> </li> <li> <p>New: Add <code>cacheHit</code>, <code>cacheMiss</code>, and <code>cacheConditionalHit()</code> events to <code>EventListener</code>. Use     these in logs, metrics, and even test cases to confirm your cache headers are configured as     expected.</p> </li> <li> <p>New: Constant string <code>okhttp3.VERSION</code>. This is a string like \u201c4.5.0-RC1\u201d, \u201c4.5.0\u201d, or     \u201c4.6.0-SNAPSHOT\u201d indicating the version of OkHttp in the current runtime. Use this to include     the OkHttp version in custom <code>User-Agent</code> headers.</p> </li> <li> <p>Fix: Don\u2019t crash when running as a plugin in Android Studio Canary 4.1. To enable     platform-specific TLS features OkHttp must detect whether it\u2019s running in a JVM or in Android.     The upcoming Android Studio runs in a JVM but has classes from Android and that confused OkHttp!</p> </li> <li> <p>Fix: Include the header <code>Accept: text/event-stream</code> for SSE calls. This header is not added if     the request already contains an <code>Accept</code> header.</p> </li> <li> <p>Fix: Don\u2019t crash with a <code>NullPointerException</code> if a server sends a close while we\u2019re sending a     ping. OkHttp had a race condition bug.</p> </li> </ul>"},{"location":"changelogs/changelog_4x/#version-460","title":"Version 4.6.0","text":"<p>2020-04-28</p> <ul> <li> <p>Fix: Follow HTTP 307 and 308 redirects on methods other than GET and POST. We\u2019re reluctant to     change OkHttp\u2019s behavior in handling common HTTP status codes, but this fix is overdue! The new     behavior is now consistent with RFC 7231, which is newer than OkHttp itself.     If you want this update with the old behavior use this interceptor.</p> </li> <li> <p>Fix: Don\u2019t crash decompressing web sockets messages. We had a bug where we assumed deflated     bytes in would always yield deflated bytes out and this isn\u2019t always the case!</p> </li> <li> <p>Fix: Reliably update and invalidate the disk cache on windows. As originally designed our     internal <code>DiskLruCache</code> assumes an inode-like file system, where it\u2019s fine to delete files that     are currently being read or written. On Windows the file system forbids this so we must be more     careful when deleting and renaming files.</p> </li> <li> <p>Fix: Don\u2019t crash on Java 8u252 which introduces an API previously found only on Java 9 and     above. See Jetty\u2019s overview of the API change and its consequences.</p> </li> <li> <p>New: <code>MultipartReader</code> is a streaming decoder for MIME multipart (RFC 2045)     messages. It complements <code>MultipartBody</code> which is our streaming encoder.</p> <pre><code>val response: Response = call.execute()\nval multipartReader = MultipartReader(response.body!!)\n\nmultipartReader.use {\n  while (true) {\n    val part = multipartReader.nextPart() ?: break\n    process(part.headers, part.body)\n  }\n}\n</code></pre> </li> <li> <p>New: <code>MediaType.parameter()</code> gets a parameter like <code>boundary</code> from a media type like     <code>multipart/mixed; boundary=\"abc\"</code>.</p> </li> <li> <p>New: <code>Authenticator.JAVA_NET_AUTHENTICATOR</code> forwards authentication requests to     <code>java.net.Authenticator</code>. This obsoletes <code>JavaNetAuthenticator</code> in the <code>okhttp-urlconnection</code>     module.</p> </li> <li> <p>New: <code>CertificatePinner</code> now offers an API for inspecting the configured pins.</p> </li> <li> <p>Upgrade: Okio 2.6.0.</p> <pre><code>implementation(\"com.squareup.okio:okio:2.6.0\")\n</code></pre> </li> <li> <p>Upgrade: publicsuffix.org data. This powers <code>HttpUrl.topPrivateDomain()</code>.     It\u2019s also how OkHttp knows which domains can share cookies with one another.</p> </li> <li> <p>Upgrade: Bouncy Castle 1.65. This dependency is required by the     <code>okhttp-tls</code> module.</p> </li> <li> <p>Upgrade: Kotlin 1.3.71.</p> </li> </ul>"},{"location":"changelogs/changelog_4x/#version-450","title":"Version 4.5.0","text":"<p>2020-04-06</p> <p>This release fixes a severe bug where OkHttp incorrectly detected and recovered from unhealthy connections. Stale or canceled connections were incorrectly attempted when they shouldn\u2019t have been, leading to rare cases of infinite retries. Please upgrade to this release!</p> <ul> <li>Fix: don\u2019t return stale DNS entries in <code>DnsOverHttps</code>. We were caching DNS results indefinitely     rather than the duration specified in the response\u2019s cache-control header.</li> <li>Fix: Verify certificate IP addresses in canonical form. When a server presents a TLS certificate     containing an IP address we must match that address against the URL\u2019s IP address, even when the     two addresses are encoded differently, such as <code>192.168.1.1</code> and <code>0::0:0:FFFF:C0A8:101</code>. Note     that OkHttp incorrectly rejected valid certificates resulting in a failure to connect; at no     point were invalid certificates accepted.</li> <li>New: <code>OkHttpClient.Builder.minWebSocketMessageToCompress()</code> configures a threshold for     compressing outbound web socket messages. Configure this with 0L to always compress outbound     messages and <code>Long.MAX_VALUE</code> to never compress outbound messages. The default is 1024L which     compresses messages of size 1 KiB and larger. (Inbound messages are compressed or not based on     the web socket server\u2019s configuration.)</li> <li>New: Defer constructing <code>Inflater</code> and <code>Deflater</code> instances until they are needed. This saves     memory if web socket compression is negotiated but not used.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-450-rc1","title":"Version 4.5.0-RC1","text":"<p>2020-03-17</p> <p>This release candidate turns on web socket compression.</p> <p>The spec includes a sophisticated mechanism for client and server to negotiate compression features. We strive to offer great performance in our default configuration and so we\u2019re making compression the default for everyone starting with this release candidate.</p> <p>Please be considerate of your servers and their operators as you roll out this release. Compression saves bandwidth but it costs CPU and memory! If you run into a problem you may need to adjust or disable the <code>permessage-deflate</code> compression settings on your server.</p> <p>Note that OkHttp won\u2019t use compression when sending messages smaller than 1 KiB.</p> <ul> <li>Fix: Don\u2019t crash when the URL hostname contains an underscore on Android.</li> <li>Fix: Change HTTP/2 to use a daemon thread for its socket reader. If you\u2019ve ever seen a command     line application hang after all of the work is done, it may be due to a non-daemon thread like     this one.</li> <li>New: Include suppressed exceptions when all routes to a target service fail.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-441","title":"Version 4.4.1","text":"<p>2020-03-08</p> <ul> <li> <p>Fix: Don\u2019t reuse a connection on redirect if certs match but DNS does not. For better     locality and performance OkHttp attempts to use the same pooled connection across redirects and     follow-ups. It independently shares connections when the IP addresses and certificates match,     even if the host names do not. In 4.4.0 we introduced a regression where we shared a connection     when certificates matched but the DNS addresses did not. This would only occur when following a     redirect from one hostname to another, and where both hosts had common certificates.</p> </li> <li> <p>Fix: Don\u2019t fail on a redirect when a client has configured a \u2018trust everything\u2019 trust manager.     Typically this would cause certain redirects to fail in debug and development configurations.</p> </li> </ul>"},{"location":"changelogs/changelog_4x/#version-440","title":"Version 4.4.0","text":"<p>2020-02-17</p> <ul> <li> <p>New: Support <code>canceled()</code> as an event that can be observed by <code>EventListener</code>. This should be     useful for splitting out canceled calls in metrics.</p> </li> <li> <p>New: Publish a bill of materials (BOM) for OkHttp. Depend on this from Gradle or Maven to     keep all of your OkHttp artifacts on the same version, even if they\u2019re declared via transitive     dependencies. You can even omit versions when declaring other OkHttp dependencies.</p> <pre><code>dependencies {\n   api(platform(\"com.squareup.okhttp3:okhttp-bom:4.4.0\"))\n   api(\"com.squareup.okhttp3:okhttp\")              // No version!\n   api(\"com.squareup.okhttp3:logging-interceptor\") // No version!\n}\n</code></pre> </li> <li> <p>New: Upgrade to Okio 2.4.3.</p> <pre><code>implementation(\"com.squareup.okio:okio:2.4.3\")\n</code></pre> </li> <li> <p>Fix: Limit retry attempts for HTTP/2 <code>REFUSED_STREAM</code> and <code>CANCEL</code> failures.</p> </li> <li>Fix: Retry automatically when incorrectly sharing a connection among multiple hostnames. OkHttp     shares connections when hosts share both IP addresses and certificates, such as <code>squareup.com</code>     and <code>www.squareup.com</code>. If a server refuses such sharing it will return HTTP 421 and OkHttp will     automatically retry on an unshared connection.</li> <li>Fix: Don\u2019t crash if a TLS tunnel\u2019s response body is truncated.</li> <li>Fix: Don\u2019t track unusable routes beyond their usefulness. We had a bug where we could track     certain bad routes indefinitely; now we only track the ones that could be necessary.</li> <li>Fix: Defer proxy selection until a proxy is required. This saves calls to <code>ProxySelector</code> on     calls that use a pooled connection.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-431","title":"Version 4.3.1","text":"<p>2020-01-07</p> <ul> <li>Fix: Don\u2019t crash with a <code>NullPointerException</code> when a web socket is closed before it connects.     This regression was introduced in OkHttp 4.3.0.</li> <li>Fix: Don\u2019t crash with an <code>IllegalArgumentException</code> when using custom trust managers on     Android 10. Android uses reflection to look up a magic <code>checkServerTrusted()</code> method and we     didn\u2019t have it.</li> <li>Fix: Explicitly specify the remote server name when making HTTPS connections on Android 5. In     4.3.0 we introduced a regression where server name indication (SNI) was broken on Android 5.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-430","title":"Version 4.3.0","text":"<p>2019-12-31</p> <ul> <li> <p>Fix: Degrade HTTP/2 connections after a timeout. When an HTTP/2 stream times out it may impact     the stream only or the entire connection. With this fix OkHttp will now send HTTP/2 pings after     a stream timeout to determine whether the connection should remain eligible for pooling.</p> </li> <li> <p>Fix: Don\u2019t call <code>EventListener.responseHeadersStart()</code> or <code>responseBodyStart()</code> until bytes have     been received. Previously these events were incorrectly sent too early, when OkHttp was ready to     read the response headers or body, which mislead tracing tools. Note that the <code>responseFailed()</code>     event always used to follow one of these events; now it may be sent without them.</p> </li> <li> <p>New: Upgrade to Kotlin 1.3.61.</p> </li> <li> <p>New: Match any number of subdomains with two asterisks in <code>CertificatePinner</code>. For example,     <code>**.squareup.com</code> matches <code>us-west.www.squareup.com</code>, <code>www.squareup.com</code> and <code>squareup.com</code>.</p> </li> <li> <p>New: Share threads more aggressively between OkHttp\u2019s HTTP/2 connections, connection pool,     web sockets, and cache. OkHttp has a new internal task runner abstraction for managed task     scheduling. In your debugger you will see new thread names and more use of daemon threads.</p> </li> <li> <p>Fix: Don\u2019t drop callbacks on unexpected exceptions. When an interceptor throws an unchecked     exception the callback is now notified that the call was canceled. The exception is still sent     to the uncaught exception handler for reporting and recovery.</p> </li> <li> <p>Fix: Un-deprecate <code>MockResponse.setHeaders()</code> and other setters. These were deprecated in OkHttp     4.0 but that broke method chaining for Java callers.</p> </li> <li> <p>Fix: Don\u2019t crash on HTTP/2 HEAD requests when the <code>Content-Length</code> header is present but is not     consistent with the length of the response body.</p> </li> <li> <p>Fix: Don\u2019t crash when converting a <code>HttpUrl</code> instance with an unresolvable hostname to a URI.     The new behavior strips invalid characters like <code>\"</code> and <code>{</code> from the hostname before converting.</p> </li> <li> <p>Fix: Undo a performance regression introduced in OkHttp 4.0 caused by differences in behavior     between Kotlin\u2019s <code>assert()</code> and Java\u2019s <code>assert()</code>. (Kotlin always evaluates the argument; Java     only does when assertions are enabled.)</p> </li> <li> <p>Fix: Honor <code>RequestBody.isOneShot()</code> in <code>HttpLoggingInterceptor</code>.</p> </li> </ul>"},{"location":"changelogs/changelog_4x/#version-422","title":"Version 4.2.2","text":"<p>2019-10-06</p> <ul> <li>Fix: When closing a canceled HTTP/2 stream, don\u2019t send the <code>END_STREAM</code> flag. This could cause     the server to incorrectly interpret the stream as having completed normally. This is most useful     when a request body needs to cancel its own call.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-421","title":"Version 4.2.1","text":"<p>2019-10-02</p> <ul> <li> <p>Fix: In 4.1.0 we introduced a performance regression that prevented connections from being     pooled in certain situations. We have good test coverage for connection pooling but we missed     this because it only occurs if you have proxy configured and you share a connection pool among     multiple <code>OkHttpClient</code> instances.</p> <p>This particularly-subtle bug was caused by us assigning each <code>OkHttpClient</code> instance its own <code>NullProxySelector</code> when an explicit proxy is configured. But we don\u2019t share connections when the proxy selectors are different. Ugh!</p> </li> </ul>"},{"location":"changelogs/changelog_4x/#version-420","title":"Version 4.2.0","text":"<p>2019-09-10</p> <ul> <li> <p>New: API to decode a certificate and private key to create a <code>HeldCertificate</code>. This accepts a     string containing both a certificate and PKCS #8-encoded private key.</p> <pre><code>val heldCertificate = HeldCertificate.decode(\"\"\"\n    |-----BEGIN CERTIFICATE-----\n    |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl\n    |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx\n    |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h\n    |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD\n    |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw\n    |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF\n    |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT\n    |yyaoEufLKVXhrTQhRfodTeigi4RX\n    |-----END CERTIFICATE-----\n    |-----BEGIN PRIVATE KEY-----\n    |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J\n    |lu/GJQZoU9lDrCPeUcQ28tzOWw==\n    |-----END PRIVATE KEY-----\n    \"\"\".trimMargin())\nval handshakeCertificates = HandshakeCertificates.Builder()\n    .heldCertificate(heldCertificate)\n    .build()\nval server = MockWebServer()\nserver.useHttps(handshakeCertificates.sslSocketFactory(), false)\n</code></pre> <p>Get these strings with <code>HeldCertificate.certificatePem()</code> and <code>privateKeyPkcs8Pem()</code>.</p> </li> <li> <p>Fix: Handshake now returns peer certificates in canonical order: each certificate is signed by     the certificate that follows and the last certificate is signed by a trusted root.</p> </li> <li> <p>Fix: Don\u2019t lose HTTP/2 flow control bytes when incoming data races with a stream close. If this     happened enough then eventually the connection would stall.</p> </li> <li> <p>Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we     could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to     fail the call.</p> </li> </ul>"},{"location":"changelogs/changelog_4x/#version-411","title":"Version 4.1.1","text":"<p>2019-09-05</p> <ul> <li>Fix: Don\u2019t drop repeated headers when validating cached responses. In our Kotlin upgrade we     introduced a regression where we iterated the number of unique header names rather than then     number of unique headers. If you\u2019re using OkHttp\u2019s response cache this may impact you.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-410","title":"Version 4.1.0","text":"<p>2019-08-12</p> <ul> <li> <p>OkHttp\u2019s new okhttp-brotli module implements Brotli compression. Install the interceptor to     enable Brotli compression, which compresses 5-20% smaller than gzip.</p> <pre><code>val client = OkHttpClient.Builder()\n    .addInterceptor(BrotliInterceptor)\n    .build()\n</code></pre> <p>This artifact has a dependency on Google\u2019s Brotli decoder (95 KiB).</p> </li> <li> <p>New: <code>EventListener.proxySelectStart()</code>, <code>proxySelectEnd()</code> events give visibility into the     proxy selection process.</p> </li> <li>New: <code>Response.byteString()</code> reads the entire response into memory as a byte string.</li> <li>New: <code>OkHttpClient.x509TrustManager</code> accessor.</li> <li>New: Permit new WebSocket response codes: 1012 (Service Restart), 1013 (Try     Again Later), and 1014 (invalid response from the upstream).</li> <li>New: Build with Kotlin 1.3.41, BouncyCastle 1.62, and Conscrypt 2.2.1.</li> <li>Fix: Recover gracefully when a coalesced connection immediately goes unhealthy.</li> <li>Fix: Defer the <code>SecurityException</code> when looking up the default proxy selector.</li> <li>Fix: Don\u2019t use brackets formatting IPv6 host names in MockWebServer.</li> <li>Fix: Don\u2019t permit cache iterators to remove entries that are being written.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-401","title":"Version 4.0.1","text":"<p>2019-07-10</p> <ul> <li>Fix: Tolerate null-hostile lists in public API. Lists created with <code>List.of(...)</code> don\u2019t like it     when you call <code>contains(null)</code> on them!</li> <li>Fix: Retain binary-compatibility in <code>okhttp3.internal.HttpHeaders.hasBody()</code>. Some unscrupulous     coders call this and we don\u2019t want their users to suffer.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-400","title":"Version 4.0.0","text":"<p>2019-06-26</p> <p>This release upgrades OkHttp to Kotlin. We tried our best to make fast and safe to upgrade from OkHttp 3.x. We wrote an upgrade guide to help with the migration and a blog post to explain it.</p> <ul> <li>Fix: Target Java 8 bytecode for Java and Kotlin.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-400-rc3","title":"Version 4.0.0-RC3","text":"<p>2019-06-24</p> <ul> <li>Fix: Retain binary-compatibility in <code>okhttp3.internal.HttpMethod</code>. Naughty third party SDKs     import this and we want to ease upgrades for their users.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-400-rc2","title":"Version 4.0.0-RC2","text":"<p>2019-06-21</p> <ul> <li>New: Require Kotlin 1.3.40.</li> <li>New: Change the Kotlin API from <code>File.toRequestBody()</code> to <code>File.asRequestBody()</code> and     <code>BufferedSource.toResponseBody()</code> to <code>BufferedSource.asResponseBody()</code>. If the returned value     is a view of what created it, we use as.</li> <li>Fix: Permit response codes of zero for compatibility with OkHttp 3.x.</li> <li>Fix: Change the return type of <code>MockWebServer.takeRequest()</code> to be nullable.</li> <li>Fix: Make <code>Call.clone()</code> public to Kotlin callers.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-400-rc1","title":"Version 4.0.0-RC1","text":"<p>2019-06-03</p> <ul> <li>First stable preview of OkHttp 4.</li> </ul>"},{"location":"changelogs/changelog_4x/#version-3x","title":"Version 3.x","text":"<p>Change log</p>"},{"location":"changelogs/upgrading_to_okhttp_4/","title":"Upgrading to OkHttp 4","text":"<p>OkHttp 4.x upgrades our implementation language from Java to Kotlin and keeps everything else the same. We\u2019ve chosen Kotlin because it gives us powerful new capabilities while integrating closely with Java.</p> <p>We spent a lot of time and energy on retaining strict compatibility with OkHttp 3.x. We\u2019re even keeping the package name the same: <code>okhttp3</code>!</p> <p>There are three kinds of compatibility we\u2019re tracking:</p> <ul> <li> <p>Binary compatibility is the ability to compile a program against OkHttp 3.x, and then to run    it against OkHttp 4.x. We\u2019re using the excellent japicmp library via its    Gradle plugin to enforce binary compatibility.</p> </li> <li> <p>Java source compatibility is the ability to upgrade Java uses of OkHttp 3.x to 4.x without    changing <code>.java</code> files.</p> </li> <li> <p>Kotlin source compatibility is the ability to upgrade Kotlin uses of OkHttp 3.x to 4.x    without changing <code>.kt</code> files.</p> </li> </ul> <p>With a few small exceptions (below), OkHttp 4.x is both binary- and Java source-compatible with OkHttp 3.x. You can use an OkHttp 4.x .jar file with applications or libraries built for OkHttp 3.x.</p> <p>OkHttp is not source-compatible for Kotlin callers, but upgrading should be automatic thanks to Kotlin\u2019s powerful deprecation features. Most developers should be able to use IntelliJ\u2019s Code Cleanup for a safe and fast upgrade.</p>"},{"location":"changelogs/upgrading_to_okhttp_4/#backwards-incompatible-changes","title":"Backwards-Incompatible Changes","text":""},{"location":"changelogs/upgrading_to_okhttp_4/#okhttpclient-final-methods","title":"OkHttpClient final methods","text":"<p><code>OkHttpClient</code> has 26 accessors like <code>interceptors()</code> and <code>writeTimeoutMillis()</code> that were non-final in OkHttp 3.x and are final in 4.x. These were made non-final for use with mocking frameworks like Mockito. We believe subtyping <code>OkHttpClient</code> is the wrong way to test with OkHttp. If you must, mock <code>Call.Factory</code> which is the interface that <code>OkHttpClient</code> implements.</p>"},{"location":"changelogs/upgrading_to_okhttp_4/#internal-api-changes","title":"Internal API changes","text":"<p>The <code>okhttp3.internal</code> package is not a published API and we change it frequently without warning. Depending on code in this package is bad and will cause you problems with any upgrade! But the 4.x will be particularly painful to naughty developers that import from this package! We changed a lot to take advantage of sweet Kotlin features.</p>"},{"location":"changelogs/upgrading_to_okhttp_4/#credentialsbasic","title":"Credentials.basic()","text":"<p>The username and password parameters to <code>Credentials.basic()</code> are now non-null strings. In OkHttp 3.x, null would yield a username or password of \u201cnull\u201d.</p>"},{"location":"changelogs/upgrading_to_okhttp_4/#httpurlqueryparametervalues","title":"HttpUrl.queryParameterValues()","text":"<p>The return type of <code>HttpUrl.queryParameterValues()</code> is <code>List&lt;String?&gt;</code>. Lists that may contain null are uncommon and Kotlin callers may have incorrectly assigned the result to <code>List&lt;String&gt;</code>.</p>"},{"location":"changelogs/upgrading_to_okhttp_4/#code-cleanup","title":"Code Cleanup","text":"<p>IntelliJ and Android Studio offer a Code Cleanup feature that will automatically update deprecated APIs with their replacements. Access this feature from the Search Anywhere dialog (double-press shift) or under the Analyze menu.</p> <p>We\u2019ve included deprecated APIs in OkHttp 4.0 because they make migration easy. We will remove them in a future release! If you\u2019re skipping releases, it\u2019ll be much easier if you upgrade to OkHttp 4.0 as an intermediate step.</p>"},{"location":"changelogs/upgrading_to_okhttp_4/#vars-and-vals","title":"Vars and Vals","text":"<p>Java doesn\u2019t have language support for properties so developers make do with getters and setters. Kotlin does have properties and we take advantage of them in OkHttp.</p> <ul> <li>Address: certificatePinner, connectionSpecs, dns, hostnameVerifier, protocols, proxy,    proxyAuthenticator, proxySelector, socketFactory, sslSocketFactory, url</li> <li>Cache: directory</li> <li>CacheControl: immutable, maxAgeSeconds, maxStaleSeconds, minFreshSeconds, mustRevalidate,    noCache, noStore, noTransform, onlyIfCached, sMaxAgeSeconds</li> <li>Challenge: authParams, charset, realm, scheme</li> <li>CipherSuite: javaName</li> <li>ConnectionSpec: cipherSuites, supportsTlsExtensions, tlsVersions</li> <li>Cookie: domain, expiresAt, hostOnly, httpOnly, name, path, persistent, value</li> <li>Dispatcher: executorService</li> <li>FormBody: size</li> <li>Handshake: cipherSuite, localCertificates, localPrincipal, peerCertificates, peerPrincipal,    tlsVersion</li> <li>HandshakeCertificates: keyManager, trustManager</li> <li>Headers: size</li> <li>HeldCertificate: certificate, keyPair</li> <li>HttpLoggingInterceptor: level</li> <li>HttpUrl: encodedFragment, encodedPassword, encodedPath, encodedPathSegments, encodedQuery,    encodedUsername, fragment, host, password, pathSegments, pathSize, port, query,    queryParameterNames, querySize, scheme, username</li> <li>MockResponse: headers, http2ErrorCode, socketPolicy, status, trailers</li> <li>MockWebServer: bodyLimit, port, protocolNegotiationEnabled, protocols, requestCount,    serverSocketFactory</li> <li>MultipartBody.Part: body, headers</li> <li>MultipartBody.: boundary, parts, size, type</li> <li>OkHttpClient: authenticator, cache, callTimeoutMillis, certificatePinner,    connectTimeoutMillis, connectionPool, connectionSpecs, cookieJar, dispatcher, dns,    eventListenerFactory, followRedirects, followSslRedirects, hostnameVerifier, interceptors,    networkInterceptors, pingIntervalMillis, protocols, proxy, proxyAuthenticator, proxySelector,    readTimeoutMillis, retryOnConnectionFailure, socketFactory, sslSocketFactory, writeTimeoutMillis</li> <li>PushPromise: headers, method, path, response</li> <li>Request: body, cacheControl, headers, method, url</li> <li>Response: body, cacheControl, cacheResponse, code, handshake, headers, message,    networkResponse, priorResponse, protocol, receivedResponseAtMillis, request, sentRequestAtMillis</li> <li>Route: address, proxy, socketAddress</li> <li>TlsVersion: javaName</li> </ul>"},{"location":"changelogs/upgrading_to_okhttp_4/#renamed-functions","title":"Renamed Functions","text":"<ul> <li>Headers.of(): for symmetry with <code>listOf()</code>, <code>setOf()</code>, etc., we\u2019ve replaced   <code>Headers.of(String...)</code> with <code>headersOf(vararg String)</code>.</li> </ul>"},{"location":"changelogs/upgrading_to_okhttp_4/#extension-functions","title":"Extension Functions","text":"<p>We\u2019ve migrated from static functions to extension functions where we think they fit.</p> Java Kotlin Handshake.get(SSLSession) SSLSession.handshake() Headers.of(Map) Map.toHeaders() HttpUrl.get(String) String.toHttpUrl() HttpUrl.get(URI) URI.toHttpUrlOrNull() HttpUrl.get(URL) URL.toHttpUrlOrNull() HttpUrl.parse(String) String.toHttpUrlOrNull() HttpUrl.uri() HttpUrl.toUri() HttpUrl.url() HttpUrl.toUrl() MediaType.get(String) String.toMediaType() MediaType.parse(String) String.toMediaTypeOrNull() RequestBody.create(ByteArray) ByteArray.toRequestBody() RequestBody.create(ByteString) ByteString.toRequestBody() RequestBody.create(File) File.asRequestBody() RequestBody.create(String) String.toRequestBody() ResponseBody.create(BufferedSource) BufferedSource.asResponseBody() ResponseBody.create(ByteArray) ByteArray.toResponseBody() ResponseBody.create(ByteString) ByteString.toResponseBody() ResponseBody.create(String) String.toResponseBody()"},{"location":"changelogs/upgrading_to_okhttp_4/#sam-conversions","title":"SAM Conversions","text":"<p>When you use Java APIs from Kotlin you can operate on Java interfaces as if they were Kotlin lambdas. The feature is available for interfaces that define a Single Abstract Method (SAM).</p> <p>But when you use Kotlin APIs from Kotlin there\u2019s no automatic conversion. Code that used SAM lambdas with OkHttp 3.x: must use <code>object :</code> with OkHttp 4.x:</p> <p>Kotlin calling OkHttp 3.x:</p> <pre><code>val client = OkHttpClient.Builder()\n    .dns { hostname -&gt; InetAddress.getAllByName(hostname).toList() }\n    .build()\n</code></pre> <p>Kotlin calling OkHttp 4.x:</p> <pre><code>val client = OkHttpClient.Builder()\n    .dns(object : Dns {\n      override fun lookup(hostname: String) =\n          InetAddress.getAllByName(hostname).toList()\n    })\n    .build()\n</code></pre> <p>SAM conversion impacts these APIs:</p> <ul> <li>Authenticator</li> <li>Dispatcher.setIdleCallback(Runnable)</li> <li>Dns</li> <li>EventListener.Factory</li> <li>HttpLoggingInterceptor.Logger</li> <li>LoggingEventListener.Factory</li> <li>OkHttpClient.Builder.hostnameVerifier(HostnameVerifier)</li> </ul> <p>JetBrains is working on SAM conversions of Kotlin interfaces. Expect it in a future release of the Kotlin language.</p>"},{"location":"changelogs/upgrading_to_okhttp_4/#companion-imports","title":"Companion Imports","text":"<p>The equivalent of static methods in Java is companion object functions in Kotlin. The bytecode is the same but <code>.kt</code> files now need <code>Companion</code> in the import.</p> <p>This works with OkHttp 3.x:</p> <pre><code>import okhttp3.CipherSuite.forJavaName\n</code></pre> <p>But OkHttp 4.x needs a <code>Companion</code>:</p> <pre><code>import okhttp3.CipherSuite.Companion.forJavaName\n</code></pre> <p>In the unlikely event that you have a lot of these, run this:</p> <pre><code>sed -i \"\" \\\n  's/^\\(import okhttp3\\.[^.]*\\)\\.\\([a-z][a-zA-Z]*\\)$/\\1.Companion.\\2/g' \\\n  `find . -name \"*.kt\"`\n</code></pre>"},{"location":"changelogs/upgrading_to_okhttp_4/#advanced-profiling","title":"Advanced Profiling","text":"<p>Android Studio\u2019s Advanced Profiling feature rewrites OkHttp bytecode for instrumentation. Unfortunately it crashes on OkHttp 4.x\u2019s bytecode. Until Google\u2019s bug is fixed you must disable advanced profiling in Android Studio.</p> <p></p>"},{"location":"changelogs/upgrading_to_okhttp_4/#r8-proguard","title":"R8 / ProGuard","text":"<p>R8 and ProGuard are both code optimizers for <code>.class</code> files.</p> <p>R8 is the default optimizer in Android Studio 3.4 and newer. It works well with all releases of OkHttp.</p> <p>ProGuard was the previous default. We\u2019re tracking problems with interactions between ProGuard, OkHttp 4.x, and Kotlin-originated <code>.class</code> files. Make sure you\u2019re on the latest release if you\u2019re using ProGuard,</p>"},{"location":"changelogs/upgrading_to_okhttp_4/#gradle","title":"Gradle","text":"<p>OkHttp 4\u2019s minimum requirements are Java 8+ and Android 5+. These requirements were first introduced with OkHttp 3.13.</p> <p>Here\u2019s what you need in <code>build.gradle</code> to target Java 8 byte code for Kotlin, Java, and Android plugins respectively.</p> <pre><code>compileKotlin {\n  kotlinOptions {\n    jvmTarget = \"1.8\"\n  }\n}\ncompileTestKotlin {\n  kotlinOptions {\n    jvmTarget = \"1.8\"\n  }\n}\n\ncompileJava {\n  sourceCompatibility = JavaVersion.VERSION_1_8\n  targetCompatibility = JavaVersion.VERSION_1_8\n}\n\nandroid {\n  compileOptions {\n    sourceCompatibility JavaVersion.VERSION_1_8\n    targetCompatibility JavaVersion.VERSION_1_8\n  }\n}\n</code></pre>"},{"location":"contribute/code_of_conduct/","title":"Open Source Code of Conduct","text":"<p>At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone.</p> <p>This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored.</p> <p>Square\u2019s open source community strives to:</p> <ul> <li> <p>Be open: We invite anyone to participate in any aspect of our projects. Our community is    open, and any responsibility can be carried by a contributor who demonstrates the required    capacity and competence.</p> </li> <li> <p>Be considerate: People use our work, and we depend on the work of others. Consider users and    colleagues before taking action. For example, changes to code, infrastructure, policy, and    documentation may negatively impact others.</p> </li> <li> <p>Be respectful: We expect people to work together to resolve conflict, assume good intentions,    and act with empathy. Do not turn disagreements into personal attacks.</p> </li> <li> <p>Be collaborative: Collaboration reduces redundancy and improves the quality of our work. We    strive for transparency within our open source community, and we work closely with upstream    developers and others in the free software community to coordinate our efforts.</p> </li> <li> <p>Be pragmatic: Questions are encouraged and should be asked early in the process to avoid    problems later. Be thoughtful and considerate when seeking out the appropriate forum for your    questions. Those who are asked should be responsive and helpful.</p> </li> <li> <p>Step down considerately: Members of every project come and go. When somebody leaves or    disengages from the project, they should make it known and take the proper steps to ensure that    others can pick up where they left off.</p> </li> </ul> <p>This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.</p>"},{"location":"contribute/code_of_conduct/#diversity-statement","title":"Diversity Statement","text":"<p>We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal.</p> <p>Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong.</p> <p>Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.</p>"},{"location":"contribute/code_of_conduct/#reporting-issues","title":"Reporting Issues","text":"<p>If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com. For more details, please see our Reporting Guidelines below.</p>"},{"location":"contribute/code_of_conduct/#thanks","title":"Thanks","text":"<p>Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter, Ubuntu, GDC, and Django communities. We are thankful for their work.</p>"},{"location":"contribute/code_of_conduct/#reporting-guide","title":"Reporting Guide","text":"<p>If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com. All reports will be handled with discretion.</p> <p>In your report please include:</p> <ul> <li>Your contact information.</li> <li>Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional    witnesses, please include them as well.</li> <li>Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly    available record (e.g. a mailing list archive or a public IRC logger), please include a link.</li> <li>Any additional information that may be helpful.</li> </ul> <p>After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond.</p> <p>Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.</p>"},{"location":"contribute/concurrency/","title":"Concurrency","text":"<p>This document describes the concurrency considerations for http/2 connections and the connection pool within OkHttp.</p>"},{"location":"contribute/concurrency/#http2-connections","title":"HTTP/2 Connections","text":"<p>The HttpURLConnection API is a blocking API. You make a blocking write to send a request, and a blocking read to receive the response.</p>"},{"location":"contribute/concurrency/#blocking-apis","title":"Blocking APIs","text":"<p>Blocking APIs are convenient because you get top-to-bottom procedural code without indirection. Network calls work like regular method calls: ask for data and it is returned. If the request fails, you get a stacktrace right where the call was made.</p> <p>Blocking APIs may be inefficient because you hold a thread idle while waiting on the network. Threads are expensive because they have both a memory overhead and a context-switching overhead.</p>"},{"location":"contribute/concurrency/#framed-protocols","title":"Framed protocols","text":"<p>Framed protocols like http/2 don\u2019t lend themselves to blocking APIs. Each application-layer thread wants to do blocking I/O for a specific stream, but the streams are multiplexed on the socket. You can\u2019t just talk to the socket, you need to cooperate with the other application-layer threads that you\u2019re sharing it with.</p> <p>Framing rules make it impractical to implement http/2 correctly on a single blocking thread. The flow-control features introduce feedback between reads and writes, requiring writes to acknowledge reads and reads to throttle writes.</p> <p>In OkHttp we expose a blocking API over a framed protocol. This document explains the code and policy that makes that work.</p>"},{"location":"contribute/concurrency/#threads","title":"Threads","text":""},{"location":"contribute/concurrency/#applications-calling-thread","title":"Application\u2019s calling thread","text":"<p>The application-layer must block on writing I/O. We can\u2019t return from a write until we\u2019ve pushed its bytes onto the socket. Otherwise, if the write fails we are unable to deliver its IOException to the application. We would have told the application layer that the write succeeded, but it didn\u2019t!</p> <p>The application-layer can also do blocking reads. If the application asks to read and there\u2019s nothing available, we need to hold that thread until either the bytes arrive, the stream is closed, or a timeout elapses. If we get bytes but there\u2019s nobody asking for them, we buffer them. We don\u2019t consider bytes as delivered for flow control until they\u2019re consumed by the application.</p> <p>Consider an application streaming a video over http/2. Perhaps the user pauses the video and the application stops reading bytes from this stream. The buffer will fill up, and flow control prevents the server from sending more data on this stream. When the user unpauses her video the buffer drains, the read is acknowledged, and the server proceeds to stream data.</p>"},{"location":"contribute/concurrency/#shared-reader-thread","title":"Shared reader thread","text":"<p>We can\u2019t rely on application threads to read data from the socket. Application threads are transient: sometimes they\u2019re reading and writing and sometimes they\u2019re off doing application-layer things. But the socket is permanent, and it needs constant attention: we dispatch all incoming frames so the connection is good-to-go when the application layer needs it.</p> <p>So we have a dedicated thread for every socket that just reads frames and dispatches them.</p> <p>The reader thread must never run application-layer code. Otherwise one slow stream can hold up the entire connection.</p> <p>Similarly, the reader thread must never block on writing because this can deadlock the connection. Consider a client and server that both violate this rule. If you get unlucky, they could fill up their TCP buffers (so that writes block) and then use their reader threads to write a frame. Nobody is reading on either end, and the buffers are never drained.</p>"},{"location":"contribute/concurrency/#do-stuff-later-pool","title":"Do-stuff-later pool","text":"<p>Sometimes there\u2019s an action required like calling the application layer or responding to a ping, and the thread discovering the action is not the thread that should do the work. We enqueue a runnable on this executor and it gets handled by one of the executor\u2019s threads.</p>"},{"location":"contribute/concurrency/#locks","title":"Locks","text":"<p>We have 3 different things that we synchronize on.</p>"},{"location":"contribute/concurrency/#http2connection","title":"Http2Connection","text":"<p>This lock guards internal state of each connection. This lock is never held for blocking operations. That means that we acquire the lock, read or write a few fields and release the lock. No I/O and no application-layer callbacks.</p>"},{"location":"contribute/concurrency/#http2stream","title":"Http2Stream","text":"<p>This lock guards the internal state of each stream. As above, it is never held for blocking operations. When we need to hold an application thread to block a read, we use wait/notify on this lock. This works because the lock is released while <code>wait()</code> is waiting.</p>"},{"location":"contribute/concurrency/#http2writer","title":"Http2Writer","text":"<p>Socket writes are guarded by the Http2Writer. Only one stream can write at a time so that messages are not interleaved. Writes are either made by application-layer threads or the do-stuff-later pool.</p>"},{"location":"contribute/concurrency/#holding-multiple-locks","title":"Holding multiple locks","text":"<p>You\u2019re allowed to take the Http2Connection lock while holding the Http2Writer lock. But not vice-versa. Because taking the Http2Writer lock can block.</p> <p>This is necessary for bookkeeping when creating new streams. Correct framing requires that stream IDs are sequential on the socket, so we need to bundle assigning the ID with sending the <code>SYN_STREAM</code> frame.</p>"},{"location":"contribute/concurrency/#connection-pool","title":"Connection Pool","text":"<p>A primary responsibility for any HTTP client is to efficiently manage network connections. Creating and establishing new connections require a fair amount of overhead and added latency. OkHttp will make every effort to reuse existing connections to avoid this overhead and added latency.</p> <p>Every OkHttpClient uses a connection pool. Its job is to maintain a reference to all open connections. When an HTTP request is started, OkHttp will attempt to reuse an existing connection from the pool. If there are no existing connections, a new one is created and put into the connection pool. For HTTP/2, the connection can be reused immediately. For HTTP/1, the request must be completed before it can be reused.</p> <p>Since HTTP requests frequently happen in parallel, connection pooling must be thread-safe.</p> <p>These are the primary classes involved with establishing, sharing, and terminating connections:</p> <ul> <li> <p>RealConnectionPool manages reuse of HTTP and HTTP/2 connections for reduced latency. Every OkHttpClient has one, and its lifetime spans the lifetime of the OkHttpClient.</p> </li> <li> <p>RealConnection is the socket and streams of an HTTP/1 or HTTP/2 connection. These are created on demand to fulfill HTTP requests. They may be reused for many HTTP request/response exchanges. Their lifetime is typically shorter than a connection pool.</p> </li> <li> <p>Exchange carries a single HTTP request/response pair.</p> </li> <li> <p>ExchangeFinder chooses which connection carries each exchange. Where possible it will use the same connection for all exchanges in a single call. It prefers reusing pooled connections over establishing new connections.      </p> </li> </ul>"},{"location":"contribute/concurrency/#per-connection-locks","title":"Per-Connection Locks","text":"<p>Each connection has its own lock. The connections in the pool are all in a <code>ConcurrentLinkedQueue</code>. Due to data races, iterators of this queue may return removed connections. Callers must check the connection\u2019s <code>noNewExchanges</code> property before using connections from the pool.</p> <p>The connection lock is never held while doing I/O (even closing a socket) to prevent contention.</p> <p>A lock-per-connection is used to maximize concurrency.</p>"},{"location":"contribute/contributing/","title":"Contributing","text":"<p>Keeping the project small and stable limits our ability to accept new contributors. We are not seeking new committers at this time, but some small contributions are welcome.</p> <p>If you\u2019ve found a security problem, please follow our bug bounty program.</p> <p>If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it.</p> <p>If you have a new feature idea, please build it in an external library. There are many libraries that sit on top or hook in via existing APIs. If you build something that integrates with OkHttp, tell us so that we can link it!</p> <p>Before code can be accepted all contributors must complete our Individual Contributor License Agreement (CLA).</p>"},{"location":"contribute/contributing/#code-contributions","title":"Code Contributions","text":"<p>Get working code on a personal branch with tests passing before you submit a PR:</p> <pre><code>./gradlew clean check\n</code></pre> <p>Please make every effort to follow existing conventions and style in order to keep the code as readable as possible.</p> <p>Contribute code changes through GitHub by forking the repository and sending a pull request. We squash all pull requests on merge.</p>"},{"location":"contribute/contributing/#gradle-setup","title":"Gradle Setup","text":"<pre><code>$ cat local.properties\nsdk.dir=PATH_TO_ANDROID_HOME/sdk\norg.gradle.caching=true\n</code></pre>"},{"location":"contribute/contributing/#running-android-tests","title":"Running Android Tests","text":"<p>$ ANDROID_SDK_ROOT=PATH_TO_ANDROID_HOME/sdk ./gradlew :android-test:connectedCheck -PandroidBuild=true</p>"},{"location":"contribute/contributing/#committers-guides","title":"Committer\u2019s Guides","text":"<ul> <li>Concurrency</li> <li>Debug Logging</li> <li>Releasing</li> </ul>"},{"location":"contribute/debug_logging/","title":"Debug Logging","text":"<p>OkHttp has internal APIs to enable debug logging. It uses the <code>java.util.logging</code> API which can be tricky to configure. As a shortcut, you can paste OkHttpDebugLogging.kt. Then enable debug logging for whichever features you need:</p> <pre><code>OkHttpDebugLogging.enableHttp2()\nOkHttpDebugLogging.enableTaskRunner()\n</code></pre>"},{"location":"contribute/debug_logging/#activating-on-android","title":"Activating on Android","text":"<pre><code>$ adb shell setprop log.tag.okhttp.Http2 DEBUG\n$ adb shell setprop log.tag.okhttp.TaskRunner DEBUG\n$ adb logcat '*:E' 'okhttp.Http2:D' 'okhttp.TaskRunner:D'\n</code></pre>"},{"location":"contribute/debug_logging/#http2-frame-logging","title":"HTTP/2 Frame Logging","text":"<p>This logs inbound (<code>&lt;&lt;</code>) and outbound (<code>&gt;&gt;</code>) frames for HTTP/2 connections.</p> <pre><code>[2020-01-01 00:00:00] &gt;&gt; CONNECTION 505249202a20485454502f322e300d0a0d0a534d0d0a0d0a\n[2020-01-01 00:00:00] &gt;&gt; 0x00000000     6 SETTINGS\n[2020-01-01 00:00:00] &gt;&gt; 0x00000000     4 WINDOW_UPDATE\n[2020-01-01 00:00:00] &gt;&gt; 0x00000003    47 HEADERS       END_STREAM|END_HEADERS\n[2020-01-01 00:00:00] &lt;&lt; 0x00000000     6 SETTINGS\n[2020-01-01 00:00:00] &lt;&lt; 0x00000000     0 SETTINGS      ACK\n[2020-01-01 00:00:00] &lt;&lt; 0x00000000     4 WINDOW_UPDATE\n[2020-01-01 00:00:00] &gt;&gt; 0x00000000     0 SETTINGS      ACK\n[2020-01-01 00:00:00] &lt;&lt; 0x00000003   322 HEADERS       END_HEADERS\n[2020-01-01 00:00:00] &lt;&lt; 0x00000003   288 DATA\n[2020-01-01 00:00:00] &lt;&lt; 0x00000003     0 DATA          END_STREAM\n[2020-01-01 00:00:00] &lt;&lt; 0x00000000     8 GOAWAY\n[2020-01-01 00:00:05] &lt;&lt; 0x00000000     8 GOAWAY\n</code></pre>"},{"location":"contribute/debug_logging/#task-runner-logging","title":"Task Runner Logging","text":"<p>This logs task enqueues, starts, and finishes.</p> <pre><code>[2020-01-01 00:00:00] Q10000 scheduled after   0 \u00b5s: OkHttp ConnectionPool\n[2020-01-01 00:00:00] Q10000 starting              : OkHttp ConnectionPool\n[2020-01-01 00:00:00] Q10000 run again after 300 s : OkHttp ConnectionPool\n[2020-01-01 00:00:00] Q10000 finished run in   1 ms: OkHttp ConnectionPool\n[2020-01-01 00:00:00] Q10001 scheduled after   0 \u00b5s: OkHttp squareup.com applyAndAckSettings\n[2020-01-01 00:00:00] Q10001 starting              : OkHttp squareup.com applyAndAckSettings\n[2020-01-01 00:00:00] Q10003 scheduled after   0 \u00b5s: OkHttp squareup.com onSettings\n[2020-01-01 00:00:00] Q10003 starting              : OkHttp squareup.com onSettings\n[2020-01-01 00:00:00] Q10001 finished run in   3 ms: OkHttp squareup.com applyAndAckSettings\n[2020-01-01 00:00:00] Q10003 finished run in 528 \u00b5s: OkHttp squareup.com onSettings\n[2020-01-01 00:00:00] Q10000 scheduled after   0 \u00b5s: OkHttp ConnectionPool\n[2020-01-01 00:00:00] Q10000 starting              : OkHttp ConnectionPool\n[2020-01-01 00:00:00] Q10000 run again after 300 s : OkHttp ConnectionPool\n[2020-01-01 00:00:00] Q10000 finished run in 739 \u00b5s: OkHttp ConnectionPool\n</code></pre>"},{"location":"features/caching/","title":"Caching","text":"<p>OkHttp implements an optional, off by default, Cache. OkHttp aims for RFC correct and pragmatic caching behaviour, following common real-world browser like Firefox/Chrome and  server behaviour when ambiguous.</p>"},{"location":"features/caching/#basic-usage","title":"Basic Usage","text":"<pre><code>  private val client: OkHttpClient = OkHttpClient.Builder()\n      .cache(Cache(\n          directory = File(application.cacheDir, \"http_cache\"),\n          // $0.05 worth of phone storage in 2020\n          maxSize = 50L * 1024L * 1024L // 50 MiB\n      ))\n      .build()\n</code></pre>"},{"location":"features/caching/#eventlistener-events","title":"EventListener events","text":"<p>Cache Events are exposed via the EventListener API.  Typical scenarios are below.</p>"},{"location":"features/caching/#cache-hit","title":"Cache Hit","text":"<p>In the ideal scenario the cache can fulfill the request without any conditional call to the network. This will skip the normal events such as DNS, connecting to the network, and downloading the response body.</p> <p>As recommended by the HTTP RFC the max age of a document is defaulted to 10% of the  document\u2019s age at the time it was served based on \u201cLast-Modified\u201d. Default expiration dates aren\u2019t used for URIs  containing a query.</p> <ul> <li>CallStart</li> <li>CacheHit</li> <li>CallEnd</li> </ul>"},{"location":"features/caching/#cache-miss","title":"Cache Miss","text":"<p>Under a cache miss the normal request events are seen but an additional event shows the presence of the cache. Cache Miss will be typical if the item has not been read from the network, is uncacheable, or is past it\u2019s  lifetime based on Response cache headers.</p> <ul> <li>CallStart </li> <li>CacheMiss</li> <li>ProxySelectStart</li> <li>\u2026 Standard Events \u2026</li> <li>CallEnd</li> </ul>"},{"location":"features/caching/#conditional-cache-hit","title":"Conditional Cache Hit","text":"<p>When cache flags require checking the cache results are still valid an early cacheConditionalHit event is received followed by a cache hit or miss.  Critically in the cache hit scenario the server won\u2019t send the response body.</p> <p>The response will have non-null <code>cacheResponse</code> and <code>networkResponse</code>. The cacheResponse will be used as the top level response only if the response code is HTTP/1.1 304 Not Modified.</p> <ul> <li>CallStart</li> <li>CacheConditionalHit</li> <li>ConnectionAcquired</li> <li>\u2026 Standard Events\u2026</li> <li>ResponseBodyEnd (0 bytes)</li> <li>CacheHit</li> <li>ConnectionReleased</li> <li>CallEnd</li> </ul>"},{"location":"features/caching/#cache-directory","title":"Cache directory","text":"<p>The cache directory must be exclusively owned by a single instance.</p> <p>Deleting the cache when it is no longer needed can be done.  However this may delete the purpose of the cache which is designed to persist between app restarts.</p> <pre><code>cache.delete()\n</code></pre>"},{"location":"features/caching/#pruning-the-cache","title":"Pruning the Cache","text":"<p>Pruning the entire Cache to clear space temporarily can be done using evictAll.</p> <pre><code>cache.evictAll()\n</code></pre> <p>Removing individual items can be done using the urls iterator. This would be typical after a user initiates a force refresh by a pull to refresh type action.</p> <pre><code>    val urlIterator = cache.urls()\n    while (urlIterator.hasNext()) {\n      if (urlIterator.next().startsWith(\"https://www.google.com/\")) {\n        urlIterator.remove()\n      }\n    }\n</code></pre>"},{"location":"features/caching/#troubleshooting","title":"Troubleshooting","text":"<ol> <li>Valid cacheable responses are not being cached</li> </ol> <p>Make sure you are reading responses fully as unless they are read fully, cancelled or stalled Responses will not be cached.</p>"},{"location":"features/caching/#overriding-normal-cache-behaviour","title":"Overriding normal cache behaviour","text":"<p>See Cache documentation. https://square.github.io/okhttp/4.x/okhttp/okhttp3/-cache/</p>"},{"location":"features/calls/","title":"Calls","text":"<p>The HTTP client\u2019s job is to accept your request and produce its response. This is simple in theory but it gets tricky in practice.</p>"},{"location":"features/calls/#requests","title":"Requests","text":"<p>Each HTTP request contains a URL, a method (like <code>GET</code> or <code>POST</code>), and a list of headers. Requests may also contain a body: a data stream of a specific content type.</p>"},{"location":"features/calls/#responses","title":"Responses","text":"<p>The response answers the request with a code (like 200 for success or 404 for not found), headers, and its own optional body.</p>"},{"location":"features/calls/#rewriting-requests","title":"Rewriting Requests","text":"<p>When you provide OkHttp with an HTTP request, you\u2019re describing the request at a high-level: \u201cfetch me this URL with these headers.\u201d For correctness and efficiency, OkHttp rewrites your request before transmitting it.</p> <p>OkHttp may add headers that are absent from the original request, including <code>Content-Length</code>, <code>Transfer-Encoding</code>, <code>User-Agent</code>, <code>Host</code>, <code>Connection</code>, and <code>Content-Type</code>. It will add an <code>Accept-Encoding</code> header for transparent response compression unless the header is already present. If you\u2019ve got cookies, OkHttp will add a <code>Cookie</code> header with them.</p> <p>Some requests will have a cached response. When this cached response isn\u2019t fresh, OkHttp can do a conditional GET to download an updated response if it\u2019s newer than what\u2019s cached. This requires headers like <code>If-Modified-Since</code> and <code>If-None-Match</code> to be added.</p>"},{"location":"features/calls/#rewriting-responses","title":"Rewriting Responses","text":"<p>If transparent compression was used, OkHttp will drop the corresponding response headers <code>Content-Encoding</code> and <code>Content-Length</code> because they don\u2019t apply to the decompressed response body.</p> <p>If a conditional GET was successful, responses from the network and cache are merged as directed by the spec.</p>"},{"location":"features/calls/#follow-up-requests","title":"Follow-up Requests","text":"<p>When your requested URL has moved, the webserver will return a response code like <code>302</code> to indicate the document\u2019s new URL. OkHttp will follow the redirect to retrieve a final response.</p> <p>If the response issues an authorization challenge, OkHttp will ask the <code>Authenticator</code> (if one is configured) to satisfy the challenge. If the authenticator supplies a credential, the request is retried with that credential included.</p>"},{"location":"features/calls/#retrying-requests","title":"Retrying Requests","text":"<p>Sometimes connections fail: either a pooled connection was stale and disconnected, or the webserver itself couldn\u2019t be reached. OkHttp will retry the request with a different route if one is available.</p>"},{"location":"features/calls/#calls_1","title":"Calls","text":"<p>With rewrites, redirects, follow-ups and retries, your simple request may yield many requests and responses. OkHttp uses <code>Call</code> to model the task of satisfying your request through however many intermediate requests and responses are necessary. Typically this isn\u2019t many! But it\u2019s comforting to know that your code will continue to work if your URLs are redirected or if you failover to an alternate IP address.</p> <p>Calls are executed in one of two ways:</p> <ul> <li>Synchronous: your thread blocks until the response is readable.</li> <li>Asynchronous: you enqueue the request on any thread, and get called back on another thread when the response is readable.</li> </ul> <p>Calls can be canceled from any thread. This will fail the call if it hasn\u2019t yet completed! Code that is writing the request body or reading the response body will suffer an <code>IOException</code> when its call is canceled.</p>"},{"location":"features/calls/#dispatch","title":"Dispatch","text":"<p>For synchronous calls, you bring your own thread and are responsible for managing how many simultaneous requests you make. Too many simultaneous connections wastes resources; too few harms latency.</p> <p>For asynchronous calls, <code>Dispatcher</code> implements policy for maximum simultaneous requests. You can set maximums per-webserver (default is 5), and overall (default is 64).</p>"},{"location":"features/connections/","title":"Connections","text":"<p>Although you provide only the URL, OkHttp plans its connection to your webserver using three types: URL, Address, and Route.</p>"},{"location":"features/connections/#urls","title":"URLs","text":"<p>URLs (like <code>https://github.com/square/okhttp</code>) are fundamental to HTTP and the Internet. In addition to being a universal, decentralized naming scheme for everything on the web, they also specify how to access web resources.</p> <p>URLs are abstract:</p> <ul> <li>They specify that the call may be plaintext (<code>http</code>) or encrypted (<code>https</code>), but not which cryptographic algorithms should be used. Nor do they specify how to verify the peer\u2019s certificates (the HostnameVerifier) or which certificates can be trusted (the SSLSocketFactory).</li> <li>They don\u2019t specify whether a specific proxy server should be used or how to authenticate with that proxy server.</li> </ul> <p>They\u2019re also concrete: each URL identifies a specific path (like <code>/square/okhttp</code>) and query (like <code>?q=sharks&amp;lang=en</code>). Each webserver hosts many URLs.</p>"},{"location":"features/connections/#addresses","title":"Addresses","text":"<p>Addresses specify a webserver (like <code>github.com</code>) and all of the static configuration necessary to connect to that server: the port number, HTTPS settings, and preferred network protocols (like HTTP/2).</p> <p>URLs that share the same address may also share the same underlying TCP socket connection. Sharing a connection has substantial performance benefits: lower latency, higher throughput (due to TCP slow start) and conserved battery. OkHttp uses a ConnectionPool that automatically reuses HTTP/1.x connections and multiplexes HTTP/2 connections.</p> <p>In OkHttp some fields of the address come from the URL (scheme, hostname, port) and the rest come from the OkHttpClient.</p>"},{"location":"features/connections/#routes","title":"Routes","text":"<p>Routes supply the dynamic information necessary to actually connect to a webserver. This is the specific IP address to attempt (as discovered by a DNS query), the exact proxy server to use (if a ProxySelector is in use), and which version of TLS to negotiate (for HTTPS connections).</p> <p>There may be many routes for a single address. For example, a webserver that is hosted in multiple datacenters may yield multiple IP addresses in its DNS response.</p> <p>In limited situations OkHttp will retry a route if connecting fails:</p> <ul> <li>When making an HTTPS connection through an HTTP proxy, the proxy may issue an authentication challenge. OkHttp will call the proxy authenticator and try again.</li> <li>When making TLS connections with multiple connection specs, these are attempted in sequence until the TLS handshake succeeds.</li> </ul>"},{"location":"features/connections/#connections_1","title":"Connections","text":"<p>When you request a URL with OkHttp, here\u2019s what it does:</p> <ol> <li>It uses the URL and configured OkHttpClient to create an address. This address specifies how we\u2019ll connect to the webserver.</li> <li>It attempts to retrieve a connection with that address from the connection pool.</li> <li>If it doesn\u2019t find a connection in the pool, it selects a route to attempt. This usually means making a DNS request to get the server\u2019s IP addresses. It then selects a TLS version and proxy server if necessary.</li> <li>If it\u2019s a new route, it connects by building either a direct socket connection, a TLS tunnel (for HTTPS over an HTTP proxy), or a direct TLS connection. It does TLS handshakes as necessary. This step may be retried for tunnel challenges and TLS handshake failures.</li> <li>It sends the HTTP request and reads the response.</li> </ol> <p>If there\u2019s a problem with the connection, OkHttp will select another route and try again. This allows OkHttp to recover when a subset of a server\u2019s addresses are unreachable. It\u2019s also useful when a pooled connection is stale or if the attempted TLS version is unsupported.</p> <p>Once the response has been received, the connection will be returned to the pool so it can be reused for a future request. Connections are evicted from the pool after a period of inactivity.</p>"},{"location":"features/connections/#fast-fallback","title":"Fast Fallback","text":"<p>Since version 5.0, <code>OkHttpClient</code> supports fast fallback, which is our implementation of Happy Eyeballs RFC 6555.</p> <p>With fast fallback, OkHttp attempts to connect to multiple web servers concurrently. It keeps whichever route connects first and cancels all of the others. Its rules are:</p> <ul> <li>Prefer to alternate IP addresses from different address families, (IPv6 / IPv4), starting with IPv6.</li> <li>Don\u2019t start a new attempt until 250 ms after the most recent attempt was started.</li> <li>Keep whichever TCP connection succeeds first and cancel all the others.</li> <li>Race TCP only. Only attempt a TLS handshake on the winning TCP connection.</li> </ul> <p>If the winner of the TCP handshake race fails to succeed in a TLS handshake, the process is restarted with the remaining routes.</p>"},{"location":"features/events/","title":"Events","text":"<p>Events allow you to capture metrics on your application\u2019s HTTP calls. Use events to monitor:</p> <ul> <li>The size and frequency of the HTTP calls your application makes. If you\u2019re making too many calls, or your calls are too large, you should know about it!</li> <li>The performance of these calls on the underlying network. If the network\u2019s performance isn\u2019t sufficient, you need to either improve the network or use less of it.</li> </ul>"},{"location":"features/events/#eventlistener","title":"EventListener","text":"<p>Subclass EventListener and override methods for the events you are interested in. In a successful HTTP call with no redirects or retries the sequence of events is described by this flow.</p> <p></p> <p>Here\u2019s a sample event listener that prints each event with a timestamp.</p> <pre><code>class PrintingEventListener extends EventListener {\n  private long callStartNanos;\n\n  private void printEvent(String name) {\n    long nowNanos = System.nanoTime();\n    if (name.equals(\"callStart\")) {\n      callStartNanos = nowNanos;\n    }\n    long elapsedNanos = nowNanos - callStartNanos;\n    System.out.printf(\"%.3f %s%n\", elapsedNanos / 1000000000d, name);\n  }\n\n  @Override public void callStart(Call call) {\n    printEvent(\"callStart\");\n  }\n\n  @Override public void callEnd(Call call) {\n    printEvent(\"callEnd\");\n  }\n\n  @Override public void dnsStart(Call call, String domainName) {\n    printEvent(\"dnsStart\");\n  }\n\n  @Override public void dnsEnd(Call call, String domainName, List&lt;InetAddress&gt; inetAddressList) {\n    printEvent(\"dnsEnd\");\n  }\n\n  ...\n}\n</code></pre> <p>We make a couple calls:</p> <pre><code>Request request = new Request.Builder()\n    .url(\"https://publicobject.com/helloworld.txt\")\n    .build();\n\nSystem.out.println(\"REQUEST 1 (new connection)\");\ntry (Response response = client.newCall(request).execute()) {\n  // Consume and discard the response body.\n  response.body().source().readByteString();\n}\n\nSystem.out.println(\"REQUEST 2 (pooled connection)\");\ntry (Response response = client.newCall(request).execute()) {\n  // Consume and discard the response body.\n  response.body().source().readByteString();\n}\n</code></pre> <p>And the listener prints the corresponding events:</p> <pre><code>REQUEST 1 (new connection)\n0.000 callStart\n0.010 dnsStart\n0.017 dnsEnd\n0.025 connectStart\n0.117 secureConnectStart\n0.586 secureConnectEnd\n0.586 connectEnd\n0.587 connectionAcquired\n0.588 requestHeadersStart\n0.590 requestHeadersEnd\n0.591 responseHeadersStart\n0.675 responseHeadersEnd\n0.676 responseBodyStart\n0.679 responseBodyEnd\n0.679 connectionReleased\n0.680 callEnd\nREQUEST 2 (pooled connection)\n0.000 callStart\n0.001 connectionAcquired\n0.001 requestHeadersStart\n0.001 requestHeadersEnd\n0.002 responseHeadersStart\n0.082 responseHeadersEnd\n0.082 responseBodyStart\n0.082 responseBodyEnd\n0.083 connectionReleased\n0.083 callEnd\n</code></pre> <p>Notice how no connect events are fired for the second call. It reused the connection from the first request for dramatically better performance.</p>"},{"location":"features/events/#eventlistenerfactory","title":"EventListener.Factory","text":"<p>In the preceding example we used a field, <code>callStartNanos</code>, to track the elapsed time of each event. This is handy, but it won\u2019t work if multiple calls are executing concurrently. To accommodate this, use a <code>Factory</code> to create a new <code>EventListener</code> instance for each <code>Call</code>. This allows each listener to keep call-specific state.</p> <p>This sample factory creates a unique ID for each call and uses that ID to differentiate calls in log messages.</p> <pre><code>class PrintingEventListener extends EventListener {\n  public static final Factory FACTORY = new Factory() {\n    final AtomicLong nextCallId = new AtomicLong(1L);\n\n    @Override public EventListener create(Call call) {\n      long callId = nextCallId.getAndIncrement();\n      System.out.printf(\"%04d %s%n\", callId, call.request().url());\n      return new PrintingEventListener(callId, System.nanoTime());\n    }\n  };\n\n  final long callId;\n  final long callStartNanos;\n\n  public PrintingEventListener(long callId, long callStartNanos) {\n    this.callId = callId;\n    this.callStartNanos = callStartNanos;\n  }\n\n  private void printEvent(String name) {\n    long elapsedNanos = System.nanoTime() - callStartNanos;\n    System.out.printf(\"%04d %.3f %s%n\", callId, elapsedNanos / 1000000000d, name);\n  }\n\n  @Override public void callStart(Call call) {\n    printEvent(\"callStart\");\n  }\n\n  @Override public void callEnd(Call call) {\n    printEvent(\"callEnd\");\n  }\n\n  ...\n}\n</code></pre> <p>We can use this listener to race a pair of concurrent HTTP requests:</p> <pre><code>Request washingtonPostRequest = new Request.Builder()\n    .url(\"https://www.washingtonpost.com/\")\n    .build();\nclient.newCall(washingtonPostRequest).enqueue(new Callback() {\n  ...\n});\n\nRequest newYorkTimesRequest = new Request.Builder()\n    .url(\"https://www.nytimes.com/\")\n    .build();\nclient.newCall(newYorkTimesRequest).enqueue(new Callback() {\n  ...\n});\n</code></pre> <p>Running this race over home WiFi shows the Times (<code>0002</code>) completes just slightly sooner than the Post (<code>0001</code>):</p> <pre><code>0001 https://www.washingtonpost.com/\n0001 0.000 callStart\n0002 https://www.nytimes.com/\n0002 0.000 callStart\n0002 0.010 dnsStart\n0001 0.013 dnsStart\n0001 0.022 dnsEnd\n0002 0.019 dnsEnd\n0001 0.028 connectStart\n0002 0.025 connectStart\n0002 0.072 secureConnectStart\n0001 0.075 secureConnectStart\n0001 0.386 secureConnectEnd\n0002 0.390 secureConnectEnd\n0002 0.400 connectEnd\n0001 0.403 connectEnd\n0002 0.401 connectionAcquired\n0001 0.404 connectionAcquired\n0001 0.406 requestHeadersStart\n0002 0.403 requestHeadersStart\n0001 0.414 requestHeadersEnd\n0002 0.411 requestHeadersEnd\n0002 0.412 responseHeadersStart\n0001 0.415 responseHeadersStart\n0002 0.474 responseHeadersEnd\n0002 0.475 responseBodyStart\n0001 0.554 responseHeadersEnd\n0001 0.555 responseBodyStart\n0002 0.554 responseBodyEnd\n0002 0.554 connectionReleased\n0002 0.554 callEnd\n0001 0.624 responseBodyEnd\n0001 0.624 connectionReleased\n0001 0.624 callEnd\n</code></pre> <p>The <code>EventListener.Factory</code> also makes it possible to limit metrics to a subset of calls. This one captures metrics on a random 10%:</p> <pre><code>class MetricsEventListener extends EventListener {\n  private static final Factory FACTORY = new Factory() {\n    @Override public EventListener create(Call call) {\n      if (Math.random() &lt; 0.10) {\n        return new MetricsEventListener(call);\n      } else {\n        return EventListener.NONE;\n      }\n    }\n  };\n\n  ...\n}\n</code></pre>"},{"location":"features/events/#events-with-failures","title":"Events with Failures","text":"<p>When an operation fails, a failure method is called. This is <code>connectFailed()</code> for failures while building a connection to the server, and <code>callFailed()</code> when the HTTP call fails permanently. When a failure happens it is possible that a <code>start</code> event won\u2019t have a corresponding <code>end</code> event.</p> <p></p>"},{"location":"features/events/#events-with-retries-and-follow-ups","title":"Events with Retries and Follow-Ups","text":"<p>OkHttp is resilient and can automatically recover from some connectivity failures. In this case, the <code>connectFailed()</code> event is not terminal and not followed by <code>callFailed()</code>. Event listeners will receive multiple events of the same type when retries are attempted.</p> <p>A single HTTP call may require follow-up requests to be made to handle authentication challenges, redirects, and HTTP-layer timeouts. In such cases multiple connections, requests, and responses may be attempted. Follow-ups are another reason a single call may trigger multiple events of the same type.</p> <p></p>"},{"location":"features/events/#availability","title":"Availability","text":"<p>Events is available as a public API in OkHttp 3.11. Future releases may introduce new event types; you will need to override the corresponding methods to handle them.</p>"},{"location":"features/https/","title":"HTTPS","text":"<p>OkHttp attempts to balance two competing concerns:</p> <ul> <li>Connectivity to as many hosts as possible. That includes advanced hosts that run the latest versions of boringssl and less out of date hosts running older versions of OpenSSL.</li> <li>Security of the connection. This includes verification of the remote webserver with certificates and the privacy of data exchanged with strong ciphers.</li> </ul> <p>When negotiating a connection to an HTTPS server, OkHttp needs to know which TLS versions and cipher suites to offer. A client that wants to maximize connectivity would include obsolete TLS versions and weak-by-design cipher suites. A strict client that wants to maximize security would be limited to only the latest TLS version and strongest cipher suites.</p> <p>Specific security vs. connectivity decisions are implemented by ConnectionSpec. OkHttp includes four built-in connection specs:</p> <ul> <li><code>RESTRICTED_TLS</code> is a secure configuration, intended to meet stricter compliance requirements.</li> <li><code>MODERN_TLS</code> is a secure configuration that connects to modern HTTPS servers.</li> <li><code>COMPATIBLE_TLS</code> is a secure configuration that connects to secure\u2013but not current\u2013HTTPS servers.</li> <li><code>CLEARTEXT</code> is an insecure configuration that is used for <code>http://</code> URLs.</li> </ul> <p>These loosely follow the model set in Google Cloud Policies. We track changes to this policy.</p> <p>By default, OkHttp will attempt a <code>MODERN_TLS</code> connection.  However by configuring the client connectionSpecs you can allow a fall back to <code>COMPATIBLE_TLS</code> connection if the modern configuration fails.</p> <pre><code>OkHttpClient client = new OkHttpClient.Builder()\n    .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS))\n    .build();\n</code></pre> <p>The TLS versions and cipher suites in each spec can change with each release. For example, in OkHttp 2.2 we dropped support for SSL 3.0 in response to the POODLE attack. And in OkHttp 2.3 we dropped support for RC4. As with your desktop web browser, staying up-to-date with OkHttp is the best way to stay secure.</p> <p>You can build your own connection spec with a custom set of TLS versions and cipher suites. For example, this configuration is limited to three highly-regarded cipher suites. Its drawback is that it requires Android 5.0+ and a similarly current webserver.</p> <pre><code>ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)\n    .tlsVersions(TlsVersion.TLS_1_2)\n    .cipherSuites(\n          CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n          CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n          CipherSuite.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256)\n    .build();\n\nOkHttpClient client = new OkHttpClient.Builder()\n    .connectionSpecs(Collections.singletonList(spec))\n    .build();\n</code></pre>"},{"location":"features/https/#debugging-tls-handshake-failures","title":"Debugging TLS Handshake Failures","text":"<p>The TLS handshake requires clients and servers to share a common TLS version and cipher suite. This depends on the JVM or Android version, OkHttp version, and web server configuration. If there is no common cipher suite and TLS version, your call will fail like this:</p> <pre><code>Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0x7f2719a89e80:\n    Failure in SSL library, usually a protocol error\n        error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake\n        failure (external/openssl/ssl/s23_clnt.c:770 0x7f2728a53ea0:0x00000000)\n    at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)\n</code></pre> <p>You can check a web server\u2019s configuration using Qualys SSL Labs. OkHttp\u2019s TLS configuration history is tracked here.</p> <p>Applications expected to be installed on older Android devices should consider adopting the Google Play Services\u2019 ProviderInstaller. This will increase security for users and increase connectivity with web servers.</p>"},{"location":"features/https/#certificate-pinning-kt-java","title":"Certificate Pinning (.kt, .java)","text":"<p>By default, OkHttp trusts the certificate authorities of the host platform. This strategy maximizes connectivity, but it is subject to certificate authority attacks such as the 2011 DigiNotar attack. It also assumes your HTTPS servers\u2019 certificates are signed by a certificate authority.</p> <p>Use CertificatePinner to restrict which certificates and certificate authorities are trusted. Certificate pinning increases security, but limits your server team\u2019s abilities to update their TLS certificates. Do not use certificate pinning without the blessing of your server\u2019s TLS administrator!</p>  Kotlin Java <pre><code>  private val client = OkHttpClient.Builder()\n      .certificatePinner(\n          CertificatePinner.Builder()\n              .add(\"publicobject.com\", \"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\")\n              .build())\n      .build()\n\n  fun run() {\n    val request = Request.Builder()\n        .url(\"https://publicobject.com/robots.txt\")\n        .build()\n\n    client.newCall(request).execute().use { response -&gt;\n      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n      for (certificate in response.handshake!!.peerCertificates) {\n        println(CertificatePinner.pin(certificate))\n      }\n    }\n  }\n</code></pre> <pre><code>  private final OkHttpClient client = new OkHttpClient.Builder()\n      .certificatePinner(\n          new CertificatePinner.Builder()\n              .add(\"publicobject.com\", \"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\")\n              .build())\n      .build();\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://publicobject.com/robots.txt\")\n        .build();\n\n    try (Response response = client.newCall(request).execute()) {\n      if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n      for (Certificate certificate : response.handshake().peerCertificates()) {\n        System.out.println(CertificatePinner.pin(certificate));\n      }\n    }\n  }\n</code></pre>"},{"location":"features/https/#customizing-trusted-certificates-kt-java","title":"Customizing Trusted Certificates (.kt, .java)","text":"<p>The full code sample shows how to replace the host platform\u2019s certificate authorities with your own set. As above, do not use custom certificates without the blessing of your server\u2019s TLS administrator!</p>  Kotlin Java <pre><code>  private val client: OkHttpClient\n\n  init {\n    val trustManager = trustManagerForCertificates(trustedCertificatesInputStream())\n    val sslContext = SSLContext.getInstance(\"TLS\")\n    sslContext.init(null, arrayOf&lt;TrustManager&gt;(trustManager), null)\n    val sslSocketFactory = sslContext.socketFactory\n\n    client = OkHttpClient.Builder()\n        .sslSocketFactory(sslSocketFactory, trustManager)\n        .build()\n  }\n\n  fun run() {\n    val request = Request.Builder()\n        .url(\"https://publicobject.com/helloworld.txt\")\n        .build()\n\n    client.newCall(request).execute().use { response -&gt;\n      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n      for ((name, value) in response.headers) {\n        println(\"$name: $value\")\n      }\n\n      println(response.body!!.string())\n    }\n  }\n\n  /**\n   * Returns an input stream containing one or more certificate PEM files. This implementation just\n   * embeds the PEM files in Java strings; most applications will instead read this from a resource\n   * file that gets bundled with the application.\n   */\n  private fun trustedCertificatesInputStream(): InputStream {\n    ... // Full source omitted. See sample.\n  }\n\n  private fun trustManagerForCertificates(inputStream: InputStream): X509TrustManager {\n    ... // Full source omitted. See sample.\n  }\n</code></pre> <pre><code>  private final OkHttpClient client;\n\n  public CustomTrust() {\n    X509TrustManager trustManager;\n    SSLSocketFactory sslSocketFactory;\n    try {\n      trustManager = trustManagerForCertificates(trustedCertificatesInputStream());\n      SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n      sslContext.init(null, new TrustManager[] { trustManager }, null);\n      sslSocketFactory = sslContext.getSocketFactory();\n    } catch (GeneralSecurityException e) {\n      throw new RuntimeException(e);\n    }\n\n    client = new OkHttpClient.Builder()\n        .sslSocketFactory(sslSocketFactory, trustManager)\n        .build();\n  }\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://publicobject.com/helloworld.txt\")\n        .build();\n\n    Response response = client.newCall(request).execute();\n    System.out.println(response.body().string());\n  }\n\n  private InputStream trustedCertificatesInputStream() {\n    ... // Full source omitted. See sample.\n  }\n\n  public SSLContext sslContextForTrustedCertificates(InputStream in) {\n    ... // Full source omitted. See sample.\n  }\n</code></pre>"},{"location":"features/interceptors/","title":"Interceptors","text":"<p>Interceptors are a powerful mechanism that can monitor, rewrite, and retry calls. Here\u2019s a simple interceptor that logs the outgoing request and the incoming response.</p> <pre><code>class LoggingInterceptor implements Interceptor {\n  @Override public Response intercept(Interceptor.Chain chain) throws IOException {\n    Request request = chain.request();\n\n    long t1 = System.nanoTime();\n    logger.info(String.format(\"Sending request %s on %s%n%s\",\n        request.url(), chain.connection(), request.headers()));\n\n    Response response = chain.proceed(request);\n\n    long t2 = System.nanoTime();\n    logger.info(String.format(\"Received response for %s in %.1fms%n%s\",\n        response.request().url(), (t2 - t1) / 1e6d, response.headers()));\n\n    return response;\n  }\n}\n</code></pre> <p>A call to <code>chain.proceed(request)</code> is a critical part of each interceptor\u2019s implementation. This simple-looking method is where all the HTTP work happens, producing a response to satisfy the request. If <code>chain.proceed(request)</code> is being called more than once previous response bodies must be closed.</p> <p>Interceptors can be chained. Suppose you have both a compressing interceptor and a checksumming interceptor: you\u2019ll need to decide whether data is compressed and then checksummed, or checksummed and then compressed. OkHttp uses lists to track interceptors, and interceptors are called in order.</p> <p></p>"},{"location":"features/interceptors/#application-interceptors","title":"Application Interceptors","text":"<p>Interceptors are registered as either application or network interceptors. We\u2019ll use the <code>LoggingInterceptor</code> defined above to show the difference.</p> <p>Register an application interceptor by calling <code>addInterceptor()</code> on <code>OkHttpClient.Builder</code>:</p> <pre><code>OkHttpClient client = new OkHttpClient.Builder()\n    .addInterceptor(new LoggingInterceptor())\n    .build();\n\nRequest request = new Request.Builder()\n    .url(\"http://www.publicobject.com/helloworld.txt\")\n    .header(\"User-Agent\", \"OkHttp Example\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nresponse.body().close();\n</code></pre> <p>The URL <code>http://www.publicobject.com/helloworld.txt</code> redirects to <code>https://publicobject.com/helloworld.txt</code>, and OkHttp follows this redirect automatically. Our application interceptor is called once and the response returned from <code>chain.proceed()</code> has the redirected response:</p> <pre><code>INFO: Sending request http://www.publicobject.com/helloworld.txt on null\nUser-Agent: OkHttp Example\n\nINFO: Received response for https://publicobject.com/helloworld.txt in 1179.7ms\nServer: nginx/1.4.6 (Ubuntu)\nContent-Type: text/plain\nContent-Length: 1759\nConnection: keep-alive\n</code></pre> <p>We can see that we were redirected because <code>response.request().url()</code> is different from <code>request.url()</code>. The two log statements log two different URLs.</p>"},{"location":"features/interceptors/#network-interceptors","title":"Network Interceptors","text":"<p>Registering a network interceptor is quite similar. Call <code>addNetworkInterceptor()</code> instead of <code>addInterceptor()</code>:</p> <pre><code>OkHttpClient client = new OkHttpClient.Builder()\n    .addNetworkInterceptor(new LoggingInterceptor())\n    .build();\n\nRequest request = new Request.Builder()\n    .url(\"http://www.publicobject.com/helloworld.txt\")\n    .header(\"User-Agent\", \"OkHttp Example\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nresponse.body().close();\n</code></pre> <p>When we run this code, the interceptor runs twice. Once for the initial request to <code>http://www.publicobject.com/helloworld.txt</code>, and another for the redirect to <code>https://publicobject.com/helloworld.txt</code>.</p> <pre><code>INFO: Sending request http://www.publicobject.com/helloworld.txt on Connection{www.publicobject.com:80, proxy=DIRECT hostAddress=54.187.32.157 cipherSuite=none protocol=http/1.1}\nUser-Agent: OkHttp Example\nHost: www.publicobject.com\nConnection: Keep-Alive\nAccept-Encoding: gzip\n\nINFO: Received response for http://www.publicobject.com/helloworld.txt in 115.6ms\nServer: nginx/1.4.6 (Ubuntu)\nContent-Type: text/html\nContent-Length: 193\nConnection: keep-alive\nLocation: https://publicobject.com/helloworld.txt\n\nINFO: Sending request https://publicobject.com/helloworld.txt on Connection{publicobject.com:443, proxy=DIRECT hostAddress=54.187.32.157 cipherSuite=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA protocol=http/1.1}\nUser-Agent: OkHttp Example\nHost: publicobject.com\nConnection: Keep-Alive\nAccept-Encoding: gzip\n\nINFO: Received response for https://publicobject.com/helloworld.txt in 80.9ms\nServer: nginx/1.4.6 (Ubuntu)\nContent-Type: text/plain\nContent-Length: 1759\nConnection: keep-alive\n</code></pre> <p>The network requests also contain more data, such as the <code>Accept-Encoding: gzip</code> header added by OkHttp to advertise support for response compression. The network interceptor\u2019s <code>Chain</code> has a non-null <code>Connection</code> that can be used to interrogate the IP address and TLS configuration that were used to connect to the webserver.</p>"},{"location":"features/interceptors/#choosing-between-application-and-network-interceptors","title":"Choosing between application and network interceptors","text":"<p>Each interceptor chain has relative merits.</p> <p>Application interceptors</p> <ul> <li>Don\u2019t need to worry about intermediate responses like redirects and retries.</li> <li>Are always invoked once, even if the HTTP response is served from the cache.</li> <li>Observe the application\u2019s original intent. Unconcerned with OkHttp-injected headers like <code>If-None-Match</code>.</li> <li>Permitted to short-circuit and not call <code>Chain.proceed()</code>.</li> <li>Permitted to retry and make multiple calls to <code>Chain.proceed()</code>.</li> <li>Can adjust Call timeouts using withConnectTimeout, withReadTimeout, withWriteTimeout.</li> </ul> <p>Network Interceptors</p> <ul> <li>Able to operate on intermediate responses like redirects and retries.</li> <li>Not invoked for cached responses that short-circuit the network.</li> <li>Observe the data just as it will be transmitted over the network.</li> <li>Access to the <code>Connection</code> that carries the request.</li> </ul>"},{"location":"features/interceptors/#rewriting-requests","title":"Rewriting Requests","text":"<p>Interceptors can add, remove, or replace request headers. They can also transform the body of those requests that have one. For example, you can use an application interceptor to add request body compression if you\u2019re connecting to a webserver known to support it.</p> <pre><code>/** This interceptor compresses the HTTP request body. Many webservers can't handle this! */\nfinal class GzipRequestInterceptor implements Interceptor {\n  @Override public Response intercept(Interceptor.Chain chain) throws IOException {\n    Request originalRequest = chain.request();\n    if (originalRequest.body() == null || originalRequest.header(\"Content-Encoding\") != null) {\n      return chain.proceed(originalRequest);\n    }\n\n    Request compressedRequest = originalRequest.newBuilder()\n        .header(\"Content-Encoding\", \"gzip\")\n        .method(originalRequest.method(), gzip(originalRequest.body()))\n        .build();\n    return chain.proceed(compressedRequest);\n  }\n\n  private RequestBody gzip(final RequestBody body) {\n    return new RequestBody() {\n      @Override public MediaType contentType() {\n        return body.contentType();\n      }\n\n      @Override public long contentLength() {\n        return -1; // We don't know the compressed length in advance!\n      }\n\n      @Override public void writeTo(BufferedSink sink) throws IOException {\n        BufferedSink gzipSink = Okio.buffer(new GzipSink(sink));\n        body.writeTo(gzipSink);\n        gzipSink.close();\n      }\n    };\n  }\n}\n</code></pre>"},{"location":"features/interceptors/#rewriting-responses","title":"Rewriting Responses","text":"<p>Symmetrically, interceptors can rewrite response headers and transform the response body. This is generally more dangerous than rewriting request headers because it may violate the webserver\u2019s expectations!</p> <p>If you\u2019re in a tricky situation and prepared to deal with the consequences, rewriting response headers is a powerful way to work around problems. For example, you can fix a server\u2019s misconfigured <code>Cache-Control</code> response header to enable better response caching:</p> <pre><code>/** Dangerous interceptor that rewrites the server's cache-control header. */\nprivate static final Interceptor REWRITE_CACHE_CONTROL_INTERCEPTOR = new Interceptor() {\n  @Override public Response intercept(Interceptor.Chain chain) throws IOException {\n    Response originalResponse = chain.proceed(chain.request());\n    return originalResponse.newBuilder()\n        .header(\"Cache-Control\", \"max-age=60\")\n        .build();\n  }\n};\n</code></pre> <p>Typically this approach works best when it complements a corresponding fix on the webserver!</p>"},{"location":"features/r8_proguard/","title":"R8 / ProGuard","text":"<p>If you use OkHttp as a dependency in an Android project which uses R8 as a default compiler you don\u2019t have to do anything. The specific rules are already bundled into the JAR which can be interpreted by R8 automatically.</p> <p>If you, however, don\u2019t use R8 you have to apply the rules from this file. You might also need rules from Okio which is a dependency of this library.</p>"},{"location":"security/security/","title":"Security","text":""},{"location":"security/security/#supported-versions","title":"Supported Versions","text":"Version Supported Notes 5.x \u2705 APIs subject to change in alpha releases. 4.x \u2705 Android 5.0+ (API level 21+) and on Java 8+. 3.x \u274c Ended 2021-12-31 Android 2.3+ (API level 9+) and Java 7+."},{"location":"security/security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository.</p> <p>If you believe you have discovered a security vulnerability, please follow the guidelines at https://bugcrowd.com/squareopensource</p>"},{"location":"security/security/#verifying-artifacts","title":"Verifying Artifacts","text":"<p>We sign our artifacts using this key:</p> <pre><code>pub rsa4096/dbd744ace7ade6aa50dd591f66b50994442d2d40 2021-07-09T14:50:19Z\n     Hash=a79b48fd6a1f31699c788b50c97d0b98\n\nuid Square Clippy &lt;opensource@squareup.com&gt;\nsig  sig  66b50994442d2d40 2021-07-09T14:50:19Z 2041-07-04T14:50:19Z ____________________ [selfsig]\n</code></pre> <p>The best way to verify artifacts is automatically with Gradle.</p>"},{"location":"security/security_providers/","title":"Security Providers","text":""},{"location":"security/security_providers/#provider-status","title":"Provider Status","text":"Provider HTTP/2 TLSv1.3 Powered By Notes JVM default Java 9+ Java 11+ OpenJDK Android default \u2705 Android 10+ BoringSSL GraalVM \u2705 OpenJDK Only actively tested with JDK 11, not with 8 target Bouncy Castle \u2705 Bouncy Castle Tracking bug. Conscrypt \u2705 \u2705 BoringSSL Activated if Conscrypt is first registered provider. OpenJSSE \u2705 OpenJDK OpenJDK backport. Corretto \u2705 \u2705 OpenSSL Amazon\u2019s high-performance provider. Tracking bug. <p>All providers support HTTP/1.1 and TLSv1.2.</p>"},{"location":"security/tls_configuration_history/","title":"TLS Configuration History","text":"<p>OkHttp tracks the dynamic TLS ecosystem to balance connectivity and security. This page is a log of changes we\u2019ve made over time to OkHttp\u2019s default TLS options.</p>"},{"location":"security/tls_configuration_history/#okhttp-314","title":"OkHttp 3.14","text":"<p>2019-03-14</p> <p>Remove 2 TLSv1.3 cipher suites that are neither available on OkHttp\u2019s host platforms nor enabled in releases of Chrome and Firefox.</p>"},{"location":"security/tls_configuration_history/#restricted_tls-cipher-suites","title":"RESTRICTED_TLS cipher suites","text":"<ul> <li>TLS_AES_128_GCM_SHA256\u00b9</li> <li>TLS_AES_256_GCM_SHA384\u00b9</li> <li>TLS_CHACHA20_POLY1305_SHA256\u00b9</li> <li>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</li> <li>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</li> <li>TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</li> <li>TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</li> <li>REMOVED: TLS_AES_128_CCM_SHA256\u00b9</li> <li>REMOVED: TLS_AES_128_CCM_8_SHA256\u00b9</li> </ul>"},{"location":"security/tls_configuration_history/#modern_tls-compatible_tls-cipher-suites","title":"MODERN_TLS / COMPATIBLE_TLS cipher suites","text":"<ul> <li>TLS_AES_128_GCM_SHA256\u00b9</li> <li>TLS_AES_256_GCM_SHA384\u00b9</li> <li>TLS_CHACHA20_POLY1305_SHA256\u00b9</li> <li>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</li> <li>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</li> <li>TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</li> <li>TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</li> <li>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\u00b2</li> <li>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_AES_128_GCM_SHA256\u00b2</li> <li>TLS_RSA_WITH_AES_256_GCM_SHA384\u00b2</li> <li>TLS_RSA_WITH_AES_128_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_AES_256_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_3DES_EDE_CBC_SHA\u00b2</li> <li>REMOVED: TLS_AES_128_CCM_SHA256\u00b9</li> <li>REMOVED: TLS_AES_128_CCM_8_SHA256\u00b9</li> </ul>"},{"location":"security/tls_configuration_history/#okhttp-313","title":"OkHttp 3.13","text":"<p>2019-02-04</p> <p>Remove TLSv1.1 and TLSv1 from MODERN_TLS. Change COMPATIBLE_TLS to support all TLS versions.</p>"},{"location":"security/tls_configuration_history/#restricted_tls-versions","title":"RESTRICTED_TLS versions","text":"<ul> <li>TLSv1.3</li> <li>TLSv1.2</li> </ul>"},{"location":"security/tls_configuration_history/#modern_tls-versions","title":"MODERN_TLS versions","text":"<ul> <li>TLSv1.3</li> <li>TLSv1.2</li> <li>REMOVED: TLSv1.1</li> <li>REMOVED: TLSv1</li> </ul>"},{"location":"security/tls_configuration_history/#compatible_tls-versions","title":"COMPATIBLE_TLS versions","text":"<ul> <li>NEW: TLSv1.3</li> <li>NEW: TLSv1.2</li> <li>NEW: TLSv1.1</li> <li>TLSv1</li> </ul>"},{"location":"security/tls_configuration_history/#okhttp-312","title":"OkHttp 3.12","text":"<p>2018-11-16</p> <p>Added support for TLSv1.3.</p>"},{"location":"security/tls_configuration_history/#restricted_tls-cipher-suites_1","title":"RESTRICTED_TLS cipher suites","text":"<ul> <li>NEW: TLS_AES_128_GCM_SHA256\u00b9</li> <li>NEW: TLS_AES_256_GCM_SHA384\u00b9</li> <li>NEW: TLS_CHACHA20_POLY1305_SHA256\u00b9</li> <li>NEW: TLS_AES_128_CCM_SHA256\u00b9</li> <li>NEW: TLS_AES_128_CCM_8_SHA256\u00b9</li> <li>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</li> <li>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</li> <li>TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</li> <li>TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</li> </ul>"},{"location":"security/tls_configuration_history/#modern_tls-compatible_tls-cipher-suites_1","title":"MODERN_TLS / COMPATIBLE_TLS cipher suites","text":"<ul> <li>NEW: TLS_AES_128_GCM_SHA256\u00b9</li> <li>NEW: TLS_AES_256_GCM_SHA384\u00b9</li> <li>NEW: TLS_CHACHA20_POLY1305_SHA256\u00b9</li> <li>NEW: TLS_AES_128_CCM_SHA256\u00b9</li> <li>NEW: TLS_AES_128_CCM_8_SHA256\u00b9</li> <li>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</li> <li>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</li> <li>TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</li> <li>TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</li> <li>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\u00b2</li> <li>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_AES_128_GCM_SHA256\u00b2</li> <li>TLS_RSA_WITH_AES_256_GCM_SHA384\u00b2</li> <li>TLS_RSA_WITH_AES_128_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_AES_256_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_3DES_EDE_CBC_SHA\u00b2</li> </ul>"},{"location":"security/tls_configuration_history/#restricted_tls-versions_1","title":"RESTRICTED_TLS versions","text":"<ul> <li>NEW: TLSv1.3</li> <li>TLSv1.2</li> </ul>"},{"location":"security/tls_configuration_history/#modern_tls-versions_1","title":"MODERN_TLS versions","text":"<ul> <li>NEW: TLSv1.3</li> <li>TLSv1.2</li> <li>TLSv1.1</li> <li>TLSv1</li> </ul>"},{"location":"security/tls_configuration_history/#compatible_tls-versions_1","title":"COMPATIBLE_TLS versions","text":"<ul> <li>TLSv1</li> </ul>"},{"location":"security/tls_configuration_history/#okhttp-311","title":"OkHttp 3.11","text":"<p>2018-07-12</p> <p>Added a new extra strict RESTRICTED_TLS configuration inspired by Google Cloud\u2019s similar policy. It is appropriate when both the host platform (JVM/Conscrypt/Android) and target webserver are current.</p>"},{"location":"security/tls_configuration_history/#restricted_tls-cipher-suites_2","title":"RESTRICTED_TLS cipher suites","text":"<ul> <li>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</li> <li>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</li> <li>TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</li> <li>TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</li> </ul>"},{"location":"security/tls_configuration_history/#restricted_tls-versions_2","title":"RESTRICTED_TLS versions","text":"<ul> <li>TLSv1.2</li> </ul>"},{"location":"security/tls_configuration_history/#okhttp-310","title":"OkHttp 3.10","text":"<p>2018-02-24</p> <p>Remove two rarely-used cipher suites from the default set. This tracks a Chromium change to remove these cipher suites because they are fragile and rarely-used.</p>"},{"location":"security/tls_configuration_history/#modern_tls-compatible_tls-cipher-suites_2","title":"MODERN_TLS / COMPATIBLE_TLS cipher suites","text":"<ul> <li>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</li> <li>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</li> <li>TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</li> <li>TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</li> <li>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\u00b2</li> <li>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_AES_128_GCM_SHA256\u00b2</li> <li>TLS_RSA_WITH_AES_256_GCM_SHA384\u00b2</li> <li>TLS_RSA_WITH_AES_128_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_AES_256_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_3DES_EDE_CBC_SHA\u00b2</li> <li>REMOVED: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</li> <li>REMOVED: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</li> </ul>"},{"location":"security/tls_configuration_history/#okhttp-35","title":"OkHttp 3.5","text":"<p>2016-11-30</p> <p>Remove three old cipher suites and add five new ones. This tracks changes in what\u2019s available on Android and Java, and also what cipher suites recent releases of Chrome and Firefox support by default.</p>"},{"location":"security/tls_configuration_history/#modern_tls-compatible_tls-cipher-suites_3","title":"MODERN_TLS / COMPATIBLE_TLS cipher suites","text":"<ul> <li>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</li> <li>NEW: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</li> <li>NEW: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</li> <li>NEW: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</li> <li>NEW: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</li> <li>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\u00b2</li> <li>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\u00b2</li> <li>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\u00b2</li> <li>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_AES_128_GCM_SHA256\u00b2</li> <li>NEW: TLS_RSA_WITH_AES_256_GCM_SHA384\u00b2</li> <li>TLS_RSA_WITH_AES_128_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_AES_256_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_3DES_EDE_CBC_SHA\u00b2</li> <li>REMOVED: TLS_DHE_RSA_WITH_AES_128_CBC_SHA</li> <li>REMOVED: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</li> <li>REMOVED: TLS_DHE_RSA_WITH_AES_256_CBC_SHA</li> </ul>"},{"location":"security/tls_configuration_history/#okhttp-30","title":"OkHttp 3.0","text":"<p>2016-01-13</p>"},{"location":"security/tls_configuration_history/#modern_tls-compatible_tls-cipher-suites_4","title":"MODERN_TLS / COMPATIBLE_TLS cipher suites","text":"<ul> <li>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</li> <li>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\u00b2</li> <li>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\u00b2</li> <li>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\u00b2</li> <li>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\u00b2</li> <li>TLS_DHE_RSA_WITH_AES_128_CBC_SHA\u00b2</li> <li>TLS_DHE_RSA_WITH_AES_256_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_AES_128_GCM_SHA256\u00b2</li> <li>TLS_RSA_WITH_AES_128_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_AES_256_CBC_SHA\u00b2</li> <li>TLS_RSA_WITH_3DES_EDE_CBC_SHA\u00b2</li> </ul>"},{"location":"security/tls_configuration_history/#modern_tls-versions_2","title":"MODERN_TLS versions","text":"<ul> <li>TLSv1.2</li> <li>TLSv1.1</li> <li>TLSv1</li> </ul>"},{"location":"security/tls_configuration_history/#compatible_tls-versions_2","title":"COMPATIBLE_TLS versions","text":"<ul> <li>TLSv1</li> </ul>"},{"location":"security/tls_configuration_history/#1-tlsv13-only","title":"\u00b9 TLSv1.3 Only","text":"<p>Cipher suites that are only available with TLSv1.3.</p> <p></p>"},{"location":"security/tls_configuration_history/#2-http2-cipher-suite-denylist","title":"\u00b2 HTTP/2 Cipher Suite Denylist","text":"<p>Cipher suites that are discouraged for use with HTTP/2. OkHttp includes them because better suites are not commonly available. For example, none of the better cipher suites listed above shipped with Android 4.4 or Java 7.</p>"}]}