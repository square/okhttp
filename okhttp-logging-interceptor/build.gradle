apply plugin: 'me.champeau.gradle.japicmp'
applyOsgi(this)

jar {
  // MANIFEST.MF, including OSGi bnd instructions.
  bnd '''
  Export-Package: okhttp3.logging
  Automatic-Module-Name: okhttp3.logging
  Bundle-SymbolicName: com.squareup.okhttp3.logging
  '''
}

test {
  useJUnitPlatform()
  systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

dependencies {
  api project(':okhttp')
  compileOnly deps.jsr305

  testCompileOnly deps.jsr305
  testImplementation project(':okhttp-testing-support')
  testImplementation project(':mockwebserver')
  testImplementation project(':mockwebserver-junit5')
  testImplementation project(':okhttp-tls')
  testImplementation deps.assertj
  testImplementation deps.junit5Api
}

afterEvaluate { project ->
  project.tasks.dokka {
    outputDirectory = "$rootDir/docs/4.x"
    outputFormat = 'gfm'
  }
}

task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {
  oldClasspath = files(baselineJar(project, baselineVersion))
  newClasspath = files(jar.archivePath)
  onlyBinaryIncompatibleModified = true
  failOnModification = true
  txtOutputFile = file("$buildDir/reports/japi.txt")
  ignoreMissingClasses = true
  includeSynthetic = true
}
check.dependsOn(japicmp)
