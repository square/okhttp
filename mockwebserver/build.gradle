apply plugin: 'com.vanniktech.maven.publish'
apply plugin: 'me.champeau.gradle.japicmp'

jar {
  manifest {
    attributes('Automatic-Module-Name': 'okhttp3.mockwebserver')
  }
}

dependencies {
  api project(':okhttp')
  api deps.junit

  testImplementation project(':okhttp-testing-support')
  testImplementation project(':okhttp-tls')
  testImplementation deps.assertj
}

task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {
  oldClasspath = files(baselineJar(project, baselineVersion))
  newClasspath = files(jar.archivePath)
  onlyBinaryIncompatibleModified = true
  failOnModification = true
  txtOutputFile = file("$buildDir/reports/japi.txt")
  ignoreMissingClasses = true
  includeSynthetic = true
  packageExcludes = [
      'okhttp3.mockwebserver.internal',
  ]        
  methodExcludes = [
      // Became 'final' in 4.0.0:
      'okhttp3.mockwebserver.RecordedRequest#getChunkSizes()',
      'okhttp3.mockwebserver.RecordedRequest#getHandshake()',
      'okhttp3.mockwebserver.RecordedRequest#getHeader(java.lang.String)',
      'okhttp3.mockwebserver.RecordedRequest#getHeaders()',
      'okhttp3.mockwebserver.RecordedRequest#getMethod()',
      'okhttp3.mockwebserver.RecordedRequest#getPath()',
      'okhttp3.mockwebserver.RecordedRequest#getRequestLine()',
      'okhttp3.mockwebserver.RecordedRequest#getRequestUrl()',
      'okhttp3.mockwebserver.RecordedRequest#getSequenceNumber()',
      'okhttp3.mockwebserver.RecordedRequest#getTlsVersion()',
      'okhttp3.mockwebserver.RecordedRequest#getUtf8Body()',
      'okhttp3.mockwebserver.RecordedRequest#getBody()',
      'okhttp3.mockwebserver.RecordedRequest#getBodySize()',
      'okhttp3.mockwebserver.PushPromise#headers()',
      'okhttp3.mockwebserver.PushPromise#method()',
      'okhttp3.mockwebserver.PushPromise#path()',
      'okhttp3.mockwebserver.PushPromise#response()',
  ]
}
check.dependsOn(japicmp)
