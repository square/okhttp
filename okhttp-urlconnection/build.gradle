apply plugin: 'me.champeau.gradle.japicmp'
applyOsgi(this)

def mainProj = project(':okhttp')
jar {
  // MANIFEST.MF, including OSGi bnd instructions.
  // urlconnection needs to be an OSGi fragment because its package name is the same as okhttp3's.
  bnd """
  Fragment-Host: com.squareup.okhttp3; bundle-version="\${range;[==,+);\${version_cleanup;${mainProj.version}}}"
  Automatic-Module-Name: okhttp3.urlconnection
  Bundle-SymbolicName: com.squareup.okhttp3.urlconnection
  -removeheaders: Private-Package
  """
}

dependencies {
  api mainProj
  compileOnly Dependencies.jsr305
  compileOnly Dependencies.animalSniffer

  testImplementation project(':okhttp-testing-support')
  testImplementation project(':okhttp-tls')
  testImplementation project(':mockwebserver-deprecated')
  testImplementation Dependencies.junit
  testImplementation Dependencies.assertj
}

afterEvaluate { project ->
  project.tasks.dokka {
    outputDirectory = "$rootDir/docs/4.x"
    outputFormat = 'gfm'
  }
}

task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {
  oldClasspath = files(baselineJar(project, baselineVersion))
  newClasspath = files(jar.archivePath)
  onlyBinaryIncompatibleModified = true
  failOnModification = true
  txtOutputFile = file("$buildDir/reports/japi.txt")
  ignoreMissingClasses = true
  includeSynthetic = true
}
check.dependsOn(japicmp)
