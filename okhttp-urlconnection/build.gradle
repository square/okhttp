apply plugin: 'me.champeau.gradle.japicmp'

jar {
  // modify these lines for MANIFEST.MF properties or for specific bnd instructions
  // because this project uses the same package name as the default okhttp project (which is mostly "invalid" for OSGi)
  // we have to remove okhttp from the bnd classpath and import it's packages manually
  bnd """
  Export-Package: okhttp3
  Import-Package: \
  okhttp3;version="\${range;[==,+);\${version_cleanup;${project.version}}}",\
  okhttp3.internal.*;version="\${range;[==,+);\${version_cleanup;${project.version}}}",\
  *
  Automatic-Module-Name: okhttp3.urlconnection
  Bundle-SymbolicName: com.squareup.okhttp3.urlconnection
  """
  setClasspath(files([]))
}

dependencies {
  api project(':okhttp')
  compileOnly deps.jsr305
  compileOnly deps.animalSniffer

  testImplementation project(':okhttp-testing-support')
  testImplementation project(':okhttp-tls')
  testImplementation project(':mockwebserver')
  testImplementation deps.junit
  testImplementation deps.assertj
}

afterEvaluate { project ->
  project.tasks.dokka {
    outputDirectory = "$rootDir/docs/4.x"
    outputFormat = 'gfm'
  }
}

task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {
  oldClasspath = files(baselineJar(project, baselineVersion))
  newClasspath = files(jar.archivePath)
  onlyBinaryIncompatibleModified = true
  failOnModification = true
  txtOutputFile = file("$buildDir/reports/japi.txt")
  ignoreMissingClasses = true
  includeSynthetic = true
}
check.dependsOn(japicmp)
