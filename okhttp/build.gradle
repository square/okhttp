apply plugin: 'com.vanniktech.maven.publish'

jar {
  manifest {
    attributes('Automatic-Module-Name': 'okhttp3')
  }
}

sourceSets {
  main.java.srcDirs += "$buildDir/generated/sources/java-templates/java/main"
}

compileJava {
  dependsOn 'copyJavaTemplates'
}

task copyJavaTemplates(type: Copy) {
  from 'src/main/java-templates'
  into "$buildDir/generated/sources/java-templates/java/main"
  expand('projectVersion': "$VERSION_NAME")
  filteringCharset = 'UTF-8'
}

dependencies {
  api deps.okio
  api deps.kotlinStdlib
  compileOnly deps.conscrypt
  compileOnly deps.android
  compileOnly deps.jsr305
  compileOnly deps.animalSniffer

  testImplementation deps.okio
  testImplementation project(':okhttp-testing-support')
  testImplementation project(':okhttp-tls')
  testImplementation project(':okhttp-urlconnection')
  testImplementation project(':mockwebserver')
  testImplementation project(':okhttp-logging-interceptor')
  testImplementation deps.conscrypt
  testImplementation deps.junit
  testImplementation deps.assertj
  testCompileOnly deps.jsr305
}

apply plugin: 'me.champeau.gradle.japicmp'
task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {
  oldClasspath = files(baselineJar(project, baselineVersion))
  newClasspath = files(jar.archivePath)
  onlyBinaryIncompatibleModified = true
  failOnModification = true
  txtOutputFile = file("$buildDir/reports/japi.txt")
  ignoreMissingClasses = true
  includeSynthetic = true
  packageExcludes = [
      'okhttp3.internal',
  ]
  classExcludes = [
      // Package-private in 3.x, internal in 4.0.0:
      'okhttp3.Cache$CacheResponseBody$1',
  ]
  methodExcludes = [
      // Became 'final' in 4.0.0:
      'okhttp3.Cache#delete()',
      'okhttp3.Cache#directory()',
      'okhttp3.Cache#evictAll()',
      'okhttp3.Cache#hitCount()',
      'okhttp3.Cache#initialize()',
      'okhttp3.Cache#isClosed()',
      'okhttp3.Cache#maxSize()',
      'okhttp3.Cache#networkCount()',
      'okhttp3.Cache#requestCount()',
      'okhttp3.Cache#size()',
      'okhttp3.Cache#urls()',
      'okhttp3.Cache#writeAbortCount()',
      'okhttp3.Cache#writeSuccessCount()',
      'okhttp3.CacheControl#immutable()',
      'okhttp3.CacheControl#isPrivate()',
      'okhttp3.CacheControl#isPublic()',
      'okhttp3.CacheControl#maxAgeSeconds()',
      'okhttp3.CacheControl#maxStaleSeconds()',
      'okhttp3.CacheControl#minFreshSeconds()',
      'okhttp3.CacheControl#mustRevalidate()',
      'okhttp3.CacheControl#noCache()',
      'okhttp3.CacheControl#noStore()',
      'okhttp3.CacheControl#noTransform()',
      'okhttp3.CacheControl#onlyIfCached()',
      'okhttp3.CacheControl#sMaxAgeSeconds()',
      'okhttp3.CacheControl$Builder#build()',
      'okhttp3.CacheControl$Builder#immutable()',
      'okhttp3.CacheControl$Builder#maxAge(int, java.util.concurrent.TimeUnit)',
      'okhttp3.CacheControl$Builder#maxStale(int, java.util.concurrent.TimeUnit)',
      'okhttp3.CacheControl$Builder#minFresh(int, java.util.concurrent.TimeUnit)',
      'okhttp3.CacheControl$Builder#noCache()',
      'okhttp3.CacheControl$Builder#noStore()',
      'okhttp3.CacheControl$Builder#noTransform()',
      'okhttp3.CacheControl$Builder#onlyIfCached()',
      'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',
      'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',
      'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',
      'okhttp3.CertificatePinner$Builder#build()',
      'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',
      'okhttp3.Challenge#scheme()',
      'okhttp3.Challenge#authParams()',
      'okhttp3.Challenge#realm()',
      'okhttp3.Challenge#charset()',
      'okhttp3.Challenge#withCharset(java.nio.charset.Charset)',
      'okhttp3.CipherSuite#javaName()',
      'okhttp3.ConnectionPool#connectionCount()',
      'okhttp3.ConnectionPool#evictAll()',
      'okhttp3.ConnectionPool#idleConnectionCount()',
      'okhttp3.ConnectionSpec#cipherSuites()',
      'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',
      'okhttp3.ConnectionSpec#isTls()',
      'okhttp3.ConnectionSpec#supportsTlsExtensions()',
      'okhttp3.ConnectionSpec#tlsVersions()',
      'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',
      'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',
      'okhttp3.ConnectionSpec$Builder#build()',
      'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',
      'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',
      'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',
      'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',
      'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',
      'okhttp3.Cookie#domain()',
      'okhttp3.Cookie#expiresAt()',
      'okhttp3.Cookie#hostOnly()',
      'okhttp3.Cookie#httpOnly()',
      'okhttp3.Cookie#matches(okhttp3.HttpUrl)',
      'okhttp3.Cookie#name()',
      'okhttp3.Cookie#path()',
      'okhttp3.Cookie#persistent()',
      'okhttp3.Cookie#secure()',
      'okhttp3.Cookie#value()',
      'okhttp3.Cookie$Builder#build()',
      'okhttp3.Cookie$Builder#domain(java.lang.String)',
      'okhttp3.Cookie$Builder#expiresAt(long)',
      'okhttp3.Cookie$Builder#hostOnlyDomain(java.lang.String)',
      'okhttp3.Cookie$Builder#httpOnly()',
      'okhttp3.Cookie$Builder#name(java.lang.String)',
      'okhttp3.Cookie$Builder#path(java.lang.String)',
      'okhttp3.Cookie$Builder#secure()',
      'okhttp3.Cookie$Builder#value(java.lang.String)',
      'okhttp3.Address#certificatePinner()',
      'okhttp3.Address#connectionSpecs()',
      'okhttp3.Address#dns()',
      'okhttp3.Address#hostnameVerifier()',
      'okhttp3.Address#protocols()',
      'okhttp3.Address#proxy()',
      'okhttp3.Address#proxyAuthenticator()',
      'okhttp3.Address#proxySelector()',
      'okhttp3.Address#sslSocketFactory()',
      'okhttp3.Address#url()',
      'okhttp3.Address#socketFactory()',
      'okhttp3.FormBody#encodedName(int)',
      'okhttp3.FormBody#encodedValue(int)',
      'okhttp3.FormBody#name(int)',
      'okhttp3.FormBody#size()',
      'okhttp3.FormBody#value(int)',
      'okhttp3.FormBody$Builder#add(java.lang.String, java.lang.String)',
      'okhttp3.FormBody$Builder#addEncoded(java.lang.String, java.lang.String)',
      'okhttp3.FormBody$Builder#build()',
      'okhttp3.Handshake#cipherSuite()',
      'okhttp3.Handshake#localCertificates()',
      'okhttp3.Handshake#localPrincipal()',
      'okhttp3.Handshake#peerCertificates()',
      'okhttp3.Handshake#tlsVersion()',
      'okhttp3.Handshake#peerPrincipal()',
      'okhttp3.Headers#byteCount()',
      'okhttp3.Headers#get(java.lang.String)',
      'okhttp3.Headers#getDate(java.lang.String)',
      'okhttp3.Headers#getInstant(java.lang.String)',
      'okhttp3.Headers#name(int)',
      'okhttp3.Headers#names()',
      'okhttp3.Headers#newBuilder()',
      'okhttp3.Headers#size()',
      'okhttp3.Headers#toMultimap()',
      'okhttp3.Headers#value(int)',
      'okhttp3.Headers#values(java.lang.String)',
      'okhttp3.Headers$Builder#add(java.lang.String)',
      'okhttp3.Headers$Builder#add(java.lang.String, java.lang.String)',
      'okhttp3.Headers$Builder#add(java.lang.String, java.util.Date)',
      'okhttp3.Headers$Builder#add(java.lang.String, java.time.Instant)',
      'okhttp3.Headers$Builder#addAll(okhttp3.Headers)',
      'okhttp3.Headers$Builder#addUnsafeNonAscii(java.lang.String, java.lang.String)',
      'okhttp3.Headers$Builder#build()',
      'okhttp3.Headers$Builder#get(java.lang.String)',
      'okhttp3.Headers$Builder#removeAll(java.lang.String)',
      'okhttp3.Headers$Builder#set(java.lang.String, java.util.Date)',
      'okhttp3.Headers$Builder#set(java.lang.String, java.time.Instant)',
      'okhttp3.Headers$Builder#set(java.lang.String, java.lang.String)',
      'okhttp3.HttpUrl#encodedFragment()',
      'okhttp3.HttpUrl#encodedPassword()',
      'okhttp3.HttpUrl#encodedPath()',
      'okhttp3.HttpUrl#encodedPathSegments()',
      'okhttp3.HttpUrl#encodedQuery()',
      'okhttp3.HttpUrl#encodedUsername()',
      'okhttp3.HttpUrl#fragment()',
      'okhttp3.HttpUrl#host()',
      'okhttp3.HttpUrl#isHttps()',
      'okhttp3.HttpUrl#newBuilder()',
      'okhttp3.HttpUrl#newBuilder(java.lang.String)',
      'okhttp3.HttpUrl#password()',
      'okhttp3.HttpUrl#pathSegments()',
      'okhttp3.HttpUrl#pathSize()',
      'okhttp3.HttpUrl#port()',
      'okhttp3.HttpUrl#query()',
      'okhttp3.HttpUrl#queryParameter(java.lang.String)',
      'okhttp3.HttpUrl#queryParameterName(int)',
      'okhttp3.HttpUrl#queryParameterNames()',
      'okhttp3.HttpUrl#queryParameterValue(int)',
      'okhttp3.HttpUrl#queryParameterValues(java.lang.String)',
      'okhttp3.HttpUrl#querySize()',
      'okhttp3.HttpUrl#redact()',
      'okhttp3.HttpUrl#resolve(java.lang.String)',
      'okhttp3.HttpUrl#scheme()',
      'okhttp3.HttpUrl#topPrivateDomain()',
      'okhttp3.HttpUrl#uri()',
      'okhttp3.HttpUrl#url()',
      'okhttp3.HttpUrl#username()',
      'okhttp3.HttpUrl$Builder#addEncodedPathSegment(java.lang.String)',
      'okhttp3.HttpUrl$Builder#addEncodedPathSegments(java.lang.String)',
      'okhttp3.HttpUrl$Builder#addEncodedQueryParameter(java.lang.String, java.lang.String)',
      'okhttp3.HttpUrl$Builder#addPathSegment(java.lang.String)',
      'okhttp3.HttpUrl$Builder#addPathSegments(java.lang.String)',
      'okhttp3.HttpUrl$Builder#addQueryParameter(java.lang.String, java.lang.String)',
      'okhttp3.HttpUrl$Builder#build()',
      'okhttp3.HttpUrl$Builder#encodedFragment(java.lang.String)',
      'okhttp3.HttpUrl$Builder#encodedPassword(java.lang.String)',
      'okhttp3.HttpUrl$Builder#encodedPath(java.lang.String)',
      'okhttp3.HttpUrl$Builder#encodedQuery(java.lang.String)',
      'okhttp3.HttpUrl$Builder#encodedUsername(java.lang.String)',
      'okhttp3.HttpUrl$Builder#fragment(java.lang.String)',
      'okhttp3.HttpUrl$Builder#host(java.lang.String)',
      'okhttp3.HttpUrl$Builder#password(java.lang.String)',
      'okhttp3.HttpUrl$Builder#port(int)',
      'okhttp3.HttpUrl$Builder#query(java.lang.String)',
      'okhttp3.HttpUrl$Builder#removeAllEncodedQueryParameters(java.lang.String)',
      'okhttp3.HttpUrl$Builder#removeAllQueryParameters(java.lang.String)',
      'okhttp3.HttpUrl$Builder#removePathSegment(int)',
      'okhttp3.HttpUrl$Builder#scheme(java.lang.String)',
      'okhttp3.HttpUrl$Builder#setEncodedPathSegment(int, java.lang.String)',
      'okhttp3.HttpUrl$Builder#setEncodedQueryParameter(java.lang.String, java.lang.String)',
      'okhttp3.HttpUrl$Builder#setPathSegment(int, java.lang.String)',
      'okhttp3.HttpUrl$Builder#setQueryParameter(java.lang.String, java.lang.String)',
      'okhttp3.HttpUrl$Builder#username(java.lang.String)',
      'okhttp3.MediaType#charset()',
      'okhttp3.MediaType#charset(java.nio.charset.Charset)',
      'okhttp3.MediaType#subtype()',
      'okhttp3.MediaType#type()',
      'okhttp3.OkHttpClient$Builder#addInterceptor(okhttp3.Interceptor)',
      'okhttp3.OkHttpClient$Builder#addNetworkInterceptor(okhttp3.Interceptor)',
      'okhttp3.OkHttpClient$Builder#authenticator(okhttp3.Authenticator)',
      'okhttp3.OkHttpClient$Builder#build()',
      'okhttp3.OkHttpClient$Builder#cache(okhttp3.Cache)',
      'okhttp3.OkHttpClient$Builder#callTimeout(long, java.util.concurrent.TimeUnit)',
      'okhttp3.OkHttpClient$Builder#callTimeout(java.time.Duration)',
      'okhttp3.OkHttpClient$Builder#certificatePinner(okhttp3.CertificatePinner)',
      'okhttp3.OkHttpClient$Builder#connectionPool(okhttp3.ConnectionPool)',
      'okhttp3.OkHttpClient$Builder#connectionSpecs(java.util.List)',
      'okhttp3.OkHttpClient$Builder#connectTimeout(long, java.util.concurrent.TimeUnit)',
      'okhttp3.OkHttpClient$Builder#connectTimeout(java.time.Duration)',
      'okhttp3.OkHttpClient$Builder#cookieJar(okhttp3.CookieJar)',
      'okhttp3.OkHttpClient$Builder#dispatcher(okhttp3.Dispatcher)',
      'okhttp3.OkHttpClient$Builder#dns(okhttp3.Dns)',
      'okhttp3.OkHttpClient$Builder#eventListener(okhttp3.EventListener)',
      'okhttp3.OkHttpClient$Builder#eventListenerFactory(okhttp3.EventListener$Factory)',
      'okhttp3.OkHttpClient$Builder#followRedirects(boolean)',
      'okhttp3.OkHttpClient$Builder#followSslRedirects(boolean)',
      'okhttp3.OkHttpClient$Builder#hostnameVerifier(javax.net.ssl.HostnameVerifier)',
      'okhttp3.OkHttpClient$Builder#interceptors()',
      'okhttp3.OkHttpClient$Builder#networkInterceptors()',
      'okhttp3.OkHttpClient$Builder#pingInterval(long, java.util.concurrent.TimeUnit)',
      'okhttp3.OkHttpClient$Builder#pingInterval(java.time.Duration)',
      'okhttp3.OkHttpClient$Builder#protocols(java.util.List)',
      'okhttp3.OkHttpClient$Builder#proxy(java.net.Proxy)',
      'okhttp3.OkHttpClient$Builder#proxyAuthenticator(okhttp3.Authenticator)',
      'okhttp3.OkHttpClient$Builder#proxySelector(java.net.ProxySelector)',
      'okhttp3.OkHttpClient$Builder#readTimeout(long, java.util.concurrent.TimeUnit)',
      'okhttp3.OkHttpClient$Builder#readTimeout(java.time.Duration)',
      'okhttp3.OkHttpClient$Builder#retryOnConnectionFailure(boolean)',
      'okhttp3.OkHttpClient$Builder#socketFactory(javax.net.SocketFactory)',
      'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory)',
      'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory, javax.net.ssl.X509TrustManager)',
      'okhttp3.OkHttpClient$Builder#writeTimeout(long, java.util.concurrent.TimeUnit)',
      'okhttp3.OkHttpClient$Builder#writeTimeout(java.time.Duration)',
      'okhttp3.RealCall#getResponseWithInterceptorChain()',
      'okhttp3.RealCall#redactedUrl()',
      'okhttp3.RealCall#toLoggableString()',
      'okhttp3.RealCall$AsyncCall#callsPerHost()',
      'okhttp3.RealCall$AsyncCall#executeOn(java.util.concurrent.ExecutorService)',
      'okhttp3.RealCall$AsyncCall#get()',
      'okhttp3.RealCall$AsyncCall#host()',
      'okhttp3.RealCall$AsyncCall#request()',
      'okhttp3.RealCall$AsyncCall#reuseCallsPerHostFrom(okhttp3.RealCall$AsyncCall)',
      'okhttp3.Request#body()',
      'okhttp3.Request#cacheControl()',
      'okhttp3.Request#header(java.lang.String)',
      'okhttp3.Request#headers()',
      'okhttp3.Request#headers(java.lang.String)',
      'okhttp3.Request#isHttps()',
      'okhttp3.Request#method()',
      'okhttp3.Request#newBuilder()',
      'okhttp3.Request#tag()',
      'okhttp3.Request#tag(java.lang.Class)',
      'okhttp3.Request#url()',
      'okhttp3.Response#body()',
      'okhttp3.Response#cacheControl()',
      'okhttp3.Response#cacheResponse()',
      'okhttp3.Response#challenges()',
      'okhttp3.Response#code()',
      'okhttp3.Response#handshake()',
      'okhttp3.Response#header(java.lang.String)',
      'okhttp3.Response#header(java.lang.String, java.lang.String)',
      'okhttp3.Response#headers(java.lang.String)',
      'okhttp3.Response#headers()',
      'okhttp3.Response#isRedirect()',
      'okhttp3.Response#isSuccessful()',
      'okhttp3.Response#message()',
      'okhttp3.Response#networkResponse()',
      'okhttp3.Response#newBuilder()',
      'okhttp3.Response#peekBody(long)',
      'okhttp3.Response#priorResponse()',
      'okhttp3.Response#protocol()',
      'okhttp3.Response#receivedResponseAtMillis()',
      'okhttp3.Response#request()',
      'okhttp3.Response#sentRequestAtMillis()',
      'okhttp3.Response#trailers()',
      'okhttp3.Route#address()',
      'okhttp3.Route#proxy()',
      'okhttp3.Route#requiresTunnel()',
      'okhttp3.Route#socketAddress()',
      'okhttp3.TlsVersion#javaName()',
  ]
}
check.dependsOn(japicmp)
