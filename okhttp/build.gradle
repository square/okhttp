apply plugin: 'me.champeau.gradle.japicmp'

jar {
  manifest {
    attributes('Automatic-Module-Name': 'okhttp3')
  }
}

sourceSets {
  main.java.srcDirs += "$buildDir/generated/sources/java-templates/java/main"
}

compileKotlin {
  dependsOn 'copyJavaTemplates'
}

task copyJavaTemplates(type: Copy) {
  from 'src/main/java-templates'
  into "$buildDir/generated/sources/java-templates/java/main"
  expand('projectVersion': "${project.version}")
  filteringCharset = 'UTF-8'
}

dependencies {
  api deps.okio
  api deps.kotlinStdlib
  compileOnly deps.android
  compileOnly deps.bouncycastle
  compileOnly deps.bouncycastletls
  compileOnly deps.conscrypt
  compileOnly deps.openjsse
  compileOnly deps.jsr305
  compileOnly deps.animalSniffer

  testImplementation project(':okhttp-testing-support')
  testImplementation project(':okhttp-tls')
  testImplementation project(':okhttp-urlconnection')
  testImplementation project(':mockwebserver')
  testImplementation project(':okhttp-logging-interceptor')
  testImplementation deps.conscrypt
  testImplementation deps.junit
  testImplementation deps.assertj
  testImplementation deps.openjsse
  testCompileOnly deps.jsr305
}

afterEvaluate { project ->
  project.tasks.dokka {
    outputDirectory = "$rootDir/docs/4.x"
    outputFormat = 'gfm'
  }
}

task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {
  oldClasspath = files(baselineJar(project, baselineVersion))
  newClasspath = files(jar.archivePath)
  onlyBinaryIncompatibleModified = true
  failOnModification = true
  txtOutputFile = file("$buildDir/reports/japi.txt")
  ignoreMissingClasses = true
  includeSynthetic = true
  packageExcludes = [
      'okhttp3.internal',
      'okhttp3.internal.annotations',
      'okhttp3.internal.cache',
      'okhttp3.internal.cache2',
      'okhttp3.internal.connection',
      'okhttp3.internal.http',
      'okhttp3.internal.http1',
      'okhttp3.internal.http2',
      'okhttp3.internal.io',
      'okhttp3.internal.platform',
      'okhttp3.internal.proxy',
      'okhttp3.internal.publicsuffix',
      'okhttp3.internal.tls',
      'okhttp3.internal.ws',
  ]
  classExcludes = [
      // Package-private in 3.x, internal in 4.0.0:
      'okhttp3.Cache$CacheResponseBody$1',
      'okhttp3.RealCall$AsyncCall',
  ]
  methodExcludes = [
      // Became 'final' despite a non-final enclosing class in 4.0.0:
      'okhttp3.OkHttpClient#authenticator()',
      'okhttp3.OkHttpClient#cache()',
      'okhttp3.OkHttpClient#callTimeoutMillis()',
      'okhttp3.OkHttpClient#certificatePinner()',
      'okhttp3.OkHttpClient#connectionPool()',
      'okhttp3.OkHttpClient#connectionSpecs()',
      'okhttp3.OkHttpClient#connectTimeoutMillis()',
      'okhttp3.OkHttpClient#cookieJar()',
      'okhttp3.OkHttpClient#dispatcher()',
      'okhttp3.OkHttpClient#dns()',
      'okhttp3.OkHttpClient#eventListenerFactory()',
      'okhttp3.OkHttpClient#followRedirects()',
      'okhttp3.OkHttpClient#followSslRedirects()',
      'okhttp3.OkHttpClient#hostnameVerifier()',
      'okhttp3.OkHttpClient#interceptors()',
      'okhttp3.OkHttpClient#networkInterceptors()',
      'okhttp3.OkHttpClient#pingIntervalMillis()',
      'okhttp3.OkHttpClient#protocols()',
      'okhttp3.OkHttpClient#proxy()',
      'okhttp3.OkHttpClient#proxyAuthenticator()',
      'okhttp3.OkHttpClient#proxySelector()',
      'okhttp3.OkHttpClient#readTimeoutMillis()',
      'okhttp3.OkHttpClient#retryOnConnectionFailure()',
      'okhttp3.OkHttpClient#socketFactory()',
      'okhttp3.OkHttpClient#sslSocketFactory()',
      'okhttp3.OkHttpClient#writeTimeoutMillis()',
      'okhttp3.OkHttpClient#writeTimeoutMillis()',
      'okhttp3.Request$Builder#delete()',
  ]
}
check.dependsOn(japicmp)
