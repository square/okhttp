apply plugin: 'com.vanniktech.maven.publish'

jar {
  manifest {
    attributes('Automatic-Module-Name': 'okhttp3')
  }
}

sourceSets {
  main.java.srcDirs += "$buildDir/generated/sources/java-templates/java/main"
}

compileJava {
  dependsOn 'copyJavaTemplates'
}

task copyJavaTemplates(type: Copy) {
  from 'src/main/java-templates'
  into "$buildDir/generated/sources/java-templates/java/main"
  expand('projectVersion': "$VERSION_NAME")
  filteringCharset = 'UTF-8'
}

dependencies {
  api deps.okio
  api deps.kotlinStdlib
  compileOnly deps.conscrypt
  compileOnly deps.android
  compileOnly deps.jsr305
  compileOnly deps.animalSniffer

  testImplementation deps.junit
  testImplementation deps.assertj
}

apply plugin: 'me.champeau.gradle.japicmp'
task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {
  oldClasspath = files(baselineJar(project, baselineVersion))
  newClasspath = files(jar.archivePath)
  onlyBinaryIncompatibleModified = true
  failOnModification = true
  txtOutputFile = file("$buildDir/reports/japi.txt")
  ignoreMissingClasses = true
  includeSynthetic = true
  packageExcludes = [
      'okhttp3.internal',
  ]
  methodExcludes = [
      // Became 'final' in 4.0.0:
      'okhttp3.CacheControl#immutable()',
      'okhttp3.CacheControl#isPrivate()',
      'okhttp3.CacheControl#isPublic()',
      'okhttp3.CacheControl#maxAgeSeconds()',
      'okhttp3.CacheControl#maxStaleSeconds()',
      'okhttp3.CacheControl#minFreshSeconds()',
      'okhttp3.CacheControl#mustRevalidate()',
      'okhttp3.CacheControl#noCache()',
      'okhttp3.CacheControl#noStore()',
      'okhttp3.CacheControl#noTransform()',
      'okhttp3.CacheControl#onlyIfCached()',
      'okhttp3.CacheControl#sMaxAgeSeconds()',
      'okhttp3.CacheControl$Builder#build()',
      'okhttp3.CacheControl$Builder#immutable()',
      'okhttp3.CacheControl$Builder#maxAge(int, java.util.concurrent.TimeUnit)',
      'okhttp3.CacheControl$Builder#maxStale(int, java.util.concurrent.TimeUnit)',
      'okhttp3.CacheControl$Builder#minFresh(int, java.util.concurrent.TimeUnit)',
      'okhttp3.CacheControl$Builder#noCache()',
      'okhttp3.CacheControl$Builder#noStore()',
      'okhttp3.CacheControl$Builder#noTransform()',
      'okhttp3.CacheControl$Builder#onlyIfCached()',
      'okhttp3.ConnectionPool#connectionCount()',
      'okhttp3.ConnectionPool#evictAll()',
      'okhttp3.ConnectionPool#idleConnectionCount()',
      'okhttp3.Cookie#domain()',
      'okhttp3.Cookie#expiresAt()',
      'okhttp3.Cookie#hostOnly()',
      'okhttp3.Cookie#httpOnly()',
      'okhttp3.Cookie#matches(okhttp3.HttpUrl)',
      'okhttp3.Cookie#name()',
      'okhttp3.Cookie#path()',
      'okhttp3.Cookie#persistent()',
      'okhttp3.Cookie#secure()',
      'okhttp3.Cookie#value()',
      'okhttp3.Cookie$Builder#build()',
      'okhttp3.Cookie$Builder#domain(java.lang.String)',
      'okhttp3.Cookie$Builder#expiresAt(long)',
      'okhttp3.Cookie$Builder#hostOnlyDomain(java.lang.String)',
      'okhttp3.Cookie$Builder#httpOnly()',
      'okhttp3.Cookie$Builder#name(java.lang.String)',
      'okhttp3.Cookie$Builder#path(java.lang.String)',
      'okhttp3.Cookie$Builder#secure()',
      'okhttp3.Cookie$Builder#value(java.lang.String)',
      'okhttp3.FormBody#encodedName(int)',
      'okhttp3.FormBody#encodedValue(int)',
      'okhttp3.FormBody#name(int)',
      'okhttp3.FormBody#size()',
      'okhttp3.FormBody#value(int)',
      'okhttp3.FormBody$Builder#add(java.lang.String, java.lang.String)',
      'okhttp3.FormBody$Builder#addEncoded(java.lang.String, java.lang.String)',
      'okhttp3.FormBody$Builder#build()',
      'okhttp3.Headers#byteCount()',
      'okhttp3.Headers#get(java.lang.String)',
      'okhttp3.Headers#getDate(java.lang.String)',
      'okhttp3.Headers#getInstant(java.lang.String)',
      'okhttp3.Headers#name(int)',
      'okhttp3.Headers#names()',
      'okhttp3.Headers#newBuilder()',
      'okhttp3.Headers#size()',
      'okhttp3.Headers#toMultimap()',
      'okhttp3.Headers#value(int)',
      'okhttp3.Headers#values(java.lang.String)',
      'okhttp3.Headers$Builder#add(java.lang.String)',
      'okhttp3.Headers$Builder#add(java.lang.String, java.lang.String)',
      'okhttp3.Headers$Builder#add(java.lang.String, java.util.Date)',
      'okhttp3.Headers$Builder#add(java.lang.String, java.time.Instant)',
      'okhttp3.Headers$Builder#addAll(okhttp3.Headers)',
      'okhttp3.Headers$Builder#addUnsafeNonAscii(java.lang.String, java.lang.String)',
      'okhttp3.Headers$Builder#build()',
      'okhttp3.Headers$Builder#get(java.lang.String)',
      'okhttp3.Headers$Builder#removeAll(java.lang.String)',
      'okhttp3.Headers$Builder#set(java.lang.String, java.util.Date)',
      'okhttp3.Headers$Builder#set(java.lang.String, java.time.Instant)',
      'okhttp3.Headers$Builder#set(java.lang.String, java.lang.String)',
      'okhttp3.HttpUrl#encodedFragment()',
      'okhttp3.HttpUrl#encodedPassword()',
      'okhttp3.HttpUrl#encodedPath()',
      'okhttp3.HttpUrl#encodedPathSegments()',
      'okhttp3.HttpUrl#encodedQuery()',
      'okhttp3.HttpUrl#encodedUsername()',
      'okhttp3.HttpUrl#fragment()',
      'okhttp3.HttpUrl#host()',
      'okhttp3.HttpUrl#isHttps()',
      'okhttp3.HttpUrl#newBuilder()',
      'okhttp3.HttpUrl#newBuilder(java.lang.String)',
      'okhttp3.HttpUrl#password()',
      'okhttp3.HttpUrl#pathSegments()',
      'okhttp3.HttpUrl#pathSize()',
      'okhttp3.HttpUrl#port()',
      'okhttp3.HttpUrl#query()',
      'okhttp3.HttpUrl#queryParameter(java.lang.String)',
      'okhttp3.HttpUrl#queryParameterName(int)',
      'okhttp3.HttpUrl#queryParameterNames()',
      'okhttp3.HttpUrl#queryParameterValue(int)',
      'okhttp3.HttpUrl#queryParameterValues(java.lang.String)',
      'okhttp3.HttpUrl#querySize()',
      'okhttp3.HttpUrl#redact()',
      'okhttp3.HttpUrl#resolve(java.lang.String)',
      'okhttp3.HttpUrl#scheme()',
      'okhttp3.HttpUrl#topPrivateDomain()',
      'okhttp3.HttpUrl#uri()',
      'okhttp3.HttpUrl#url()',
      'okhttp3.HttpUrl#username()',
      'okhttp3.HttpUrl$Builder#addEncodedPathSegment(java.lang.String)',
      'okhttp3.HttpUrl$Builder#addEncodedPathSegments(java.lang.String)',
      'okhttp3.HttpUrl$Builder#addEncodedQueryParameter(java.lang.String, java.lang.String)',
      'okhttp3.HttpUrl$Builder#addPathSegment(java.lang.String)',
      'okhttp3.HttpUrl$Builder#addPathSegments(java.lang.String)',
      'okhttp3.HttpUrl$Builder#addQueryParameter(java.lang.String, java.lang.String)',
      'okhttp3.HttpUrl$Builder#build()',
      'okhttp3.HttpUrl$Builder#encodedFragment(java.lang.String)',
      'okhttp3.HttpUrl$Builder#encodedPassword(java.lang.String)',
      'okhttp3.HttpUrl$Builder#encodedPath(java.lang.String)',
      'okhttp3.HttpUrl$Builder#encodedQuery(java.lang.String)',
      'okhttp3.HttpUrl$Builder#encodedUsername(java.lang.String)',
      'okhttp3.HttpUrl$Builder#fragment(java.lang.String)',
      'okhttp3.HttpUrl$Builder#host(java.lang.String)',
      'okhttp3.HttpUrl$Builder#password(java.lang.String)',
      'okhttp3.HttpUrl$Builder#port(int)',
      'okhttp3.HttpUrl$Builder#query(java.lang.String)',
      'okhttp3.HttpUrl$Builder#removeAllEncodedQueryParameters(java.lang.String)',
      'okhttp3.HttpUrl$Builder#removeAllQueryParameters(java.lang.String)',
      'okhttp3.HttpUrl$Builder#removePathSegment(int)',
      'okhttp3.HttpUrl$Builder#scheme(java.lang.String)',
      'okhttp3.HttpUrl$Builder#setEncodedPathSegment(int, java.lang.String)',
      'okhttp3.HttpUrl$Builder#setEncodedQueryParameter(java.lang.String, java.lang.String)',
      'okhttp3.HttpUrl$Builder#setPathSegment(int, java.lang.String)',
      'okhttp3.HttpUrl$Builder#setQueryParameter(java.lang.String, java.lang.String)',
      'okhttp3.HttpUrl$Builder#username(java.lang.String)',
      'okhttp3.MediaType#charset()',
      'okhttp3.MediaType#charset(java.nio.charset.Charset)',
      'okhttp3.MediaType#subtype()',
      'okhttp3.MediaType#type()',
      'okhttp3.RealCall#getResponseWithInterceptorChain()',
      'okhttp3.RealCall#redactedUrl()',
      'okhttp3.RealCall#toLoggableString()',
      'okhttp3.RealCall$AsyncCall#callsPerHost()',
      'okhttp3.RealCall$AsyncCall#executeOn(java.util.concurrent.ExecutorService)',
      'okhttp3.RealCall$AsyncCall#get()',
      'okhttp3.RealCall$AsyncCall#host()',
      'okhttp3.RealCall$AsyncCall#request()',
      'okhttp3.RealCall$AsyncCall#reuseCallsPerHostFrom(okhttp3.RealCall$AsyncCall)',
      'okhttp3.TlsVersion#javaName()',
  ]
}
check.dependsOn(japicmp)
